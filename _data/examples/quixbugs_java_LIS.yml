---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: LIS
        children: []
        pos: 190
        length: 3
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: lis
              children: []
              pos: 218
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int[] arr
                children: []
                pos: 222
                length: 9
              pos: 200
              length: 739
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);
                children: []
                pos: 243
                length: 63
              - type: local_variable_declaration
                fields:
                  text: int longest = 0;
                children: []
                pos: 315
                length: 16
              - type: local_variable_declaration
                fields:
                  text: int i = 0;
                children: []
                pos: 341
                length: 10
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (int val : arr) {

                                ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
                                for (int j=1; j < longest+1; j++) {
                                    if (arr[ends.get(j)] < val) {
                                        prefix_lengths.add(j);
                                    }
                                }

                                int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

                                if (length == longest || val < arr[ends.get(length+1)]) {
                                    ends.put(length+1, i);
                                    longest = length + 1;
                                }

                                i++;
                            }
                children: []
                pos: 360
                length: 549
              - type: return_statement
                fields:
                  text: return longest;
                children: []
                pos: 918
                length: 15
              pos: 233
              length: 706
          children: []
          pos: 200
          length: 739
        pos: 177
        length: 764
    children: []
    pos: 177
    length: 764
  pos: 0
  length: 942
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: LIS
        children: []
        pos: 198
        length: 3
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: lis
              children: []
              pos: 226
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int[] arr
                children: []
                pos: 230
                length: 9
              pos: 208
              length: 757
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);
                children: []
                pos: 251
                length: 63
              - type: local_variable_declaration
                fields:
                  text: int longest = 0;
                children: []
                pos: 323
                length: 16
              - type: local_variable_declaration
                fields:
                  text: int i = 0;
                children: []
                pos: 349
                length: 10
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (int val : arr) {

                                ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
                                for (int j=1; j < longest+1; j++) {
                                    if (arr[ends.get(j)] < val) {
                                        prefix_lengths.add(j);
                                    }
                                }

                                int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

                                if (length == longest || val < arr[ends.get(length+1)]) {
                                    ends.put(length+1, i);
                                    longest = Math.max(longest,length + 1);
                                }

                                i++;
                            }
                children: []
                pos: 368
                length: 567
              - type: return_statement
                fields:
                  text: return longest;
                children: []
                pos: 944
                length: 15
              pos: 241
              length: 724
          children: []
          pos: 208
          length: 757
        pos: 185
        length: 782
    children: []
    pos: 185
    length: 782
  pos: 0
  length: 968
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n /*\n  * To change this template,
  choose Tools | Templates\n@@ -28,7 +28,7 @@\n \n             if (length == longest
  || val < arr[ends.get(length+1)]) {\n                 ends.put(length+1, i);\n-
  \               longest = length + 1;\n+                longest = Math.max(longest,length
  + 1);\n             }\n \n             i++;\n"
tree_diff: |+
  New cluster:
  UPDATE from for (int val : arr) {

              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }

              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

              i++;
          } to for (int val : arr) {

              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }

              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = Math.max(longest,length + 1);
              }

              i++;
          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (int val : arr) {

              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }

              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

              i++;
          } [360,909]
  replace for (int val : arr) {

              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }

              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = length + 1;
              }

              i++;
          } by for (int val : arr) {

              ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);
              for (int j=1; j < longest+1; j++) {
                  if (arr[ends.get(j)] < val) {
                      prefix_lengths.add(j);
                  }
              }

              int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;

              if (length == longest || val < arr[ends.get(length+1)]) {
                  ends.put(length+1, i);
                  longest = Math.max(longest,length + 1);
              }

              i++;
          }

...
