---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SUBSEQUENCES
        children: []
        pos: 191
        length: 12
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subsequences
              children: []
              pos: 245
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int a
                children: []
                pos: 258
                length: 5
              pos: 210
              length: 476
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: k
                            children: []
                            pos: 293
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 298
                            length: 1
                        children: []
                        pos: 293
                        length: 6
                    children: []
                    pos: 292
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return new ArrayList();
                    children: []
                    pos: 315
                    length: 23
                  pos: 301
                  length: 47
                pos: 289
                length: 59
              - type: local_variable_declaration
                fields:
                  text: ArrayList ret = new ArrayList(50);
                children: []
                pos: 358
                length: 34
              - type: for_statement
                fields:
                  text: |-
                    for (int i=a; i<b+1-k; i++) {
                                ArrayList base = new ArrayList(50);
                                for (ArrayList rest : subsequences(i+1, b, k-1)) {
                                    rest.add(0,i);
                                    base.add(rest);
                                }
                                ret.addAll(base);

                            }
                children: []
                pos: 401
                length: 258
              - type: return_statement
                fields:
                  text: return ret;
                children: []
                pos: 669
                length: 11
              pos: 279
              length: 407
          children: []
          pos: 210
          length: 476
        pos: 178
        length: 510
    children: []
    pos: 178
    length: 510
  pos: 0
  length: 689
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SUBSEQUENCES
        children: []
        pos: 199
        length: 12
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subsequences
              children: []
              pos: 253
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int a
                children: []
                pos: 266
                length: 5
              pos: 218
              length: 576
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: k
                            children: []
                            pos: 301
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 306
                            length: 1
                        children: []
                        pos: 301
                        length: 6
                    children: []
                    pos: 300
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: ArrayList empty_set = new ArrayList<ArrayList>();
                    children: []
                    pos: 323
                    length: 49
                  - type: expression_statement
                    fields:
                      text: empty_set.add(new ArrayList());
                    children: []
                    pos: 385
                    length: 31
                  - type: return_statement
                    fields:
                      text: return empty_set;
                    children: []
                    pos: 429
                    length: 17
                  pos: 309
                  length: 147
                pos: 297
                length: 159
              - type: local_variable_declaration
                fields:
                  text: ArrayList ret = new ArrayList(50);
                children: []
                pos: 466
                length: 34
              - type: for_statement
                fields:
                  text: |-
                    for (int i=a; i<b+1-k; i++) {
                                ArrayList base = new ArrayList(50);
                                for (ArrayList rest : subsequences(i+1, b, k-1)) {
                                    rest.add(0,i);
                                    base.add(rest);
                                }
                                ret.addAll(base);

                            }
                children: []
                pos: 509
                length: 258
              - type: return_statement
                fields:
                  text: return ret;
                children: []
                pos: 777
                length: 11
              pos: 287
              length: 507
          children: []
          pos: 218
          length: 576
        pos: 186
        length: 610
    children: []
    pos: 186
    length: 610
  pos: 0
  length: 797
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n /*\n@@ -13,7 +13,9 @@\n public
  class SUBSEQUENCES {\n     public static ArrayList<ArrayList> subsequences(int a,
  int b, int k) {\n         if (k == 0) {\n-            return new ArrayList();\n+
  \           ArrayList empty_set = new ArrayList<ArrayList>();\n+            empty_set.add(new
  ArrayList());\n+            return empty_set;\n         }\n \n         ArrayList
  ret = new ArrayList(50);\n"
tree_diff: |+
  New cluster:
  ===
  insert-node
  ---
  local_variable_declaration: ArrayList empty_set = new ArrayList<ArrayList>(); [323,372]
  to
  block [301,348]
  at 0
  ------------
  ===
  insert-node
  ---
  local_variable_declaration: ArrayList empty_set = new ArrayList<ArrayList>(); [323,372]
  to
  block [301,348]
  at 0

  New cluster:
  ===
  insert-node
  ---
  expression_statement: empty_set.add(new ArrayList()); [385,416]
  to
  block [301,348]
  at 1
  ------------
  ===
  insert-node
  ---
  expression_statement: empty_set.add(new ArrayList()); [385,416]
  to
  block [301,348]
  at 1

  New cluster:
  UPDATE from return new ArrayList(); to return empty_set;
  ------------
  ===
  update-node
  ---
  return_statement: return new ArrayList(); [315,338]
  replace return new ArrayList(); by return empty_set;

...
