---
language: java
text_diff: |
  --- before
  +++ after
  @@ -233,10 +233,6 @@
                           out.write('\\');
                           out.write('\\');
                           break;
  -                    case '/':
  -                        out.write('\\');
  -                        out.write('/');
  -                        break;
                       default :
                           out.write(ch);
                           break;
tree_diff: |+
  New cluster:
  UPDATE from for (int i = 0; i < sz; i++) {
              char ch = str.charAt(i);

              // handle unicode
              if (ch > 0xfff) {
                  out.write("\\u" + hex(ch));
              } else if (ch > 0xff) {
                  out.write("\\u0" + hex(ch));
              } else if (ch > 0x7f) {
                  out.write("\\u00" + hex(ch));
              } else if (ch < 32) {
                  switch (ch) {
                      case '\b':
                          out.write('\\');
                          out.write('b');
                          break;
                      case '\n':
                          out.write('\\');
                          out.write('n');
                          break;
                      case '\t':
                          out.write('\\');
                          out.write('t');
                          break;
                      case '\f':
                          out.write('\\');
                          out.write('f');
                          break;
                      case '\r':
                          out.write('\\');
                          out.write('r');
                          break;
                      default :
                          if (ch > 0xf) {
                              out.write("\\u00" + hex(ch));
                          } else {
                              out.write("\\u000" + hex(ch));
                          }
                          break;
                  }
              } else {
                  switch (ch) {
                      case '\'':
                          if (escapeSingleQuote) {
                            out.write('\\');
                          }
                          out.write('\'');
                          break;
                      case '"':
                          out.write('\\');
                          out.write('"');
                          break;
                      case '\\':
                          out.write('\\');
                          out.write('\\');
                          break;
                      case '/':
                          out.write('\\');
                          out.write('/');
                          break;
                      default :
                          out.write(ch);
                          break;
                  }
              }
          } to for (int i = 0; i < sz; i++) {
              char ch = str.charAt(i);

              // handle unicode
              if (ch > 0xfff) {
                  out.write("\\u" + hex(ch));
              } else if (ch > 0xff) {
                  out.write("\\u0" + hex(ch));
              } else if (ch > 0x7f) {
                  out.write("\\u00" + hex(ch));
              } else if (ch < 32) {
                  switch (ch) {
                      case '\b':
                          out.write('\\');
                          out.write('b');
                          break;
                      case '\n':
                          out.write('\\');
                          out.write('n');
                          break;
                      case '\t':
                          out.write('\\');
                          out.write('t');
                          break;
                      case '\f':
                          out.write('\\');
                          out.write('f');
                          break;
                      case '\r':
                          out.write('\\');
                          out.write('r');
                          break;
                      default :
                          if (ch > 0xf) {
                              out.write("\\u00" + hex(ch));
                          } else {
                              out.write("\\u000" + hex(ch));
                          }
                          break;
                  }
              } else {
                  switch (ch) {
                      case '\'':
                          if (escapeSingleQuote) {
                            out.write('\\');
                          }
                          out.write('\'');
                          break;
                      case '"':
                          out.write('\\');
                          out.write('"');
                          break;
                      case '\\':
                          out.write('\\');
                          out.write('\\');
                          break;
                      default :
                          out.write(ch);
                          break;
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int i = 0; i < sz; i++) {
              char ch = str.charAt(i);

              // handle unicode
              if (ch > 0xfff) {
                  out.write("\\u" + hex(ch));
              } else if (ch > 0xff) {
                  out.write("\\u0" + hex(ch));
              } else if (ch > 0x7f) {
                  out.write("\\u00" + hex(ch));
              } else if (ch < 32) {
                  switch (ch) {
                      case '\b':
                          out.write('\\');
                          out.write('b');
                          break;
                      case '\n':
                          out.write('\\');
                          out.write('n');
                          break;
                      case '\t':
                          out.write('\\');
                          out.write('t');
                          break;
                      case '\f':
                          out.write('\\');
                          out.write('f');
                          break;
                      case '\r':
                          out.write('\\');
                          out.write('r');
                          break;
                      default :
                          if (ch > 0xf) {
                              out.write("\\u00" + hex(ch));
                          } else {
                              out.write("\\u000" + hex(ch));
                          }
                          break;
                  }
              } else {
                  switch (ch) {
                      case '\'':
                          if (escapeSingleQuote) {
                            out.write('\\');
                          }
                          out.write('\'');
                          break;
                      case '"':
                          out.write('\\');
                          out.write('"');
                          break;
                      case '\\':
                          out.write('\\');
                          out.write('\\');
                          break;
                      case '/':
                          out.write('\\');
                          out.write('/');
                          break;
                      default :
                          out.write(ch);
                          break;
                  }
              }
          } [6621,8872]
  replace for (int i = 0; i < sz; i++) {
              char ch = str.charAt(i);

              // handle unicode
              if (ch > 0xfff) {
                  out.write("\\u" + hex(ch));
              } else if (ch > 0xff) {
                  out.write("\\u0" + hex(ch));
              } else if (ch > 0x7f) {
                  out.write("\\u00" + hex(ch));
              } else if (ch < 32) {
                  switch (ch) {
                      case '\b':
                          out.write('\\');
                          out.write('b');
                          break;
                      case '\n':
                          out.write('\\');
                          out.write('n');
                          break;
                      case '\t':
                          out.write('\\');
                          out.write('t');
                          break;
                      case '\f':
                          out.write('\\');
                          out.write('f');
                          break;
                      case '\r':
                          out.write('\\');
                          out.write('r');
                          break;
                      default :
                          if (ch > 0xf) {
                              out.write("\\u00" + hex(ch));
                          } else {
                              out.write("\\u000" + hex(ch));
                          }
                          break;
                  }
              } else {
                  switch (ch) {
                      case '\'':
                          if (escapeSingleQuote) {
                            out.write('\\');
                          }
                          out.write('\'');
                          break;
                      case '"':
                          out.write('\\');
                          out.write('"');
                          break;
                      case '\\':
                          out.write('\\');
                          out.write('\\');
                          break;
                      case '/':
                          out.write('\\');
                          out.write('/');
                          break;
                      default :
                          out.write(ch);
                          break;
                  }
              }
          } by for (int i = 0; i < sz; i++) {
              char ch = str.charAt(i);

              // handle unicode
              if (ch > 0xfff) {
                  out.write("\\u" + hex(ch));
              } else if (ch > 0xff) {
                  out.write("\\u0" + hex(ch));
              } else if (ch > 0x7f) {
                  out.write("\\u00" + hex(ch));
              } else if (ch < 32) {
                  switch (ch) {
                      case '\b':
                          out.write('\\');
                          out.write('b');
                          break;
                      case '\n':
                          out.write('\\');
                          out.write('n');
                          break;
                      case '\t':
                          out.write('\\');
                          out.write('t');
                          break;
                      case '\f':
                          out.write('\\');
                          out.write('f');
                          break;
                      case '\r':
                          out.write('\\');
                          out.write('r');
                          break;
                      default :
                          if (ch > 0xf) {
                              out.write("\\u00" + hex(ch));
                          } else {
                              out.write("\\u000" + hex(ch));
                          }
                          break;
                  }
              } else {
                  switch (ch) {
                      case '\'':
                          if (escapeSingleQuote) {
                            out.write('\\');
                          }
                          out.write('\'');
                          break;
                      case '"':
                          out.write('\\');
                          out.write('"');
                          break;
                      case '\\':
                          out.write('\\');
                          out.write('\\');
                          break;
                      default :
                          out.write(ch);
                          break;
                  }
              }
          }

...
