---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: GET_FACTORS
        children: []
        pos: 191
        length: 11
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: get_factors
              children: []
              pos: 242
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 254
                length: 5
              pos: 209
              length: 502
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 275
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '1'
                            children: []
                            pos: 280
                            length: 1
                        children: []
                        pos: 275
                        length: 6
                    children: []
                    pos: 274
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return new ArrayList<Integer>();
                    children: []
                    pos: 297
                    length: 32
                  pos: 283
                  length: 56
                pos: 271
                length: 68
              - type: local_variable_declaration
                fields:
                  text: int max = (int)(Math.sqrt(n) + 1.0);
                children: []
                pos: 348
                length: 36
              - type: for_statement
                fields:
                  text: |-
                    for (int i=2; i < max; i++) {
                                if (n % i == 0) {
                                    ArrayList<Integer> prepend = new ArrayList<Integer>(0);
                                    prepend.add(i);
                                    prepend.addAll(get_factors(n / i));
                                    return prepend;
                                }
                            }
                children: []
                pos: 393
                length: 271
              - type: return_statement
                fields:
                  text: return new ArrayList<Integer>();
                children: []
                pos: 673
                length: 32
              pos: 261
              length: 450
          children: []
          pos: 209
          length: 502
        pos: 178
        length: 535
    children: []
    pos: 178
    length: 535
  pos: 0
  length: 714
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: GET_FACTORS
        children: []
        pos: 199
        length: 11
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: get_factors
              children: []
              pos: 250
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 262
                length: 5
              pos: 217
              length: 519
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 283
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '1'
                            children: []
                            pos: 288
                            length: 1
                        children: []
                        pos: 283
                        length: 6
                    children: []
                    pos: 282
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return new ArrayList<Integer>();
                    children: []
                    pos: 305
                    length: 32
                  pos: 291
                  length: 56
                pos: 279
                length: 68
              - type: local_variable_declaration
                fields:
                  text: int max = (int)(Math.sqrt(n) + 1.0);
                children: []
                pos: 356
                length: 36
              - type: for_statement
                fields:
                  text: |-
                    for (int i=2; i < max; i++) {
                                if (n % i == 0) {
                                    ArrayList<Integer> prepend = new ArrayList<Integer>(0);
                                    prepend.add(i);
                                    prepend.addAll(get_factors(n / i));
                                    return prepend;
                                }
                            }
                children: []
                pos: 401
                length: 271
              - type: return_statement
                fields:
                  text: return new ArrayList<Integer>(Arrays.asList(n));
                children: []
                pos: 682
                length: 48
              pos: 269
              length: 467
          children: []
          pos: 217
          length: 519
        pos: 186
        length: 552
    children: []
    pos: 186
    length: 552
  pos: 0
  length: 739
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n /*\n@@ -24,6 +24,7 @@\n                 return
  prepend;\n             }\n         }\n-        return new ArrayList<Integer>();\n+\n+
  \       return new ArrayList<Integer>(Arrays.asList(n));\n     }\n }\n"
tree_diff: |+
  New cluster:
  UPDATE from return new ArrayList<Integer>(); to return new ArrayList<Integer>(Arrays.asList(n));
  ------------
  ===
  update-node
  ---
  return_statement: return new ArrayList<Integer>(); [673,705]
  replace return new ArrayList<Integer>(); by return new ArrayList<Integer>(Arrays.asList(n));

...
