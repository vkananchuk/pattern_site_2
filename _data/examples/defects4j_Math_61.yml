---
language: java
text_diff: "--- before\n+++ after\n@@ -19,7 +19,7 @@\n import java.io.Serializable;\n
  \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import
  org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n
  import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.util.MathUtils;\n@@
  -91,7 +91,7 @@\n      */\n     public PoissonDistributionImpl(double p, double epsilon,
  int maxIterations) {\n         if (p <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN,
  p);\n+            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN,
  p);\n         }\n         mean = p;\n         normal = new NormalDistributionImpl(p,
  FastMath.sqrt(p));\n"
tree_diff: |+
  New cluster:
  UPDATE from public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
          if (p <= 0) {
              throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);
          }
          mean = p;
          normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
          this.epsilon = epsilon;
          this.maxIterations = maxIterations;
      } to public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
          if (p <= 0) {
              throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
          }
          mean = p;
          normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
          this.epsilon = epsilon;
          this.maxIterations = maxIterations;
      }
  ------------
  ===
  update-node
  ---
  constructor_declaration: public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
          if (p <= 0) {
              throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);
          }
          mean = p;
          normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
          this.epsilon = epsilon;
          this.maxIterations = maxIterations;
      } [3246,3599]
  replace public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
          if (p <= 0) {
              throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);
          }
          mean = p;
          normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
          this.epsilon = epsilon;
          this.maxIterations = maxIterations;
      } by public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
          if (p <= 0) {
              throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
          }
          mean = p;
          normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
          this.epsilon = epsilon;
          this.maxIterations = maxIterations;
      }

...
