---
language: java
text_diff: "--- before\n+++ after\n@@ -527,9 +527,7 @@\n       case Token.NAME:\n
  \        String varName = left.getString();\n         Var var = syntacticScope.getVar(varName);\n-
  \       JSType varType = var == null ? null : var.getType();\n-        boolean isVarDeclaration
  = left.hasChildren()\n-            && varType != null && !var.isTypeInferred();\n+
  \       boolean isVarDeclaration = left.hasChildren();\n \n         // When looking
  at VAR initializers for declared VARs, we tend\n         // to use the declared
  type over the type it's being\n@@ -547,9 +545,8 @@\n         // sure we back-infer
  the <string> element constraint on\n         // the left hand side, so we use the
  left hand side.\n \n-        boolean isVarTypeBetter = isVarDeclaration &&\n+        boolean
  isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n             //
  Makes it easier to check for NPEs.\n-            !resultType.isNullType() && !resultType.isVoidType();\n
  \n         // TODO(nicksantos): This might be a better check once we have\n         //
  back-inference of object/array constraints.  It will probably\n@@ -562,11 +559,10
  @@\n \n \n         if (isVarTypeBetter) {\n-          redeclareSimpleVar(scope,
  left, varType);\n-        } else {\n           redeclareSimpleVar(scope, left, resultType);\n
  \        }\n-        left.setJSType(resultType);\n+        left.setJSType(isVarDeclaration
  || leftType == null ?\n+            resultType : null);\n \n         if (var !=
  null && var.isTypeInferred()) {\n           JSType oldType = var.getType();\n"
tree_diff: |+
  New cluster:
  UPDATE from {
        case Token.NAME:
          String varName = left.getString();
          Var var = syntacticScope.getVar(varName);
          JSType varType = var == null ? null : var.getType();
          boolean isVarDeclaration = left.hasChildren()
              && varType != null && !var.isTypeInferred();

          // When looking at VAR initializers for declared VARs, we tend
          // to use the declared type over the type it's being
          // initialized to in the global scope.
          //
          // For example,
          // /** @param {number} */ var f = goog.abstractMethod;
          // it's obvious that the programmer wants you to use
          // the declared function signature, not the inferred signature.
          //
          // Or,
          // /** @type {Object.<string>} */ var x = {};
          // the one-time anonymous object on the right side
          // is as narrow as it can possibly be, but we need to make
          // sure we back-infer the <string> element constraint on
          // the left hand side, so we use the left hand side.

          boolean isVarTypeBetter = isVarDeclaration &&
              // Makes it easier to check for NPEs.
              !resultType.isNullType() && !resultType.isVoidType();

          // TODO(nicksantos): This might be a better check once we have
          // back-inference of object/array constraints.  It will probably
          // introduce more type warnings.  It uses the result type iff it's
          // strictly narrower than the declared var type.
          //
          //boolean isVarTypeBetter = isVarDeclaration &&
          //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
          //     || !resultType.isSubtype(varType));


          if (isVarTypeBetter) {
            redeclareSimpleVar(scope, left, varType);
          } else {
            redeclareSimpleVar(scope, left, resultType);
          }
          left.setJSType(resultType);

          if (var != null && var.isTypeInferred()) {
            JSType oldType = var.getType();
            var.setType(oldType == null ?
                resultType : oldType.getLeastSupertype(resultType));
          }
          break;
        case Token.GETPROP:
          String qualifiedName = left.getQualifiedName();
          if (qualifiedName != null) {
            scope.inferQualifiedSlot(left, qualifiedName,
                leftType == null ? unknownType : leftType,
                resultType);
          }

          left.setJSType(resultType);
          ensurePropertyDefined(left, resultType);
          break;
      } to {
        case Token.NAME:
          String varName = left.getString();
          Var var = syntacticScope.getVar(varName);
          boolean isVarDeclaration = left.hasChildren();

          // When looking at VAR initializers for declared VARs, we tend
          // to use the declared type over the type it's being
          // initialized to in the global scope.
          //
          // For example,
          // /** @param {number} */ var f = goog.abstractMethod;
          // it's obvious that the programmer wants you to use
          // the declared function signature, not the inferred signature.
          //
          // Or,
          // /** @type {Object.<string>} */ var x = {};
          // the one-time anonymous object on the right side
          // is as narrow as it can possibly be, but we need to make
          // sure we back-infer the <string> element constraint on
          // the left hand side, so we use the left hand side.

          boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
              // Makes it easier to check for NPEs.

          // TODO(nicksantos): This might be a better check once we have
          // back-inference of object/array constraints.  It will probably
          // introduce more type warnings.  It uses the result type iff it's
          // strictly narrower than the declared var type.
          //
          //boolean isVarTypeBetter = isVarDeclaration &&
          //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
          //     || !resultType.isSubtype(varType));


          if (isVarTypeBetter) {
            redeclareSimpleVar(scope, left, resultType);
          }
          left.setJSType(isVarDeclaration || leftType == null ?
              resultType : null);

          if (var != null && var.isTypeInferred()) {
            JSType oldType = var.getType();
            var.setType(oldType == null ?
                resultType : oldType.getLeastSupertype(resultType));
          }
          break;
        case Token.GETPROP:
          String qualifiedName = left.getQualifiedName();
          if (qualifiedName != null) {
            scope.inferQualifiedSlot(left, qualifiedName,
                leftType == null ? unknownType : leftType,
                resultType);
          }

          left.setJSType(resultType);
          ensurePropertyDefined(left, resultType);
          break;
      }
  ------------
  ===
  update-node
  ---
  switch_block: {
        case Token.NAME:
          String varName = left.getString();
          Var var = syntacticScope.getVar(varName);
          JSType varType = var == null ? null : var.getType();
          boolean isVarDeclaration = left.hasChildren()
              && varType != null && !var.isTypeInferred();

          // When looking at VAR initializers for declared VARs, we tend
          // to use the declared type over the type it's being
          // initialized to in the global scope.
          //
          // For example,
          // /** @param {number} */ var f = goog.abstractMethod;
          // it's obvious that the programmer wants you to use
          // the declared function signature, not the inferred signature.
          //
          // Or,
          // /** @type {Object.<string>} */ var x = {};
          // the one-time anonymous object on the right side
          // is as narrow as it can possibly be, but we need to make
          // sure we back-infer the <string> element constraint on
          // the left hand side, so we use the left hand side.

          boolean isVarTypeBetter = isVarDeclaration &&
              // Makes it easier to check for NPEs.
              !resultType.isNullType() && !resultType.isVoidType();

          // TODO(nicksantos): This might be a better check once we have
          // back-inference of object/array constraints.  It will probably
          // introduce more type warnings.  It uses the result type iff it's
          // strictly narrower than the declared var type.
          //
          //boolean isVarTypeBetter = isVarDeclaration &&
          //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
          //     || !resultType.isSubtype(varType));


          if (isVarTypeBetter) {
            redeclareSimpleVar(scope, left, varType);
          } else {
            redeclareSimpleVar(scope, left, resultType);
          }
          left.setJSType(resultType);

          if (var != null && var.isTypeInferred()) {
            JSType oldType = var.getType();
            var.setType(oldType == null ?
                resultType : oldType.getLeastSupertype(resultType));
          }
          break;
        case Token.GETPROP:
          String qualifiedName = left.getQualifiedName();
          if (qualifiedName != null) {
            scope.inferQualifiedSlot(left, qualifiedName,
                leftType == null ? unknownType : leftType,
                resultType);
          }

          left.setJSType(resultType);
          ensurePropertyDefined(left, resultType);
          break;
      } [17730,20209]
  replace {
        case Token.NAME:
          String varName = left.getString();
          Var var = syntacticScope.getVar(varName);
          JSType varType = var == null ? null : var.getType();
          boolean isVarDeclaration = left.hasChildren()
              && varType != null && !var.isTypeInferred();

          // When looking at VAR initializers for declared VARs, we tend
          // to use the declared type over the type it's being
          // initialized to in the global scope.
          //
          // For example,
          // /** @param {number} */ var f = goog.abstractMethod;
          // it's obvious that the programmer wants you to use
          // the declared function signature, not the inferred signature.
          //
          // Or,
          // /** @type {Object.<string>} */ var x = {};
          // the one-time anonymous object on the right side
          // is as narrow as it can possibly be, but we need to make
          // sure we back-infer the <string> element constraint on
          // the left hand side, so we use the left hand side.

          boolean isVarTypeBetter = isVarDeclaration &&
              // Makes it easier to check for NPEs.
              !resultType.isNullType() && !resultType.isVoidType();

          // TODO(nicksantos): This might be a better check once we have
          // back-inference of object/array constraints.  It will probably
          // introduce more type warnings.  It uses the result type iff it's
          // strictly narrower than the declared var type.
          //
          //boolean isVarTypeBetter = isVarDeclaration &&
          //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
          //     || !resultType.isSubtype(varType));


          if (isVarTypeBetter) {
            redeclareSimpleVar(scope, left, varType);
          } else {
            redeclareSimpleVar(scope, left, resultType);
          }
          left.setJSType(resultType);

          if (var != null && var.isTypeInferred()) {
            JSType oldType = var.getType();
            var.setType(oldType == null ?
                resultType : oldType.getLeastSupertype(resultType));
          }
          break;
        case Token.GETPROP:
          String qualifiedName = left.getQualifiedName();
          if (qualifiedName != null) {
            scope.inferQualifiedSlot(left, qualifiedName,
                leftType == null ? unknownType : leftType,
                resultType);
          }

          left.setJSType(resultType);
          ensurePropertyDefined(left, resultType);
          break;
      } by {
        case Token.NAME:
          String varName = left.getString();
          Var var = syntacticScope.getVar(varName);
          boolean isVarDeclaration = left.hasChildren();

          // When looking at VAR initializers for declared VARs, we tend
          // to use the declared type over the type it's being
          // initialized to in the global scope.
          //
          // For example,
          // /** @param {number} */ var f = goog.abstractMethod;
          // it's obvious that the programmer wants you to use
          // the declared function signature, not the inferred signature.
          //
          // Or,
          // /** @type {Object.<string>} */ var x = {};
          // the one-time anonymous object on the right side
          // is as narrow as it can possibly be, but we need to make
          // sure we back-infer the <string> element constraint on
          // the left hand side, so we use the left hand side.

          boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();
              // Makes it easier to check for NPEs.

          // TODO(nicksantos): This might be a better check once we have
          // back-inference of object/array constraints.  It will probably
          // introduce more type warnings.  It uses the result type iff it's
          // strictly narrower than the declared var type.
          //
          //boolean isVarTypeBetter = isVarDeclaration &&
          //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)
          //     || !resultType.isSubtype(varType));


          if (isVarTypeBetter) {
            redeclareSimpleVar(scope, left, resultType);
          }
          left.setJSType(isVarDeclaration || leftType == null ?
              resultType : null);

          if (var != null && var.isTypeInferred()) {
            JSType oldType = var.getType();
            var.setType(oldType == null ?
                resultType : oldType.getLeastSupertype(resultType));
          }
          break;
        case Token.GETPROP:
          String qualifiedName = left.getQualifiedName();
          if (qualifiedName != null) {
            scope.inferQualifiedSlot(left, qualifiedName,
                leftType == null ? unknownType : leftType,
                resultType);
          }

          left.setJSType(resultType);
          ensurePropertyDefined(left, resultType);
          break;
      }

...
