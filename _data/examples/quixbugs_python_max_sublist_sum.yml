---
language: python
text_diff: "--- before\n+++ after\n@@ -4,28 +4,41 @@\n     max_so_far = 0\n \n     for
  x in arr:\n-        max_ending_here = max_ending_here + x\n+        max_ending_here
  = max(0, max_ending_here + x)\n         max_so_far = max(max_so_far, max_ending_here)\n
  \n     return max_so_far\n \n-\n \"\"\"\n-Max Sublist Sum\n-max-sublist-sum\n+def
  max_sublist_sum(arr):\n+    max_ending_here = 0\n+    max_so_far = 0\n \n-Efficient
  equivalent to max(sum(arr[i:j]) for 0 <= i <= j <= len(arr))\n+    for x in arr:\n+
  \       max_ending_here = max(max_ending_here + x, 0)\n+        max_so_far = max(max_so_far,
  max_ending_here)\n \n-Algorithm source: WordAligned.org by Thomas Guest\n+    return
  max_so_far\n \n+def max_sublist_sum(arr):\n+    max_ending_here = 0\n+    max_so_far
  = 0\n \n-Input:\n-    arr: A list of ints\n+    for x in arr:\n+        max_ending_here
  = max(x, max_ending_here + x)\n+        max_so_far = max(max_so_far, max_ending_here)\n
  \n-Output:\n-    The maximum sublist sum\n+    return max_so_far\n+\n+\n+def max_sublist_sum(arr):\n+
  \   max_ending_here = 0\n+    max_so_far = 0\n+\n+    for x in arr:\n+        max_ending_here
  = max(max_ending_here + x, x)\n+        max_so_far = max(max_so_far, max_ending_here)\n+\n+
  \   return max_so_far\n \n-Example:\n-    >>> max_sublist_sum([4, -5, 2, 1, -1,
  3])\n-    5\n \"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from """
  Max Sublist Sum
  max-sublist-sum

  Efficient equivalent to max(sum(arr[i:j]) for 0 <= i <= j <= len(arr))

  Algorithm source: WordAligned.org by Thomas Guest


  Input:
      arr: A list of ints

  Output:
      The maximum sublist sum

  Example:
      >>> max_sublist_sum([4, -5, 2, 1, -1, 3])
      5
  """ to """
  def max_sublist_sum(arr):
      max_ending_here = 0
      max_so_far = 0

      for x in arr:
          max_ending_here = max(max_ending_here + x, 0)
          max_so_far = max(max_so_far, max_ending_here)

      return max_so_far

  def max_sublist_sum(arr):
      max_ending_here = 0
      max_so_far = 0

      for x in arr:
          max_ending_here = max(x, max_ending_here + x)
          max_so_far = max(max_so_far, max_ending_here)

      return max_so_far


  def max_sublist_sum(arr):
      max_ending_here = 0
      max_so_far = 0

      for x in arr:
          max_ending_here = max(max_ending_here + x, x)
          max_so_far = max(max_so_far, max_ending_here)

      return max_so_far

  """
  ------------
  ===
  update-node
  ---
  expression_statement: """
  Max Sublist Sum
  max-sublist-sum

  Efficient equivalent to max(sum(arr[i:j]) for 0 <= i <= j <= len(arr))

  Algorithm source: WordAligned.org by Thomas Guest


  Input:
      arr: A list of ints

  Output:
      The maximum sublist sum

  Example:
      >>> max_sublist_sum([4, -5, 2, 1, -1, 3])
      5
  """ [214,508]
  replace """
  Max Sublist Sum
  max-sublist-sum

  Efficient equivalent to max(sum(arr[i:j]) for 0 <= i <= j <= len(arr))

  Algorithm source: WordAligned.org by Thomas Guest


  Input:
      arr: A list of ints

  Output:
      The maximum sublist sum

  Example:
      >>> max_sublist_sum([4, -5, 2, 1, -1, 3])
      5
  """ by """
  def max_sublist_sum(arr):
      max_ending_here = 0
      max_so_far = 0

      for x in arr:
          max_ending_here = max(max_ending_here + x, 0)
          max_so_far = max(max_so_far, max_ending_here)

      return max_so_far

  def max_sublist_sum(arr):
      max_ending_here = 0
      max_so_far = 0

      for x in arr:
          max_ending_here = max(x, max_ending_here + x)
          max_so_far = max(max_so_far, max_ending_here)

      return max_so_far


  def max_sublist_sum(arr):
      max_ending_here = 0
      max_so_far = 0

      for x in arr:
          max_ending_here = max(max_ending_here + x, x)
          max_so_far = max(max_so_far, max_ending_here)

      return max_so_far

  """

  New cluster:
  UPDATE from for x in arr:
          max_ending_here = max_ending_here + x
          max_so_far = max(max_so_far, max_ending_here) to for x in arr:
          max_ending_here = max(0, max_ending_here + x)
          max_so_far = max(max_so_far, max_ending_here)
  ------------
  ===
  update-node
  ---
  for_statement: for x in arr:
          max_ending_here = max_ending_here + x
          max_so_far = max(max_so_far, max_ending_here) [75,188]
  replace for x in arr:
          max_ending_here = max_ending_here + x
          max_so_far = max(max_so_far, max_ending_here) by for x in arr:
          max_ending_here = max(0, max_ending_here + x)
          max_so_far = max(max_so_far, max_ending_here)

...
