---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: CollapseProperties
        children: []
        pos: 3170
        length: 18
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNSAFE_NAMESPACE_WARNING =
                    DiagnosticType.warning(
                        "JSC_UNSAFE_NAMESPACE",
                        "incomplete alias created for namespace {0}");
          children: []
          pos: 3232
          length: 175
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType NAMESPACE_REDEFINED_WARNING =
                    DiagnosticType.warning(
                        "JSC_NAMESPACE_REDEFINED",
                        "namespace {0} should not be redefined");
          children: []
          pos: 3411
          length: 176
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(
                    "JSC_UNSAFE_THIS",
                    "dangerous use of 'this' in static method {0}");
          children: []
          pos: 3591
          length: 145
        - type: field_declaration
          fields:
            text: private AbstractCompiler compiler;
          children: []
          pos: 3740
          length: 34
        - type: field_declaration
          fields:
            text: private List<Name> globalNames;
          children: []
          pos: 3809
          length: 31
        - type: field_declaration
          fields:
            text: private Map<String, Name> nameMap;
          children: []
          pos: 3917
          length: 34
        - type: field_declaration
          fields:
            text: private final boolean collapsePropertiesOnExternTypes;
          children: []
          pos: 3955
          length: 54
        - type: field_declaration
          fields:
            text: private final boolean inlineAliases;
          children: []
          pos: 4012
          length: 36
        - type: constructor_declaration
          fields:
            text: |-
              CollapseProperties(AbstractCompiler compiler,
                    boolean collapsePropertiesOnExternTypes, boolean inlineAliases) {
                  this.compiler = compiler;
                  this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;
                  this.inlineAliases = inlineAliases;
                }
          children: []
          pos: 4401
          length: 267
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 4696
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 4704
                length: 12
              pos: 4672
              length: 886
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: GlobalNamespace namespace;
                children: []
                pos: 4735
                length: 26
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: collapsePropertiesOnExternTypes
                        children: []
                        pos: 4770
                        length: 31
                    children: []
                    pos: 4769
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: namespace = new GlobalNamespace(compiler, externs, root);
                    children: []
                    pos: 4811
                    length: 57
                  pos: 4803
                  length: 71
                pos: 4766
                length: 176
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: inlineAliases
                        children: []
                        pos: 4952
                        length: 13
                    children: []
                    pos: 4951
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: inlineAliases(namespace);
                    children: []
                    pos: 4975
                    length: 25
                  pos: 4967
                  length: 39
                pos: 4948
                length: 58
              - type: expression_statement
                fields:
                  text: nameMap = namespace.getNameIndex();
                children: []
                pos: 5011
                length: 35
              - type: expression_statement
                fields:
                  text: globalNames = namespace.getNameForest();
                children: []
                pos: 5051
                length: 40
              - type: expression_statement
                fields:
                  text: checkNamespaces();
                children: []
                pos: 5096
                length: 18
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name n : globalNames) {
                          flattenReferencesToCollapsibleDescendantNames(n, n.getBaseName());
                        }
                children: []
                pos: 5120
                length: 107
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name n : globalNames) {
                          collapseDeclarationOfNameAndDescendants(n, n.getBaseName());
                        }
                children: []
                pos: 5453
                length: 101
              pos: 4729
              length: 829
          children: []
          pos: 4672
          length: 886
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inlineAliases
              children: []
              pos: 6270
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: GlobalNamespace namespace
                children: []
                pos: 6284
                length: 25
              pos: 6257
              length: 1445
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
                children: []
                pos: 6385
                length: 71
              - type: while_statement
                fields:
                  text: |-
                    while (!workList.isEmpty()) {
                          Name name = workList.pop();

                          // Don't attempt to inline a getter or setter property as a variable.
                          if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
                            continue;
                          }

                          if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&
                              name.aliasingGets > 0) {
                            // {@code name} meets condition (b). Find all of its local aliases
                            // and try to inline them.
                            List<Ref> refs = Lists.newArrayList(name.getRefs());
                            for (Ref ref : refs) {
                              if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
                                // {@code name} meets condition (c). Try to inline it.
                                if (inlineAliasIfPossible(ref, namespace)) {
                                  name.removeRef(ref);
                                }
                              }
                            }
                          }

                          // Check if {@code name} has any aliases left after the
                          // local-alias-inlining above.
                          if ((name.type == Name.Type.OBJECTLIT ||
                               name.type == Name.Type.FUNCTION) &&
                              name.aliasingGets == 0 && name.props != null) {
                            // All of {@code name}'s children meet condition (a), so they can be
                            // added to the worklist.
                            workList.addAll(name.props);
                          }
                        }
                children: []
                pos: 6461
                length: 1237
              pos: 6311
              length: 1391
          children: []
          pos: 6257
          length: 1445
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inlineAliasIfPossible
              children: []
              pos: 7722
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Ref alias
                children: []
                pos: 7744
                length: 9
              pos: 7706
              length: 1962
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node aliasParent = alias.node.getParent();
                children: []
                pos: 8018
                length: 42
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: aliasParent.isName()
                        children: []
                        pos: 8069
                        length: 20
                    children: []
                    pos: 8068
                    length: 22
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Scope scope = alias.scope;
                    children: []
                    pos: 8177
                    length: 26
                  - type: local_variable_declaration
                    fields:
                      text: Var aliasVar = scope.getVar(aliasParent.getString());
                    children: []
                    pos: 8210
                    length: 53
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        ReferenceCollectingCallback collector =
                                  new ReferenceCollectingCallback(compiler,
                                      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
                                      Predicates.<Var>equalTo(aliasVar));
                    children: []
                    pos: 8270
                    length: 204
                  - type: expression_statement
                    fields:
                      text: "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);"
                    children: []
                    pos: 8481
                    length: 64
                  - type: local_variable_declaration
                    fields:
                      text: ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
                    children: []
                    pos: 8553
                    length: 66
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: aliasRefs.isWellDefined()
                                    children: []
                                    pos: 8630
                                    length: 25
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: aliasRefs.firstReferenceIsAssigningDeclaration()
                                    children: []
                                    pos: 8669
                                    length: 48
                                children: []
                                pos: 8630
                                length: 87
                              right:
                                type: method_invocation
                                fields:
                                  text: aliasRefs.isAssignedOnceInLifetime()
                                children: []
                                pos: 8731
                                length: 36
                            children: []
                            pos: 8630
                            length: 137
                        children: []
                        pos: 8629
                        length: 139
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: int size = aliasRefs.references.size();
                        children: []
                        pos: 8840
                        length: 39
                      - type: local_variable_declaration
                        fields:
                          text: Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size
                            - 1);
                        children: []
                        pos: 8888
                        length: 63
                      - type: for_statement
                        fields:
                          text: |-
                            for (int i = 1; i < size; i++) {
                                      ReferenceCollectingCallback.Reference aliasRef =
                                          aliasRefs.references.get(i);

                                      Node newNode = alias.node.cloneTree();
                                      aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
                                      newNodes.add(newNode);
                                    }
                        children: []
                        pos: 8960
                        length: 301
                      - type: expression_statement
                        fields:
                          text: aliasParent.replaceChild(alias.node, IR.nullNode());
                        children: []
                        pos: 9319
                        length: 52
                      - type: expression_statement
                        fields:
                          text: compiler.reportCodeChange();
                        children: []
                        pos: 9380
                        length: 28
                      - type: expression_statement
                        fields:
                          text: namespace.scanNewNodes(alias.scope, newNodes);
                        children: []
                        pos: 9564
                        length: 46
                      - type: return_statement
                        fields:
                          text: return true;
                        children: []
                        pos: 9619
                        length: 12
                      pos: 8769
                      length: 870
                    pos: 8626
                    length: 1013
                  pos: 8091
                  length: 1554
                pos: 8065
                length: 1580
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 9651
                length: 13
              pos: 7782
              length: 1886
          children: []
          pos: 7706
          length: 1962
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkNamespaces
              children: []
              pos: 9827
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 9814
              length: 965
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name name : nameMap.values()) {
                          if (name.isNamespace() &&
                              (name.aliasingGets > 0 || name.localSets + name.globalSets > 1 ||
                               name.deleteProps > 0)) {
                            boolean initialized = name.getDeclaration() != null;
                            for (Ref ref : name.getRefs()) {
                              if (ref == name.getDeclaration()) {
                                continue;
                              }

                              if (ref.type == Ref.Type.DELETE_PROP) {
                                if (initialized) {
                                  warnAboutNamespaceRedefinition(name, ref);
                                }
                              } else if (
                                  ref.type == Ref.Type.SET_FROM_GLOBAL ||
                                  ref.type == Ref.Type.SET_FROM_LOCAL) {
                                if (initialized) {
                                  warnAboutNamespaceRedefinition(name, ref);
                                }

                                initialized = true;
                              } else if (ref.type == Ref.Type.ALIASING_GET) {
                                warnAboutNamespaceAliasing(name, ref);
                              }
                            }
                          }
                        }
                children: []
                pos: 9851
                length: 924
              pos: 9845
              length: 934
          children: []
          pos: 9814
          length: 965
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: warnAboutNamespaceAliasing
              children: []
              pos: 10975
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name nameObj
                children: []
                pos: 11002
                length: 12
              pos: 10962
              length: 213
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    compiler.report(
                            JSError.make(ref.getSourceName(), ref.node,
                                         UNSAFE_NAMESPACE_WARNING, nameObj.getFullName()));
                children: []
                pos: 11031
                length: 140
              pos: 11025
              length: 150
          children: []
          pos: 10962
          length: 213
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: warnAboutNamespaceRedefinition
              children: []
              pos: 11376
              length: 30
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name nameObj
                children: []
                pos: 11407
                length: 12
              pos: 11363
              length: 220
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    compiler.report(
                            JSError.make(ref.getSourceName(), ref.node,
                                         NAMESPACE_REDEFINED_WARNING, nameObj.getFullName()));
                children: []
                pos: 11436
                length: 143
              pos: 11430
              length: 153
          children: []
          pos: 11363
          length: 220
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenReferencesToCollapsibleDescendantNames
              children: []
              pos: 11852
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 11905
                length: 6
              pos: 11839
              length: 480
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 11937
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 11948
                            length: 4
                        children: []
                        pos: 11937
                        length: 15
                    children: []
                    pos: 11936
                    length: 17
                children:
                - type: return_statement
                  fields:
                    text: return;
                  children: []
                  pos: 11954
                  length: 7
                pos: 11933
                length: 28
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name p : n.props) {
                          String propAlias = appendPropForAlias(alias, p.getBaseName());

                          if (p.canCollapse()) {
                            flattenReferencesTo(p, propAlias);
                          } else if (p.isSimpleStubDeclaration()) {
                            flattenSimpleStubDeclaration(p, propAlias);
                          }

                          flattenReferencesToCollapsibleDescendantNames(p, propAlias);
                        }
                children: []
                pos: 11967
                length: 348
              pos: 11927
              length: 392
          children: []
          pos: 11839
          length: 480
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenSimpleStubDeclaration
              children: []
              pos: 12435
              length: 28
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name name
                children: []
                pos: 12464
                length: 9
              pos: 12422
              length: 549
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref ref = Iterables.getOnlyElement(name.getRefs());
                children: []
                pos: 12495
                length: 51
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node nameNode = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, ref.node,
                            name.getFullName());
                children: []
                pos: 12551
                length: 119
              - type: local_variable_declaration
                fields:
                  text: Node varNode = IR.var(nameNode).copyInformationFrom(nameNode);
                children: []
                pos: 12675
                length: 62
              - type: expression_statement
                fields:
                  text: |-
                    Preconditions.checkState(
                            ref.node.getParent().isExprResult());
                children: []
                pos: 12743
                length: 71
              - type: local_variable_declaration
                fields:
                  text: Node parent = ref.node.getParent();
                children: []
                pos: 12819
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node gramps = parent.getParent();
                children: []
                pos: 12859
                length: 33
              - type: expression_statement
                fields:
                  text: gramps.replaceChild(parent, varNode);
                children: []
                pos: 12897
                length: 37
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 12939
                length: 28
              pos: 12489
              length: 482
          children: []
          pos: 12422
          length: 549
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenReferencesTo
              children: []
              pos: 13240
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 13260
                length: 6
              pos: 13227
              length: 1147
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String originalName = n.getFullName();
                children: []
                pos: 13288
                length: 38
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Ref r : n.getRefs()) {
                          if (r == n.getDeclaration()) {
                            // Declarations are handled separately.
                            continue;
                          }

                          Node rParent = r.node.getParent();

                          // There are two cases when we shouldn't flatten a reference:
                          // 1) Object literal keys, because duplicate keys show up as refs.
                          // 2) References inside a complex assign. (a = x.y = 0). These are
                          //    called TWIN references, because they show up twice in the
                          //    reference list. Only collapse the set, not the alias.
                          if (!NodeUtil.isObjectLitKey(r.node) &&
                              (r.getTwin() == null || r.isSet())) {
                            flattenNameRef(alias, r.node, rParent, originalName);
                          }
                        }
                children: []
                pos: 13331
                length: 701
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 14269
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 14280
                            length: 4
                        children: []
                        pos: 14269
                        length: 15
                    children: []
                    pos: 14268
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                flattenPrefixes(alias, p, 1);
                              }
                    children: []
                    pos: 14294
                    length: 70
                  pos: 14286
                  length: 84
                pos: 14265
                length: 105
              pos: 13282
              length: 1092
          children: []
          pos: 13227
          length: 1147
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenPrefixes
              children: []
              pos: 14728
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 14744
                length: 12
              pos: 14715
              length: 937
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String originalName = n.getFullName();
                children: []
                pos: 14926
                length: 38
              - type: local_variable_declaration
                fields:
                  text: Ref decl = n.getDeclaration();
                children: []
                pos: 14969
                length: 30
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: decl
                                    children: []
                                    pos: 15008
                                    length: 4
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 15016
                                    length: 4
                                children: []
                                pos: 15008
                                length: 12
                              right:
                                type: not_equals
                                fields:
                                  left:
                                    type: field_access
                                    fields:
                                      text: decl.node
                                    children: []
                                    pos: 15024
                                    length: 9
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 15037
                                    length: 4
                                children: []
                                pos: 15024
                                length: 17
                            children: []
                            pos: 15008
                            length: 33
                          right:
                            type: method_invocation
                            fields:
                              text: decl.node.isGetProp()
                            children: []
                            pos: 15053
                            length: 21
                        children: []
                        pos: 15008
                        length: 66
                    children: []
                    pos: 15007
                    length: 68
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: flattenNameRefAtDepth(alias, decl.node, depth, originalName);
                    children: []
                    pos: 15084
                    length: 61
                  pos: 15076
                  length: 75
                pos: 15004
                length: 147
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Ref r : n.getRefs()) {
                          if (r == decl) {
                            // Declarations are handled separately.
                            continue;
                          }

                          // References inside a complex assign (a = x.y = 0)
                          // have twins. We should only flatten one of the twins.
                          if (r.getTwin() == null || r.isSet()) {
                            flattenNameRefAtDepth(alias, r.node, depth, originalName);
                          }
                        }
                children: []
                pos: 15157
                length: 372
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 15539
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 15550
                            length: 4
                        children: []
                        pos: 15539
                        length: 15
                    children: []
                    pos: 15538
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                flattenPrefixes(alias, p, depth + 1);
                              }
                    children: []
                    pos: 15564
                    length: 78
                  pos: 15556
                  length: 92
                pos: 15535
                length: 113
              pos: 14777
              length: 875
          children: []
          pos: 14715
          length: 937
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenNameRefAtDepth
              children: []
              pos: 16046
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 16068
                length: 12
              pos: 16033
              length: 748
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int nType = n.getType();
                children: []
                pos: 16355
                length: 24
              - type: local_variable_declaration
                fields:
                  text: boolean isQName = nType == Token.NAME || nType == Token.GETPROP;
                children: []
                pos: 16384
                length: 64
              - type: local_variable_declaration
                fields:
                  text: boolean isObjKey = NodeUtil.isObjectLitKey(n);
                children: []
                pos: 16453
                length: 46
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(isObjKey || isQName);
                children: []
                pos: 16504
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isQName
                        children: []
                        pos: 16559
                        length: 7
                    children: []
                    pos: 16558
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (int i = 1; i < depth && n.hasChildren(); i++) {
                                n = n.getFirstChild();
                              }
                    children: []
                    pos: 16576
                    length: 91
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: n.hasChildren()
                            children: []
                            pos: 16678
                            length: 15
                        children: []
                        pos: 16677
                        length: 17
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: flattenNameRef(alias, n.getFirstChild(), n, originalName);
                        children: []
                        pos: 16705
                        length: 58
                      pos: 16695
                      length: 76
                    pos: 16674
                    length: 97
                  pos: 16568
                  length: 209
                pos: 16555
                length: 222
              pos: 16128
              length: 653
          children: []
          pos: 16033
          length: 748
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenNameRef
              children: []
              pos: 17098
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 17113
                length: 12
              pos: 17085
              length: 821
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node ref = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, n, originalName);
                children: []
                pos: 17328
                length: 93
              - type: expression_statement
                fields:
                  text: NodeUtil.copyNameAnnotations(n.getLastChild(), ref);
                children: []
                pos: 17426
                length: 52
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: parent.isCall()
                            children: []
                            pos: 17487
                            length: 15
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: "n"
                                children: []
                                pos: 17506
                                length: 1
                              right:
                                type: method_invocation
                                fields:
                                  text: parent.getFirstChild()
                                children: []
                                pos: 17511
                                length: 22
                            children: []
                            pos: 17506
                            length: 27
                        children: []
                        pos: 17487
                        length: 46
                    children: []
                    pos: 17486
                    length: 48
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: parent.putBooleanProp(Node.FREE_CALL, true);
                    children: []
                    pos: 17695
                    length: 44
                  pos: 17535
                  length: 210
                pos: 17483
                length: 262
              - type: local_variable_declaration
                fields:
                  text: JSType type = n.getJSType();
                children: []
                pos: 17751
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 17788
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 17796
                            length: 4
                        children: []
                        pos: 17788
                        length: 12
                    children: []
                    pos: 17787
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ref.setJSType(type);
                    children: []
                    pos: 17810
                    length: 20
                  pos: 17802
                  length: 34
                pos: 17784
                length: 52
              - type: expression_statement
                fields:
                  text: parent.replaceChild(n, ref);
                children: []
                pos: 17841
                length: 28
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 17874
                length: 28
              pos: 17175
              length: 731
          children: []
          pos: 17085
          length: 821
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: collapseDeclarationOfNameAndDescendants
              children: []
              pos: 18213
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 18253
                length: 6
              pos: 18200
              length: 1020
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();
                children: []
                pos: 18281
                length: 69
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.canCollapse()
                        children: []
                        pos: 18435
                        length: 15
                    children: []
                    pos: 18434
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);
                    children: []
                    pos: 18460
                    length: 67
                  pos: 18452
                  length: 81
                pos: 18431
                length: 102
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 18543
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 18554
                            length: 4
                        children: []
                        pos: 18543
                        length: 15
                    children: []
                    pos: 18542
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                // Recurse first so that saved node ancestries are intact when needed.
                                collapseDeclarationOfNameAndDescendants(
                                    p, appendPropForAlias(alias, p.getBaseName()));

                                if (!p.inExterns && canCollapseChildNames &&
                                    p.getDeclaration() != null &&
                                    p.canCollapse() &&
                                    p.getDeclaration().node != null &&
                                    p.getDeclaration().node.getParent() != null &&
                                    p.getDeclaration().node.getParent().isAssign()) {
                                  updateSimpleDeclaration(
                                      appendPropForAlias(alias, p.getBaseName()), p, p.getDeclaration());
                                }
                              }
                    children: []
                    pos: 18568
                    length: 642
                  pos: 18560
                  length: 656
                pos: 18539
                length: 677
              pos: 18275
              length: 945
          children: []
          pos: 18200
          length: 1020
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateSimpleDeclaration
              children: []
              pos: 19752
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 19776
                length: 12
              pos: 19739
              length: 1942
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getNext();
                children: []
                pos: 19819
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node parent = ref.node.getParent();
                children: []
                pos: 19857
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node gramps = parent.getParent();
                children: []
                pos: 19897
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node greatGramps = gramps.getParent();
                children: []
                pos: 19935
                length: 38
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: rvalue
                                children: []
                                pos: 19983
                                length: 6
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 19993
                                length: 4
                            children: []
                            pos: 19983
                            length: 14
                          right:
                            type: method_invocation
                            fields:
                              text: rvalue.isFunction()
                            children: []
                            pos: 20001
                            length: 19
                        children: []
                        pos: 19983
                        length: 37
                    children: []
                    pos: 19982
                    length: 39
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: checkForHosedThisReferences(rvalue, refName.docInfo, refName);
                    children: []
                    pos: 20030
                    length: 62
                  pos: 20022
                  length: 76
                pos: 19979
                length: 119
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node nameNode = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, gramps.getFirstChild(),
                            refName.getFullName());
                children: []
                pos: 20138
                length: 136
              - type: expression_statement
                fields:
                  text: NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);
                children: []
                pos: 20279
                length: 64
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: gramps.isExprResult()
                        children: []
                        pos: 20353
                        length: 21
                    children: []
                    pos: 20352
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: parent.removeChild(rvalue);
                    children: []
                    pos: 20731
                    length: 27
                  - type: expression_statement
                    fields:
                      text: nameNode.addChildToFront(rvalue);
                    children: []
                    pos: 20765
                    length: 33
                  - type: local_variable_declaration
                    fields:
                      text: Node varNode = IR.var(nameNode);
                    children: []
                    pos: 20806
                    length: 32
                  - type: expression_statement
                    fields:
                      text: greatGramps.replaceChild(gramps, varNode);
                    children: []
                    pos: 20845
                    length: 42
                  pos: 20376
                  length: 517
                pos: 20349
                length: 1294
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 21649
                length: 28
              pos: 19813
              length: 1868
          children: []
          pos: 19739
          length: 1942
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclaration
              children: []
              pos: 22722
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 22763
                length: 6
              pos: 22709
              length: 864
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref decl = n.getDeclaration();
                children: []
                pos: 22822
                length: 30
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: decl
                            children: []
                            pos: 22861
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 22869
                            length: 4
                        children: []
                        pos: 22861
                        length: 12
                    children: []
                    pos: 22860
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 22985
                    length: 7
                  pos: 22875
                  length: 123
                pos: 22857
                length: 141
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: decl.getTwin()
                            children: []
                            pos: 23008
                            length: 14
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 23026
                            length: 4
                        children: []
                        pos: 23008
                        length: 22
                    children: []
                    pos: 23007
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 23129
                    length: 7
                  pos: 23032
                  length: 110
                pos: 23004
                length: 138
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: decl.node.getParent().getType()
                        children: []
                        pos: 23156
                        length: 31
                    children: []
                    pos: 23155
                    length: 33
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.ASSIGN:
                                updateObjLitOrFunctionDeclarationAtAssignNode(
                                    n, alias, canCollapseChildNames);
                                break;
                              case Token.VAR:
                                updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
                                break;
                              case Token.FUNCTION:
                                updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
                                break;
                            }
                    children: []
                    pos: 23189
                    length: 380
                children: []
                pos: 23148
                length: 421
              pos: 22816
              length: 757
          children: []
          pos: 22709
          length: 864
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclarationAtAssignNode
              children: []
              pos: 23927
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 23980
                length: 6
              pos: 23914
              length: 2181
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.getDeclaration();
                children: []
                pos: 24242
                length: 29
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getNext();
                children: []
                pos: 24276
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node varNode = new Node(Token.VAR);
                children: []
                pos: 24314
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node varParent = ref.node.getAncestor(3);
                children: []
                pos: 24354
                length: 41
              - type: local_variable_declaration
                fields:
                  text: Node gramps = ref.node.getAncestor(2);
                children: []
                pos: 24400
                length: 38
              - type: local_variable_declaration
                fields:
                  text: boolean isObjLit = rvalue.isObjectLit();
                children: []
                pos: 24443
                length: 40
              - type: local_variable_declaration
                fields:
                  text: boolean insertedVarNode = false;
                children: []
                pos: 24488
                length: 32
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 24530
                            length: 8
                          right:
                            type: method_invocation
                            fields:
                              text: n.canEliminate()
                            children: []
                            pos: 24542
                            length: 16
                        children: []
                        pos: 24530
                        length: 28
                    children: []
                    pos: 24529
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: varParent.replaceChild(gramps, varNode);
                    children: []
                    pos: 24618
                    length: 40
                  - type: expression_statement
                    fields:
                      text: ref.node = null;
                    children: []
                    pos: 24665
                    length: 16
                  - type: expression_statement
                    fields:
                      text: insertedVarNode = true;
                    children: []
                    pos: 24688
                    length: 23
                  pos: 24560
                  length: 158
                pos: 24526
                length: 1138
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: canCollapseChildNames
                        children: []
                        pos: 25674
                        length: 21
                    children: []
                    pos: 25673
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 25709
                            length: 8
                        children: []
                        pos: 25708
                        length: 10
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            declareVarsForObjLitValues(
                                        n, alias, rvalue,
                                        varNode, varParent.getChildBefore(varNode), varParent);
                        children: []
                        pos: 25729
                        length: 125
                      pos: 25719
                      length: 143
                    pos: 25705
                    length: 157
                  - type: expression_statement
                    fields:
                      text: addStubsForUndeclaredProperties(n, alias, varParent, varNode);
                    children: []
                    pos: 25870
                    length: 62
                  pos: 25697
                  length: 241
                pos: 25670
                length: 268
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: insertedVarNode
                        children: []
                        pos: 25948
                        length: 15
                    children: []
                    pos: 25947
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!varNode.hasChildren()"
                            children: []
                            pos: 25977
                            length: 22
                        children: []
                        pos: 25976
                        length: 24
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: varParent.removeChild(varNode);
                        children: []
                        pos: 26011
                        length: 31
                      pos: 26001
                      length: 49
                    pos: 25973
                    length: 77
                  - type: expression_statement
                    fields:
                      text: compiler.reportCodeChange();
                    children: []
                    pos: 26057
                    length: 28
                  pos: 25965
                  length: 126
                pos: 25944
                length: 147
              pos: 24033
              length: 2062
          children: []
          pos: 23914
          length: 2181
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkForHosedThisReferences
              children: []
              pos: 26260
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node function
                children: []
                pos: 26288
                length: 13
              pos: 26247
              length: 792
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: docInfo
                                children: []
                                pos: 26492
                                length: 7
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 26503
                                length: 4
                            children: []
                            pos: 26492
                            length: 15
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: unary_expression
                                    fields:
                                      text: "!docInfo.isConstructor()"
                                    children: []
                                    pos: 26520
                                    length: 24
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!docInfo.hasThisType()"
                                    children: []
                                    pos: 26548
                                    length: 22
                                children: []
                                pos: 26520
                                length: 50
                            children: []
                            pos: 26519
                            length: 52
                        children: []
                        pos: 26492
                        length: 79
                    children: []
                    pos: 26491
                    length: 81
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        NodeTraversal.traverse(compiler, function.getLastChild(),
                                  new NodeTraversal.AbstractShallowCallback() {
                                    @Override
                                    public void visit(NodeTraversal t, Node n, Node parent) {
                                      if (n.isThis()) {
                                        compiler.report(
                                            JSError.make(name.getDeclaration().getSourceName(), n,
                                                UNSAFE_THIS, name.getFullName()));
                                      }
                                    }
                                  });
                    children: []
                    pos: 26581
                    length: 448
                  pos: 26573
                  length: 462
                pos: 26488
                length: 547
              pos: 26345
              length: 694
          children: []
          pos: 26247
          length: 792
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclarationAtVarNode
              children: []
              pos: 27309
              length: 42
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 27359
                length: 6
              pos: 27296
              length: 1044
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!canCollapseChildNames"
                        children: []
                        pos: 27408
                        length: 22
                    children: []
                    pos: 27407
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 27440
                    length: 7
                  pos: 27432
                  length: 21
                pos: 27404
                length: 49
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.getDeclaration();
                children: []
                pos: 27459
                length: 29
              - type: local_variable_declaration
                fields:
                  text: String name = ref.node.getString();
                children: []
                pos: 27493
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getFirstChild();
                children: []
                pos: 27533
                length: 39
              - type: local_variable_declaration
                fields:
                  text: Node varNode = ref.node.getParent();
                children: []
                pos: 27577
                length: 36
              - type: local_variable_declaration
                fields:
                  text: Node gramps = varNode.getParent();
                children: []
                pos: 27618
                length: 34
              - type: local_variable_declaration
                fields:
                  text: boolean isObjLit = rvalue.isObjectLit();
                children: []
                pos: 27658
                length: 40
              - type: local_variable_declaration
                fields:
                  text: int numChanges = 0;
                children: []
                pos: 27703
                length: 19
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isObjLit
                        children: []
                        pos: 27732
                        length: 8
                    children: []
                    pos: 27731
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        numChanges += declareVarsForObjLitValues(
                                  n, name, rvalue, varNode, gramps.getChildBefore(varNode),
                                  gramps);
                    children: []
                    pos: 27750
                    length: 128
                  pos: 27742
                  length: 142
                pos: 27728
                length: 156
              - type: expression_statement
                fields:
                  text: numChanges += addStubsForUndeclaredProperties(n, name, gramps,
                    varNode);
                children: []
                pos: 27890
                length: 72
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 27972
                            length: 8
                          right:
                            type: method_invocation
                            fields:
                              text: n.canEliminate()
                            children: []
                            pos: 27984
                            length: 16
                        children: []
                        pos: 27972
                        length: 28
                    children: []
                    pos: 27971
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: varNode.removeChild(ref.node);
                    children: []
                    pos: 28010
                    length: 30
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!varNode.hasChildren()"
                            children: []
                            pos: 28051
                            length: 22
                        children: []
                        pos: 28050
                        length: 24
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: gramps.removeChild(varNode);
                        children: []
                        pos: 28085
                        length: 28
                      pos: 28075
                      length: 46
                    pos: 28047
                    length: 74
                  - type: expression_statement
                    fields:
                      text: numChanges++;
                    children: []
                    pos: 28128
                    length: 13
                  - type: expression_statement
                    fields:
                      text: ref.node = null;
                    children: []
                    pos: 28246
                    length: 16
                  pos: 28002
                  length: 266
                pos: 27968
                length: 300
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: numChanges
                            children: []
                            pos: 28278
                            length: 10
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 28291
                            length: 1
                        children: []
                        pos: 28278
                        length: 14
                    children: []
                    pos: 28277
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: compiler.reportCodeChange();
                    children: []
                    pos: 28302
                    length: 28
                  pos: 28294
                  length: 42
                pos: 28274
                length: 62
              pos: 27398
              length: 942
          children: []
          pos: 27296
          length: 1044
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateFunctionDeclarationAtFunctionNode
              children: []
              pos: 28615
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 28662
                length: 6
              pos: 28602
              length: 339
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!canCollapseChildNames"
                        children: []
                        pos: 28711
                        length: 22
                    children: []
                    pos: 28710
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 28743
                    length: 7
                  pos: 28735
                  length: 21
                pos: 28707
                length: 49
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.getDeclaration();
                children: []
                pos: 28762
                length: 29
              - type: local_variable_declaration
                fields:
                  text: String fnName = ref.node.getString();
                children: []
                pos: 28796
                length: 37
              - type: expression_statement
                fields:
                  text: |-
                    addStubsForUndeclaredProperties(
                            n, fnName, ref.node.getAncestor(2), ref.node.getParent());
                children: []
                pos: 28838
                length: 99
              pos: 28701
              length: 240
          children: []
          pos: 28602
          length: 339
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: declareVarsForObjLitValues
              children: []
              pos: 29547
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name objlitName
                children: []
                pos: 29581
                length: 15
              pos: 29535
              length: 3091
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int numVars = 0;
                children: []
                pos: 29688
                length: 16
              - type: local_variable_declaration
                fields:
                  text: int arbitraryNameCounter = 0;
                children: []
                pos: 29709
                length: 29
              - type: local_variable_declaration
                fields:
                  text: boolean discardKeys = !objlitName.shouldKeepKeys();
                children: []
                pos: 29743
                length: 51
              - type: for_statement
                fields:
                  text: |-
                    for (Node key = objlit.getFirstChild(), nextKey; key != null;
                             key = nextKey) {
                          Node value = key.getFirstChild();
                          nextKey = key.getNext();

                          // A get or a set can not be rewritten as a VAR.
                          if (key.isGetterDef() || key.isSetterDef()) {
                            continue;
                          }

                          // We generate arbitrary names for keys that aren't valid JavaScript
                          // identifiers, since those keys are never referenced. (If they were,
                          // this object literal's child names wouldn't be collapsible.) The only
                          // reason that we don't eliminate them entirely is the off chance that
                          // their values are expressions that have side effects.
                          boolean isJsIdentifier = !key.isNumber() &&
                                                   TokenStream.isJSIdentifier(key.getString());
                          String propName = isJsIdentifier ?
                              key.getString() : String.valueOf(++arbitraryNameCounter);

                          // If the name cannot be collapsed, skip it.
                          String qName = objlitName.getFullName() + '.' + propName;
                          Name p = nameMap.get(qName);
                          if (p != null && !p.canCollapse()) {
                            continue;
                          }

                          String propAlias = appendPropForAlias(alias, propName);
                          Node refNode = null;
                          if (discardKeys) {
                            objlit.removeChild(key);
                            value.detachFromParent();
                          } else {
                            // Substitute a reference for the value.
                            refNode = IR.name(propAlias);
                            if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
                              refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                            }

                            key.replaceChild(value, refNode);
                          }

                          // Declare the collapsed name as a variable with the original value.
                          Node nameNode = IR.name(propAlias);
                          nameNode.addChildToFront(value);
                          if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
                            nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                          }
                          Node newVar = IR.var(nameNode)
                              .copyInformationFromForTree(key);
                          if (nameToAddAfter != null) {
                            varParent.addChildAfter(newVar, nameToAddAfter);
                          } else {
                            varParent.addChildBefore(newVar, varNode);
                          }
                          compiler.reportCodeChange();
                          nameToAddAfter = newVar;

                          // Update the global name's node ancestry if it hasn't already been
                          // done. (Duplicate keys in an object literal can bring us here twice
                          // for the same global name.)
                          if (isJsIdentifier && p != null) {
                            if (!discardKeys) {
                              Ref newAlias =
                                  p.getDeclaration().cloneAndReclassify(Ref.Type.ALIASING_GET);
                              newAlias.node = refNode;
                              p.addRef(newAlias);
                            }

                            p.getDeclaration().node = nameNode;

                            if (value.isFunction()) {
                              checkForHosedThisReferences(value, value.getJSDocInfo(), p);
                            }
                          }

                          numVars++;
                        }
                children: []
                pos: 29800
                length: 2802
              - type: return_statement
                fields:
                  text: return numVars;
                children: []
                pos: 32607
                length: 15
              pos: 29682
              length: 2944
          children: []
          pos: 29535
          length: 3091
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: addStubsForUndeclaredProperties
              children: []
              pos: 33216
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 33255
                length: 6
              pos: 33204
              length: 1141
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(n.canCollapseUnannotatedChildNames());
                children: []
                pos: 33311
                length: 63
              - type: expression_statement
                fields:
                  text: Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
                children: []
                pos: 33379
                length: 63
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(addAfter);
                children: []
                pos: 33447
                length: 37
              - type: local_variable_declaration
                fields:
                  text: int numStubs = 0;
                children: []
                pos: 33489
                length: 17
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 33515
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 33526
                            length: 4
                        children: []
                        pos: 33515
                        length: 15
                    children: []
                    pos: 33514
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                if (p.needsToBeStubbed()) {
                                  String propAlias = appendPropForAlias(alias, p.getBaseName());
                                  Node nameNode = IR.name(propAlias);
                                  Node newVar = IR.var(nameNode)
                                      .copyInformationFromForTree(addAfter);
                                  parent.addChildAfter(newVar, addAfter);
                                  addAfter = newVar;
                                  numStubs++;
                                  compiler.reportCodeChange();

                                  // Determine if this is a constant var by checking the first
                                  // reference to it. Don't check the declaration, as it might be null.
                                  if (p.getRefs().get(0).node.getLastChild().getBooleanProp(
                                          Node.IS_CONSTANT_NAME)) {
                                    nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                                  }
                                }
                              }
                    children: []
                    pos: 33540
                    length: 774
                  pos: 33532
                  length: 788
                pos: 33511
                length: 809
              - type: return_statement
                fields:
                  text: return numStubs;
                children: []
                pos: 34325
                length: 16
              pos: 33305
              length: 1040
          children: []
          pos: 33204
          length: 1141
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: appendPropForAlias
              children: []
              pos: 34371
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String root
                children: []
                pos: 34390
                length: 11
              pos: 34349
              length: 352
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: prop.indexOf('$')
                            children: []
                            pos: 34426
                            length: 17
                          right:
                            type: unary_expression
                            fields:
                              text: "-1"
                            children: []
                            pos: 34447
                            length: 2
                        children: []
                        pos: 34426
                        length: 23
                    children: []
                    pos: 34425
                    length: 25
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: prop = prop.replace("$", "$0");
                    children: []
                    pos: 34630
                    length: 31
                  pos: 34451
                  length: 216
                pos: 34422
                length: 245
              - type: return_statement
                fields:
                  text: return root + '$' + prop;
                children: []
                pos: 34672
                length: 25
              pos: 34416
              length: 285
          children: []
          pos: 34349
          length: 352
        pos: 3164
        length: 31539
    children: []
    pos: 3164
    length: 31539
  pos: 0
  length: 34704
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: CollapseProperties
        children: []
        pos: 3170
        length: 18
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNSAFE_NAMESPACE_WARNING =
                    DiagnosticType.warning(
                        "JSC_UNSAFE_NAMESPACE",
                        "incomplete alias created for namespace {0}");
          children: []
          pos: 3232
          length: 175
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType NAMESPACE_REDEFINED_WARNING =
                    DiagnosticType.warning(
                        "JSC_NAMESPACE_REDEFINED",
                        "namespace {0} should not be redefined");
          children: []
          pos: 3411
          length: 176
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(
                    "JSC_UNSAFE_THIS",
                    "dangerous use of 'this' in static method {0}");
          children: []
          pos: 3591
          length: 145
        - type: field_declaration
          fields:
            text: private AbstractCompiler compiler;
          children: []
          pos: 3740
          length: 34
        - type: field_declaration
          fields:
            text: private List<Name> globalNames;
          children: []
          pos: 3809
          length: 31
        - type: field_declaration
          fields:
            text: private Map<String, Name> nameMap;
          children: []
          pos: 3917
          length: 34
        - type: field_declaration
          fields:
            text: private final boolean collapsePropertiesOnExternTypes;
          children: []
          pos: 3955
          length: 54
        - type: field_declaration
          fields:
            text: private final boolean inlineAliases;
          children: []
          pos: 4012
          length: 36
        - type: constructor_declaration
          fields:
            text: |-
              CollapseProperties(AbstractCompiler compiler,
                    boolean collapsePropertiesOnExternTypes, boolean inlineAliases) {
                  this.compiler = compiler;
                  this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;
                  this.inlineAliases = inlineAliases;
                }
          children: []
          pos: 4401
          length: 267
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 4696
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 4704
                length: 12
              pos: 4672
              length: 886
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: GlobalNamespace namespace;
                children: []
                pos: 4735
                length: 26
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: collapsePropertiesOnExternTypes
                        children: []
                        pos: 4770
                        length: 31
                    children: []
                    pos: 4769
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: namespace = new GlobalNamespace(compiler, externs, root);
                    children: []
                    pos: 4811
                    length: 57
                  pos: 4803
                  length: 71
                pos: 4766
                length: 176
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: inlineAliases
                        children: []
                        pos: 4952
                        length: 13
                    children: []
                    pos: 4951
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: inlineAliases(namespace);
                    children: []
                    pos: 4975
                    length: 25
                  pos: 4967
                  length: 39
                pos: 4948
                length: 58
              - type: expression_statement
                fields:
                  text: nameMap = namespace.getNameIndex();
                children: []
                pos: 5011
                length: 35
              - type: expression_statement
                fields:
                  text: globalNames = namespace.getNameForest();
                children: []
                pos: 5051
                length: 40
              - type: expression_statement
                fields:
                  text: checkNamespaces();
                children: []
                pos: 5096
                length: 18
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name n : globalNames) {
                          flattenReferencesToCollapsibleDescendantNames(n, n.getBaseName());
                        }
                children: []
                pos: 5120
                length: 107
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name n : globalNames) {
                          collapseDeclarationOfNameAndDescendants(n, n.getBaseName());
                        }
                children: []
                pos: 5453
                length: 101
              pos: 4729
              length: 829
          children: []
          pos: 4672
          length: 886
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inlineAliases
              children: []
              pos: 6270
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: GlobalNamespace namespace
                children: []
                pos: 6284
                length: 25
              pos: 6257
              length: 1426
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
                children: []
                pos: 6385
                length: 71
              - type: while_statement
                fields:
                  text: |-
                    while (!workList.isEmpty()) {
                          Name name = workList.pop();

                          // Don't attempt to inline a getter or setter property as a variable.
                          if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
                            continue;
                          }

                          if (name.globalSets == 1 && name.localSets == 0 &&
                              name.aliasingGets > 0) {
                            // {@code name} meets condition (b). Find all of its local aliases
                            // and try to inline them.
                            List<Ref> refs = Lists.newArrayList(name.getRefs());
                            for (Ref ref : refs) {
                              if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
                                // {@code name} meets condition (c). Try to inline it.
                                if (inlineAliasIfPossible(ref, namespace)) {
                                  name.removeRef(ref);
                                }
                              }
                            }
                          }

                          // Check if {@code name} has any aliases left after the
                          // local-alias-inlining above.
                          if ((name.type == Name.Type.OBJECTLIT ||
                               name.type == Name.Type.FUNCTION) &&
                              name.aliasingGets == 0 && name.props != null) {
                            // All of {@code name}'s children meet condition (a), so they can be
                            // added to the worklist.
                            workList.addAll(name.props);
                          }
                        }
                children: []
                pos: 6461
                length: 1218
              pos: 6311
              length: 1372
          children: []
          pos: 6257
          length: 1426
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inlineAliasIfPossible
              children: []
              pos: 7703
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Ref alias
                children: []
                pos: 7725
                length: 9
              pos: 7687
              length: 1962
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node aliasParent = alias.node.getParent();
                children: []
                pos: 7999
                length: 42
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: aliasParent.isName()
                        children: []
                        pos: 8050
                        length: 20
                    children: []
                    pos: 8049
                    length: 22
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Scope scope = alias.scope;
                    children: []
                    pos: 8158
                    length: 26
                  - type: local_variable_declaration
                    fields:
                      text: Var aliasVar = scope.getVar(aliasParent.getString());
                    children: []
                    pos: 8191
                    length: 53
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        ReferenceCollectingCallback collector =
                                  new ReferenceCollectingCallback(compiler,
                                      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
                                      Predicates.<Var>equalTo(aliasVar));
                    children: []
                    pos: 8251
                    length: 204
                  - type: expression_statement
                    fields:
                      text: "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);"
                    children: []
                    pos: 8462
                    length: 64
                  - type: local_variable_declaration
                    fields:
                      text: ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
                    children: []
                    pos: 8534
                    length: 66
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: aliasRefs.isWellDefined()
                                    children: []
                                    pos: 8611
                                    length: 25
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: aliasRefs.firstReferenceIsAssigningDeclaration()
                                    children: []
                                    pos: 8650
                                    length: 48
                                children: []
                                pos: 8611
                                length: 87
                              right:
                                type: method_invocation
                                fields:
                                  text: aliasRefs.isAssignedOnceInLifetime()
                                children: []
                                pos: 8712
                                length: 36
                            children: []
                            pos: 8611
                            length: 137
                        children: []
                        pos: 8610
                        length: 139
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: int size = aliasRefs.references.size();
                        children: []
                        pos: 8821
                        length: 39
                      - type: local_variable_declaration
                        fields:
                          text: Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size
                            - 1);
                        children: []
                        pos: 8869
                        length: 63
                      - type: for_statement
                        fields:
                          text: |-
                            for (int i = 1; i < size; i++) {
                                      ReferenceCollectingCallback.Reference aliasRef =
                                          aliasRefs.references.get(i);

                                      Node newNode = alias.node.cloneTree();
                                      aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
                                      newNodes.add(newNode);
                                    }
                        children: []
                        pos: 8941
                        length: 301
                      - type: expression_statement
                        fields:
                          text: aliasParent.replaceChild(alias.node, IR.nullNode());
                        children: []
                        pos: 9300
                        length: 52
                      - type: expression_statement
                        fields:
                          text: compiler.reportCodeChange();
                        children: []
                        pos: 9361
                        length: 28
                      - type: expression_statement
                        fields:
                          text: namespace.scanNewNodes(alias.scope, newNodes);
                        children: []
                        pos: 9545
                        length: 46
                      - type: return_statement
                        fields:
                          text: return true;
                        children: []
                        pos: 9600
                        length: 12
                      pos: 8750
                      length: 870
                    pos: 8607
                    length: 1013
                  pos: 8072
                  length: 1554
                pos: 8046
                length: 1580
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 9632
                length: 13
              pos: 7763
              length: 1886
          children: []
          pos: 7687
          length: 1962
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkNamespaces
              children: []
              pos: 9808
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 9795
              length: 965
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name name : nameMap.values()) {
                          if (name.isNamespace() &&
                              (name.aliasingGets > 0 || name.localSets + name.globalSets > 1 ||
                               name.deleteProps > 0)) {
                            boolean initialized = name.getDeclaration() != null;
                            for (Ref ref : name.getRefs()) {
                              if (ref == name.getDeclaration()) {
                                continue;
                              }

                              if (ref.type == Ref.Type.DELETE_PROP) {
                                if (initialized) {
                                  warnAboutNamespaceRedefinition(name, ref);
                                }
                              } else if (
                                  ref.type == Ref.Type.SET_FROM_GLOBAL ||
                                  ref.type == Ref.Type.SET_FROM_LOCAL) {
                                if (initialized) {
                                  warnAboutNamespaceRedefinition(name, ref);
                                }

                                initialized = true;
                              } else if (ref.type == Ref.Type.ALIASING_GET) {
                                warnAboutNamespaceAliasing(name, ref);
                              }
                            }
                          }
                        }
                children: []
                pos: 9832
                length: 924
              pos: 9826
              length: 934
          children: []
          pos: 9795
          length: 965
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: warnAboutNamespaceAliasing
              children: []
              pos: 10956
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name nameObj
                children: []
                pos: 10983
                length: 12
              pos: 10943
              length: 213
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    compiler.report(
                            JSError.make(ref.getSourceName(), ref.node,
                                         UNSAFE_NAMESPACE_WARNING, nameObj.getFullName()));
                children: []
                pos: 11012
                length: 140
              pos: 11006
              length: 150
          children: []
          pos: 10943
          length: 213
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: warnAboutNamespaceRedefinition
              children: []
              pos: 11357
              length: 30
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name nameObj
                children: []
                pos: 11388
                length: 12
              pos: 11344
              length: 220
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    compiler.report(
                            JSError.make(ref.getSourceName(), ref.node,
                                         NAMESPACE_REDEFINED_WARNING, nameObj.getFullName()));
                children: []
                pos: 11417
                length: 143
              pos: 11411
              length: 153
          children: []
          pos: 11344
          length: 220
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenReferencesToCollapsibleDescendantNames
              children: []
              pos: 11833
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 11886
                length: 6
              pos: 11820
              length: 480
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 11918
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 11929
                            length: 4
                        children: []
                        pos: 11918
                        length: 15
                    children: []
                    pos: 11917
                    length: 17
                children:
                - type: return_statement
                  fields:
                    text: return;
                  children: []
                  pos: 11935
                  length: 7
                pos: 11914
                length: 28
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name p : n.props) {
                          String propAlias = appendPropForAlias(alias, p.getBaseName());

                          if (p.canCollapse()) {
                            flattenReferencesTo(p, propAlias);
                          } else if (p.isSimpleStubDeclaration()) {
                            flattenSimpleStubDeclaration(p, propAlias);
                          }

                          flattenReferencesToCollapsibleDescendantNames(p, propAlias);
                        }
                children: []
                pos: 11948
                length: 348
              pos: 11908
              length: 392
          children: []
          pos: 11820
          length: 480
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenSimpleStubDeclaration
              children: []
              pos: 12416
              length: 28
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name name
                children: []
                pos: 12445
                length: 9
              pos: 12403
              length: 549
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref ref = Iterables.getOnlyElement(name.getRefs());
                children: []
                pos: 12476
                length: 51
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node nameNode = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, ref.node,
                            name.getFullName());
                children: []
                pos: 12532
                length: 119
              - type: local_variable_declaration
                fields:
                  text: Node varNode = IR.var(nameNode).copyInformationFrom(nameNode);
                children: []
                pos: 12656
                length: 62
              - type: expression_statement
                fields:
                  text: |-
                    Preconditions.checkState(
                            ref.node.getParent().isExprResult());
                children: []
                pos: 12724
                length: 71
              - type: local_variable_declaration
                fields:
                  text: Node parent = ref.node.getParent();
                children: []
                pos: 12800
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node gramps = parent.getParent();
                children: []
                pos: 12840
                length: 33
              - type: expression_statement
                fields:
                  text: gramps.replaceChild(parent, varNode);
                children: []
                pos: 12878
                length: 37
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 12920
                length: 28
              pos: 12470
              length: 482
          children: []
          pos: 12403
          length: 549
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenReferencesTo
              children: []
              pos: 13221
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 13241
                length: 6
              pos: 13208
              length: 1147
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String originalName = n.getFullName();
                children: []
                pos: 13269
                length: 38
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Ref r : n.getRefs()) {
                          if (r == n.getDeclaration()) {
                            // Declarations are handled separately.
                            continue;
                          }

                          Node rParent = r.node.getParent();

                          // There are two cases when we shouldn't flatten a reference:
                          // 1) Object literal keys, because duplicate keys show up as refs.
                          // 2) References inside a complex assign. (a = x.y = 0). These are
                          //    called TWIN references, because they show up twice in the
                          //    reference list. Only collapse the set, not the alias.
                          if (!NodeUtil.isObjectLitKey(r.node) &&
                              (r.getTwin() == null || r.isSet())) {
                            flattenNameRef(alias, r.node, rParent, originalName);
                          }
                        }
                children: []
                pos: 13312
                length: 701
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 14250
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 14261
                            length: 4
                        children: []
                        pos: 14250
                        length: 15
                    children: []
                    pos: 14249
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                flattenPrefixes(alias, p, 1);
                              }
                    children: []
                    pos: 14275
                    length: 70
                  pos: 14267
                  length: 84
                pos: 14246
                length: 105
              pos: 13263
              length: 1092
          children: []
          pos: 13208
          length: 1147
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenPrefixes
              children: []
              pos: 14709
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 14725
                length: 12
              pos: 14696
              length: 937
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String originalName = n.getFullName();
                children: []
                pos: 14907
                length: 38
              - type: local_variable_declaration
                fields:
                  text: Ref decl = n.getDeclaration();
                children: []
                pos: 14950
                length: 30
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: decl
                                    children: []
                                    pos: 14989
                                    length: 4
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 14997
                                    length: 4
                                children: []
                                pos: 14989
                                length: 12
                              right:
                                type: not_equals
                                fields:
                                  left:
                                    type: field_access
                                    fields:
                                      text: decl.node
                                    children: []
                                    pos: 15005
                                    length: 9
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 15018
                                    length: 4
                                children: []
                                pos: 15005
                                length: 17
                            children: []
                            pos: 14989
                            length: 33
                          right:
                            type: method_invocation
                            fields:
                              text: decl.node.isGetProp()
                            children: []
                            pos: 15034
                            length: 21
                        children: []
                        pos: 14989
                        length: 66
                    children: []
                    pos: 14988
                    length: 68
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: flattenNameRefAtDepth(alias, decl.node, depth, originalName);
                    children: []
                    pos: 15065
                    length: 61
                  pos: 15057
                  length: 75
                pos: 14985
                length: 147
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Ref r : n.getRefs()) {
                          if (r == decl) {
                            // Declarations are handled separately.
                            continue;
                          }

                          // References inside a complex assign (a = x.y = 0)
                          // have twins. We should only flatten one of the twins.
                          if (r.getTwin() == null || r.isSet()) {
                            flattenNameRefAtDepth(alias, r.node, depth, originalName);
                          }
                        }
                children: []
                pos: 15138
                length: 372
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 15520
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 15531
                            length: 4
                        children: []
                        pos: 15520
                        length: 15
                    children: []
                    pos: 15519
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                flattenPrefixes(alias, p, depth + 1);
                              }
                    children: []
                    pos: 15545
                    length: 78
                  pos: 15537
                  length: 92
                pos: 15516
                length: 113
              pos: 14758
              length: 875
          children: []
          pos: 14696
          length: 937
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenNameRefAtDepth
              children: []
              pos: 16027
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 16049
                length: 12
              pos: 16014
              length: 748
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int nType = n.getType();
                children: []
                pos: 16336
                length: 24
              - type: local_variable_declaration
                fields:
                  text: boolean isQName = nType == Token.NAME || nType == Token.GETPROP;
                children: []
                pos: 16365
                length: 64
              - type: local_variable_declaration
                fields:
                  text: boolean isObjKey = NodeUtil.isObjectLitKey(n);
                children: []
                pos: 16434
                length: 46
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(isObjKey || isQName);
                children: []
                pos: 16485
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isQName
                        children: []
                        pos: 16540
                        length: 7
                    children: []
                    pos: 16539
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (int i = 1; i < depth && n.hasChildren(); i++) {
                                n = n.getFirstChild();
                              }
                    children: []
                    pos: 16557
                    length: 91
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: n.hasChildren()
                            children: []
                            pos: 16659
                            length: 15
                        children: []
                        pos: 16658
                        length: 17
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: flattenNameRef(alias, n.getFirstChild(), n, originalName);
                        children: []
                        pos: 16686
                        length: 58
                      pos: 16676
                      length: 76
                    pos: 16655
                    length: 97
                  pos: 16549
                  length: 209
                pos: 16536
                length: 222
              pos: 16109
              length: 653
          children: []
          pos: 16014
          length: 748
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenNameRef
              children: []
              pos: 17079
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 17094
                length: 12
              pos: 17066
              length: 821
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node ref = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, n, originalName);
                children: []
                pos: 17309
                length: 93
              - type: expression_statement
                fields:
                  text: NodeUtil.copyNameAnnotations(n.getLastChild(), ref);
                children: []
                pos: 17407
                length: 52
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: parent.isCall()
                            children: []
                            pos: 17468
                            length: 15
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: "n"
                                children: []
                                pos: 17487
                                length: 1
                              right:
                                type: method_invocation
                                fields:
                                  text: parent.getFirstChild()
                                children: []
                                pos: 17492
                                length: 22
                            children: []
                            pos: 17487
                            length: 27
                        children: []
                        pos: 17468
                        length: 46
                    children: []
                    pos: 17467
                    length: 48
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: parent.putBooleanProp(Node.FREE_CALL, true);
                    children: []
                    pos: 17676
                    length: 44
                  pos: 17516
                  length: 210
                pos: 17464
                length: 262
              - type: local_variable_declaration
                fields:
                  text: JSType type = n.getJSType();
                children: []
                pos: 17732
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 17769
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 17777
                            length: 4
                        children: []
                        pos: 17769
                        length: 12
                    children: []
                    pos: 17768
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ref.setJSType(type);
                    children: []
                    pos: 17791
                    length: 20
                  pos: 17783
                  length: 34
                pos: 17765
                length: 52
              - type: expression_statement
                fields:
                  text: parent.replaceChild(n, ref);
                children: []
                pos: 17822
                length: 28
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 17855
                length: 28
              pos: 17156
              length: 731
          children: []
          pos: 17066
          length: 821
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: collapseDeclarationOfNameAndDescendants
              children: []
              pos: 18194
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 18234
                length: 6
              pos: 18181
              length: 1020
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();
                children: []
                pos: 18262
                length: 69
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.canCollapse()
                        children: []
                        pos: 18416
                        length: 15
                    children: []
                    pos: 18415
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);
                    children: []
                    pos: 18441
                    length: 67
                  pos: 18433
                  length: 81
                pos: 18412
                length: 102
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 18524
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 18535
                            length: 4
                        children: []
                        pos: 18524
                        length: 15
                    children: []
                    pos: 18523
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                // Recurse first so that saved node ancestries are intact when needed.
                                collapseDeclarationOfNameAndDescendants(
                                    p, appendPropForAlias(alias, p.getBaseName()));

                                if (!p.inExterns && canCollapseChildNames &&
                                    p.getDeclaration() != null &&
                                    p.canCollapse() &&
                                    p.getDeclaration().node != null &&
                                    p.getDeclaration().node.getParent() != null &&
                                    p.getDeclaration().node.getParent().isAssign()) {
                                  updateSimpleDeclaration(
                                      appendPropForAlias(alias, p.getBaseName()), p, p.getDeclaration());
                                }
                              }
                    children: []
                    pos: 18549
                    length: 642
                  pos: 18541
                  length: 656
                pos: 18520
                length: 677
              pos: 18256
              length: 945
          children: []
          pos: 18181
          length: 1020
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateSimpleDeclaration
              children: []
              pos: 19733
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 19757
                length: 12
              pos: 19720
              length: 1942
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getNext();
                children: []
                pos: 19800
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node parent = ref.node.getParent();
                children: []
                pos: 19838
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node gramps = parent.getParent();
                children: []
                pos: 19878
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node greatGramps = gramps.getParent();
                children: []
                pos: 19916
                length: 38
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: rvalue
                                children: []
                                pos: 19964
                                length: 6
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 19974
                                length: 4
                            children: []
                            pos: 19964
                            length: 14
                          right:
                            type: method_invocation
                            fields:
                              text: rvalue.isFunction()
                            children: []
                            pos: 19982
                            length: 19
                        children: []
                        pos: 19964
                        length: 37
                    children: []
                    pos: 19963
                    length: 39
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: checkForHosedThisReferences(rvalue, refName.docInfo, refName);
                    children: []
                    pos: 20011
                    length: 62
                  pos: 20003
                  length: 76
                pos: 19960
                length: 119
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node nameNode = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, gramps.getFirstChild(),
                            refName.getFullName());
                children: []
                pos: 20119
                length: 136
              - type: expression_statement
                fields:
                  text: NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);
                children: []
                pos: 20260
                length: 64
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: gramps.isExprResult()
                        children: []
                        pos: 20334
                        length: 21
                    children: []
                    pos: 20333
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: parent.removeChild(rvalue);
                    children: []
                    pos: 20712
                    length: 27
                  - type: expression_statement
                    fields:
                      text: nameNode.addChildToFront(rvalue);
                    children: []
                    pos: 20746
                    length: 33
                  - type: local_variable_declaration
                    fields:
                      text: Node varNode = IR.var(nameNode);
                    children: []
                    pos: 20787
                    length: 32
                  - type: expression_statement
                    fields:
                      text: greatGramps.replaceChild(gramps, varNode);
                    children: []
                    pos: 20826
                    length: 42
                  pos: 20357
                  length: 517
                pos: 20330
                length: 1294
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 21630
                length: 28
              pos: 19794
              length: 1868
          children: []
          pos: 19720
          length: 1942
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclaration
              children: []
              pos: 22703
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 22744
                length: 6
              pos: 22690
              length: 864
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref decl = n.getDeclaration();
                children: []
                pos: 22803
                length: 30
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: decl
                            children: []
                            pos: 22842
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 22850
                            length: 4
                        children: []
                        pos: 22842
                        length: 12
                    children: []
                    pos: 22841
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 22966
                    length: 7
                  pos: 22856
                  length: 123
                pos: 22838
                length: 141
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: decl.getTwin()
                            children: []
                            pos: 22989
                            length: 14
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 23007
                            length: 4
                        children: []
                        pos: 22989
                        length: 22
                    children: []
                    pos: 22988
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 23110
                    length: 7
                  pos: 23013
                  length: 110
                pos: 22985
                length: 138
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: decl.node.getParent().getType()
                        children: []
                        pos: 23137
                        length: 31
                    children: []
                    pos: 23136
                    length: 33
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.ASSIGN:
                                updateObjLitOrFunctionDeclarationAtAssignNode(
                                    n, alias, canCollapseChildNames);
                                break;
                              case Token.VAR:
                                updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
                                break;
                              case Token.FUNCTION:
                                updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
                                break;
                            }
                    children: []
                    pos: 23170
                    length: 380
                children: []
                pos: 23129
                length: 421
              pos: 22797
              length: 757
          children: []
          pos: 22690
          length: 864
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclarationAtAssignNode
              children: []
              pos: 23908
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 23961
                length: 6
              pos: 23895
              length: 2181
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.getDeclaration();
                children: []
                pos: 24223
                length: 29
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getNext();
                children: []
                pos: 24257
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node varNode = new Node(Token.VAR);
                children: []
                pos: 24295
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node varParent = ref.node.getAncestor(3);
                children: []
                pos: 24335
                length: 41
              - type: local_variable_declaration
                fields:
                  text: Node gramps = ref.node.getAncestor(2);
                children: []
                pos: 24381
                length: 38
              - type: local_variable_declaration
                fields:
                  text: boolean isObjLit = rvalue.isObjectLit();
                children: []
                pos: 24424
                length: 40
              - type: local_variable_declaration
                fields:
                  text: boolean insertedVarNode = false;
                children: []
                pos: 24469
                length: 32
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 24511
                            length: 8
                          right:
                            type: method_invocation
                            fields:
                              text: n.canEliminate()
                            children: []
                            pos: 24523
                            length: 16
                        children: []
                        pos: 24511
                        length: 28
                    children: []
                    pos: 24510
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: varParent.replaceChild(gramps, varNode);
                    children: []
                    pos: 24599
                    length: 40
                  - type: expression_statement
                    fields:
                      text: ref.node = null;
                    children: []
                    pos: 24646
                    length: 16
                  - type: expression_statement
                    fields:
                      text: insertedVarNode = true;
                    children: []
                    pos: 24669
                    length: 23
                  pos: 24541
                  length: 158
                pos: 24507
                length: 1138
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: canCollapseChildNames
                        children: []
                        pos: 25655
                        length: 21
                    children: []
                    pos: 25654
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 25690
                            length: 8
                        children: []
                        pos: 25689
                        length: 10
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            declareVarsForObjLitValues(
                                        n, alias, rvalue,
                                        varNode, varParent.getChildBefore(varNode), varParent);
                        children: []
                        pos: 25710
                        length: 125
                      pos: 25700
                      length: 143
                    pos: 25686
                    length: 157
                  - type: expression_statement
                    fields:
                      text: addStubsForUndeclaredProperties(n, alias, varParent, varNode);
                    children: []
                    pos: 25851
                    length: 62
                  pos: 25678
                  length: 241
                pos: 25651
                length: 268
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: insertedVarNode
                        children: []
                        pos: 25929
                        length: 15
                    children: []
                    pos: 25928
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!varNode.hasChildren()"
                            children: []
                            pos: 25958
                            length: 22
                        children: []
                        pos: 25957
                        length: 24
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: varParent.removeChild(varNode);
                        children: []
                        pos: 25992
                        length: 31
                      pos: 25982
                      length: 49
                    pos: 25954
                    length: 77
                  - type: expression_statement
                    fields:
                      text: compiler.reportCodeChange();
                    children: []
                    pos: 26038
                    length: 28
                  pos: 25946
                  length: 126
                pos: 25925
                length: 147
              pos: 24014
              length: 2062
          children: []
          pos: 23895
          length: 2181
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkForHosedThisReferences
              children: []
              pos: 26241
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node function
                children: []
                pos: 26269
                length: 13
              pos: 26228
              length: 792
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: docInfo
                                children: []
                                pos: 26473
                                length: 7
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 26484
                                length: 4
                            children: []
                            pos: 26473
                            length: 15
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: unary_expression
                                    fields:
                                      text: "!docInfo.isConstructor()"
                                    children: []
                                    pos: 26501
                                    length: 24
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!docInfo.hasThisType()"
                                    children: []
                                    pos: 26529
                                    length: 22
                                children: []
                                pos: 26501
                                length: 50
                            children: []
                            pos: 26500
                            length: 52
                        children: []
                        pos: 26473
                        length: 79
                    children: []
                    pos: 26472
                    length: 81
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        NodeTraversal.traverse(compiler, function.getLastChild(),
                                  new NodeTraversal.AbstractShallowCallback() {
                                    @Override
                                    public void visit(NodeTraversal t, Node n, Node parent) {
                                      if (n.isThis()) {
                                        compiler.report(
                                            JSError.make(name.getDeclaration().getSourceName(), n,
                                                UNSAFE_THIS, name.getFullName()));
                                      }
                                    }
                                  });
                    children: []
                    pos: 26562
                    length: 448
                  pos: 26554
                  length: 462
                pos: 26469
                length: 547
              pos: 26326
              length: 694
          children: []
          pos: 26228
          length: 792
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclarationAtVarNode
              children: []
              pos: 27290
              length: 42
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 27340
                length: 6
              pos: 27277
              length: 1044
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!canCollapseChildNames"
                        children: []
                        pos: 27389
                        length: 22
                    children: []
                    pos: 27388
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 27421
                    length: 7
                  pos: 27413
                  length: 21
                pos: 27385
                length: 49
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.getDeclaration();
                children: []
                pos: 27440
                length: 29
              - type: local_variable_declaration
                fields:
                  text: String name = ref.node.getString();
                children: []
                pos: 27474
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getFirstChild();
                children: []
                pos: 27514
                length: 39
              - type: local_variable_declaration
                fields:
                  text: Node varNode = ref.node.getParent();
                children: []
                pos: 27558
                length: 36
              - type: local_variable_declaration
                fields:
                  text: Node gramps = varNode.getParent();
                children: []
                pos: 27599
                length: 34
              - type: local_variable_declaration
                fields:
                  text: boolean isObjLit = rvalue.isObjectLit();
                children: []
                pos: 27639
                length: 40
              - type: local_variable_declaration
                fields:
                  text: int numChanges = 0;
                children: []
                pos: 27684
                length: 19
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isObjLit
                        children: []
                        pos: 27713
                        length: 8
                    children: []
                    pos: 27712
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        numChanges += declareVarsForObjLitValues(
                                  n, name, rvalue, varNode, gramps.getChildBefore(varNode),
                                  gramps);
                    children: []
                    pos: 27731
                    length: 128
                  pos: 27723
                  length: 142
                pos: 27709
                length: 156
              - type: expression_statement
                fields:
                  text: numChanges += addStubsForUndeclaredProperties(n, name, gramps,
                    varNode);
                children: []
                pos: 27871
                length: 72
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 27953
                            length: 8
                          right:
                            type: method_invocation
                            fields:
                              text: n.canEliminate()
                            children: []
                            pos: 27965
                            length: 16
                        children: []
                        pos: 27953
                        length: 28
                    children: []
                    pos: 27952
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: varNode.removeChild(ref.node);
                    children: []
                    pos: 27991
                    length: 30
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!varNode.hasChildren()"
                            children: []
                            pos: 28032
                            length: 22
                        children: []
                        pos: 28031
                        length: 24
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: gramps.removeChild(varNode);
                        children: []
                        pos: 28066
                        length: 28
                      pos: 28056
                      length: 46
                    pos: 28028
                    length: 74
                  - type: expression_statement
                    fields:
                      text: numChanges++;
                    children: []
                    pos: 28109
                    length: 13
                  - type: expression_statement
                    fields:
                      text: ref.node = null;
                    children: []
                    pos: 28227
                    length: 16
                  pos: 27983
                  length: 266
                pos: 27949
                length: 300
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: numChanges
                            children: []
                            pos: 28259
                            length: 10
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 28272
                            length: 1
                        children: []
                        pos: 28259
                        length: 14
                    children: []
                    pos: 28258
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: compiler.reportCodeChange();
                    children: []
                    pos: 28283
                    length: 28
                  pos: 28275
                  length: 42
                pos: 28255
                length: 62
              pos: 27379
              length: 942
          children: []
          pos: 27277
          length: 1044
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateFunctionDeclarationAtFunctionNode
              children: []
              pos: 28596
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 28643
                length: 6
              pos: 28583
              length: 339
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!canCollapseChildNames"
                        children: []
                        pos: 28692
                        length: 22
                    children: []
                    pos: 28691
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 28724
                    length: 7
                  pos: 28716
                  length: 21
                pos: 28688
                length: 49
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.getDeclaration();
                children: []
                pos: 28743
                length: 29
              - type: local_variable_declaration
                fields:
                  text: String fnName = ref.node.getString();
                children: []
                pos: 28777
                length: 37
              - type: expression_statement
                fields:
                  text: |-
                    addStubsForUndeclaredProperties(
                            n, fnName, ref.node.getAncestor(2), ref.node.getParent());
                children: []
                pos: 28819
                length: 99
              pos: 28682
              length: 240
          children: []
          pos: 28583
          length: 339
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: declareVarsForObjLitValues
              children: []
              pos: 29528
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name objlitName
                children: []
                pos: 29562
                length: 15
              pos: 29516
              length: 3091
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int numVars = 0;
                children: []
                pos: 29669
                length: 16
              - type: local_variable_declaration
                fields:
                  text: int arbitraryNameCounter = 0;
                children: []
                pos: 29690
                length: 29
              - type: local_variable_declaration
                fields:
                  text: boolean discardKeys = !objlitName.shouldKeepKeys();
                children: []
                pos: 29724
                length: 51
              - type: for_statement
                fields:
                  text: |-
                    for (Node key = objlit.getFirstChild(), nextKey; key != null;
                             key = nextKey) {
                          Node value = key.getFirstChild();
                          nextKey = key.getNext();

                          // A get or a set can not be rewritten as a VAR.
                          if (key.isGetterDef() || key.isSetterDef()) {
                            continue;
                          }

                          // We generate arbitrary names for keys that aren't valid JavaScript
                          // identifiers, since those keys are never referenced. (If they were,
                          // this object literal's child names wouldn't be collapsible.) The only
                          // reason that we don't eliminate them entirely is the off chance that
                          // their values are expressions that have side effects.
                          boolean isJsIdentifier = !key.isNumber() &&
                                                   TokenStream.isJSIdentifier(key.getString());
                          String propName = isJsIdentifier ?
                              key.getString() : String.valueOf(++arbitraryNameCounter);

                          // If the name cannot be collapsed, skip it.
                          String qName = objlitName.getFullName() + '.' + propName;
                          Name p = nameMap.get(qName);
                          if (p != null && !p.canCollapse()) {
                            continue;
                          }

                          String propAlias = appendPropForAlias(alias, propName);
                          Node refNode = null;
                          if (discardKeys) {
                            objlit.removeChild(key);
                            value.detachFromParent();
                          } else {
                            // Substitute a reference for the value.
                            refNode = IR.name(propAlias);
                            if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
                              refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                            }

                            key.replaceChild(value, refNode);
                          }

                          // Declare the collapsed name as a variable with the original value.
                          Node nameNode = IR.name(propAlias);
                          nameNode.addChildToFront(value);
                          if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
                            nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                          }
                          Node newVar = IR.var(nameNode)
                              .copyInformationFromForTree(key);
                          if (nameToAddAfter != null) {
                            varParent.addChildAfter(newVar, nameToAddAfter);
                          } else {
                            varParent.addChildBefore(newVar, varNode);
                          }
                          compiler.reportCodeChange();
                          nameToAddAfter = newVar;

                          // Update the global name's node ancestry if it hasn't already been
                          // done. (Duplicate keys in an object literal can bring us here twice
                          // for the same global name.)
                          if (isJsIdentifier && p != null) {
                            if (!discardKeys) {
                              Ref newAlias =
                                  p.getDeclaration().cloneAndReclassify(Ref.Type.ALIASING_GET);
                              newAlias.node = refNode;
                              p.addRef(newAlias);
                            }

                            p.getDeclaration().node = nameNode;

                            if (value.isFunction()) {
                              checkForHosedThisReferences(value, value.getJSDocInfo(), p);
                            }
                          }

                          numVars++;
                        }
                children: []
                pos: 29781
                length: 2802
              - type: return_statement
                fields:
                  text: return numVars;
                children: []
                pos: 32588
                length: 15
              pos: 29663
              length: 2944
          children: []
          pos: 29516
          length: 3091
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: addStubsForUndeclaredProperties
              children: []
              pos: 33197
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 33236
                length: 6
              pos: 33185
              length: 1141
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(n.canCollapseUnannotatedChildNames());
                children: []
                pos: 33292
                length: 63
              - type: expression_statement
                fields:
                  text: Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
                children: []
                pos: 33360
                length: 63
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(addAfter);
                children: []
                pos: 33428
                length: 37
              - type: local_variable_declaration
                fields:
                  text: int numStubs = 0;
                children: []
                pos: 33470
                length: 17
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 33496
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 33507
                            length: 4
                        children: []
                        pos: 33496
                        length: 15
                    children: []
                    pos: 33495
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                if (p.needsToBeStubbed()) {
                                  String propAlias = appendPropForAlias(alias, p.getBaseName());
                                  Node nameNode = IR.name(propAlias);
                                  Node newVar = IR.var(nameNode)
                                      .copyInformationFromForTree(addAfter);
                                  parent.addChildAfter(newVar, addAfter);
                                  addAfter = newVar;
                                  numStubs++;
                                  compiler.reportCodeChange();

                                  // Determine if this is a constant var by checking the first
                                  // reference to it. Don't check the declaration, as it might be null.
                                  if (p.getRefs().get(0).node.getLastChild().getBooleanProp(
                                          Node.IS_CONSTANT_NAME)) {
                                    nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                                  }
                                }
                              }
                    children: []
                    pos: 33521
                    length: 774
                  pos: 33513
                  length: 788
                pos: 33492
                length: 809
              - type: return_statement
                fields:
                  text: return numStubs;
                children: []
                pos: 34306
                length: 16
              pos: 33286
              length: 1040
          children: []
          pos: 33185
          length: 1141
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: appendPropForAlias
              children: []
              pos: 34352
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String root
                children: []
                pos: 34371
                length: 11
              pos: 34330
              length: 352
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: prop.indexOf('$')
                            children: []
                            pos: 34407
                            length: 17
                          right:
                            type: unary_expression
                            fields:
                              text: "-1"
                            children: []
                            pos: 34428
                            length: 2
                        children: []
                        pos: 34407
                        length: 23
                    children: []
                    pos: 34406
                    length: 25
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: prop = prop.replace("$", "$0");
                    children: []
                    pos: 34611
                    length: 31
                  pos: 34432
                  length: 216
                pos: 34403
                length: 245
              - type: return_statement
                fields:
                  text: return root + '$' + prop;
                children: []
                pos: 34653
                length: 25
              pos: 34397
              length: 285
          children: []
          pos: 34330
          length: 352
        pos: 3164
        length: 31520
    children: []
    pos: 3164
    length: 31520
  pos: 0
  length: 34685
text_diff: "--- before\n+++ after\n@@ -169,7 +169,7 @@\n         continue;\n       }\n
  \n-      if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&\n+
  \     if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets
  > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n
  \        // and try to inline them.\n"
tree_diff: |+
  New cluster:
  UPDATE from while (!workList.isEmpty()) {
        Name name = workList.pop();

        // Don't attempt to inline a getter or setter property as a variable.
        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
          continue;
        }

        if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&
            name.aliasingGets > 0) {
          // {@code name} meets condition (b). Find all of its local aliases
          // and try to inline them.
          List<Ref> refs = Lists.newArrayList(name.getRefs());
          for (Ref ref : refs) {
            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
              // {@code name} meets condition (c). Try to inline it.
              if (inlineAliasIfPossible(ref, namespace)) {
                name.removeRef(ref);
              }
            }
          }
        }

        // Check if {@code name} has any aliases left after the
        // local-alias-inlining above.
        if ((name.type == Name.Type.OBJECTLIT ||
             name.type == Name.Type.FUNCTION) &&
            name.aliasingGets == 0 && name.props != null) {
          // All of {@code name}'s children meet condition (a), so they can be
          // added to the worklist.
          workList.addAll(name.props);
        }
      } to while (!workList.isEmpty()) {
        Name name = workList.pop();

        // Don't attempt to inline a getter or setter property as a variable.
        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
          continue;
        }

        if (name.globalSets == 1 && name.localSets == 0 &&
            name.aliasingGets > 0) {
          // {@code name} meets condition (b). Find all of its local aliases
          // and try to inline them.
          List<Ref> refs = Lists.newArrayList(name.getRefs());
          for (Ref ref : refs) {
            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
              // {@code name} meets condition (c). Try to inline it.
              if (inlineAliasIfPossible(ref, namespace)) {
                name.removeRef(ref);
              }
            }
          }
        }

        // Check if {@code name} has any aliases left after the
        // local-alias-inlining above.
        if ((name.type == Name.Type.OBJECTLIT ||
             name.type == Name.Type.FUNCTION) &&
            name.aliasingGets == 0 && name.props != null) {
          // All of {@code name}'s children meet condition (a), so they can be
          // added to the worklist.
          workList.addAll(name.props);
        }
      }
  ------------
  ===
  update-node
  ---
  while_statement: while (!workList.isEmpty()) {
        Name name = workList.pop();

        // Don't attempt to inline a getter or setter property as a variable.
        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
          continue;
        }

        if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&
            name.aliasingGets > 0) {
          // {@code name} meets condition (b). Find all of its local aliases
          // and try to inline them.
          List<Ref> refs = Lists.newArrayList(name.getRefs());
          for (Ref ref : refs) {
            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
              // {@code name} meets condition (c). Try to inline it.
              if (inlineAliasIfPossible(ref, namespace)) {
                name.removeRef(ref);
              }
            }
          }
        }

        // Check if {@code name} has any aliases left after the
        // local-alias-inlining above.
        if ((name.type == Name.Type.OBJECTLIT ||
             name.type == Name.Type.FUNCTION) &&
            name.aliasingGets == 0 && name.props != null) {
          // All of {@code name}'s children meet condition (a), so they can be
          // added to the worklist.
          workList.addAll(name.props);
        }
      } [6461,7698]
  replace while (!workList.isEmpty()) {
        Name name = workList.pop();

        // Don't attempt to inline a getter or setter property as a variable.
        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
          continue;
        }

        if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&
            name.aliasingGets > 0) {
          // {@code name} meets condition (b). Find all of its local aliases
          // and try to inline them.
          List<Ref> refs = Lists.newArrayList(name.getRefs());
          for (Ref ref : refs) {
            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
              // {@code name} meets condition (c). Try to inline it.
              if (inlineAliasIfPossible(ref, namespace)) {
                name.removeRef(ref);
              }
            }
          }
        }

        // Check if {@code name} has any aliases left after the
        // local-alias-inlining above.
        if ((name.type == Name.Type.OBJECTLIT ||
             name.type == Name.Type.FUNCTION) &&
            name.aliasingGets == 0 && name.props != null) {
          // All of {@code name}'s children meet condition (a), so they can be
          // added to the worklist.
          workList.addAll(name.props);
        }
      } by while (!workList.isEmpty()) {
        Name name = workList.pop();

        // Don't attempt to inline a getter or setter property as a variable.
        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
          continue;
        }

        if (name.globalSets == 1 && name.localSets == 0 &&
            name.aliasingGets > 0) {
          // {@code name} meets condition (b). Find all of its local aliases
          // and try to inline them.
          List<Ref> refs = Lists.newArrayList(name.getRefs());
          for (Ref ref : refs) {
            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
              // {@code name} meets condition (c). Try to inline it.
              if (inlineAliasIfPossible(ref, namespace)) {
                name.removeRef(ref);
              }
            }
          }
        }

        // Check if {@code name} has any aliases left after the
        // local-alias-inlining above.
        if ((name.type == Name.Type.OBJECTLIT ||
             name.type == Name.Type.FUNCTION) &&
            name.aliasingGets == 0 && name.props != null) {
          // All of {@code name}'s children meet condition (a), so they can be
          // added to the worklist.
          workList.addAll(name.props);
        }
      }

...
