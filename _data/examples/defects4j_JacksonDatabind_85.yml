---
language: java
text_diff: "--- before\n+++ after\n@@ -64,61 +64,34 @@\n \n         // 08-Jun-2017,
  tatu: With [databind#1648], this gets bit tricky..\n         // First: custom pattern
  will override things\n-        if (format.hasPattern()) {\n+                if ((shape
  == JsonFormat.Shape.STRING) || format.hasPattern()\n+                                ||
  format.hasLocale() || format.hasTimeZone()) {\n+                    TimeZone tz
  = format.getTimeZone();\n+                    final String pattern = format.hasPattern()\n+
  \                                   ? format.getPattern()\n+                                    :
  StdDateFormat.DATE_FORMAT_STR_ISO8601;\n             final Locale loc = format.hasLocale()\n
  \                            ? format.getLocale()\n                             :
  serializers.getLocale();\n-            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(),
  loc);\n-            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n-
  \                   : serializers.getTimeZone();\n+                    SimpleDateFormat
  df = new SimpleDateFormat(pattern, loc);\n+                    if (tz == null) {\n+
  \                       tz = serializers.getTimeZone();\n+                    }\n
  \            df.setTimeZone(tz);\n             return withFormat(Boolean.FALSE,
  df);\n         }\n \n         // Otherwise, need one of these changes:\n-        final
  boolean hasLocale = format.hasLocale();\n-        final boolean hasTZ = format.hasTimeZone();\n-
  \       final boolean asString = (shape == JsonFormat.Shape.STRING);\n \n-        if
  (!hasLocale && !hasTZ && !asString) {\n-            return this;\n-        }\n \n-
  \       DateFormat df0 = serializers.getConfig().getDateFormat();\n         // Jackson's
  own `StdDateFormat` is quite easy to deal with...\n-        if (df0 instanceof StdDateFormat)
  {\n-            StdDateFormat std = (StdDateFormat) df0;\n-            if (format.hasLocale())
  {\n-                std = std.withLocale(format.getLocale());\n-            }\n-
  \           if (format.hasTimeZone()) {\n-                std = std.withTimeZone(format.getTimeZone());\n-
  \           }\n-            return withFormat(Boolean.FALSE, std);\n-        }\n
  \n         // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n         //
  \   mechanism for changing `DateFormat` instances (or even clone()ing)\n         //
  \   So: require it be `SimpleDateFormat`; can't config other types\n-        if
  (!(df0 instanceof SimpleDateFormat)) {\n //            serializers.reportBadDefinition(handledType(),
  String.format(\n-            serializers.reportMappingProblem(\n-\"Configured `DateFormat`
  (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\",\n-df0.getClass().getName());\n-
  \       }\n-        SimpleDateFormat df = (SimpleDateFormat) df0;\n-        if (hasLocale)
  {\n             // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n-
  \           df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n-        }
  else {\n-            df = (SimpleDateFormat) df.clone();\n-        }\n-        TimeZone
  newTz = format.getTimeZone();\n-        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n-
  \       if (changeTZ) {\n-            df.setTimeZone(newTz);\n-        }\n-        return
  withFormat(Boolean.FALSE, df);\n+        return this;\n     }\n \n     /*\n"
tree_diff: |+
  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  if_statement [2262,3098]
      parenthesized_expression [2265,2402]
          or [2266,2401]
              or [2266,2377]
                  or [2266,2323]
                      parenthesized_expression [2266,2300]
                          equals [2267,2299]
                              identifier: shape [2267,2272]
                              field_access: JsonFormat.Shape.STRING [2276,2299]
                      method_invocation: format.hasPattern() [2304,2323]
                  method_invocation: format.hasLocale() [2359,2377]
              method_invocation: format.hasTimeZone() [2381,2401]
      block [2403,3098]
          local_variable_declaration: TimeZone tz = format.getTimeZone(); [2425,2460]
          local_variable_declaration: final String pattern = format.hasPattern()
                                      ? format.getPattern()
                                      : StdDateFormat.DATE_FORMAT_STR_ISO8601; [2481,2658]
          local_variable_declaration: final Locale loc = format.hasLocale()
                              ? format.getLocale()
                              : serializers.getLocale(); [2671,2812]
          local_variable_declaration: SimpleDateFormat df = new SimpleDateFormat(pattern, loc); [2833,2890]
          if_statement [2911,3006]
              parenthesized_expression [2914,2926]
                  equals [2915,2925]
                      identifier: tz [2915,2917]
                      null_literal [2921,2925]
              block [2927,3006]
                  expression_statement: tz = serializers.getTimeZone(); [2953,2984]
          expression_statement: df.setTimeZone(tz); [3019,3038]
          return_statement: return withFormat(Boolean.FALSE, df); [3051,3088]
  to
  block [1681,4660]
  at 5

  New cluster:
  UPDATE from return withFormat(Boolean.FALSE, df); to return this;
  ------------
  ===
  update-node
  ---
  return_statement: return withFormat(Boolean.FALSE, df); [4617,4654]
  replace return withFormat(Boolean.FALSE, df); by return this;

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [2254,2727]
      parenthesized_expression [2257,2278]
          method_invocation: format.hasPattern() [2258,2277]
      block [2279,2727]
          local_variable_declaration: final Locale loc = format.hasLocale()
                              ? format.getLocale()
                              : serializers.getLocale(); [2293,2434]
          local_variable_declaration: SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); [2447,2516]
          local_variable_declaration: TimeZone tz = format.hasTimeZone() ? format.getTimeZone()
                      : serializers.getTimeZone(); [2529,2635]
          expression_statement: df.setTimeZone(tz); [2648,2667]
          return_statement: return withFormat(Boolean.FALSE, df); [2680,2717]

  New cluster:
  ===
  delete-node
  ---
  local_variable_declaration: final boolean hasLocale = format.hasLocale(); [2786,2831]
  ===
  ------------
  ===
  delete-node
  ---
  local_variable_declaration: final boolean hasLocale = format.hasLocale(); [2786,2831]
  ===

  New cluster:
  ===
  delete-node
  ---
  local_variable_declaration: final boolean hasTZ = format.hasTimeZone(); [2840,2883]
  ===
  ------------
  ===
  delete-node
  ---
  local_variable_declaration: final boolean hasTZ = format.hasTimeZone(); [2840,2883]
  ===

  New cluster:
  ===
  delete-node
  ---
  local_variable_declaration: final boolean asString = (shape == JsonFormat.Shape.STRING); [2892,2952]
  ===
  ------------
  ===
  delete-node
  ---
  local_variable_declaration: final boolean asString = (shape == JsonFormat.Shape.STRING); [2892,2952]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [2962,3037]
      parenthesized_expression [2965,3000]
          and [2966,2999]
              and [2966,2986]
                  unary_expression: !hasLocale [2966,2976]
                  unary_expression: !hasTZ [2980,2986]
              unary_expression: !asString [2990,2999]
      block [3001,3037]
          return_statement: return this; [3015,3027]

  New cluster:
  ===
  delete-node
  ---
  local_variable_declaration: DateFormat df0 = serializers.getConfig().getDateFormat(); [3047,3104]
  ===
  ------------
  ===
  delete-node
  ---
  local_variable_declaration: DateFormat df0 = serializers.getConfig().getDateFormat(); [3047,3104]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [3184,3559]
      parenthesized_expression [3187,3217]
          instanceof_expression: df0 instanceof StdDateFormat [3188,3216]
      block [3218,3559]
          local_variable_declaration: StdDateFormat std = (StdDateFormat) df0; [3232,3272]
          if_statement [3285,3382]
              parenthesized_expression [3288,3308]
                  method_invocation: format.hasLocale() [3289,3307]
              block [3309,3382]
                  expression_statement: std = std.withLocale(format.getLocale()); [3327,3368]
          if_statement [3395,3498]
              parenthesized_expression [3398,3420]
                  method_invocation: format.hasTimeZone() [3399,3419]
              block [3421,3498]
                  expression_statement: std = std.withTimeZone(format.getTimeZone()); [3439,3484]
          return_statement: return withFormat(Boolean.FALSE, std); [3511,3549]

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [3799,4098]
      parenthesized_expression [3802,3838]
          unary_expression: !(df0 instanceof SimpleDateFormat) [3803,3837]
      block [3839,4098]
          expression_statement: serializers.reportMappingProblem(
  "Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",
  df0.getClass().getName()); [3929,4088]

  New cluster:
  ===
  delete-node
  ---
  local_variable_declaration: SimpleDateFormat df = (SimpleDateFormat) df0; [4107,4152]
  ===
  ------------
  ===
  delete-node
  ---
  local_variable_declaration: SimpleDateFormat df = (SimpleDateFormat) df0; [4107,4152]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [4161,4413]
      parenthesized_expression [4164,4175]
          identifier: hasLocale [4165,4174]
      block [4176,4348]
          expression_statement: df = new SimpleDateFormat(df.toPattern(), format.getLocale()); [4276,4338]

  New cluster:
  ===
  delete-node
  ---
  local_variable_declaration: TimeZone newTz = format.getTimeZone(); [4422,4460]
  ===
  ------------
  ===
  delete-node
  ---
  local_variable_declaration: TimeZone newTz = format.getTimeZone(); [4422,4460]
  ===

  New cluster:
  ===
  delete-node
  ---
  local_variable_declaration: boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); [4469,4539]
  ===
  ------------
  ===
  delete-node
  ---
  local_variable_declaration: boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); [4469,4539]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [4548,4608]
      parenthesized_expression [4551,4561]
          identifier: changeTZ [4552,4560]
      block [4562,4608]
          expression_statement: df.setTimeZone(newTz); [4576,4598]

...
