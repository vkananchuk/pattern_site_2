---
language: python
text_diff: "--- before\n+++ after\n@@ -1,3 +1,4 @@\n+\n def wrap(text, cols):\n     lines
  = []\n     while len(text) > cols:\n@@ -7,22 +8,6 @@\n         line, text = text[:end],
  text[end:]\n         lines.append(line)\n \n+    lines.append(text)\n     return
  lines\n \n-\"\"\"\n-Wrap Text\n-\n-Given a long string and a column width, break
  the string on spaces into a list of lines such that each line is no longer than
  the column width.\n-\n-Input:\n-    text: The starting text.\n-    cols: The target
  column width, i.e. the maximum length of any single line after wrapping.\n-\n-Precondition:\n-
  \   cols > 0.\n-\n-Output:\n-    An ordered list of strings, each no longer than
  the column width, such that the concatenation of the strings returns the original
  text,\n-and such that no word in the original text is broken into two parts unless
  necessary.  The original amount of spaces are preserved (e.g. spaces\n-at the start
  or end of each line aren't trimmed.),Wrapping Text\r\n-\"\"\"\n"
tree_diff: "New cluster:\n===\ninsert-node\n---\nexpression_statement: lines.append(text)
  [230,248]\nto\nblock [26,241]\nat 2\n------------\n===\ninsert-node\n---\nexpression_statement:
  lines.append(text) [230,248]\nto\nblock [26,241]\nat 2\n\nNew cluster:\n===\ndelete-node\n---\nexpression_statement:
  \"\"\"\nWrap Text\n\nGiven a long string and a column width, break the string on
  spaces into a list of lines such that each line is no longer than the column width.\n\nInput:\n
  \   text: The starting text.\n    cols: The target column width, i.e. the maximum
  length of any single line after wrapping.\n\nPrecondition:\n    cols > 0.\n\nOutput:\n
  \   An ordered list of strings, each no longer than the column width, such that
  the concatenation of the strings returns the original text,\nand such that no word
  in the original text is broken into two parts unless necessary.  The original amount
  of spaces are preserved (e.g. spaces\nat the start or end of each line aren't trimmed.),Wrapping
  Text\r\n\"\"\" [243,923]\n===\n------------\n===\ndelete-node\n---\nexpression_statement:
  \"\"\"\nWrap Text\n\nGiven a long string and a column width, break the string on
  spaces into a list of lines such that each line is no longer than the column width.\n\nInput:\n
  \   text: The starting text.\n    cols: The target column width, i.e. the maximum
  length of any single line after wrapping.\n\nPrecondition:\n    cols > 0.\n\nOutput:\n
  \   An ordered list of strings, each no longer than the column width, such that
  the concatenation of the strings returns the original text,\nand such that no word
  in the original text is broken into two parts unless necessary.  The original amount
  of spaces are preserved (e.g. spaces\nat the start or end of each line aren't trimmed.),Wrapping
  Text\r\n\"\"\" [243,923]\n===\n\n"
