---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: MINIMUM_SPANNING_TREE
        children: []
        pos: 89
        length: 21
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: minimum_spanning_tree
              children: []
              pos: 149
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: List<WeightedEdge> weightedEdges
                children: []
                pos: 171
                length: 32
              pos: 117
              length: 1201
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<Node,Set<Node>> groupByNode = new HashMap<>();
                children: []
                pos: 215
                length: 50
              - type: local_variable_declaration
                fields:
                  text: Set<WeightedEdge> minSpanningTree = new HashSet<>();
                children: []
                pos: 274
                length: 52
              - type: expression_statement
                fields:
                  text: Collections.sort(weightedEdges);
                children: []
                pos: 336
                length: 32
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (WeightedEdge edge : weightedEdges) {
                                Node vertex_u = edge.node1;
                                Node vertex_v = edge.node2;
                                //System.out.printf("u: %s, v: %s weight: %d\n", vertex_u.getValue(), vertex_v.getValue(), edge.weight);
                                if (!groupByNode.containsKey(vertex_u)){
                                    groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));
                                }
                                if (!groupByNode.containsKey(vertex_v)){
                                    groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));
                                }

                                if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {
                                    minSpanningTree.add(edge);
                                    groupByNode = update(groupByNode, vertex_u, vertex_v);
                                    for (Node node : groupByNode.get(vertex_v)) {
                                        groupByNode = update(groupByNode, node, vertex_u);
                                    }
                                }
                            }
                children: []
                pos: 378
                length: 902
              - type: return_statement
                fields:
                  text: return minSpanningTree;
                children: []
                pos: 1289
                length: 23
              pos: 205
              length: 1113
          children: []
          pos: 117
          length: 1201
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: update
              children: []
              pos: 1358
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Map<Node,Set<Node>> groupByNode
                children: []
                pos: 1365
                length: 31
              pos: 1324
              length: 258
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Set<Node> vertex_u_span = groupByNode.get(vertex_u);
                children: []
                pos: 1438
                length: 52
              - type: expression_statement
                fields:
                  text: vertex_u_span.addAll(groupByNode.get(vertex_v));
                children: []
                pos: 1499
                length: 48
              - type: return_statement
                fields:
                  text: return groupByNode;
                children: []
                pos: 1557
                length: 19
              pos: 1428
              length: 154
          children: []
          pos: 1324
          length: 258
        pos: 76
        length: 1508
    children: []
    pos: 76
    length: 1508
  pos: 0
  length: 1585
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: MINIMUM_SPANNING_TREE
        children: []
        pos: 160
        length: 21
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: minimum_spanning_tree
              children: []
              pos: 220
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: List<WeightedEdge> weightedEdges
                children: []
                pos: 242
                length: 32
              pos: 188
              length: 1201
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<Node,Set<Node>> groupByNode = new HashMap<>();
                children: []
                pos: 286
                length: 50
              - type: local_variable_declaration
                fields:
                  text: Set<WeightedEdge> minSpanningTree = new HashSet<>();
                children: []
                pos: 345
                length: 52
              - type: expression_statement
                fields:
                  text: Collections.sort(weightedEdges);
                children: []
                pos: 407
                length: 32
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (WeightedEdge edge : weightedEdges) {
                                Node vertex_u = edge.node1;
                                Node vertex_v = edge.node2;
                                //System.out.printf("u: %s, v: %s weight: %d\n", vertex_u.getValue(), vertex_v.getValue(), edge.weight);
                                if (!groupByNode.containsKey(vertex_u)){
                                    groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));
                                }
                                if (!groupByNode.containsKey(vertex_v)){
                                    groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));
                                }

                                if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {
                                    minSpanningTree.add(edge);
                                    groupByNode = update(groupByNode, vertex_u, vertex_v);
                                    for (Node node : groupByNode.get(vertex_v)) {
                                        groupByNode.put(node,  groupByNode.get(vertex_u));
                                    }
                                }
                            }
                children: []
                pos: 449
                length: 902
              - type: return_statement
                fields:
                  text: return minSpanningTree;
                children: []
                pos: 1360
                length: 23
              pos: 276
              length: 1113
          children: []
          pos: 188
          length: 1201
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: update
              children: []
              pos: 1429
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Map<Node,Set<Node>> groupByNode
                children: []
                pos: 1436
                length: 31
              pos: 1395
              length: 258
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Set<Node> vertex_u_span = groupByNode.get(vertex_u);
                children: []
                pos: 1509
                length: 52
              - type: expression_statement
                fields:
                  text: vertex_u_span.addAll(groupByNode.get(vertex_v));
                children: []
                pos: 1570
                length: 48
              - type: return_statement
                fields:
                  text: return groupByNode;
                children: []
                pos: 1628
                length: 19
              pos: 1499
              length: 154
          children: []
          pos: 1395
          length: 258
        pos: 147
        length: 1508
    children: []
    pos: 147
    length: 1508
  pos: 0
  length: 1656
text_diff: |
  --- before
  +++ after
  @@ -1,5 +1,8 @@
  -package java_programs;
  +package correct_java_programs;
   import java.util.*;
  +
  +import java_programs.Node;
  +import java_programs.WeightedEdge;
   /**
    * Minimum spanning tree
    */
  @@ -25,7 +28,7 @@
                   minSpanningTree.add(edge);
                   groupByNode = update(groupByNode, vertex_u, vertex_v);
                   for (Node node : groupByNode.get(vertex_v)) {
  -                    groupByNode = update(groupByNode, node, vertex_u);
  +                    groupByNode.put(node,  groupByNode.get(vertex_u));
                   }
               }
           }
tree_diff: |+
  New cluster:
  UPDATE from for (WeightedEdge edge : weightedEdges) {
              Node vertex_u = edge.node1;
              Node vertex_v = edge.node2;
              //System.out.printf("u: %s, v: %s weight: %d\n", vertex_u.getValue(), vertex_v.getValue(), edge.weight);
              if (!groupByNode.containsKey(vertex_u)){
                  groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));
              }
              if (!groupByNode.containsKey(vertex_v)){
                  groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));
              }

              if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {
                  minSpanningTree.add(edge);
                  groupByNode = update(groupByNode, vertex_u, vertex_v);
                  for (Node node : groupByNode.get(vertex_v)) {
                      groupByNode = update(groupByNode, node, vertex_u);
                  }
              }
          } to for (WeightedEdge edge : weightedEdges) {
              Node vertex_u = edge.node1;
              Node vertex_v = edge.node2;
              //System.out.printf("u: %s, v: %s weight: %d\n", vertex_u.getValue(), vertex_v.getValue(), edge.weight);
              if (!groupByNode.containsKey(vertex_u)){
                  groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));
              }
              if (!groupByNode.containsKey(vertex_v)){
                  groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));
              }

              if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {
                  minSpanningTree.add(edge);
                  groupByNode = update(groupByNode, vertex_u, vertex_v);
                  for (Node node : groupByNode.get(vertex_v)) {
                      groupByNode.put(node,  groupByNode.get(vertex_u));
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (WeightedEdge edge : weightedEdges) {
              Node vertex_u = edge.node1;
              Node vertex_v = edge.node2;
              //System.out.printf("u: %s, v: %s weight: %d\n", vertex_u.getValue(), vertex_v.getValue(), edge.weight);
              if (!groupByNode.containsKey(vertex_u)){
                  groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));
              }
              if (!groupByNode.containsKey(vertex_v)){
                  groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));
              }

              if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {
                  minSpanningTree.add(edge);
                  groupByNode = update(groupByNode, vertex_u, vertex_v);
                  for (Node node : groupByNode.get(vertex_v)) {
                      groupByNode = update(groupByNode, node, vertex_u);
                  }
              }
          } [378,1280]
  replace for (WeightedEdge edge : weightedEdges) {
              Node vertex_u = edge.node1;
              Node vertex_v = edge.node2;
              //System.out.printf("u: %s, v: %s weight: %d\n", vertex_u.getValue(), vertex_v.getValue(), edge.weight);
              if (!groupByNode.containsKey(vertex_u)){
                  groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));
              }
              if (!groupByNode.containsKey(vertex_v)){
                  groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));
              }

              if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {
                  minSpanningTree.add(edge);
                  groupByNode = update(groupByNode, vertex_u, vertex_v);
                  for (Node node : groupByNode.get(vertex_v)) {
                      groupByNode = update(groupByNode, node, vertex_u);
                  }
              }
          } by for (WeightedEdge edge : weightedEdges) {
              Node vertex_u = edge.node1;
              Node vertex_v = edge.node2;
              //System.out.printf("u: %s, v: %s weight: %d\n", vertex_u.getValue(), vertex_v.getValue(), edge.weight);
              if (!groupByNode.containsKey(vertex_u)){
                  groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));
              }
              if (!groupByNode.containsKey(vertex_v)){
                  groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));
              }

              if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {
                  minSpanningTree.add(edge);
                  groupByNode = update(groupByNode, vertex_u, vertex_v);
                  for (Node node : groupByNode.get(vertex_v)) {
                      groupByNode.put(node,  groupByNode.get(vertex_u));
                  }
              }
          }

...
