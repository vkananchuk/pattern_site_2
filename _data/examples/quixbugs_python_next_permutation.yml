---
language: python
text_diff: "--- before\n+++ after\n@@ -3,29 +3,20 @@\n     for i in range(len(perm)
  - 2, -1, -1):\n         if perm[i] < perm[i + 1]:\n             for j in range(len(perm)
  - 1, i, -1):\n-                if perm[j] < perm[i]:\n+                if perm[i]
  < perm[j]:\n                     next_perm = list(perm)\n                     next_perm[i],
  next_perm[j] = perm[j], perm[i]\n                     next_perm[i + 1:] = reversed(next_perm[i
  + 1:])\n                     return next_perm\n \n-\n-\n \"\"\"\n-Next Permutation\n-next-perm\n-\n-\n-Input:\n-
  \   perm: A list of unique ints\n-\n-Precondition:\n-    perm is not sorted in reverse
  order\n-\n-Output:\n-    The lexicographically next permutation of the elements
  of perm\n-\n-Example:\n-    >>> next_permutation([3, 2, 4, 1])\n-    [3, 4, 1, 2]\n+def
  next_permutation(perm):\n+    for i in range(len(perm) - 2, -1, -1):\n+        if
  perm[i] < perm[i + 1]:\n+            for j in range(len(perm) - 1, i, -1):\n+                if
  perm[j] > perm[i]:\n+                    next_perm = list(perm)\n+                    next_perm[i],
  next_perm[j] = perm[j], perm[i]\n+                    next_perm[i + 1:] = reversed(next_perm[i
  + 1:])\n+                    return next_perm\n \"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from """
  Next Permutation
  next-perm


  Input:
      perm: A list of unique ints

  Precondition:
      perm is not sorted in reverse order

  Output:
      The lexicographically next permutation of the elements of perm

  Example:
      >>> next_permutation([3, 2, 4, 1])
      [3, 4, 1, 2]
  """ to """
  def next_permutation(perm):
      for i in range(len(perm) - 2, -1, -1):
          if perm[i] < perm[i + 1]:
              for j in range(len(perm) - 1, i, -1):
                  if perm[j] > perm[i]:
                      next_perm = list(perm)
                      next_perm[i], next_perm[j] = perm[j], perm[i]
                      next_perm[i + 1:] = reversed(next_perm[i + 1:])
                      return next_perm
  """
  ------------
  ===
  update-node
  ---
  expression_statement: """
  Next Permutation
  next-perm


  Input:
      perm: A list of unique ints

  Precondition:
      perm is not sorted in reverse order

  Output:
      The lexicographically next permutation of the elements of perm

  Example:
      >>> next_permutation([3, 2, 4, 1])
      [3, 4, 1, 2]
  """ [411,683]
  replace """
  Next Permutation
  next-perm


  Input:
      perm: A list of unique ints

  Precondition:
      perm is not sorted in reverse order

  Output:
      The lexicographically next permutation of the elements of perm

  Example:
      >>> next_permutation([3, 2, 4, 1])
      [3, 4, 1, 2]
  """ by """
  def next_permutation(perm):
      for i in range(len(perm) - 2, -1, -1):
          if perm[i] < perm[i + 1]:
              for j in range(len(perm) - 1, i, -1):
                  if perm[j] > perm[i]:
                      next_perm = list(perm)
                      next_perm[i], next_perm[j] = perm[j], perm[i]
                      next_perm[i + 1:] = reversed(next_perm[i + 1:])
                      return next_perm
  """

  New cluster:
  UPDATE from for i in range(len(perm) - 2, -1, -1):
          if perm[i] < perm[i + 1]:
              for j in range(len(perm) - 1, i, -1):
                  if perm[j] < perm[i]:
                      next_perm = list(perm)
                      next_perm[i], next_perm[j] = perm[j], perm[i]
                      next_perm[i + 1:] = reversed(next_perm[i + 1:])
                      return next_perm to for i in range(len(perm) - 2, -1, -1):
          if perm[i] < perm[i + 1]:
              for j in range(len(perm) - 1, i, -1):
                  if perm[i] < perm[j]:
                      next_perm = list(perm)
                      next_perm[i], next_perm[j] = perm[j], perm[i]
                      next_perm[i + 1:] = reversed(next_perm[i + 1:])
                      return next_perm
  ------------
  ===
  update-node
  ---
  for_statement: for i in range(len(perm) - 2, -1, -1):
          if perm[i] < perm[i + 1]:
              for j in range(len(perm) - 1, i, -1):
                  if perm[j] < perm[i]:
                      next_perm = list(perm)
                      next_perm[i], next_perm[j] = perm[j], perm[i]
                      next_perm[i + 1:] = reversed(next_perm[i + 1:])
                      return next_perm [33,407]
  replace for i in range(len(perm) - 2, -1, -1):
          if perm[i] < perm[i + 1]:
              for j in range(len(perm) - 1, i, -1):
                  if perm[j] < perm[i]:
                      next_perm = list(perm)
                      next_perm[i], next_perm[j] = perm[j], perm[i]
                      next_perm[i + 1:] = reversed(next_perm[i + 1:])
                      return next_perm by for i in range(len(perm) - 2, -1, -1):
          if perm[i] < perm[i + 1]:
              for j in range(len(perm) - 1, i, -1):
                  if perm[i] < perm[j]:
                      next_perm = list(perm)
                      next_perm[i], next_perm[j] = perm[j], perm[i]
                      next_perm[i + 1:] = reversed(next_perm[i + 1:])
                      return next_perm

...
