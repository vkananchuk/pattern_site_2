---
language: java
text_diff: "--- before\n+++ after\n@@ -256,7 +256,6 @@\n     private final Map<String,
  Var> aliases = Maps.newHashMap();\n \n     // Also temporary and cleared for each
  scope.\n-    private final Set<Node> injectedDecls = Sets.newHashSet();\n \n     //
  Suppose you create an alias.\n     // var x = goog.x;\n@@ -314,7 +313,6 @@\n \n
  \      if (t.getScopeDepth() == 2) {\n         renameNamespaceShadows(t);\n-        injectedDecls.clear();\n
  \        aliases.clear();\n         forbiddenLocals.clear();\n         transformation
  = null;\n@@ -431,7 +429,6 @@\n             } else {\n               grandparent.addChildBefore(newDecl,
  varNode);\n             }\n-            injectedDecls.add(newDecl.getFirstChild());\n
  \          }\n \n           // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n@@
  -581,7 +578,7 @@\n         // When we inject declarations, we duplicate jsdoc. Make
  sure\n         // we only process that jsdoc once.\n         JSDocInfo info = n.getJSDocInfo();\n-
  \       if (info != null && !injectedDecls.contains(n)) {\n+        if (info !=
  null) {\n           for (Node node : info.getTypeNodes()) {\n             fixTypeNode(node);\n
  \          }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
              injectedDecls.add(newDecl.getFirstChild());
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        } to for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
              injectedDecls.add(newDecl.getFirstChild());
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        } [12248,15995]
  replace for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
              injectedDecls.add(newDecl.getFirstChild());
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        } by for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        }

  New cluster:
  MOVE from parenthesized_expression [20687,20731]
  ------------
  ===
  move-tree
  ---
  not_equals [20688,20700]
      identifier: info [20688,20692]
      null_literal [20696,20700]
  to
  parenthesized_expression [20687,20731]
  at 0

  New cluster:
  ===
  delete-node
  ---
  field_declaration: private final Set<Node> injectedDecls = Sets.newHashSet(); [9051,9109]
  ===
  ------------
  ===
  delete-node
  ---
  field_declaration: private final Set<Node> injectedDecls = Sets.newHashSet(); [9051,9109]
  ===

  New cluster:
  ===
  delete-node
  ---
  expression_statement: injectedDecls.clear(); [10828,10850]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: injectedDecls.clear(); [10828,10850]
  ===

  New cluster:
  ===
  delete-node
  ---
  and [20688,20730]
  ===
  ------------
  ===
  delete-node
  ---
  and [20688,20730]
  ===
  ===
  delete-node
  ---
  unary_expression: !injectedDecls.contains(n) [20704,20730]
  ===

...
