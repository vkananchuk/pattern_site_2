---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: ScopedAliases
        children: []
        pos: 2329
        length: 13
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: static final String SCOPING_METHOD_NAME = "goog.scope";
          children: []
          pos: 2451
          length: 55
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 2510
          length: 40
        - type: field_declaration
          fields:
            text: private final PreprocessorSymbolTable preprocessorSymbolTable;
          children: []
          pos: 2553
          length: 62
        - type: field_declaration
          fields:
            text: private final AliasTransformationHandler transformationHandler;
          children: []
          pos: 2618
          length: 63
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_USED_IMPROPERLY",
                    "The call to goog.scope must be alone in a single statement.");
          children: []
          pos: 2697
          length: 188
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =
                    DiagnosticType.error(
                        "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS",
                        "The call to goog.scope must take only a single parameter.  It must" +
                            " be an anonymous function that itself takes no parameters.");
          children: []
          pos: 2889
          length: 292
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_REFERENCES_THIS",
                    "The body of a goog.scope function cannot reference 'this'.");
          children: []
          pos: 3185
          length: 187
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_USES_RETURN",
                    "The body of a goog.scope function cannot use 'return'.");
          children: []
          pos: 3376
          length: 175
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_USES_THROW",
                    "The body of a goog.scope function cannot use 'throw'.");
          children: []
          pos: 3555
          length: 172
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_ALIAS_REDEFINED",
                    "The alias {0} is assigned a value more than once.");
          children: []
          pos: 3731
          length: 178
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_ALIAS_CYCLE = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_ALIAS_CYCLE",
                    "The aliases {0} has a cycle.");
          children: []
          pos: 3913
          length: 149
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL",
                    "The local variable {0} is in a goog.scope and is not an alias.");
          children: []
          pos: 4066
          length: 191
        - type: field_declaration
          fields:
            text: private Multiset<String> scopedAliasNames = HashMultiset.create();
          children: []
          pos: 4261
          length: 66
        - type: constructor_declaration
          fields:
            text: |-
              ScopedAliases(AbstractCompiler compiler,
                    @Nullable PreprocessorSymbolTable preprocessorSymbolTable,
                    AliasTransformationHandler transformationHandler) {
                  this.compiler = compiler;
                  this.preprocessorSymbolTable = preprocessorSymbolTable;
                  this.transformationHandler = transformationHandler;
                }
          children: []
          pos: 4331
          length: 313
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 4672
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 4680
                length: 12
              pos: 4648
              length: 93
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: hotSwapScript(root, null);
                children: []
                pos: 4711
                length: 26
              pos: 4705
              length: 36
          children: []
          pos: 4648
          length: 93
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hotSwapScript
              children: []
              pos: 4769
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node root
                children: []
                pos: 4783
                length: 9
              pos: 4745
              length: 2044
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Traversal traversal = new Traversal();
                children: []
                pos: 4819
                length: 38
              - type: expression_statement
                fields:
                  text: NodeTraversal.traverse(compiler, root, traversal);
                children: []
                pos: 4862
                length: 50
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!traversal.hasErrors()"
                        children: []
                        pos: 4922
                        length: 22
                    children: []
                    pos: 4921
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        List<AliasUsage> aliasWorkQueue =
                                  Lists.newArrayList(traversal.getAliasUsages());
                    children: []
                    pos: 4983
                    length: 91
                  - type: while_statement
                    fields:
                      text: |-
                        while (!aliasWorkQueue.isEmpty()) {
                                List<AliasUsage> newQueue = Lists.newArrayList();
                                for (AliasUsage aliasUsage : aliasWorkQueue) {
                                  if (aliasUsage.referencesOtherAlias()) {
                                    newQueue.add(aliasUsage);
                                  } else {
                                    aliasUsage.applyAlias();
                                  }
                                }

                                // Prevent an infinite loop.
                                if (newQueue.size() == aliasWorkQueue.size()) {
                                  Var cycleVar = newQueue.get(0).aliasVar;
                                  compiler.report(JSError.make(
                                      cycleVar.getNode(), GOOG_SCOPE_ALIAS_CYCLE, cycleVar.getName()));
                                  break;
                                } else {
                                  aliasWorkQueue = newQueue;
                                }
                              }
                    children: []
                    pos: 5081
                    length: 669
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {
                                if (aliasDefinition.getParent().isVar() &&
                                    aliasDefinition.getParent().hasOneChild()) {
                                  aliasDefinition.getParent().detachFromParent();
                                } else {
                                  aliasDefinition.detachFromParent();
                                }
                              }
                    children: []
                    pos: 5797
                    length: 316
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Node scopeCall : traversal.getScopeCalls()) {
                                Node expressionWithScopeCall = scopeCall.getParent();
                                Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();
                                scopeClosureBlock.detachFromParent();
                                expressionWithScopeCall.getParent().replaceChild(
                                    expressionWithScopeCall,
                                    scopeClosureBlock);
                                NodeUtil.tryMergeBlock(scopeClosureBlock);
                              }
                    children: []
                    pos: 6151
                    length: 418
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: or
                            fields:
                              left:
                                type: or
                                fields:
                                  left:
                                    type: greater_than
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: traversal.getAliasUsages().size()
                                        children: []
                                        pos: 6581
                                        length: 33
                                      right:
                                        type: decimal_integer_literal
                                        fields:
                                          text: '0'
                                        children: []
                                        pos: 6617
                                        length: 1
                                    children: []
                                    pos: 6581
                                    length: 37
                                  right:
                                    type: greater_than
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: traversal.getAliasDefinitionsInOrder().size()
                                        children: []
                                        pos: 6632
                                        length: 45
                                      right:
                                        type: decimal_integer_literal
                                        fields:
                                          text: '0'
                                        children: []
                                        pos: 6680
                                        length: 1
                                    children: []
                                    pos: 6632
                                    length: 49
                                children: []
                                pos: 6581
                                length: 100
                              right:
                                type: greater_than
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: traversal.getScopeCalls().size()
                                    children: []
                                    pos: 6695
                                    length: 32
                                  right:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 6730
                                    length: 1
                                children: []
                                pos: 6695
                                length: 36
                            children: []
                            pos: 6581
                            length: 150
                        children: []
                        pos: 6580
                        length: 152
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: compiler.reportCodeChange();
                        children: []
                        pos: 6743
                        length: 28
                      pos: 6733
                      length: 46
                    pos: 6577
                    length: 202
                  pos: 4946
                  length: 1839
                pos: 4918
                length: 1867
              pos: 4813
              length: 1976
          children: []
          pos: 4745
          length: 2044
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: AliasUsage
              children: []
              pos: 6816
              length: 10
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: final Var aliasVar;
                children: []
                pos: 6833
                length: 19
              - type: field_declaration
                fields:
                  text: final Node aliasReference;
                children: []
                pos: 6857
                length: 26
              - type: constructor_declaration
                fields:
                  text: |-
                    AliasUsage(Var aliasVar, Node aliasReference) {
                          this.aliasVar = aliasVar;
                          this.aliasReference = aliasReference;
                        }
                children: []
                pos: 6889
                length: 129
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: referencesOtherAlias
                    children: []
                    pos: 7098
                    length: 20
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 7083
                    length: 282
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node aliasDefinition = aliasVar.getInitialValue();
                      children: []
                      pos: 7129
                      length: 50
                    - type: local_variable_declaration
                      fields:
                        text: Node root = NodeUtil.getRootOfQualifiedName(aliasDefinition);
                      children: []
                      pos: 7186
                      length: 61
                    - type: local_variable_declaration
                      fields:
                        text: Var otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());
                      children: []
                      pos: 7254
                      length: 69
                    - type: return_statement
                      fields:
                        text: return otherAliasVar != null;
                      children: []
                      pos: 7330
                      length: 29
                    pos: 7121
                    length: 244
                children: []
                pos: 7083
                length: 282
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: applyAlias
                    children: []
                    pos: 7392
                    length: 10
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 7371
                    length: 34
                children: []
                pos: 7371
                length: 34
              pos: 6793
              length: 616
          children: []
          pos: 6793
          length: 616
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: AliasedNode
              children: []
              pos: 7427
              length: 11
            body:
              type: class_body
              fields: {}
              children:
              - type: constructor_declaration
                fields:
                  text: |-
                    AliasedNode(Var aliasVar, Node aliasReference) {
                          super(aliasVar, aliasReference);
                        }
                children: []
                pos: 7464
                length: 93
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: applyAlias
                    children: []
                    pos: 7589
                    length: 10
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 7563
                    length: 206
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node aliasDefinition = aliasVar.getInitialValue();
                      children: []
                      pos: 7610
                      length: 50
                    - type: expression_statement
                      fields:
                        text: |-
                          aliasReference.getParent().replaceChild(
                                    aliasReference, aliasDefinition.cloneTree());
                      children: []
                      pos: 7667
                      length: 96
                    pos: 7602
                    length: 167
                children: []
                pos: 7563
                length: 206
              pos: 7413
              length: 360
          children: []
          pos: 7413
          length: 360
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: AliasedTypeNode
              children: []
              pos: 7791
              length: 15
            body:
              type: class_body
              fields: {}
              children:
              - type: constructor_declaration
                fields:
                  text: |-
                    AliasedTypeNode(Var aliasVar, Node aliasReference) {
                          super(aliasVar, aliasReference);
                        }
                children: []
                pos: 7832
                length: 97
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: applyAlias
                    children: []
                    pos: 7961
                    length: 10
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 7935
                    length: 506
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node aliasDefinition = aliasVar.getInitialValue();
                      children: []
                      pos: 7982
                      length: 50
                    - type: local_variable_declaration
                      fields:
                        text: String aliasName = aliasVar.getName();
                      children: []
                      pos: 8039
                      length: 38
                    - type: local_variable_declaration
                      fields:
                        text: String typeName = aliasReference.getString();
                      children: []
                      pos: 8084
                      length: 45
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          String aliasExpanded =
                                    Preconditions.checkNotNull(aliasDefinition.getQualifiedName());
                      children: []
                      pos: 8136
                      length: 96
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkState(typeName.startsWith(aliasName));
                      children: []
                      pos: 8239
                      length: 57
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          String replacement =
                                    aliasExpanded + typeName.substring(aliasName.length());
                      children: []
                      pos: 8303
                      length: 86
                    - type: expression_statement
                      fields:
                        text: aliasReference.setString(replacement);
                      children: []
                      pos: 8396
                      length: 38
                    pos: 7974
                    length: 467
                children: []
                pos: 7935
                length: 506
              pos: 7777
              length: 668
          children: []
          pos: 7777
          length: 668
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: Traversal
              children: []
              pos: 8464
              length: 9
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();
                children: []
                pos: 8664
                length: 72
              - type: field_declaration
                fields:
                  text: private final List<Node> scopeCalls = Lists.newArrayList();
                children: []
                pos: 8742
                length: 59
              - type: field_declaration
                fields:
                  text: private final List<AliasUsage> aliasUsages = Lists.newArrayList();
                children: []
                pos: 8807
                length: 66
              - type: field_declaration
                fields:
                  text: private final Map<String, Var> aliases = Maps.newHashMap();
                children: []
                pos: 8936
                length: 59
              - type: field_declaration
                fields:
                  text: private final Set<Node> injectedDecls = Sets.newHashSet();
                children: []
                pos: 9051
                length: 58
              - type: field_declaration
                fields:
                  text: private final Set<String> forbiddenLocals = Sets.newHashSet("$jscomp");
                children: []
                pos: 9613
                length: 71
              - type: field_declaration
                fields:
                  text: private boolean hasNamespaceShadows = false;
                children: []
                pos: 9689
                length: 44
              - type: field_declaration
                fields:
                  text: private boolean hasErrors = false;
                children: []
                pos: 9739
                length: 34
              - type: field_declaration
                fields:
                  text: private AliasTransformation transformation = null;
                children: []
                pos: 9779
                length: 50
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getAliasDefinitionsInOrder
                    children: []
                    pos: 9852
                    length: 26
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 9835
                    length: 91
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return aliasDefinitionsInOrder;
                      children: []
                      pos: 9889
                      length: 31
                    pos: 9881
                    length: 45
                children: []
                pos: 9835
                length: 91
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getAliasUsages
                    children: []
                    pos: 9957
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 9932
                    length: 75
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return aliasUsages;
                      children: []
                      pos: 9982
                      length: 19
                    pos: 9974
                    length: 33
                children: []
                pos: 9932
                length: 75
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getScopeCalls
                    children: []
                    pos: 10024
                    length: 13
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 10013
                    length: 59
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return scopeCalls;
                      children: []
                      pos: 10048
                      length: 18
                    pos: 10040
                    length: 32
                children: []
                pos: 10013
                length: 59
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: hasErrors
                    children: []
                    pos: 10086
                    length: 9
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 10078
                    length: 51
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return hasErrors;
                      children: []
                      pos: 10106
                      length: 17
                    pos: 10098
                    length: 31
                children: []
                pos: 10078
                length: 51
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isCallToScopeMethod
                    children: []
                    pos: 10151
                    length: 19
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 10171
                      length: 6
                    pos: 10135
                    length: 154
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: |-
                          return n.isCall() &&
                                    SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());
                      children: []
                      pos: 10187
                      length: 96
                    pos: 10179
                    length: 110
                children: []
                pos: 10135
                length: 154
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: enterScope
                    children: []
                    pos: 10321
                    length: 10
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 10332
                      length: 15
                    pos: 10295
                    length: 316
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node n = t.getCurrentNode().getParent();
                      children: []
                      pos: 10357
                      length: 40
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: "n"
                                      children: []
                                      pos: 10408
                                      length: 1
                                    right:
                                      type: null_literal
                                      fields: {}
                                      children: []
                                      pos: 10413
                                      length: 4
                                  children: []
                                  pos: 10408
                                  length: 9
                                right:
                                  type: method_invocation
                                  fields:
                                    text: isCallToScopeMethod(n)
                                  children: []
                                  pos: 10421
                                  length: 22
                              children: []
                              pos: 10408
                              length: 35
                          children: []
                          pos: 10407
                          length: 37
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: |-
                              transformation = transformationHandler.logAliasTransformation(
                                          n.getSourceFileName(), getSourceRegion(n));
                          children: []
                          pos: 10455
                          length: 118
                        - type: expression_statement
                          fields:
                            text: findAliases(t);
                          children: []
                          pos: 10582
                          length: 15
                        pos: 10445
                        length: 160
                      pos: 10404
                      length: 201
                    pos: 10349
                    length: 262
                children: []
                pos: 10295
                length: 316
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: exitScope
                    children: []
                    pos: 10643
                    length: 9
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 10653
                      length: 15
                    pos: 10617
                    length: 373
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: greater_than
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 10682
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 10702
                                  length: 1
                              children: []
                              pos: 10682
                              length: 21
                          children: []
                          pos: 10681
                          length: 23
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: findNamespaceShadows(t);
                          children: []
                          pos: 10715
                          length: 24
                        pos: 10705
                        length: 42
                      pos: 10678
                      length: 69
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 10759
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 10780
                                  length: 1
                              children: []
                              pos: 10759
                              length: 22
                          children: []
                          pos: 10758
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: renameNamespaceShadows(t);
                          children: []
                          pos: 10793
                          length: 26
                        - type: expression_statement
                          fields:
                            text: injectedDecls.clear();
                          children: []
                          pos: 10828
                          length: 22
                        - type: expression_statement
                          fields:
                            text: aliases.clear();
                          children: []
                          pos: 10859
                          length: 16
                        - type: expression_statement
                          fields:
                            text: forbiddenLocals.clear();
                          children: []
                          pos: 10884
                          length: 24
                        - type: expression_statement
                          fields:
                            text: transformation = null;
                          children: []
                          pos: 10917
                          length: 22
                        - type: expression_statement
                          fields:
                            text: hasNamespaceShadows = false;
                          children: []
                          pos: 10948
                          length: 28
                        pos: 10783
                        length: 201
                      pos: 10755
                      length: 229
                    pos: 10670
                    length: 320
                children: []
                pos: 10617
                length: 373
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: shouldTraverse
                    children: []
                    pos: 11031
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 11046
                      length: 15
                    pos: 10996
                    length: 343
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: n.isFunction()
                                  children: []
                                  pos: 11096
                                  length: 14
                                right:
                                  type: method_invocation
                                  fields:
                                    text: t.inGlobalScope()
                                  children: []
                                  pos: 11114
                                  length: 17
                              children: []
                              pos: 11096
                              length: 35
                          children: []
                          pos: 11095
                          length: 37
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: or
                                  fields:
                                    left:
                                      type: equals
                                      fields:
                                        left:
                                          type: identifier
                                          fields:
                                            text: parent
                                          children: []
                                          pos: 11223
                                          length: 6
                                        right:
                                          type: null_literal
                                          fields: {}
                                          children: []
                                          pos: 11233
                                          length: 4
                                      children: []
                                      pos: 11223
                                      length: 14
                                    right:
                                      type: unary_expression
                                      fields:
                                        text: "!isCallToScopeMethod(parent)"
                                      children: []
                                      pos: 11241
                                      length: 28
                                  children: []
                                  pos: 11223
                                  length: 46
                              children: []
                              pos: 11222
                              length: 48
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: return_statement
                              fields:
                                text: return false;
                              children: []
                              pos: 11283
                              length: 13
                            pos: 11271
                            length: 35
                          pos: 11219
                          length: 87
                        pos: 11133
                        length: 181
                      pos: 11092
                      length: 222
                    - type: return_statement
                      fields:
                        text: return true;
                      children: []
                      pos: 11321
                      length: 12
                    pos: 11084
                    length: 255
                children: []
                pos: 10996
                length: 343
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getSourceRegion
                    children: []
                    pos: 11389
                    length: 15
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 11405
                      length: 6
                    pos: 11345
                    length: 623
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node testNode = n;
                      children: []
                      pos: 11421
                      length: 18
                    - type: local_variable_declaration
                      fields:
                        text: Node next = null;
                      children: []
                      pos: 11446
                      length: 17
                    - type: for_statement
                      fields:
                        text: |-
                          for (; next != null || testNode.isScript();) {
                                  next = testNode.getNext();
                                  testNode = testNode.getParent();
                                }
                      children: []
                      pos: 11470
                      length: 130
                    - type: local_variable_declaration
                      fields:
                        text: 'int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();'
                      children: []
                      pos: 11608
                      length: 66
                    - type: local_variable_declaration
                      fields:
                        text: 'int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();'
                      children: []
                      pos: 11681
                      length: 66
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          SourcePosition<AliasTransformation> pos =
                                    new SourcePosition<AliasTransformation>() {};
                      children: []
                      pos: 11754
                      length: 97
                    - type: expression_statement
                      fields:
                        text: |-
                          pos.setPositionInformation(
                                    n.getLineno(), n.getCharno(), endLine, endChar);
                      children: []
                      pos: 11858
                      length: 86
                    - type: return_statement
                      fields:
                        text: return pos;
                      children: []
                      pos: 11951
                      length: 11
                    pos: 11413
                    length: 555
                children: []
                pos: 11345
                length: 623
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: report
                    children: []
                    pos: 11987
                    length: 6
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 11994
                      length: 15
                    pos: 11974
                    length: 184
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: compiler.report(t.makeError(n, error, arguments));
                      children: []
                      pos: 12078
                      length: 50
                    - type: expression_statement
                      fields:
                        text: hasErrors = true;
                      children: []
                      pos: 12135
                      length: 17
                    pos: 12070
                    length: 88
                children: []
                pos: 11974
                length: 184
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: findAliases
                    children: []
                    pos: 12177
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 12189
                      length: 15
                    pos: 12164
                    length: 3837
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Scope scope = t.getScope();
                      children: []
                      pos: 12214
                      length: 27
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Var v : scope.getVarIterable()) {
                                  Node n = v.getNode();
                                  Node parent = n.getParent();
                                  boolean isVar = parent.isVar();
                                  boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
                                  if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
                                    recordAlias(v);
                                  } else if (v.isBleedingFunction()) {
                                    // Bleeding functions already get a BAD_PARAMETERS error, so just
                                    // do nothing.
                                  } else if (parent.getType() == Token.LP) {
                                    // Parameters of the scope function also get a BAD_PARAMETERS
                                    // error.
                                  } else if (isVar || isFunctionDecl) {
                                    boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
                                    Node grandparent = parent.getParent();
                                    Node value = v.getInitialValue() != null ?
                                        v.getInitialValue() :
                                        null;
                                    Node varNode = null;

                                    String name = n.getString();
                                    int nameCount = scopedAliasNames.count(name);
                                    scopedAliasNames.add(name);
                                    String globalName =
                                        "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

                                    compiler.ensureLibraryInjected("base");

                                    // First, we need to free up the function expression (EXPR)
                                    // to be used in another expression.
                                    if (isFunctionDecl) {
                                      // Replace "function NAME() { ... }" with "var NAME;".
                                      Node existingName = v.getNameNode();

                                      // We can't keep the local name on the function expression,
                                      // because IE is buggy and will leak the name into the global
                                      // scope. This is covered in more detail here:
                                      // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
                                      //
                                      // This will only cause problems if this is a hoisted, recursive
                                      // function, and the programmer is using the hoisting.
                                      Node newName = IR.name("").useSourceInfoFrom(existingName);
                                      value.replaceChild(existingName, newName);

                                      varNode = IR.var(existingName).useSourceInfoFrom(existingName);
                                      grandparent.replaceChild(parent, varNode);
                                    } else {
                                      if (value != null) {
                                        // If this is a VAR, we can just detach the expression and
                                        // the tree will still be valid.
                                        value.detachFromParent();
                                      }
                                      varNode = parent;
                                    }

                                    // Add $jscomp.scope.name = EXPR;
                                    // Make sure we copy over all the jsdoc and debug info.
                                    if (value != null || v.getJSDocInfo() != null) {
                                      Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                                          compiler.getCodingConvention(),
                                          globalName,
                                          value,
                                          v.getJSDocInfo())
                                          .useSourceInfoIfMissingFromForTree(n);
                                      NodeUtil.setDebugInformation(
                                          newDecl.getFirstChild().getFirstChild(), n, name);

                                      if (isHoisted) {
                                        grandparent.addChildToFront(newDecl);
                                      } else {
                                        grandparent.addChildBefore(newDecl, varNode);
                                      }
                                      injectedDecls.add(newDecl.getFirstChild());
                                    }

                                    // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
                                    v.getNameNode().addChildToFront(
                                        NodeUtil.newQualifiedNameNode(
                                            compiler.getCodingConvention(), globalName, n, name));

                                    recordAlias(v);
                                  } else {
                                    // Do not other kinds of local symbols, like catch params.
                                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
                                  }
                                }
                      children: []
                      pos: 12248
                      length: 3747
                    pos: 12206
                    length: 3795
                children: []
                pos: 12164
                length: 3837
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: recordAlias
                    children: []
                    pos: 16020
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var aliasVar
                      children: []
                      pos: 16032
                      length: 12
                    pos: 16007
                    length: 511
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: String name = aliasVar.getName();
                      children: []
                      pos: 16054
                      length: 33
                    - type: expression_statement
                      fields:
                        text: aliases.put(name, aliasVar);
                      children: []
                      pos: 16094
                      length: 28
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          String qualifiedName =
                                  aliasVar.getInitialValue().getQualifiedName();
                      children: []
                      pos: 16130
                      length: 77
                    - type: expression_statement
                      fields:
                        text: transformation.addAlias(name, qualifiedName);
                      children: []
                      pos: 16214
                      length: 45
                    - type: local_variable_declaration
                      fields:
                        text: int rootIndex = qualifiedName.indexOf(".");
                      children: []
                      pos: 16267
                      length: 43
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: rootIndex
                                  children: []
                                  pos: 16321
                                  length: 9
                                right:
                                  type: unary_expression
                                  fields:
                                    text: "-1"
                                  children: []
                                  pos: 16334
                                  length: 2
                              children: []
                              pos: 16321
                              length: 15
                          children: []
                          pos: 16320
                          length: 17
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: String qNameRoot = qualifiedName.substring(0, rootIndex);
                          children: []
                          pos: 16348
                          length: 57
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: unary_expression
                                  fields:
                                    text: "!aliases.containsKey(qNameRoot)"
                                  children: []
                                  pos: 16418
                                  length: 31
                              children: []
                              pos: 16417
                              length: 33
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: forbiddenLocals.add(qNameRoot);
                              children: []
                              pos: 16463
                              length: 31
                            pos: 16451
                            length: 53
                          pos: 16414
                          length: 90
                        pos: 16338
                        length: 174
                      pos: 16317
                      length: 195
                    pos: 16046
                    length: 472
                children: []
                pos: 16007
                length: 511
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: findNamespaceShadows
                    children: []
                    pos: 16603
                    length: 20
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 16624
                      length: 15
                    pos: 16590
                    length: 322
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: hasNamespaceShadows
                              children: []
                              pos: 16653
                              length: 19
                          children: []
                          pos: 16652
                          length: 21
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return;
                          children: []
                          pos: 16684
                          length: 7
                        pos: 16674
                        length: 25
                      pos: 16649
                      length: 50
                    - type: local_variable_declaration
                      fields:
                        text: Scope scope = t.getScope();
                      children: []
                      pos: 16707
                      length: 27
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Var v : scope.getVarIterable()) {
                                  if (forbiddenLocals.contains(v.getName())) {
                                    hasNamespaceShadows = true;
                                    return;
                                  }
                                }
                      children: []
                      pos: 16741
                      length: 165
                    pos: 16641
                    length: 271
                children: []
                pos: 16590
                length: 322
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: renameNamespaceShadows
                    children: []
                    pos: 17101
                    length: 22
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 17124
                      length: 15
                    pos: 17088
                    length: 568
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: hasNamespaceShadows
                              children: []
                              pos: 17153
                              length: 19
                          children: []
                          pos: 17152
                          length: 21
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: |-
                              MakeDeclaredNamesUnique.Renamer renamer =
                                          new MakeDeclaredNamesUnique.WhitelistedRenamer(
                                              new MakeDeclaredNamesUnique.ContextualRenamer(),
                                              forbiddenLocals);
                          children: []
                          pos: 17184
                          length: 200
                        - type: enhanced_for_statement
                          fields:
                            text: |-
                              for (String s : forbiddenLocals) {
                                        renamer.addDeclaredName(s);
                                      }
                          children: []
                          pos: 17393
                          length: 82
                        - type: local_variable_declaration
                          fields:
                            text: |-
                              MakeDeclaredNamesUnique uniquifier =
                                          new MakeDeclaredNamesUnique(renamer);
                          children: []
                          pos: 17484
                          length: 86
                        - type: expression_statement
                          fields:
                            text: NodeTraversal.traverse(compiler, t.getScopeRoot(),
                              uniquifier);
                          children: []
                          pos: 17579
                          length: 63
                        pos: 17174
                        length: 476
                      pos: 17149
                      length: 501
                    pos: 17141
                    length: 515
                children: []
                pos: 17088
                length: 568
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: validateScopeCall
                    children: []
                    pos: 17675
                    length: 17
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 17693
                      length: 15
                    pos: 17662
                    length: 917
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: preprocessorSymbolTable
                                  children: []
                                  pos: 17743
                                  length: 23
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 17770
                                  length: 4
                              children: []
                              pos: 17743
                              length: 31
                          children: []
                          pos: 17742
                          length: 33
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: preprocessorSymbolTable.addReference(n.getFirstChild());
                          children: []
                          pos: 17786
                          length: 56
                        pos: 17776
                        length: 74
                      pos: 17739
                      length: 111
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: unary_expression
                              fields:
                                text: "!parent.isExprResult()"
                              children: []
                              pos: 17861
                              length: 22
                          children: []
                          pos: 17860
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: report(t, n, GOOG_SCOPE_USED_IMPROPERLY);
                          children: []
                          pos: 17895
                          length: 41
                        pos: 17885
                        length: 59
                      pos: 17857
                      length: 87
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: n.getChildCount()
                                  children: []
                                  pos: 17955
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 17976
                                  length: 1
                              children: []
                              pos: 17955
                              length: 22
                          children: []
                          pos: 17954
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);
                          children: []
                          pos: 18141
                          length: 44
                        pos: 17979
                        length: 214
                      pos: 17951
                      length: 622
                    pos: 17731
                    length: 848
                children: []
                pos: 17662
                length: 917
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: visit
                    children: []
                    pos: 18611
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 18617
                      length: 15
                    pos: 18585
                    length: 2325
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: isCallToScopeMethod(n)
                              children: []
                              pos: 18667
                              length: 22
                          children: []
                          pos: 18666
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: validateScopeCall(t, n, n.getParent());
                          children: []
                          pos: 18701
                          length: 39
                        pos: 18691
                        length: 57
                      pos: 18663
                      length: 85
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: less_than
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 18760
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 18780
                                  length: 1
                              children: []
                              pos: 18760
                              length: 21
                          children: []
                          pos: 18759
                          length: 23
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return;
                          children: []
                          pos: 18793
                          length: 7
                        pos: 18783
                        length: 25
                      pos: 18756
                      length: 52
                    - type: local_variable_declaration
                      fields:
                        text: int type = n.getType();
                      children: []
                      pos: 18816
                      length: 23
                    - type: local_variable_declaration
                      fields:
                        text: Var aliasVar = null;
                      children: []
                      pos: 18846
                      length: 20
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: type
                                  children: []
                                  pos: 18877
                                  length: 4
                                right:
                                  type: field_access
                                  fields:
                                    text: Token.NAME
                                  children: []
                                  pos: 18885
                                  length: 10
                              children: []
                              pos: 18877
                              length: 18
                          children: []
                          pos: 18876
                          length: 20
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: String name = n.getString();
                          children: []
                          pos: 18907
                          length: 28
                        - type: local_variable_declaration
                          fields:
                            text: Var lexicalVar = t.getScope().getVar(n.getString());
                          children: []
                          pos: 18944
                          length: 52
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: and
                                  fields:
                                    left:
                                      type: not_equals
                                      fields:
                                        left:
                                          type: identifier
                                          fields:
                                            text: lexicalVar
                                          children: []
                                          pos: 19009
                                          length: 10
                                        right:
                                          type: null_literal
                                          fields: {}
                                          children: []
                                          pos: 19023
                                          length: 4
                                      children: []
                                      pos: 19009
                                      length: 18
                                    right:
                                      type: equals
                                      fields:
                                        left:
                                          type: identifier
                                          fields:
                                            text: lexicalVar
                                          children: []
                                          pos: 19031
                                          length: 10
                                        right:
                                          type: method_invocation
                                          fields:
                                            text: aliases.get(name)
                                          children: []
                                          pos: 19045
                                          length: 17
                                      children: []
                                      pos: 19031
                                      length: 31
                                  children: []
                                  pos: 19009
                                  length: 53
                              children: []
                              pos: 19008
                              length: 55
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: aliasVar = lexicalVar;
                              children: []
                              pos: 19076
                              length: 22
                            pos: 19064
                            length: 44
                          pos: 19005
                          length: 103
                        pos: 18897
                        length: 219
                      pos: 18873
                      length: 243
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 19185
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 19206
                                  length: 1
                              children: []
                              pos: 19185
                              length: 22
                          children: []
                          pos: 19184
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: and
                                  fields:
                                    left:
                                      type: not_equals
                                      fields:
                                        left:
                                          type: identifier
                                          fields:
                                            text: aliasVar
                                          children: []
                                          pos: 19223
                                          length: 8
                                        right:
                                          type: null_literal
                                          fields: {}
                                          children: []
                                          pos: 19235
                                          length: 4
                                      children: []
                                      pos: 19223
                                      length: 16
                                    right:
                                      type: method_invocation
                                      fields:
                                        text: NodeUtil.isLValue(n)
                                      children: []
                                      pos: 19243
                                      length: 20
                                  children: []
                                  pos: 19223
                                  length: 40
                              children: []
                              pos: 19222
                              length: 42
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: if_statement
                              fields:
                                condition:
                                  type: parenthesized_expression
                                  fields:
                                    expression:
                                      type: equals
                                      fields:
                                        left:
                                          type: method_invocation
                                          fields:
                                            text: aliasVar.getNode()
                                          children: []
                                          pos: 19281
                                          length: 18
                                        right:
                                          type: identifier
                                          fields:
                                            text: "n"
                                          children: []
                                          pos: 19303
                                          length: 1
                                      children: []
                                      pos: 19281
                                      length: 23
                                  children: []
                                  pos: 19280
                                  length: 25
                              children:
                              - type: block
                                fields: {}
                                children:
                                - type: expression_statement
                                  fields:
                                    text: aliasDefinitionsInOrder.add(n);
                                  children: []
                                  pos: 19320
                                  length: 31
                                - type: return_statement
                                  fields:
                                    text: return;
                                  children: []
                                  pos: 19460
                                  length: 7
                                pos: 19306
                                length: 173
                              pos: 19277
                              length: 290
                            pos: 19265
                            length: 312
                          pos: 19219
                          length: 358
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: type
                                      children: []
                                      pos: 19591
                                      length: 4
                                    right:
                                      type: field_access
                                      fields:
                                        text: Token.RETURN
                                      children: []
                                      pos: 19599
                                      length: 12
                                  children: []
                                  pos: 19591
                                  length: 20
                              children: []
                              pos: 19590
                              length: 22
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: report(t, n, GOOG_SCOPE_USES_RETURN);
                              children: []
                              pos: 19625
                              length: 37
                            pos: 19613
                            length: 59
                          pos: 19587
                          length: 267
                        pos: 19209
                        length: 653
                      pos: 19181
                      length: 681
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: greater_or_equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 19939
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 19960
                                  length: 1
                              children: []
                              pos: 19939
                              length: 22
                          children: []
                          pos: 19938
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: aliasVar
                                      children: []
                                      pos: 20027
                                      length: 8
                                    right:
                                      type: null_literal
                                      fields: {}
                                      children: []
                                      pos: 20039
                                      length: 4
                                  children: []
                                  pos: 20027
                                  length: 16
                              children: []
                              pos: 20026
                              length: 18
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: aliasUsages.add(new AliasedNode(aliasVar, n));
                              children: []
                              pos: 20461
                              length: 46
                            pos: 20045
                            length: 472
                          pos: 20023
                          length: 494
                        - type: local_variable_declaration
                          fields:
                            text: JSDocInfo info = n.getJSDocInfo();
                          children: []
                          pos: 20641
                          length: 34
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: and
                                  fields:
                                    left:
                                      type: not_equals
                                      fields:
                                        left:
                                          type: identifier
                                          fields:
                                            text: info
                                          children: []
                                          pos: 20688
                                          length: 4
                                        right:
                                          type: null_literal
                                          fields: {}
                                          children: []
                                          pos: 20696
                                          length: 4
                                      children: []
                                      pos: 20688
                                      length: 12
                                    right:
                                      type: unary_expression
                                      fields:
                                        text: "!injectedDecls.contains(n)"
                                      children: []
                                      pos: 20704
                                      length: 26
                                  children: []
                                  pos: 20688
                                  length: 42
                              children: []
                              pos: 20687
                              length: 44
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: enhanced_for_statement
                              fields:
                                text: |-
                                  for (Node node : info.getTypeNodes()) {
                                              fixTypeNode(node);
                                            }
                              children: []
                              pos: 20744
                              length: 82
                            pos: 20732
                            length: 104
                          pos: 20684
                          length: 152
                        pos: 19963
                        length: 941
                      pos: 19935
                      length: 969
                    pos: 18655
                    length: 2255
                children: []
                pos: 18585
                length: 2325
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: fixTypeNode
                    children: []
                    pos: 20929
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node typeNode
                      children: []
                      pos: 20941
                      length: 13
                    pos: 20916
                    length: 601
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: typeNode.isString()
                              children: []
                              pos: 20968
                              length: 19
                          children: []
                          pos: 20967
                          length: 21
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: String name = typeNode.getString();
                          children: []
                          pos: 20999
                          length: 35
                        - type: local_variable_declaration
                          fields:
                            text: int endIndex = name.indexOf('.');
                          children: []
                          pos: 21043
                          length: 33
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: endIndex
                                      children: []
                                      pos: 21089
                                      length: 8
                                    right:
                                      type: unary_expression
                                      fields:
                                        text: "-1"
                                      children: []
                                      pos: 21101
                                      length: 2
                                  children: []
                                  pos: 21089
                                  length: 14
                              children: []
                              pos: 21088
                              length: 16
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: endIndex = name.length();
                              children: []
                              pos: 21117
                              length: 25
                            pos: 21105
                            length: 47
                          pos: 21085
                          length: 67
                        - type: local_variable_declaration
                          fields:
                            text: String baseName = name.substring(0, endIndex);
                          children: []
                          pos: 21161
                          length: 46
                        - type: local_variable_declaration
                          fields:
                            text: Var aliasVar = aliases.get(baseName);
                          children: []
                          pos: 21216
                          length: 37
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: aliasVar
                                      children: []
                                      pos: 21266
                                      length: 8
                                    right:
                                      type: null_literal
                                      fields: {}
                                      children: []
                                      pos: 21278
                                      length: 4
                                  children: []
                                  pos: 21266
                                  length: 16
                              children: []
                              pos: 21265
                              length: 18
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: aliasUsages.add(new AliasedTypeNode(aliasVar,
                                  typeNode));
                              children: []
                              pos: 21296
                              length: 57
                            pos: 21284
                            length: 79
                          pos: 21262
                          length: 101
                        pos: 20989
                        length: 382
                      pos: 20964
                      length: 407
                    - type: for_statement
                      fields:
                        text: |-
                          for (Node child = typeNode.getFirstChild(); child != null;
                                     child = child.getNext()) {
                                  fixTypeNode(child);
                                }
                      children: []
                      pos: 21379
                      length: 132
                    pos: 20956
                    length: 561
                children: []
                pos: 20916
                length: 601
              pos: 8450
              length: 13071
          children: []
          pos: 8450
          length: 13071
        pos: 2323
        length: 19200
    children: []
    pos: 2323
    length: 19200
  pos: 0
  length: 21524
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: ScopedAliases
        children: []
        pos: 2329
        length: 13
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: static final String SCOPING_METHOD_NAME = "goog.scope";
          children: []
          pos: 2451
          length: 55
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 2510
          length: 40
        - type: field_declaration
          fields:
            text: private final PreprocessorSymbolTable preprocessorSymbolTable;
          children: []
          pos: 2553
          length: 62
        - type: field_declaration
          fields:
            text: private final AliasTransformationHandler transformationHandler;
          children: []
          pos: 2618
          length: 63
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_USED_IMPROPERLY",
                    "The call to goog.scope must be alone in a single statement.");
          children: []
          pos: 2697
          length: 188
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =
                    DiagnosticType.error(
                        "JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS",
                        "The call to goog.scope must take only a single parameter.  It must" +
                            " be an anonymous function that itself takes no parameters.");
          children: []
          pos: 2889
          length: 292
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_REFERENCES_THIS",
                    "The body of a goog.scope function cannot reference 'this'.");
          children: []
          pos: 3185
          length: 187
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_USES_RETURN",
                    "The body of a goog.scope function cannot use 'return'.");
          children: []
          pos: 3376
          length: 175
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_USES_THROW",
                    "The body of a goog.scope function cannot use 'throw'.");
          children: []
          pos: 3555
          length: 172
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_ALIAS_REDEFINED",
                    "The alias {0} is assigned a value more than once.");
          children: []
          pos: 3731
          length: 178
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_ALIAS_CYCLE = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_ALIAS_CYCLE",
                    "The aliases {0} has a cycle.");
          children: []
          pos: 3913
          length: 149
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(
                    "JSC_GOOG_SCOPE_NON_ALIAS_LOCAL",
                    "The local variable {0} is in a goog.scope and is not an alias.");
          children: []
          pos: 4066
          length: 191
        - type: field_declaration
          fields:
            text: private Multiset<String> scopedAliasNames = HashMultiset.create();
          children: []
          pos: 4261
          length: 66
        - type: constructor_declaration
          fields:
            text: |-
              ScopedAliases(AbstractCompiler compiler,
                    @Nullable PreprocessorSymbolTable preprocessorSymbolTable,
                    AliasTransformationHandler transformationHandler) {
                  this.compiler = compiler;
                  this.preprocessorSymbolTable = preprocessorSymbolTable;
                  this.transformationHandler = transformationHandler;
                }
          children: []
          pos: 4331
          length: 313
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 4672
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 4680
                length: 12
              pos: 4648
              length: 93
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: hotSwapScript(root, null);
                children: []
                pos: 4711
                length: 26
              pos: 4705
              length: 36
          children: []
          pos: 4648
          length: 93
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hotSwapScript
              children: []
              pos: 4769
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node root
                children: []
                pos: 4783
                length: 9
              pos: 4745
              length: 2044
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Traversal traversal = new Traversal();
                children: []
                pos: 4819
                length: 38
              - type: expression_statement
                fields:
                  text: NodeTraversal.traverse(compiler, root, traversal);
                children: []
                pos: 4862
                length: 50
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!traversal.hasErrors()"
                        children: []
                        pos: 4922
                        length: 22
                    children: []
                    pos: 4921
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        List<AliasUsage> aliasWorkQueue =
                                  Lists.newArrayList(traversal.getAliasUsages());
                    children: []
                    pos: 4983
                    length: 91
                  - type: while_statement
                    fields:
                      text: |-
                        while (!aliasWorkQueue.isEmpty()) {
                                List<AliasUsage> newQueue = Lists.newArrayList();
                                for (AliasUsage aliasUsage : aliasWorkQueue) {
                                  if (aliasUsage.referencesOtherAlias()) {
                                    newQueue.add(aliasUsage);
                                  } else {
                                    aliasUsage.applyAlias();
                                  }
                                }

                                // Prevent an infinite loop.
                                if (newQueue.size() == aliasWorkQueue.size()) {
                                  Var cycleVar = newQueue.get(0).aliasVar;
                                  compiler.report(JSError.make(
                                      cycleVar.getNode(), GOOG_SCOPE_ALIAS_CYCLE, cycleVar.getName()));
                                  break;
                                } else {
                                  aliasWorkQueue = newQueue;
                                }
                              }
                    children: []
                    pos: 5081
                    length: 669
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {
                                if (aliasDefinition.getParent().isVar() &&
                                    aliasDefinition.getParent().hasOneChild()) {
                                  aliasDefinition.getParent().detachFromParent();
                                } else {
                                  aliasDefinition.detachFromParent();
                                }
                              }
                    children: []
                    pos: 5797
                    length: 316
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Node scopeCall : traversal.getScopeCalls()) {
                                Node expressionWithScopeCall = scopeCall.getParent();
                                Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();
                                scopeClosureBlock.detachFromParent();
                                expressionWithScopeCall.getParent().replaceChild(
                                    expressionWithScopeCall,
                                    scopeClosureBlock);
                                NodeUtil.tryMergeBlock(scopeClosureBlock);
                              }
                    children: []
                    pos: 6151
                    length: 418
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: or
                            fields:
                              left:
                                type: or
                                fields:
                                  left:
                                    type: greater_than
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: traversal.getAliasUsages().size()
                                        children: []
                                        pos: 6581
                                        length: 33
                                      right:
                                        type: decimal_integer_literal
                                        fields:
                                          text: '0'
                                        children: []
                                        pos: 6617
                                        length: 1
                                    children: []
                                    pos: 6581
                                    length: 37
                                  right:
                                    type: greater_than
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: traversal.getAliasDefinitionsInOrder().size()
                                        children: []
                                        pos: 6632
                                        length: 45
                                      right:
                                        type: decimal_integer_literal
                                        fields:
                                          text: '0'
                                        children: []
                                        pos: 6680
                                        length: 1
                                    children: []
                                    pos: 6632
                                    length: 49
                                children: []
                                pos: 6581
                                length: 100
                              right:
                                type: greater_than
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: traversal.getScopeCalls().size()
                                    children: []
                                    pos: 6695
                                    length: 32
                                  right:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 6730
                                    length: 1
                                children: []
                                pos: 6695
                                length: 36
                            children: []
                            pos: 6581
                            length: 150
                        children: []
                        pos: 6580
                        length: 152
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: compiler.reportCodeChange();
                        children: []
                        pos: 6743
                        length: 28
                      pos: 6733
                      length: 46
                    pos: 6577
                    length: 202
                  pos: 4946
                  length: 1839
                pos: 4918
                length: 1867
              pos: 4813
              length: 1976
          children: []
          pos: 4745
          length: 2044
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: AliasUsage
              children: []
              pos: 6816
              length: 10
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: final Var aliasVar;
                children: []
                pos: 6833
                length: 19
              - type: field_declaration
                fields:
                  text: final Node aliasReference;
                children: []
                pos: 6857
                length: 26
              - type: constructor_declaration
                fields:
                  text: |-
                    AliasUsage(Var aliasVar, Node aliasReference) {
                          this.aliasVar = aliasVar;
                          this.aliasReference = aliasReference;
                        }
                children: []
                pos: 6889
                length: 129
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: referencesOtherAlias
                    children: []
                    pos: 7098
                    length: 20
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 7083
                    length: 282
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node aliasDefinition = aliasVar.getInitialValue();
                      children: []
                      pos: 7129
                      length: 50
                    - type: local_variable_declaration
                      fields:
                        text: Node root = NodeUtil.getRootOfQualifiedName(aliasDefinition);
                      children: []
                      pos: 7186
                      length: 61
                    - type: local_variable_declaration
                      fields:
                        text: Var otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());
                      children: []
                      pos: 7254
                      length: 69
                    - type: return_statement
                      fields:
                        text: return otherAliasVar != null;
                      children: []
                      pos: 7330
                      length: 29
                    pos: 7121
                    length: 244
                children: []
                pos: 7083
                length: 282
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: applyAlias
                    children: []
                    pos: 7392
                    length: 10
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 7371
                    length: 34
                children: []
                pos: 7371
                length: 34
              pos: 6793
              length: 616
          children: []
          pos: 6793
          length: 616
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: AliasedNode
              children: []
              pos: 7427
              length: 11
            body:
              type: class_body
              fields: {}
              children:
              - type: constructor_declaration
                fields:
                  text: |-
                    AliasedNode(Var aliasVar, Node aliasReference) {
                          super(aliasVar, aliasReference);
                        }
                children: []
                pos: 7464
                length: 93
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: applyAlias
                    children: []
                    pos: 7589
                    length: 10
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 7563
                    length: 206
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node aliasDefinition = aliasVar.getInitialValue();
                      children: []
                      pos: 7610
                      length: 50
                    - type: expression_statement
                      fields:
                        text: |-
                          aliasReference.getParent().replaceChild(
                                    aliasReference, aliasDefinition.cloneTree());
                      children: []
                      pos: 7667
                      length: 96
                    pos: 7602
                    length: 167
                children: []
                pos: 7563
                length: 206
              pos: 7413
              length: 360
          children: []
          pos: 7413
          length: 360
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: AliasedTypeNode
              children: []
              pos: 7791
              length: 15
            body:
              type: class_body
              fields: {}
              children:
              - type: constructor_declaration
                fields:
                  text: |-
                    AliasedTypeNode(Var aliasVar, Node aliasReference) {
                          super(aliasVar, aliasReference);
                        }
                children: []
                pos: 7832
                length: 97
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: applyAlias
                    children: []
                    pos: 7961
                    length: 10
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 7935
                    length: 506
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node aliasDefinition = aliasVar.getInitialValue();
                      children: []
                      pos: 7982
                      length: 50
                    - type: local_variable_declaration
                      fields:
                        text: String aliasName = aliasVar.getName();
                      children: []
                      pos: 8039
                      length: 38
                    - type: local_variable_declaration
                      fields:
                        text: String typeName = aliasReference.getString();
                      children: []
                      pos: 8084
                      length: 45
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          String aliasExpanded =
                                    Preconditions.checkNotNull(aliasDefinition.getQualifiedName());
                      children: []
                      pos: 8136
                      length: 96
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkState(typeName.startsWith(aliasName));
                      children: []
                      pos: 8239
                      length: 57
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          String replacement =
                                    aliasExpanded + typeName.substring(aliasName.length());
                      children: []
                      pos: 8303
                      length: 86
                    - type: expression_statement
                      fields:
                        text: aliasReference.setString(replacement);
                      children: []
                      pos: 8396
                      length: 38
                    pos: 7974
                    length: 467
                children: []
                pos: 7935
                length: 506
              pos: 7777
              length: 668
          children: []
          pos: 7777
          length: 668
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: Traversal
              children: []
              pos: 8464
              length: 9
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();
                children: []
                pos: 8664
                length: 72
              - type: field_declaration
                fields:
                  text: private final List<Node> scopeCalls = Lists.newArrayList();
                children: []
                pos: 8742
                length: 59
              - type: field_declaration
                fields:
                  text: private final List<AliasUsage> aliasUsages = Lists.newArrayList();
                children: []
                pos: 8807
                length: 66
              - type: field_declaration
                fields:
                  text: private final Map<String, Var> aliases = Maps.newHashMap();
                children: []
                pos: 8936
                length: 59
              - type: field_declaration
                fields:
                  text: private final Set<String> forbiddenLocals = Sets.newHashSet("$jscomp");
                children: []
                pos: 9550
                length: 71
              - type: field_declaration
                fields:
                  text: private boolean hasNamespaceShadows = false;
                children: []
                pos: 9626
                length: 44
              - type: field_declaration
                fields:
                  text: private boolean hasErrors = false;
                children: []
                pos: 9676
                length: 34
              - type: field_declaration
                fields:
                  text: private AliasTransformation transformation = null;
                children: []
                pos: 9716
                length: 50
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getAliasDefinitionsInOrder
                    children: []
                    pos: 9789
                    length: 26
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 9772
                    length: 91
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return aliasDefinitionsInOrder;
                      children: []
                      pos: 9826
                      length: 31
                    pos: 9818
                    length: 45
                children: []
                pos: 9772
                length: 91
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getAliasUsages
                    children: []
                    pos: 9894
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 9869
                    length: 75
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return aliasUsages;
                      children: []
                      pos: 9919
                      length: 19
                    pos: 9911
                    length: 33
                children: []
                pos: 9869
                length: 75
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getScopeCalls
                    children: []
                    pos: 9961
                    length: 13
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 9950
                    length: 59
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return scopeCalls;
                      children: []
                      pos: 9985
                      length: 18
                    pos: 9977
                    length: 32
                children: []
                pos: 9950
                length: 59
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: hasErrors
                    children: []
                    pos: 10023
                    length: 9
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 10015
                    length: 51
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return hasErrors;
                      children: []
                      pos: 10043
                      length: 17
                    pos: 10035
                    length: 31
                children: []
                pos: 10015
                length: 51
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isCallToScopeMethod
                    children: []
                    pos: 10088
                    length: 19
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 10108
                      length: 6
                    pos: 10072
                    length: 154
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: |-
                          return n.isCall() &&
                                    SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());
                      children: []
                      pos: 10124
                      length: 96
                    pos: 10116
                    length: 110
                children: []
                pos: 10072
                length: 154
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: enterScope
                    children: []
                    pos: 10258
                    length: 10
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 10269
                      length: 15
                    pos: 10232
                    length: 316
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node n = t.getCurrentNode().getParent();
                      children: []
                      pos: 10294
                      length: 40
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: "n"
                                      children: []
                                      pos: 10345
                                      length: 1
                                    right:
                                      type: null_literal
                                      fields: {}
                                      children: []
                                      pos: 10350
                                      length: 4
                                  children: []
                                  pos: 10345
                                  length: 9
                                right:
                                  type: method_invocation
                                  fields:
                                    text: isCallToScopeMethod(n)
                                  children: []
                                  pos: 10358
                                  length: 22
                              children: []
                              pos: 10345
                              length: 35
                          children: []
                          pos: 10344
                          length: 37
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: |-
                              transformation = transformationHandler.logAliasTransformation(
                                          n.getSourceFileName(), getSourceRegion(n));
                          children: []
                          pos: 10392
                          length: 118
                        - type: expression_statement
                          fields:
                            text: findAliases(t);
                          children: []
                          pos: 10519
                          length: 15
                        pos: 10382
                        length: 160
                      pos: 10341
                      length: 201
                    pos: 10286
                    length: 262
                children: []
                pos: 10232
                length: 316
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: exitScope
                    children: []
                    pos: 10580
                    length: 9
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 10590
                      length: 15
                    pos: 10554
                    length: 342
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: greater_than
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 10619
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 10639
                                  length: 1
                              children: []
                              pos: 10619
                              length: 21
                          children: []
                          pos: 10618
                          length: 23
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: findNamespaceShadows(t);
                          children: []
                          pos: 10652
                          length: 24
                        pos: 10642
                        length: 42
                      pos: 10615
                      length: 69
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 10696
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 10717
                                  length: 1
                              children: []
                              pos: 10696
                              length: 22
                          children: []
                          pos: 10695
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: renameNamespaceShadows(t);
                          children: []
                          pos: 10730
                          length: 26
                        - type: expression_statement
                          fields:
                            text: aliases.clear();
                          children: []
                          pos: 10765
                          length: 16
                        - type: expression_statement
                          fields:
                            text: forbiddenLocals.clear();
                          children: []
                          pos: 10790
                          length: 24
                        - type: expression_statement
                          fields:
                            text: transformation = null;
                          children: []
                          pos: 10823
                          length: 22
                        - type: expression_statement
                          fields:
                            text: hasNamespaceShadows = false;
                          children: []
                          pos: 10854
                          length: 28
                        pos: 10720
                        length: 170
                      pos: 10692
                      length: 198
                    pos: 10607
                    length: 289
                children: []
                pos: 10554
                length: 342
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: shouldTraverse
                    children: []
                    pos: 10937
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 10952
                      length: 15
                    pos: 10902
                    length: 343
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: n.isFunction()
                                  children: []
                                  pos: 11002
                                  length: 14
                                right:
                                  type: method_invocation
                                  fields:
                                    text: t.inGlobalScope()
                                  children: []
                                  pos: 11020
                                  length: 17
                              children: []
                              pos: 11002
                              length: 35
                          children: []
                          pos: 11001
                          length: 37
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: or
                                  fields:
                                    left:
                                      type: equals
                                      fields:
                                        left:
                                          type: identifier
                                          fields:
                                            text: parent
                                          children: []
                                          pos: 11129
                                          length: 6
                                        right:
                                          type: null_literal
                                          fields: {}
                                          children: []
                                          pos: 11139
                                          length: 4
                                      children: []
                                      pos: 11129
                                      length: 14
                                    right:
                                      type: unary_expression
                                      fields:
                                        text: "!isCallToScopeMethod(parent)"
                                      children: []
                                      pos: 11147
                                      length: 28
                                  children: []
                                  pos: 11129
                                  length: 46
                              children: []
                              pos: 11128
                              length: 48
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: return_statement
                              fields:
                                text: return false;
                              children: []
                              pos: 11189
                              length: 13
                            pos: 11177
                            length: 35
                          pos: 11125
                          length: 87
                        pos: 11039
                        length: 181
                      pos: 10998
                      length: 222
                    - type: return_statement
                      fields:
                        text: return true;
                      children: []
                      pos: 11227
                      length: 12
                    pos: 10990
                    length: 255
                children: []
                pos: 10902
                length: 343
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getSourceRegion
                    children: []
                    pos: 11295
                    length: 15
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 11311
                      length: 6
                    pos: 11251
                    length: 623
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node testNode = n;
                      children: []
                      pos: 11327
                      length: 18
                    - type: local_variable_declaration
                      fields:
                        text: Node next = null;
                      children: []
                      pos: 11352
                      length: 17
                    - type: for_statement
                      fields:
                        text: |-
                          for (; next != null || testNode.isScript();) {
                                  next = testNode.getNext();
                                  testNode = testNode.getParent();
                                }
                      children: []
                      pos: 11376
                      length: 130
                    - type: local_variable_declaration
                      fields:
                        text: 'int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();'
                      children: []
                      pos: 11514
                      length: 66
                    - type: local_variable_declaration
                      fields:
                        text: 'int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();'
                      children: []
                      pos: 11587
                      length: 66
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          SourcePosition<AliasTransformation> pos =
                                    new SourcePosition<AliasTransformation>() {};
                      children: []
                      pos: 11660
                      length: 97
                    - type: expression_statement
                      fields:
                        text: |-
                          pos.setPositionInformation(
                                    n.getLineno(), n.getCharno(), endLine, endChar);
                      children: []
                      pos: 11764
                      length: 86
                    - type: return_statement
                      fields:
                        text: return pos;
                      children: []
                      pos: 11857
                      length: 11
                    pos: 11319
                    length: 555
                children: []
                pos: 11251
                length: 623
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: report
                    children: []
                    pos: 11893
                    length: 6
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 11900
                      length: 15
                    pos: 11880
                    length: 184
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: compiler.report(t.makeError(n, error, arguments));
                      children: []
                      pos: 11984
                      length: 50
                    - type: expression_statement
                      fields:
                        text: hasErrors = true;
                      children: []
                      pos: 12041
                      length: 17
                    pos: 11976
                    length: 88
                children: []
                pos: 11880
                length: 184
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: findAliases
                    children: []
                    pos: 12083
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 12095
                      length: 15
                    pos: 12070
                    length: 3781
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Scope scope = t.getScope();
                      children: []
                      pos: 12120
                      length: 27
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Var v : scope.getVarIterable()) {
                                  Node n = v.getNode();
                                  Node parent = n.getParent();
                                  boolean isVar = parent.isVar();
                                  boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
                                  if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
                                    recordAlias(v);
                                  } else if (v.isBleedingFunction()) {
                                    // Bleeding functions already get a BAD_PARAMETERS error, so just
                                    // do nothing.
                                  } else if (parent.getType() == Token.LP) {
                                    // Parameters of the scope function also get a BAD_PARAMETERS
                                    // error.
                                  } else if (isVar || isFunctionDecl) {
                                    boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
                                    Node grandparent = parent.getParent();
                                    Node value = v.getInitialValue() != null ?
                                        v.getInitialValue() :
                                        null;
                                    Node varNode = null;

                                    String name = n.getString();
                                    int nameCount = scopedAliasNames.count(name);
                                    scopedAliasNames.add(name);
                                    String globalName =
                                        "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

                                    compiler.ensureLibraryInjected("base");

                                    // First, we need to free up the function expression (EXPR)
                                    // to be used in another expression.
                                    if (isFunctionDecl) {
                                      // Replace "function NAME() { ... }" with "var NAME;".
                                      Node existingName = v.getNameNode();

                                      // We can't keep the local name on the function expression,
                                      // because IE is buggy and will leak the name into the global
                                      // scope. This is covered in more detail here:
                                      // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
                                      //
                                      // This will only cause problems if this is a hoisted, recursive
                                      // function, and the programmer is using the hoisting.
                                      Node newName = IR.name("").useSourceInfoFrom(existingName);
                                      value.replaceChild(existingName, newName);

                                      varNode = IR.var(existingName).useSourceInfoFrom(existingName);
                                      grandparent.replaceChild(parent, varNode);
                                    } else {
                                      if (value != null) {
                                        // If this is a VAR, we can just detach the expression and
                                        // the tree will still be valid.
                                        value.detachFromParent();
                                      }
                                      varNode = parent;
                                    }

                                    // Add $jscomp.scope.name = EXPR;
                                    // Make sure we copy over all the jsdoc and debug info.
                                    if (value != null || v.getJSDocInfo() != null) {
                                      Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                                          compiler.getCodingConvention(),
                                          globalName,
                                          value,
                                          v.getJSDocInfo())
                                          .useSourceInfoIfMissingFromForTree(n);
                                      NodeUtil.setDebugInformation(
                                          newDecl.getFirstChild().getFirstChild(), n, name);

                                      if (isHoisted) {
                                        grandparent.addChildToFront(newDecl);
                                      } else {
                                        grandparent.addChildBefore(newDecl, varNode);
                                      }
                                    }

                                    // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
                                    v.getNameNode().addChildToFront(
                                        NodeUtil.newQualifiedNameNode(
                                            compiler.getCodingConvention(), globalName, n, name));

                                    recordAlias(v);
                                  } else {
                                    // Do not other kinds of local symbols, like catch params.
                                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
                                  }
                                }
                      children: []
                      pos: 12154
                      length: 3691
                    pos: 12112
                    length: 3739
                children: []
                pos: 12070
                length: 3781
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: recordAlias
                    children: []
                    pos: 15870
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var aliasVar
                      children: []
                      pos: 15882
                      length: 12
                    pos: 15857
                    length: 511
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: String name = aliasVar.getName();
                      children: []
                      pos: 15904
                      length: 33
                    - type: expression_statement
                      fields:
                        text: aliases.put(name, aliasVar);
                      children: []
                      pos: 15944
                      length: 28
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          String qualifiedName =
                                  aliasVar.getInitialValue().getQualifiedName();
                      children: []
                      pos: 15980
                      length: 77
                    - type: expression_statement
                      fields:
                        text: transformation.addAlias(name, qualifiedName);
                      children: []
                      pos: 16064
                      length: 45
                    - type: local_variable_declaration
                      fields:
                        text: int rootIndex = qualifiedName.indexOf(".");
                      children: []
                      pos: 16117
                      length: 43
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: rootIndex
                                  children: []
                                  pos: 16171
                                  length: 9
                                right:
                                  type: unary_expression
                                  fields:
                                    text: "-1"
                                  children: []
                                  pos: 16184
                                  length: 2
                              children: []
                              pos: 16171
                              length: 15
                          children: []
                          pos: 16170
                          length: 17
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: String qNameRoot = qualifiedName.substring(0, rootIndex);
                          children: []
                          pos: 16198
                          length: 57
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: unary_expression
                                  fields:
                                    text: "!aliases.containsKey(qNameRoot)"
                                  children: []
                                  pos: 16268
                                  length: 31
                              children: []
                              pos: 16267
                              length: 33
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: forbiddenLocals.add(qNameRoot);
                              children: []
                              pos: 16313
                              length: 31
                            pos: 16301
                            length: 53
                          pos: 16264
                          length: 90
                        pos: 16188
                        length: 174
                      pos: 16167
                      length: 195
                    pos: 15896
                    length: 472
                children: []
                pos: 15857
                length: 511
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: findNamespaceShadows
                    children: []
                    pos: 16453
                    length: 20
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 16474
                      length: 15
                    pos: 16440
                    length: 322
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: hasNamespaceShadows
                              children: []
                              pos: 16503
                              length: 19
                          children: []
                          pos: 16502
                          length: 21
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return;
                          children: []
                          pos: 16534
                          length: 7
                        pos: 16524
                        length: 25
                      pos: 16499
                      length: 50
                    - type: local_variable_declaration
                      fields:
                        text: Scope scope = t.getScope();
                      children: []
                      pos: 16557
                      length: 27
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Var v : scope.getVarIterable()) {
                                  if (forbiddenLocals.contains(v.getName())) {
                                    hasNamespaceShadows = true;
                                    return;
                                  }
                                }
                      children: []
                      pos: 16591
                      length: 165
                    pos: 16491
                    length: 271
                children: []
                pos: 16440
                length: 322
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: renameNamespaceShadows
                    children: []
                    pos: 16951
                    length: 22
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 16974
                      length: 15
                    pos: 16938
                    length: 568
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: hasNamespaceShadows
                              children: []
                              pos: 17003
                              length: 19
                          children: []
                          pos: 17002
                          length: 21
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: |-
                              MakeDeclaredNamesUnique.Renamer renamer =
                                          new MakeDeclaredNamesUnique.WhitelistedRenamer(
                                              new MakeDeclaredNamesUnique.ContextualRenamer(),
                                              forbiddenLocals);
                          children: []
                          pos: 17034
                          length: 200
                        - type: enhanced_for_statement
                          fields:
                            text: |-
                              for (String s : forbiddenLocals) {
                                        renamer.addDeclaredName(s);
                                      }
                          children: []
                          pos: 17243
                          length: 82
                        - type: local_variable_declaration
                          fields:
                            text: |-
                              MakeDeclaredNamesUnique uniquifier =
                                          new MakeDeclaredNamesUnique(renamer);
                          children: []
                          pos: 17334
                          length: 86
                        - type: expression_statement
                          fields:
                            text: NodeTraversal.traverse(compiler, t.getScopeRoot(),
                              uniquifier);
                          children: []
                          pos: 17429
                          length: 63
                        pos: 17024
                        length: 476
                      pos: 16999
                      length: 501
                    pos: 16991
                    length: 515
                children: []
                pos: 16938
                length: 568
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: validateScopeCall
                    children: []
                    pos: 17525
                    length: 17
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 17543
                      length: 15
                    pos: 17512
                    length: 917
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: preprocessorSymbolTable
                                  children: []
                                  pos: 17593
                                  length: 23
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 17620
                                  length: 4
                              children: []
                              pos: 17593
                              length: 31
                          children: []
                          pos: 17592
                          length: 33
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: preprocessorSymbolTable.addReference(n.getFirstChild());
                          children: []
                          pos: 17636
                          length: 56
                        pos: 17626
                        length: 74
                      pos: 17589
                      length: 111
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: unary_expression
                              fields:
                                text: "!parent.isExprResult()"
                              children: []
                              pos: 17711
                              length: 22
                          children: []
                          pos: 17710
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: report(t, n, GOOG_SCOPE_USED_IMPROPERLY);
                          children: []
                          pos: 17745
                          length: 41
                        pos: 17735
                        length: 59
                      pos: 17707
                      length: 87
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: n.getChildCount()
                                  children: []
                                  pos: 17805
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 17826
                                  length: 1
                              children: []
                              pos: 17805
                              length: 22
                          children: []
                          pos: 17804
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);
                          children: []
                          pos: 17991
                          length: 44
                        pos: 17829
                        length: 214
                      pos: 17801
                      length: 622
                    pos: 17581
                    length: 848
                children: []
                pos: 17512
                length: 917
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: visit
                    children: []
                    pos: 18461
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 18467
                      length: 15
                    pos: 18435
                    length: 2295
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: isCallToScopeMethod(n)
                              children: []
                              pos: 18517
                              length: 22
                          children: []
                          pos: 18516
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: validateScopeCall(t, n, n.getParent());
                          children: []
                          pos: 18551
                          length: 39
                        pos: 18541
                        length: 57
                      pos: 18513
                      length: 85
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: less_than
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 18610
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 18630
                                  length: 1
                              children: []
                              pos: 18610
                              length: 21
                          children: []
                          pos: 18609
                          length: 23
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return;
                          children: []
                          pos: 18643
                          length: 7
                        pos: 18633
                        length: 25
                      pos: 18606
                      length: 52
                    - type: local_variable_declaration
                      fields:
                        text: int type = n.getType();
                      children: []
                      pos: 18666
                      length: 23
                    - type: local_variable_declaration
                      fields:
                        text: Var aliasVar = null;
                      children: []
                      pos: 18696
                      length: 20
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: type
                                  children: []
                                  pos: 18727
                                  length: 4
                                right:
                                  type: field_access
                                  fields:
                                    text: Token.NAME
                                  children: []
                                  pos: 18735
                                  length: 10
                              children: []
                              pos: 18727
                              length: 18
                          children: []
                          pos: 18726
                          length: 20
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: String name = n.getString();
                          children: []
                          pos: 18757
                          length: 28
                        - type: local_variable_declaration
                          fields:
                            text: Var lexicalVar = t.getScope().getVar(n.getString());
                          children: []
                          pos: 18794
                          length: 52
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: and
                                  fields:
                                    left:
                                      type: not_equals
                                      fields:
                                        left:
                                          type: identifier
                                          fields:
                                            text: lexicalVar
                                          children: []
                                          pos: 18859
                                          length: 10
                                        right:
                                          type: null_literal
                                          fields: {}
                                          children: []
                                          pos: 18873
                                          length: 4
                                      children: []
                                      pos: 18859
                                      length: 18
                                    right:
                                      type: equals
                                      fields:
                                        left:
                                          type: identifier
                                          fields:
                                            text: lexicalVar
                                          children: []
                                          pos: 18881
                                          length: 10
                                        right:
                                          type: method_invocation
                                          fields:
                                            text: aliases.get(name)
                                          children: []
                                          pos: 18895
                                          length: 17
                                      children: []
                                      pos: 18881
                                      length: 31
                                  children: []
                                  pos: 18859
                                  length: 53
                              children: []
                              pos: 18858
                              length: 55
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: aliasVar = lexicalVar;
                              children: []
                              pos: 18926
                              length: 22
                            pos: 18914
                            length: 44
                          pos: 18855
                          length: 103
                        pos: 18747
                        length: 219
                      pos: 18723
                      length: 243
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 19035
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 19056
                                  length: 1
                              children: []
                              pos: 19035
                              length: 22
                          children: []
                          pos: 19034
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: and
                                  fields:
                                    left:
                                      type: not_equals
                                      fields:
                                        left:
                                          type: identifier
                                          fields:
                                            text: aliasVar
                                          children: []
                                          pos: 19073
                                          length: 8
                                        right:
                                          type: null_literal
                                          fields: {}
                                          children: []
                                          pos: 19085
                                          length: 4
                                      children: []
                                      pos: 19073
                                      length: 16
                                    right:
                                      type: method_invocation
                                      fields:
                                        text: NodeUtil.isLValue(n)
                                      children: []
                                      pos: 19093
                                      length: 20
                                  children: []
                                  pos: 19073
                                  length: 40
                              children: []
                              pos: 19072
                              length: 42
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: if_statement
                              fields:
                                condition:
                                  type: parenthesized_expression
                                  fields:
                                    expression:
                                      type: equals
                                      fields:
                                        left:
                                          type: method_invocation
                                          fields:
                                            text: aliasVar.getNode()
                                          children: []
                                          pos: 19131
                                          length: 18
                                        right:
                                          type: identifier
                                          fields:
                                            text: "n"
                                          children: []
                                          pos: 19153
                                          length: 1
                                      children: []
                                      pos: 19131
                                      length: 23
                                  children: []
                                  pos: 19130
                                  length: 25
                              children:
                              - type: block
                                fields: {}
                                children:
                                - type: expression_statement
                                  fields:
                                    text: aliasDefinitionsInOrder.add(n);
                                  children: []
                                  pos: 19170
                                  length: 31
                                - type: return_statement
                                  fields:
                                    text: return;
                                  children: []
                                  pos: 19310
                                  length: 7
                                pos: 19156
                                length: 173
                              pos: 19127
                              length: 290
                            pos: 19115
                            length: 312
                          pos: 19069
                          length: 358
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: type
                                      children: []
                                      pos: 19441
                                      length: 4
                                    right:
                                      type: field_access
                                      fields:
                                        text: Token.RETURN
                                      children: []
                                      pos: 19449
                                      length: 12
                                  children: []
                                  pos: 19441
                                  length: 20
                              children: []
                              pos: 19440
                              length: 22
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: report(t, n, GOOG_SCOPE_USES_RETURN);
                              children: []
                              pos: 19475
                              length: 37
                            pos: 19463
                            length: 59
                          pos: 19437
                          length: 267
                        pos: 19059
                        length: 653
                      pos: 19031
                      length: 681
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: greater_or_equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: t.getScopeDepth()
                                  children: []
                                  pos: 19789
                                  length: 17
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '2'
                                  children: []
                                  pos: 19810
                                  length: 1
                              children: []
                              pos: 19789
                              length: 22
                          children: []
                          pos: 19788
                          length: 24
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: aliasVar
                                      children: []
                                      pos: 19877
                                      length: 8
                                    right:
                                      type: null_literal
                                      fields: {}
                                      children: []
                                      pos: 19889
                                      length: 4
                                  children: []
                                  pos: 19877
                                  length: 16
                              children: []
                              pos: 19876
                              length: 18
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: aliasUsages.add(new AliasedNode(aliasVar, n));
                              children: []
                              pos: 20311
                              length: 46
                            pos: 19895
                            length: 472
                          pos: 19873
                          length: 494
                        - type: local_variable_declaration
                          fields:
                            text: JSDocInfo info = n.getJSDocInfo();
                          children: []
                          pos: 20491
                          length: 34
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: info
                                      children: []
                                      pos: 20538
                                      length: 4
                                    right:
                                      type: null_literal
                                      fields: {}
                                      children: []
                                      pos: 20546
                                      length: 4
                                  children: []
                                  pos: 20538
                                  length: 12
                              children: []
                              pos: 20537
                              length: 14
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: enhanced_for_statement
                              fields:
                                text: |-
                                  for (Node node : info.getTypeNodes()) {
                                              fixTypeNode(node);
                                            }
                              children: []
                              pos: 20564
                              length: 82
                            pos: 20552
                            length: 104
                          pos: 20534
                          length: 122
                        pos: 19813
                        length: 911
                      pos: 19785
                      length: 939
                    pos: 18505
                    length: 2225
                children: []
                pos: 18435
                length: 2295
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: fixTypeNode
                    children: []
                    pos: 20749
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node typeNode
                      children: []
                      pos: 20761
                      length: 13
                    pos: 20736
                    length: 601
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: typeNode.isString()
                              children: []
                              pos: 20788
                              length: 19
                          children: []
                          pos: 20787
                          length: 21
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: String name = typeNode.getString();
                          children: []
                          pos: 20819
                          length: 35
                        - type: local_variable_declaration
                          fields:
                            text: int endIndex = name.indexOf('.');
                          children: []
                          pos: 20863
                          length: 33
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: endIndex
                                      children: []
                                      pos: 20909
                                      length: 8
                                    right:
                                      type: unary_expression
                                      fields:
                                        text: "-1"
                                      children: []
                                      pos: 20921
                                      length: 2
                                  children: []
                                  pos: 20909
                                  length: 14
                              children: []
                              pos: 20908
                              length: 16
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: endIndex = name.length();
                              children: []
                              pos: 20937
                              length: 25
                            pos: 20925
                            length: 47
                          pos: 20905
                          length: 67
                        - type: local_variable_declaration
                          fields:
                            text: String baseName = name.substring(0, endIndex);
                          children: []
                          pos: 20981
                          length: 46
                        - type: local_variable_declaration
                          fields:
                            text: Var aliasVar = aliases.get(baseName);
                          children: []
                          pos: 21036
                          length: 37
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: identifier
                                      fields:
                                        text: aliasVar
                                      children: []
                                      pos: 21086
                                      length: 8
                                    right:
                                      type: null_literal
                                      fields: {}
                                      children: []
                                      pos: 21098
                                      length: 4
                                  children: []
                                  pos: 21086
                                  length: 16
                              children: []
                              pos: 21085
                              length: 18
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: expression_statement
                              fields:
                                text: aliasUsages.add(new AliasedTypeNode(aliasVar,
                                  typeNode));
                              children: []
                              pos: 21116
                              length: 57
                            pos: 21104
                            length: 79
                          pos: 21082
                          length: 101
                        pos: 20809
                        length: 382
                      pos: 20784
                      length: 407
                    - type: for_statement
                      fields:
                        text: |-
                          for (Node child = typeNode.getFirstChild(); child != null;
                                     child = child.getNext()) {
                                  fixTypeNode(child);
                                }
                      children: []
                      pos: 21199
                      length: 132
                    pos: 20776
                    length: 561
                children: []
                pos: 20736
                length: 601
              pos: 8450
              length: 12891
          children: []
          pos: 8450
          length: 12891
        pos: 2323
        length: 19020
    children: []
    pos: 2323
    length: 19020
  pos: 0
  length: 21344
text_diff: "--- before\n+++ after\n@@ -256,7 +256,6 @@\n     private final Map<String,
  Var> aliases = Maps.newHashMap();\n \n     // Also temporary and cleared for each
  scope.\n-    private final Set<Node> injectedDecls = Sets.newHashSet();\n \n     //
  Suppose you create an alias.\n     // var x = goog.x;\n@@ -314,7 +313,6 @@\n \n
  \      if (t.getScopeDepth() == 2) {\n         renameNamespaceShadows(t);\n-        injectedDecls.clear();\n
  \        aliases.clear();\n         forbiddenLocals.clear();\n         transformation
  = null;\n@@ -431,7 +429,6 @@\n             } else {\n               grandparent.addChildBefore(newDecl,
  varNode);\n             }\n-            injectedDecls.add(newDecl.getFirstChild());\n
  \          }\n \n           // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n@@
  -581,7 +578,7 @@\n         // When we inject declarations, we duplicate jsdoc. Make
  sure\n         // we only process that jsdoc once.\n         JSDocInfo info = n.getJSDocInfo();\n-
  \       if (info != null && !injectedDecls.contains(n)) {\n+        if (info !=
  null) {\n           for (Node node : info.getTypeNodes()) {\n             fixTypeNode(node);\n
  \          }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
              injectedDecls.add(newDecl.getFirstChild());
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        } to for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
              injectedDecls.add(newDecl.getFirstChild());
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        } [12248,15995]
  replace for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
              injectedDecls.add(newDecl.getFirstChild());
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        } by for (Var v : scope.getVarIterable()) {
          Node n = v.getNode();
          Node parent = n.getParent();
          boolean isVar = parent.isVar();
          boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
          if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
            recordAlias(v);
          } else if (v.isBleedingFunction()) {
            // Bleeding functions already get a BAD_PARAMETERS error, so just
            // do nothing.
          } else if (parent.getType() == Token.LP) {
            // Parameters of the scope function also get a BAD_PARAMETERS
            // error.
          } else if (isVar || isFunctionDecl) {
            boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
            Node grandparent = parent.getParent();
            Node value = v.getInitialValue() != null ?
                v.getInitialValue() :
                null;
            Node varNode = null;

            String name = n.getString();
            int nameCount = scopedAliasNames.count(name);
            scopedAliasNames.add(name);
            String globalName =
                "$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));

            compiler.ensureLibraryInjected("base");

            // First, we need to free up the function expression (EXPR)
            // to be used in another expression.
            if (isFunctionDecl) {
              // Replace "function NAME() { ... }" with "var NAME;".
              Node existingName = v.getNameNode();

              // We can't keep the local name on the function expression,
              // because IE is buggy and will leak the name into the global
              // scope. This is covered in more detail here:
              // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
              //
              // This will only cause problems if this is a hoisted, recursive
              // function, and the programmer is using the hoisting.
              Node newName = IR.name("").useSourceInfoFrom(existingName);
              value.replaceChild(existingName, newName);

              varNode = IR.var(existingName).useSourceInfoFrom(existingName);
              grandparent.replaceChild(parent, varNode);
            } else {
              if (value != null) {
                // If this is a VAR, we can just detach the expression and
                // the tree will still be valid.
                value.detachFromParent();
              }
              varNode = parent;
            }

            // Add $jscomp.scope.name = EXPR;
            // Make sure we copy over all the jsdoc and debug info.
            if (value != null || v.getJSDocInfo() != null) {
              Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                  compiler.getCodingConvention(),
                  globalName,
                  value,
                  v.getJSDocInfo())
                  .useSourceInfoIfMissingFromForTree(n);
              NodeUtil.setDebugInformation(
                  newDecl.getFirstChild().getFirstChild(), n, name);

              if (isHoisted) {
                grandparent.addChildToFront(newDecl);
              } else {
                grandparent.addChildBefore(newDecl, varNode);
              }
            }

            // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
            v.getNameNode().addChildToFront(
                NodeUtil.newQualifiedNameNode(
                    compiler.getCodingConvention(), globalName, n, name));

            recordAlias(v);
          } else {
            // Do not other kinds of local symbols, like catch params.
            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
          }
        }

  New cluster:
  MOVE from parenthesized_expression [20687,20731]
  ------------
  ===
  move-tree
  ---
  not_equals [20688,20700]
      identifier: info [20688,20692]
      null_literal [20696,20700]
  to
  parenthesized_expression [20687,20731]
  at 0

  New cluster:
  ===
  delete-node
  ---
  field_declaration: private final Set<Node> injectedDecls = Sets.newHashSet(); [9051,9109]
  ===
  ------------
  ===
  delete-node
  ---
  field_declaration: private final Set<Node> injectedDecls = Sets.newHashSet(); [9051,9109]
  ===

  New cluster:
  ===
  delete-node
  ---
  expression_statement: injectedDecls.clear(); [10828,10850]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: injectedDecls.clear(); [10828,10850]
  ===

  New cluster:
  ===
  delete-node
  ---
  and [20688,20730]
  ===
  ------------
  ===
  delete-node
  ---
  unary_expression: !injectedDecls.contains(n) [20704,20730]
  ===
  ===
  delete-node
  ---
  and [20688,20730]
  ===

...
