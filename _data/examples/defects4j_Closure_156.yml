---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: CollapseProperties
        children: []
        pos: 3087
        length: 18
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNSAFE_NAMESPACE_WARNING =
                    DiagnosticType.warning(
                        "JSC_UNSAFE_NAMESPACE",
                        "incomplete alias created for namespace {0}");
          children: []
          pos: 3149
          length: 175
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType NAMESPACE_REDEFINED_WARNING =
                    DiagnosticType.warning(
                        "JSC_NAMESPACE_REDEFINED",
                        "namespace {0} should not be redefined");
          children: []
          pos: 3328
          length: 176
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(
                    "JSC_UNSAFE_THIS",
                    "dangerous use of 'this' in static method {0}");
          children: []
          pos: 3508
          length: 145
        - type: field_declaration
          fields:
            text: private AbstractCompiler compiler;
          children: []
          pos: 3657
          length: 34
        - type: field_declaration
          fields:
            text: private List<Name> globalNames;
          children: []
          pos: 3726
          length: 31
        - type: field_declaration
          fields:
            text: private Map<String, Name> nameMap;
          children: []
          pos: 3834
          length: 34
        - type: field_declaration
          fields:
            text: private final boolean collapsePropertiesOnExternTypes;
          children: []
          pos: 3872
          length: 54
        - type: field_declaration
          fields:
            text: private final boolean inlineAliases;
          children: []
          pos: 3929
          length: 36
        - type: constructor_declaration
          fields:
            text: |-
              CollapseProperties(AbstractCompiler compiler,
                    boolean collapsePropertiesOnExternTypes, boolean inlineAliases) {
                  this.compiler = compiler;
                  this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;
                  this.inlineAliases = inlineAliases;
                }
          children: []
          pos: 4318
          length: 267
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 4613
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 4621
                length: 12
              pos: 4589
              length: 868
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: GlobalNamespace namespace;
                children: []
                pos: 4652
                length: 26
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: collapsePropertiesOnExternTypes
                        children: []
                        pos: 4687
                        length: 31
                    children: []
                    pos: 4686
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: namespace = new GlobalNamespace(compiler, externs, root);
                    children: []
                    pos: 4728
                    length: 57
                  pos: 4720
                  length: 71
                pos: 4683
                length: 176
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: inlineAliases
                        children: []
                        pos: 4869
                        length: 13
                    children: []
                    pos: 4868
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: inlineAliases(namespace);
                    children: []
                    pos: 4892
                    length: 25
                  pos: 4884
                  length: 39
                pos: 4865
                length: 58
              - type: expression_statement
                fields:
                  text: nameMap = namespace.getNameIndex();
                children: []
                pos: 4928
                length: 35
              - type: expression_statement
                fields:
                  text: globalNames = namespace.getNameForest();
                children: []
                pos: 4968
                length: 40
              - type: expression_statement
                fields:
                  text: checkNamespaces();
                children: []
                pos: 5013
                length: 18
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name n : globalNames) {
                          flattenReferencesToCollapsibleDescendantNames(n, n.name);
                        }
                children: []
                pos: 5037
                length: 98
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name n : globalNames) {
                          collapseDeclarationOfNameAndDescendants(n, n.name);
                        }
                children: []
                pos: 5361
                length: 92
              pos: 4646
              length: 811
          children: []
          pos: 4589
          length: 868
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inlineAliases
              children: []
              pos: 6169
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: GlobalNamespace namespace
                children: []
                pos: 6183
                length: 25
              pos: 6156
              length: 1421
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
                children: []
                pos: 6284
                length: 71
              - type: while_statement
                fields:
                  text: |-
                    while (!workList.isEmpty()) {
                          Name name = workList.pop();

                          // Don't attempt to inline a getter or setter property as a variable.
                          if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
                            continue;
                          }

                          if (name.globalSets == 1 && name.localSets == 0 &&
                              name.aliasingGets > 0) {
                            // {@code name} meets condition (b). Find all of its local aliases
                            // and try to inline them.
                            List<Ref> refs = Lists.newArrayList(name.refs);
                            for (Ref ref : refs) {
                              if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
                                // {@code name} meets condition (c). Try to inline it.
                                if (inlineAliasIfPossible(ref, namespace)) {
                                  name.removeRef(ref);
                                }
                              }
                            }
                          }

                          // Check if {@code name} has any aliases left after the
                          // local-alias-inlining above.
                          if ((name.type == Name.Type.OBJECTLIT ||
                               name.type == Name.Type.FUNCTION) &&
                              name.aliasingGets == 0 && name.props != null) {
                            // All of {@code name}'s children meet condition (a), so they can be
                            // added to the worklist.
                            workList.addAll(name.props);
                          }
                        }
                children: []
                pos: 6360
                length: 1213
              pos: 6210
              length: 1367
          children: []
          pos: 6156
          length: 1421
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inlineAliasIfPossible
              children: []
              pos: 7597
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Ref alias
                children: []
                pos: 7619
                length: 9
              pos: 7581
              length: 2007
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node aliasParent = alias.node.getParent();
                children: []
                pos: 7893
                length: 42
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: aliasParent.getType()
                            children: []
                            pos: 7944
                            length: 21
                          right:
                            type: field_access
                            fields:
                              text: Token.NAME
                            children: []
                            pos: 7969
                            length: 10
                        children: []
                        pos: 7944
                        length: 35
                    children: []
                    pos: 7943
                    length: 37
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Scope scope = alias.scope;
                    children: []
                    pos: 8067
                    length: 26
                  - type: local_variable_declaration
                    fields:
                      text: Var aliasVar = scope.getVar(aliasParent.getString());
                    children: []
                    pos: 8100
                    length: 53
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        ReferenceCollectingCallback collector =
                                  new ReferenceCollectingCallback(compiler,
                                      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
                                      Predicates.<Var>equalTo(aliasVar));
                    children: []
                    pos: 8160
                    length: 204
                  - type: expression_statement
                    fields:
                      text: "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);"
                    children: []
                    pos: 8371
                    length: 64
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        ReferenceCollection aliasRefs =
                                  collector.getReferenceCollection(aliasVar);
                    children: []
                    pos: 8443
                    length: 85
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: aliasRefs.isWellDefined()
                                    children: []
                                    pos: 8539
                                    length: 25
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: aliasRefs.firstReferenceIsAssigningDeclaration()
                                    children: []
                                    pos: 8578
                                    length: 48
                                children: []
                                pos: 8539
                                length: 87
                              right:
                                type: method_invocation
                                fields:
                                  text: aliasRefs.isAssignedOnceInLifetime()
                                children: []
                                pos: 8640
                                length: 36
                            children: []
                            pos: 8539
                            length: 137
                        children: []
                        pos: 8538
                        length: 139
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: int size = aliasRefs.references.size();
                        children: []
                        pos: 8749
                        length: 39
                      - type: local_variable_declaration
                        fields:
                          text: Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size
                            - 1);
                        children: []
                        pos: 8797
                        length: 63
                      - type: for_statement
                        fields:
                          text: |-
                            for (int i = 1; i < size; i++) {
                                      ReferenceCollectingCallback.Reference aliasRef =
                                          aliasRefs.references.get(i);

                                      Node newNode = alias.node.cloneTree();
                                      aliasRef.getParent().replaceChild(aliasRef.getNameNode(), newNode);
                                      newNodes.add(newNode);
                                    }
                        children: []
                        pos: 8869
                        length: 305
                      - type: expression_statement
                        fields:
                          text: aliasParent.replaceChild(alias.node, new Node(Token.NULL));
                        children: []
                        pos: 9232
                        length: 59
                      - type: expression_statement
                        fields:
                          text: compiler.reportCodeChange();
                        children: []
                        pos: 9300
                        length: 28
                      - type: expression_statement
                        fields:
                          text: namespace.scanNewNodes(alias.scope, newNodes);
                        children: []
                        pos: 9484
                        length: 46
                      - type: return_statement
                        fields:
                          text: return true;
                        children: []
                        pos: 9539
                        length: 12
                      pos: 8678
                      length: 881
                    pos: 8535
                    length: 1024
                  pos: 7981
                  length: 1584
                pos: 7940
                length: 1625
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 9571
                length: 13
              pos: 7657
              length: 1931
          children: []
          pos: 7581
          length: 2007
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkNamespaces
              children: []
              pos: 9747
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 9734
              length: 686
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name name : nameMap.values()) {
                          if (name.isNamespace() && name.refs != null &&
                              (name.aliasingGets > 0 || name.localSets + name.globalSets > 1)) {
                            boolean initialized = name.declaration != null;
                            for (Ref ref : name.refs) {
                              if (ref.type == Ref.Type.SET_FROM_GLOBAL ||
                                  ref.type == Ref.Type.SET_FROM_LOCAL) {
                                if (initialized) {
                                  warnAboutNamespaceRedefinition(name, ref);
                                }

                                initialized = true;
                              } else if (ref.type == Ref.Type.ALIASING_GET) {
                                warnAboutNamespaceAliasing(name, ref);
                              }
                            }
                          }
                        }
                children: []
                pos: 9771
                length: 645
              pos: 9765
              length: 655
          children: []
          pos: 9734
          length: 686
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: warnAboutNamespaceAliasing
              children: []
              pos: 10616
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name nameObj
                children: []
                pos: 10643
                length: 12
              pos: 10603
              length: 205
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    compiler.report(
                            JSError.make(ref.sourceName, ref.node,
                                         UNSAFE_NAMESPACE_WARNING, nameObj.fullName()));
                children: []
                pos: 10672
                length: 132
              pos: 10666
              length: 142
          children: []
          pos: 10603
          length: 205
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: warnAboutNamespaceRedefinition
              children: []
              pos: 11009
              length: 30
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name nameObj
                children: []
                pos: 11040
                length: 12
              pos: 10996
              length: 212
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    compiler.report(
                            JSError.make(ref.sourceName, ref.node,
                                         NAMESPACE_REDEFINED_WARNING, nameObj.fullName()));
                children: []
                pos: 11069
                length: 135
              pos: 11063
              length: 145
          children: []
          pos: 10996
          length: 212
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenReferencesToCollapsibleDescendantNames
              children: []
              pos: 11477
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 11530
                length: 6
              pos: 11464
              length: 371
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 11562
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 11573
                            length: 4
                        children: []
                        pos: 11562
                        length: 15
                    children: []
                    pos: 11561
                    length: 17
                children:
                - type: return_statement
                  fields:
                    text: return;
                  children: []
                  pos: 11579
                  length: 7
                pos: 11558
                length: 28
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name p : n.props) {
                          String propAlias = appendPropForAlias(alias, p.name);

                          if (p.canCollapse()) {
                            flattenReferencesTo(p, propAlias);
                          }

                          flattenReferencesToCollapsibleDescendantNames(p, propAlias);
                        }
                children: []
                pos: 11592
                length: 239
              pos: 11552
              length: 283
          children: []
          pos: 11464
          length: 371
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenReferencesTo
              children: []
              pos: 12103
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 12123
                length: 6
              pos: 12090
              length: 1094
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.refs
                            children: []
                            pos: 12155
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 12165
                            length: 4
                        children: []
                        pos: 12155
                        length: 14
                    children: []
                    pos: 12154
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: String originalName = n.fullName();
                    children: []
                    pos: 12179
                    length: 35
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Ref r : n.refs) {
                                Node rParent = r.node.getParent();

                                // There are two cases when we shouldn't flatten a reference:
                                // 1) Object literal keys, because duplicate keys show up as refs.
                                // 2) References inside a complex assign. (a = x.y = 0). These are
                                //    called TWIN references, because they show up twice in the
                                //    reference list. Only collapse the set, not the alias.
                                if (!NodeUtil.isObjectLitKey(r.node, rParent) &&
                                    (r.getTwin() == null || r.isSet())) {
                                  flattenNameRef(alias, r.node, rParent, originalName);
                                }
                              }
                    children: []
                    pos: 12221
                    length: 615
                  pos: 12171
                  length: 671
                pos: 12151
                length: 691
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 13079
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 13090
                            length: 4
                        children: []
                        pos: 13079
                        length: 15
                    children: []
                    pos: 13078
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                flattenPrefixes(alias, p, 1);
                              }
                    children: []
                    pos: 13104
                    length: 70
                  pos: 13096
                  length: 84
                pos: 13075
                length: 105
              pos: 12145
              length: 1039
          children: []
          pos: 12090
          length: 1094
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenPrefixes
              children: []
              pos: 13538
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 13554
                length: 12
              pos: 13525
              length: 894
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String originalName = n.fullName();
                children: []
                pos: 13736
                length: 35
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: field_access
                                    fields:
                                      text: n.declaration
                                    children: []
                                    pos: 13780
                                    length: 13
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 13797
                                    length: 4
                                children: []
                                pos: 13780
                                length: 21
                              right:
                                type: not_equals
                                fields:
                                  left:
                                    type: field_access
                                    fields:
                                      text: n.declaration.node
                                    children: []
                                    pos: 13805
                                    length: 18
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 13827
                                    length: 4
                                children: []
                                pos: 13805
                                length: 26
                            children: []
                            pos: 13780
                            length: 51
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.declaration.node.getType()
                                children: []
                                pos: 13843
                                length: 28
                              right:
                                type: field_access
                                fields:
                                  text: Token.GETPROP
                                children: []
                                pos: 13875
                                length: 13
                            children: []
                            pos: 13843
                            length: 45
                        children: []
                        pos: 13780
                        length: 108
                    children: []
                    pos: 13779
                    length: 110
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: flattenNameRefAtDepth(alias, n.declaration.node, depth,
                        originalName);
                    children: []
                    pos: 13898
                    length: 70
                  pos: 13890
                  length: 84
                pos: 13776
                length: 198
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.refs
                            children: []
                            pos: 13984
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 13994
                            length: 4
                        children: []
                        pos: 13984
                        length: 14
                    children: []
                    pos: 13983
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Ref r : n.refs) {

                                // References inside a complex assign (a = x.y = 0)
                                // have twins. We should only flatten one of the twins.
                                if (r.getTwin() == null || r.isSet()) {
                                  flattenNameRefAtDepth(alias, r.node, depth, originalName);
                                }
                              }
                    children: []
                    pos: 14008
                    length: 282
                  pos: 14000
                  length: 296
                pos: 13980
                length: 316
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 14306
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 14317
                            length: 4
                        children: []
                        pos: 14306
                        length: 15
                    children: []
                    pos: 14305
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                flattenPrefixes(alias, p, depth + 1);
                              }
                    children: []
                    pos: 14331
                    length: 78
                  pos: 14323
                  length: 92
                pos: 14302
                length: 113
              pos: 13587
              length: 832
          children: []
          pos: 13525
          length: 894
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenNameRefAtDepth
              children: []
              pos: 14813
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 14835
                length: 12
              pos: 14800
              length: 763
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int nType = n.getType();
                children: []
                pos: 15122
                length: 24
              - type: local_variable_declaration
                fields:
                  text: boolean isQName = nType == Token.NAME || nType == Token.GETPROP;
                children: []
                pos: 15151
                length: 64
              - type: local_variable_declaration
                fields:
                  text: boolean isObjKey = NodeUtil.isObjectLitKey(n, n.getParent());
                children: []
                pos: 15220
                length: 61
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(isObjKey || isQName);
                children: []
                pos: 15286
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isQName
                        children: []
                        pos: 15341
                        length: 7
                    children: []
                    pos: 15340
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (int i = 1; i < depth && n.hasChildren(); i++) {
                                n = n.getFirstChild();
                              }
                    children: []
                    pos: 15358
                    length: 91
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: n.hasChildren()
                            children: []
                            pos: 15460
                            length: 15
                        children: []
                        pos: 15459
                        length: 17
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: flattenNameRef(alias, n.getFirstChild(), n, originalName);
                        children: []
                        pos: 15487
                        length: 58
                      pos: 15477
                      length: 76
                    pos: 15456
                    length: 97
                  pos: 15350
                  length: 209
                pos: 15337
                length: 222
              pos: 14895
              length: 668
          children: []
          pos: 14800
          length: 763
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenNameRef
              children: []
              pos: 15880
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 15895
                length: 12
              pos: 15867
              length: 553
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node ref = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, n, originalName);
                children: []
                pos: 16110
                length: 93
              - type: expression_statement
                fields:
                  text: NodeUtil.copyNameAnnotations(n.getLastChild(), ref);
                children: []
                pos: 16208
                length: 52
              - type: local_variable_declaration
                fields:
                  text: JSType type = n.getJSType();
                children: []
                pos: 16265
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 16302
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 16310
                            length: 4
                        children: []
                        pos: 16302
                        length: 12
                    children: []
                    pos: 16301
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ref.setJSType(type);
                    children: []
                    pos: 16324
                    length: 20
                  pos: 16316
                  length: 34
                pos: 16298
                length: 52
              - type: expression_statement
                fields:
                  text: parent.replaceChild(n, ref);
                children: []
                pos: 16355
                length: 28
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 16388
                length: 28
              pos: 15957
              length: 463
          children: []
          pos: 15867
          length: 553
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: collapseDeclarationOfNameAndDescendants
              children: []
              pos: 16727
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 16767
                length: 6
              pos: 16714
              length: 949
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();
                children: []
                pos: 16795
                length: 69
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.canCollapse()
                        children: []
                        pos: 16949
                        length: 15
                    children: []
                    pos: 16948
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);
                    children: []
                    pos: 16974
                    length: 67
                  pos: 16966
                  length: 81
                pos: 16945
                length: 102
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 17057
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 17068
                            length: 4
                        children: []
                        pos: 17057
                        length: 15
                    children: []
                    pos: 17056
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                // Recurse first so that saved node ancestries are intact when needed.
                                collapseDeclarationOfNameAndDescendants(
                                    p, appendPropForAlias(alias, p.name));

                                if (!p.inExterns && canCollapseChildNames && p.declaration != null &&
                                    p.declaration.node != null &&
                                    p.declaration.node.getParent() != null &&
                                    p.declaration.node.getParent().getType() == Token.ASSIGN) {
                                  updateSimpleDeclaration(
                                      appendPropForAlias(alias, p.name), p, p.declaration);
                                }
                              }
                    children: []
                    pos: 17082
                    length: 571
                  pos: 17074
                  length: 585
                pos: 17053
                length: 606
              pos: 16789
              length: 874
          children: []
          pos: 16714
          length: 949
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateSimpleDeclaration
              children: []
              pos: 18195
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 18219
                length: 12
              pos: 18182
              length: 2076
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getNext();
                children: []
                pos: 18262
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node parent = ref.node.getParent();
                children: []
                pos: 18300
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node gramps = parent.getParent();
                children: []
                pos: 18340
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node greatGramps = gramps.getParent();
                children: []
                pos: 18378
                length: 38
              - type: local_variable_declaration
                fields:
                  text: Node greatGreatGramps = greatGramps.getParent();
                children: []
                pos: 18421
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: rvalue
                                children: []
                                pos: 18479
                                length: 6
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 18489
                                length: 4
                            children: []
                            pos: 18479
                            length: 14
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: rvalue.getType()
                                children: []
                                pos: 18497
                                length: 16
                              right:
                                type: field_access
                                fields:
                                  text: Token.FUNCTION
                                children: []
                                pos: 18517
                                length: 14
                            children: []
                            pos: 18497
                            length: 34
                        children: []
                        pos: 18479
                        length: 52
                    children: []
                    pos: 18478
                    length: 54
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: checkForHosedThisReferences(rvalue, refName.docInfo, refName);
                    children: []
                    pos: 18541
                    length: 62
                  pos: 18533
                  length: 76
                pos: 18475
                length: 134
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node nameNode = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, gramps.getFirstChild(),
                            refName.fullName());
                children: []
                pos: 18649
                length: 133
              - type: expression_statement
                fields:
                  text: NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);
                children: []
                pos: 18787
                length: 64
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: gramps.getType()
                            children: []
                            pos: 18861
                            length: 16
                          right:
                            type: field_access
                            fields:
                              text: Token.EXPR_RESULT
                            children: []
                            pos: 18881
                            length: 17
                        children: []
                        pos: 18861
                        length: 37
                    children: []
                    pos: 18860
                    length: 39
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: parent.removeChild(rvalue);
                    children: []
                    pos: 19254
                    length: 27
                  - type: expression_statement
                    fields:
                      text: nameNode.addChildToFront(rvalue);
                    children: []
                    pos: 19288
                    length: 33
                  - type: local_variable_declaration
                    fields:
                      text: Node varNode = new Node(Token.VAR, nameNode);
                    children: []
                    pos: 19329
                    length: 45
                  - type: expression_statement
                    fields:
                      text: greatGramps.replaceChild(gramps, varNode);
                    children: []
                    pos: 19381
                    length: 42
                  pos: 18900
                  length: 529
                pos: 18857
                length: 1363
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 20226
                length: 28
              pos: 18256
              length: 2002
          children: []
          pos: 18182
          length: 2076
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclaration
              children: []
              pos: 21299
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 21340
                length: 6
              pos: 21286
              length: 856
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.declaration
                            children: []
                            pos: 21403
                            length: 13
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 21420
                            length: 4
                        children: []
                        pos: 21403
                        length: 21
                    children: []
                    pos: 21402
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 21536
                    length: 7
                  pos: 21426
                  length: 123
                pos: 21399
                length: 150
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: n.declaration.getTwin()
                            children: []
                            pos: 21559
                            length: 23
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 21586
                            length: 4
                        children: []
                        pos: 21559
                        length: 31
                    children: []
                    pos: 21558
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 21689
                    length: 7
                  pos: 21592
                  length: 110
                pos: 21555
                length: 147
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.declaration.node.getParent().getType()
                        children: []
                        pos: 21716
                        length: 40
                    children: []
                    pos: 21715
                    length: 42
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.ASSIGN:
                                updateObjLitOrFunctionDeclarationAtAssignNode(
                                    n, alias, canCollapseChildNames);
                                break;
                              case Token.VAR:
                                updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
                                break;
                              case Token.FUNCTION:
                                updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
                                break;
                            }
                    children: []
                    pos: 21758
                    length: 380
                children: []
                pos: 21708
                length: 430
              pos: 21393
              length: 749
          children: []
          pos: 21286
          length: 856
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclarationAtAssignNode
              children: []
              pos: 22496
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 22549
                length: 6
              pos: 22483
              length: 2024
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.declaration;
                children: []
                pos: 22811
                length: 24
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getNext();
                children: []
                pos: 22840
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node varNode = new Node(Token.VAR);
                children: []
                pos: 22878
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node varParent = ref.node.getAncestor(3);
                children: []
                pos: 22918
                length: 41
              - type: local_variable_declaration
                fields:
                  text: Node gramps = ref.node.getAncestor(2);
                children: []
                pos: 22964
                length: 38
              - type: local_variable_declaration
                fields:
                  text: boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;
                children: []
                pos: 23007
                length: 55
              - type: local_variable_declaration
                fields:
                  text: boolean insertedVarNode = false;
                children: []
                pos: 23067
                length: 32
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 23109
                            length: 8
                          right:
                            type: method_invocation
                            fields:
                              text: n.canEliminate()
                            children: []
                            pos: 23121
                            length: 16
                        children: []
                        pos: 23109
                        length: 28
                    children: []
                    pos: 23108
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: varParent.replaceChild(gramps, varNode);
                    children: []
                    pos: 23197
                    length: 40
                  - type: expression_statement
                    fields:
                      text: ref.node = null;
                    children: []
                    pos: 23244
                    length: 16
                  - type: expression_statement
                    fields:
                      text: insertedVarNode = true;
                    children: []
                    pos: 23267
                    length: 23
                  pos: 23139
                  length: 158
                pos: 23105
                length: 971
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: canCollapseChildNames
                        children: []
                        pos: 24086
                        length: 21
                    children: []
                    pos: 24085
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 24121
                            length: 8
                        children: []
                        pos: 24120
                        length: 10
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            declareVarsForObjLitValues(
                                        n, alias, rvalue,
                                        varNode, varParent.getChildBefore(varNode), varParent);
                        children: []
                        pos: 24141
                        length: 125
                      pos: 24131
                      length: 143
                    pos: 24117
                    length: 157
                  - type: expression_statement
                    fields:
                      text: addStubsForUndeclaredProperties(n, alias, varParent, varNode);
                    children: []
                    pos: 24282
                    length: 62
                  pos: 24109
                  length: 241
                pos: 24082
                length: 268
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: insertedVarNode
                        children: []
                        pos: 24360
                        length: 15
                    children: []
                    pos: 24359
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!varNode.hasChildren()"
                            children: []
                            pos: 24389
                            length: 22
                        children: []
                        pos: 24388
                        length: 24
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: varParent.removeChild(varNode);
                        children: []
                        pos: 24423
                        length: 31
                      pos: 24413
                      length: 49
                    pos: 24385
                    length: 77
                  - type: expression_statement
                    fields:
                      text: compiler.reportCodeChange();
                    children: []
                    pos: 24469
                    length: 28
                  pos: 24377
                  length: 126
                pos: 24356
                length: 147
              pos: 22602
              length: 1905
          children: []
          pos: 22483
          length: 2024
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkForHosedThisReferences
              children: []
              pos: 24672
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node function
                children: []
                pos: 24700
                length: 13
              pos: 24659
              length: 772
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: docInfo
                                children: []
                                pos: 24904
                                length: 7
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 24915
                                length: 4
                            children: []
                            pos: 24904
                            length: 15
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: unary_expression
                                    fields:
                                      text: "!docInfo.isConstructor()"
                                    children: []
                                    pos: 24932
                                    length: 24
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!docInfo.hasThisType()"
                                    children: []
                                    pos: 24960
                                    length: 22
                                children: []
                                pos: 24932
                                length: 50
                            children: []
                            pos: 24931
                            length: 52
                        children: []
                        pos: 24904
                        length: 79
                    children: []
                    pos: 24903
                    length: 81
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        NodeTraversal.traverse(compiler, function.getLastChild(),
                                  new NodeTraversal.AbstractShallowCallback() {
                                    public void visit(NodeTraversal t, Node n, Node parent) {
                                      if (n.getType() == Token.THIS) {
                                        compiler.report(
                                            JSError.make(name.declaration.sourceName, n,
                                                UNSAFE_THIS, name.fullName()));
                                      }
                                    }
                                  });
                    children: []
                    pos: 24993
                    length: 428
                  pos: 24985
                  length: 442
                pos: 24900
                length: 527
              pos: 24757
              length: 674
          children: []
          pos: 24659
          length: 772
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclarationAtVarNode
              children: []
              pos: 25701
              length: 42
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 25751
                length: 6
              pos: 25688
              length: 1054
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!canCollapseChildNames"
                        children: []
                        pos: 25800
                        length: 22
                    children: []
                    pos: 25799
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 25832
                    length: 7
                  pos: 25824
                  length: 21
                pos: 25796
                length: 49
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.declaration;
                children: []
                pos: 25851
                length: 24
              - type: local_variable_declaration
                fields:
                  text: String name = ref.node.getString();
                children: []
                pos: 25880
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getFirstChild();
                children: []
                pos: 25920
                length: 39
              - type: local_variable_declaration
                fields:
                  text: Node varNode = ref.node.getParent();
                children: []
                pos: 25964
                length: 36
              - type: local_variable_declaration
                fields:
                  text: Node gramps = varNode.getParent();
                children: []
                pos: 26005
                length: 34
              - type: local_variable_declaration
                fields:
                  text: boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;
                children: []
                pos: 26045
                length: 55
              - type: local_variable_declaration
                fields:
                  text: int numChanges = 0;
                children: []
                pos: 26105
                length: 19
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isObjLit
                        children: []
                        pos: 26134
                        length: 8
                    children: []
                    pos: 26133
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        numChanges += declareVarsForObjLitValues(
                                  n, name, rvalue, varNode, gramps.getChildBefore(varNode),
                                  gramps);
                    children: []
                    pos: 26152
                    length: 128
                  pos: 26144
                  length: 142
                pos: 26130
                length: 156
              - type: expression_statement
                fields:
                  text: numChanges += addStubsForUndeclaredProperties(n, name, gramps,
                    varNode);
                children: []
                pos: 26292
                length: 72
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 26374
                            length: 8
                          right:
                            type: method_invocation
                            fields:
                              text: n.canEliminate()
                            children: []
                            pos: 26386
                            length: 16
                        children: []
                        pos: 26374
                        length: 28
                    children: []
                    pos: 26373
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: varNode.removeChild(ref.node);
                    children: []
                    pos: 26412
                    length: 30
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!varNode.hasChildren()"
                            children: []
                            pos: 26453
                            length: 22
                        children: []
                        pos: 26452
                        length: 24
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: gramps.removeChild(varNode);
                        children: []
                        pos: 26487
                        length: 28
                      pos: 26477
                      length: 46
                    pos: 26449
                    length: 74
                  - type: expression_statement
                    fields:
                      text: numChanges++;
                    children: []
                    pos: 26530
                    length: 13
                  - type: expression_statement
                    fields:
                      text: ref.node = null;
                    children: []
                    pos: 26648
                    length: 16
                  pos: 26404
                  length: 266
                pos: 26370
                length: 300
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: numChanges
                            children: []
                            pos: 26680
                            length: 10
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 26693
                            length: 1
                        children: []
                        pos: 26680
                        length: 14
                    children: []
                    pos: 26679
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: compiler.reportCodeChange();
                    children: []
                    pos: 26704
                    length: 28
                  pos: 26696
                  length: 42
                pos: 26676
                length: 62
              pos: 25790
              length: 952
          children: []
          pos: 25688
          length: 1054
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateFunctionDeclarationAtFunctionNode
              children: []
              pos: 27017
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 27064
                length: 6
              pos: 27004
              length: 334
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!canCollapseChildNames"
                        children: []
                        pos: 27113
                        length: 22
                    children: []
                    pos: 27112
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 27145
                    length: 7
                  pos: 27137
                  length: 21
                pos: 27109
                length: 49
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.declaration;
                children: []
                pos: 27164
                length: 24
              - type: local_variable_declaration
                fields:
                  text: String fnName = ref.node.getString();
                children: []
                pos: 27193
                length: 37
              - type: expression_statement
                fields:
                  text: |-
                    addStubsForUndeclaredProperties(
                            n, fnName, ref.node.getAncestor(2), ref.node.getParent());
                children: []
                pos: 27235
                length: 99
              pos: 27103
              length: 235
          children: []
          pos: 27004
          length: 334
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: declareVarsForObjLitValues
              children: []
              pos: 27944
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name objlitName
                children: []
                pos: 27978
                length: 15
              pos: 27932
              length: 3105
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int numVars = 0;
                children: []
                pos: 28085
                length: 16
              - type: local_variable_declaration
                fields:
                  text: int arbitraryNameCounter = 0;
                children: []
                pos: 28106
                length: 29
              - type: local_variable_declaration
                fields:
                  text: boolean discardKeys = !objlitName.shouldKeepKeys();
                children: []
                pos: 28140
                length: 51
              - type: for_statement
                fields:
                  text: |-
                    for (Node key = objlit.getFirstChild(), nextKey; key != null;
                             key = nextKey) {
                          Node value = key.getFirstChild();
                          nextKey = key.getNext();

                          // A get or a set can not be rewritten as a VAR.
                          if (key.getType() == Token.GET || key.getType() == Token.SET) {
                            continue;
                          }

                          // We generate arbitrary names for keys that aren't valid JavaScript
                          // identifiers, since those keys are never referenced. (If they were,
                          // this object literal's child names wouldn't be collapsible.) The only
                          // reason that we don't eliminate them entirely is the off chance that
                          // their values are expressions that have side effects.
                          boolean isJsIdentifier = key.getType() != Token.NUMBER &&
                                                   TokenStream.isJSIdentifier(key.getString());
                          String propName = isJsIdentifier ?
                              key.getString() : String.valueOf(++arbitraryNameCounter);
                          String propAlias = appendPropForAlias(alias, propName);
                          String qName = objlitName.fullName() + '.' + propName;

                          Node refNode = null;
                          if (discardKeys) {
                            objlit.removeChild(key);
                            value.detachFromParent();
                          } else {
                            // Substitute a reference for the value.
                            refNode = Node.newString(Token.NAME, propAlias);
                            if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
                              refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                            }

                            key.replaceChild(value, refNode);
                          }

                          // Declare the collapsed name as a variable with the original value.
                          Node nameNode = Node.newString(Token.NAME, propAlias);
                          nameNode.addChildToFront(value);
                          if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
                            nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                          }
                          Node newVar = new Node(Token.VAR, nameNode)
                              .copyInformationFromForTree(key);
                          if (nameToAddAfter != null) {
                            varParent.addChildAfter(newVar, nameToAddAfter);
                          } else {
                            varParent.addChildBefore(newVar, varNode);
                          }
                          compiler.reportCodeChange();
                          nameToAddAfter = newVar;

                          if (isJsIdentifier) {
                            // Update the global name's node ancestry if it hasn't already been
                            // done. (Duplicate keys in an object literal can bring us here twice
                            // for the same global name.)
                            Name p = nameMap.get(qName);
                            if (p != null) {
                              if (!discardKeys) {
                                Ref newAlias =
                                    p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET);
                                newAlias.node = refNode;
                                p.addRef(newAlias);
                              }

                              p.declaration.node = nameNode;

                              if (value.getType() == Token.FUNCTION) {
                                checkForHosedThisReferences(value, value.getJSDocInfo(), p);
                              }
                            }
                          }

                          numVars++;
                        }
                children: []
                pos: 28197
                length: 2816
              - type: return_statement
                fields:
                  text: return numVars;
                children: []
                pos: 31018
                length: 15
              pos: 28079
              length: 2958
          children: []
          pos: 27932
          length: 3105
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: addStubsForUndeclaredProperties
              children: []
              pos: 31627
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 31666
                length: 6
              pos: 31615
              length: 1157
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(n.canCollapseUnannotatedChildNames());
                children: []
                pos: 31722
                length: 63
              - type: expression_statement
                fields:
                  text: Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
                children: []
                pos: 31790
                length: 63
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(addAfter);
                children: []
                pos: 31858
                length: 37
              - type: local_variable_declaration
                fields:
                  text: int numStubs = 0;
                children: []
                pos: 31900
                length: 17
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 31926
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 31937
                            length: 4
                        children: []
                        pos: 31926
                        length: 15
                    children: []
                    pos: 31925
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                if (p.needsToBeStubbed()) {
                                  String propAlias = appendPropForAlias(alias, p.name);
                                  Node nameNode = Node.newString(Token.NAME, propAlias);
                                  Node newVar = new Node(Token.VAR, nameNode)
                                      .copyInformationFromForTree(addAfter);
                                  parent.addChildAfter(newVar, addAfter);
                                  addAfter = newVar;
                                  numStubs++;
                                  compiler.reportCodeChange();

                                  // Determine if this is a constant var by checking the first
                                  // reference to it. Don't check the declaration, as it might be null.
                                  if (p.refs.get(0).node.getLastChild().getBooleanProp(
                                        Node.IS_CONSTANT_NAME)) {
                                    nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                                  }
                                }
                              }
                    children: []
                    pos: 31951
                    length: 790
                  pos: 31943
                  length: 804
                pos: 31922
                length: 825
              - type: return_statement
                fields:
                  text: return numStubs;
                children: []
                pos: 32752
                length: 16
              pos: 31716
              length: 1056
          children: []
          pos: 31615
          length: 1157
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: appendPropForAlias
              children: []
              pos: 32798
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String root
                children: []
                pos: 32817
                length: 11
              pos: 32776
              length: 359
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: prop.indexOf('$')
                            children: []
                            pos: 32853
                            length: 17
                          right:
                            type: unary_expression
                            fields:
                              text: "-1"
                            children: []
                            pos: 32874
                            length: 2
                        children: []
                        pos: 32853
                        length: 23
                    children: []
                    pos: 32852
                    length: 25
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: prop = prop.replaceAll("\\$", "\\$0");
                    children: []
                    pos: 33057
                    length: 38
                  pos: 32878
                  length: 223
                pos: 32849
                length: 252
              - type: return_statement
                fields:
                  text: return root + '$' + prop;
                children: []
                pos: 33106
                length: 25
              pos: 32843
              length: 292
          children: []
          pos: 32776
          length: 359
        pos: 3081
        length: 30056
    children: []
    pos: 3081
    length: 30056
  pos: 0
  length: 33138
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: CollapseProperties
        children: []
        pos: 3087
        length: 18
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNSAFE_NAMESPACE_WARNING =
                    DiagnosticType.warning(
                        "JSC_UNSAFE_NAMESPACE",
                        "incomplete alias created for namespace {0}");
          children: []
          pos: 3149
          length: 175
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType NAMESPACE_REDEFINED_WARNING =
                    DiagnosticType.warning(
                        "JSC_NAMESPACE_REDEFINED",
                        "namespace {0} should not be redefined");
          children: []
          pos: 3328
          length: 176
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(
                    "JSC_UNSAFE_THIS",
                    "dangerous use of 'this' in static method {0}");
          children: []
          pos: 3508
          length: 145
        - type: field_declaration
          fields:
            text: private AbstractCompiler compiler;
          children: []
          pos: 3657
          length: 34
        - type: field_declaration
          fields:
            text: private List<Name> globalNames;
          children: []
          pos: 3726
          length: 31
        - type: field_declaration
          fields:
            text: private Map<String, Name> nameMap;
          children: []
          pos: 3834
          length: 34
        - type: field_declaration
          fields:
            text: private final boolean collapsePropertiesOnExternTypes;
          children: []
          pos: 3872
          length: 54
        - type: field_declaration
          fields:
            text: private final boolean inlineAliases;
          children: []
          pos: 3929
          length: 36
        - type: constructor_declaration
          fields:
            text: |-
              CollapseProperties(AbstractCompiler compiler,
                    boolean collapsePropertiesOnExternTypes, boolean inlineAliases) {
                  this.compiler = compiler;
                  this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;
                  this.inlineAliases = inlineAliases;
                }
          children: []
          pos: 4318
          length: 267
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 4613
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 4621
                length: 12
              pos: 4589
              length: 868
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: GlobalNamespace namespace;
                children: []
                pos: 4652
                length: 26
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: collapsePropertiesOnExternTypes
                        children: []
                        pos: 4687
                        length: 31
                    children: []
                    pos: 4686
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: namespace = new GlobalNamespace(compiler, externs, root);
                    children: []
                    pos: 4728
                    length: 57
                  pos: 4720
                  length: 71
                pos: 4683
                length: 176
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: inlineAliases
                        children: []
                        pos: 4869
                        length: 13
                    children: []
                    pos: 4868
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: inlineAliases(namespace);
                    children: []
                    pos: 4892
                    length: 25
                  pos: 4884
                  length: 39
                pos: 4865
                length: 58
              - type: expression_statement
                fields:
                  text: nameMap = namespace.getNameIndex();
                children: []
                pos: 4928
                length: 35
              - type: expression_statement
                fields:
                  text: globalNames = namespace.getNameForest();
                children: []
                pos: 4968
                length: 40
              - type: expression_statement
                fields:
                  text: checkNamespaces();
                children: []
                pos: 5013
                length: 18
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name n : globalNames) {
                          flattenReferencesToCollapsibleDescendantNames(n, n.name);
                        }
                children: []
                pos: 5037
                length: 98
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name n : globalNames) {
                          collapseDeclarationOfNameAndDescendants(n, n.name);
                        }
                children: []
                pos: 5361
                length: 92
              pos: 4646
              length: 811
          children: []
          pos: 4589
          length: 868
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inlineAliases
              children: []
              pos: 6169
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: GlobalNamespace namespace
                children: []
                pos: 6183
                length: 25
              pos: 6156
              length: 1421
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
                children: []
                pos: 6284
                length: 71
              - type: while_statement
                fields:
                  text: |-
                    while (!workList.isEmpty()) {
                          Name name = workList.pop();

                          // Don't attempt to inline a getter or setter property as a variable.
                          if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
                            continue;
                          }

                          if (name.globalSets == 1 && name.localSets == 0 &&
                              name.aliasingGets > 0) {
                            // {@code name} meets condition (b). Find all of its local aliases
                            // and try to inline them.
                            List<Ref> refs = Lists.newArrayList(name.refs);
                            for (Ref ref : refs) {
                              if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
                                // {@code name} meets condition (c). Try to inline it.
                                if (inlineAliasIfPossible(ref, namespace)) {
                                  name.removeRef(ref);
                                }
                              }
                            }
                          }

                          // Check if {@code name} has any aliases left after the
                          // local-alias-inlining above.
                          if ((name.type == Name.Type.OBJECTLIT ||
                               name.type == Name.Type.FUNCTION) &&
                              name.aliasingGets == 0 && name.props != null) {
                            // All of {@code name}'s children meet condition (a), so they can be
                            // added to the worklist.
                            workList.addAll(name.props);
                          }
                        }
                children: []
                pos: 6360
                length: 1213
              pos: 6210
              length: 1367
          children: []
          pos: 6156
          length: 1421
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inlineAliasIfPossible
              children: []
              pos: 7597
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Ref alias
                children: []
                pos: 7619
                length: 9
              pos: 7581
              length: 2007
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node aliasParent = alias.node.getParent();
                children: []
                pos: 7893
                length: 42
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: aliasParent.getType()
                            children: []
                            pos: 7944
                            length: 21
                          right:
                            type: field_access
                            fields:
                              text: Token.NAME
                            children: []
                            pos: 7969
                            length: 10
                        children: []
                        pos: 7944
                        length: 35
                    children: []
                    pos: 7943
                    length: 37
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Scope scope = alias.scope;
                    children: []
                    pos: 8067
                    length: 26
                  - type: local_variable_declaration
                    fields:
                      text: Var aliasVar = scope.getVar(aliasParent.getString());
                    children: []
                    pos: 8100
                    length: 53
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        ReferenceCollectingCallback collector =
                                  new ReferenceCollectingCallback(compiler,
                                      ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
                                      Predicates.<Var>equalTo(aliasVar));
                    children: []
                    pos: 8160
                    length: 204
                  - type: expression_statement
                    fields:
                      text: "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);"
                    children: []
                    pos: 8371
                    length: 64
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        ReferenceCollection aliasRefs =
                                  collector.getReferenceCollection(aliasVar);
                    children: []
                    pos: 8443
                    length: 85
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: aliasRefs.isWellDefined()
                                    children: []
                                    pos: 8539
                                    length: 25
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: aliasRefs.firstReferenceIsAssigningDeclaration()
                                    children: []
                                    pos: 8578
                                    length: 48
                                children: []
                                pos: 8539
                                length: 87
                              right:
                                type: method_invocation
                                fields:
                                  text: aliasRefs.isAssignedOnceInLifetime()
                                children: []
                                pos: 8640
                                length: 36
                            children: []
                            pos: 8539
                            length: 137
                        children: []
                        pos: 8538
                        length: 139
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: int size = aliasRefs.references.size();
                        children: []
                        pos: 8749
                        length: 39
                      - type: local_variable_declaration
                        fields:
                          text: Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size
                            - 1);
                        children: []
                        pos: 8797
                        length: 63
                      - type: for_statement
                        fields:
                          text: |-
                            for (int i = 1; i < size; i++) {
                                      ReferenceCollectingCallback.Reference aliasRef =
                                          aliasRefs.references.get(i);

                                      Node newNode = alias.node.cloneTree();
                                      aliasRef.getParent().replaceChild(aliasRef.getNameNode(), newNode);
                                      newNodes.add(newNode);
                                    }
                        children: []
                        pos: 8869
                        length: 305
                      - type: expression_statement
                        fields:
                          text: aliasParent.replaceChild(alias.node, new Node(Token.NULL));
                        children: []
                        pos: 9232
                        length: 59
                      - type: expression_statement
                        fields:
                          text: compiler.reportCodeChange();
                        children: []
                        pos: 9300
                        length: 28
                      - type: expression_statement
                        fields:
                          text: namespace.scanNewNodes(alias.scope, newNodes);
                        children: []
                        pos: 9484
                        length: 46
                      - type: return_statement
                        fields:
                          text: return true;
                        children: []
                        pos: 9539
                        length: 12
                      pos: 8678
                      length: 881
                    pos: 8535
                    length: 1024
                  pos: 7981
                  length: 1584
                pos: 7940
                length: 1625
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 9571
                length: 13
              pos: 7657
              length: 1931
          children: []
          pos: 7581
          length: 2007
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkNamespaces
              children: []
              pos: 9747
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 9734
              length: 686
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name name : nameMap.values()) {
                          if (name.isNamespace() && name.refs != null &&
                              (name.aliasingGets > 0 || name.localSets + name.globalSets > 1)) {
                            boolean initialized = name.declaration != null;
                            for (Ref ref : name.refs) {
                              if (ref.type == Ref.Type.SET_FROM_GLOBAL ||
                                  ref.type == Ref.Type.SET_FROM_LOCAL) {
                                if (initialized) {
                                  warnAboutNamespaceRedefinition(name, ref);
                                }

                                initialized = true;
                              } else if (ref.type == Ref.Type.ALIASING_GET) {
                                warnAboutNamespaceAliasing(name, ref);
                              }
                            }
                          }
                        }
                children: []
                pos: 9771
                length: 645
              pos: 9765
              length: 655
          children: []
          pos: 9734
          length: 686
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: warnAboutNamespaceAliasing
              children: []
              pos: 10616
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name nameObj
                children: []
                pos: 10643
                length: 12
              pos: 10603
              length: 205
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    compiler.report(
                            JSError.make(ref.sourceName, ref.node,
                                         UNSAFE_NAMESPACE_WARNING, nameObj.fullName()));
                children: []
                pos: 10672
                length: 132
              pos: 10666
              length: 142
          children: []
          pos: 10603
          length: 205
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: warnAboutNamespaceRedefinition
              children: []
              pos: 11009
              length: 30
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name nameObj
                children: []
                pos: 11040
                length: 12
              pos: 10996
              length: 212
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    compiler.report(
                            JSError.make(ref.sourceName, ref.node,
                                         NAMESPACE_REDEFINED_WARNING, nameObj.fullName()));
                children: []
                pos: 11069
                length: 135
              pos: 11063
              length: 145
          children: []
          pos: 10996
          length: 212
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenReferencesToCollapsibleDescendantNames
              children: []
              pos: 11477
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 11530
                length: 6
              pos: 11464
              length: 371
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 11562
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 11573
                            length: 4
                        children: []
                        pos: 11562
                        length: 15
                    children: []
                    pos: 11561
                    length: 17
                children:
                - type: return_statement
                  fields:
                    text: return;
                  children: []
                  pos: 11579
                  length: 7
                pos: 11558
                length: 28
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Name p : n.props) {
                          String propAlias = appendPropForAlias(alias, p.name);

                          if (p.canCollapse()) {
                            flattenReferencesTo(p, propAlias);
                          }

                          flattenReferencesToCollapsibleDescendantNames(p, propAlias);
                        }
                children: []
                pos: 11592
                length: 239
              pos: 11552
              length: 283
          children: []
          pos: 11464
          length: 371
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenReferencesTo
              children: []
              pos: 12103
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 12123
                length: 6
              pos: 12090
              length: 1094
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.refs
                            children: []
                            pos: 12155
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 12165
                            length: 4
                        children: []
                        pos: 12155
                        length: 14
                    children: []
                    pos: 12154
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: String originalName = n.fullName();
                    children: []
                    pos: 12179
                    length: 35
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Ref r : n.refs) {
                                Node rParent = r.node.getParent();

                                // There are two cases when we shouldn't flatten a reference:
                                // 1) Object literal keys, because duplicate keys show up as refs.
                                // 2) References inside a complex assign. (a = x.y = 0). These are
                                //    called TWIN references, because they show up twice in the
                                //    reference list. Only collapse the set, not the alias.
                                if (!NodeUtil.isObjectLitKey(r.node, rParent) &&
                                    (r.getTwin() == null || r.isSet())) {
                                  flattenNameRef(alias, r.node, rParent, originalName);
                                }
                              }
                    children: []
                    pos: 12221
                    length: 615
                  pos: 12171
                  length: 671
                pos: 12151
                length: 691
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 13079
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 13090
                            length: 4
                        children: []
                        pos: 13079
                        length: 15
                    children: []
                    pos: 13078
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                flattenPrefixes(alias, p, 1);
                              }
                    children: []
                    pos: 13104
                    length: 70
                  pos: 13096
                  length: 84
                pos: 13075
                length: 105
              pos: 12145
              length: 1039
          children: []
          pos: 12090
          length: 1094
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenPrefixes
              children: []
              pos: 13538
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 13554
                length: 12
              pos: 13525
              length: 894
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String originalName = n.fullName();
                children: []
                pos: 13736
                length: 35
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: field_access
                                    fields:
                                      text: n.declaration
                                    children: []
                                    pos: 13780
                                    length: 13
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 13797
                                    length: 4
                                children: []
                                pos: 13780
                                length: 21
                              right:
                                type: not_equals
                                fields:
                                  left:
                                    type: field_access
                                    fields:
                                      text: n.declaration.node
                                    children: []
                                    pos: 13805
                                    length: 18
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 13827
                                    length: 4
                                children: []
                                pos: 13805
                                length: 26
                            children: []
                            pos: 13780
                            length: 51
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.declaration.node.getType()
                                children: []
                                pos: 13843
                                length: 28
                              right:
                                type: field_access
                                fields:
                                  text: Token.GETPROP
                                children: []
                                pos: 13875
                                length: 13
                            children: []
                            pos: 13843
                            length: 45
                        children: []
                        pos: 13780
                        length: 108
                    children: []
                    pos: 13779
                    length: 110
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: flattenNameRefAtDepth(alias, n.declaration.node, depth,
                        originalName);
                    children: []
                    pos: 13898
                    length: 70
                  pos: 13890
                  length: 84
                pos: 13776
                length: 198
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.refs
                            children: []
                            pos: 13984
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 13994
                            length: 4
                        children: []
                        pos: 13984
                        length: 14
                    children: []
                    pos: 13983
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Ref r : n.refs) {

                                // References inside a complex assign (a = x.y = 0)
                                // have twins. We should only flatten one of the twins.
                                if (r.getTwin() == null || r.isSet()) {
                                  flattenNameRefAtDepth(alias, r.node, depth, originalName);
                                }
                              }
                    children: []
                    pos: 14008
                    length: 282
                  pos: 14000
                  length: 296
                pos: 13980
                length: 316
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 14306
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 14317
                            length: 4
                        children: []
                        pos: 14306
                        length: 15
                    children: []
                    pos: 14305
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                flattenPrefixes(alias, p, depth + 1);
                              }
                    children: []
                    pos: 14331
                    length: 78
                  pos: 14323
                  length: 92
                pos: 14302
                length: 113
              pos: 13587
              length: 832
          children: []
          pos: 13525
          length: 894
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenNameRefAtDepth
              children: []
              pos: 14813
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 14835
                length: 12
              pos: 14800
              length: 763
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int nType = n.getType();
                children: []
                pos: 15122
                length: 24
              - type: local_variable_declaration
                fields:
                  text: boolean isQName = nType == Token.NAME || nType == Token.GETPROP;
                children: []
                pos: 15151
                length: 64
              - type: local_variable_declaration
                fields:
                  text: boolean isObjKey = NodeUtil.isObjectLitKey(n, n.getParent());
                children: []
                pos: 15220
                length: 61
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(isObjKey || isQName);
                children: []
                pos: 15286
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isQName
                        children: []
                        pos: 15341
                        length: 7
                    children: []
                    pos: 15340
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (int i = 1; i < depth && n.hasChildren(); i++) {
                                n = n.getFirstChild();
                              }
                    children: []
                    pos: 15358
                    length: 91
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: n.hasChildren()
                            children: []
                            pos: 15460
                            length: 15
                        children: []
                        pos: 15459
                        length: 17
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: flattenNameRef(alias, n.getFirstChild(), n, originalName);
                        children: []
                        pos: 15487
                        length: 58
                      pos: 15477
                      length: 76
                    pos: 15456
                    length: 97
                  pos: 15350
                  length: 209
                pos: 15337
                length: 222
              pos: 14895
              length: 668
          children: []
          pos: 14800
          length: 763
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flattenNameRef
              children: []
              pos: 15880
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 15895
                length: 12
              pos: 15867
              length: 553
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node ref = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, n, originalName);
                children: []
                pos: 16110
                length: 93
              - type: expression_statement
                fields:
                  text: NodeUtil.copyNameAnnotations(n.getLastChild(), ref);
                children: []
                pos: 16208
                length: 52
              - type: local_variable_declaration
                fields:
                  text: JSType type = n.getJSType();
                children: []
                pos: 16265
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 16302
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 16310
                            length: 4
                        children: []
                        pos: 16302
                        length: 12
                    children: []
                    pos: 16301
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ref.setJSType(type);
                    children: []
                    pos: 16324
                    length: 20
                  pos: 16316
                  length: 34
                pos: 16298
                length: 52
              - type: expression_statement
                fields:
                  text: parent.replaceChild(n, ref);
                children: []
                pos: 16355
                length: 28
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 16388
                length: 28
              pos: 15957
              length: 463
          children: []
          pos: 15867
          length: 553
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: collapseDeclarationOfNameAndDescendants
              children: []
              pos: 16727
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 16767
                length: 6
              pos: 16714
              length: 951
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();
                children: []
                pos: 16795
                length: 69
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: n.canCollapse()
                            children: []
                            pos: 16949
                            length: 15
                          right:
                            type: identifier
                            fields:
                              text: canCollapseChildNames
                            children: []
                            pos: 16968
                            length: 21
                        children: []
                        pos: 16949
                        length: 40
                    children: []
                    pos: 16948
                    length: 42
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: updateObjLitOrFunctionDeclaration(n, alias);
                    children: []
                    pos: 16999
                    length: 44
                  pos: 16991
                  length: 58
                pos: 16945
                length: 104
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 17059
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 17070
                            length: 4
                        children: []
                        pos: 17059
                        length: 15
                    children: []
                    pos: 17058
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                // Recurse first so that saved node ancestries are intact when needed.
                                collapseDeclarationOfNameAndDescendants(
                                    p, appendPropForAlias(alias, p.name));

                                if (!p.inExterns && canCollapseChildNames && p.declaration != null &&
                                    p.declaration.node != null &&
                                    p.declaration.node.getParent() != null &&
                                    p.declaration.node.getParent().getType() == Token.ASSIGN) {
                                  updateSimpleDeclaration(
                                      appendPropForAlias(alias, p.name), p, p.declaration);
                                }
                              }
                    children: []
                    pos: 17084
                    length: 571
                  pos: 17076
                  length: 585
                pos: 17055
                length: 606
              pos: 16789
              length: 876
          children: []
          pos: 16714
          length: 951
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateSimpleDeclaration
              children: []
              pos: 18197
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String alias
                children: []
                pos: 18221
                length: 12
              pos: 18184
              length: 2076
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getNext();
                children: []
                pos: 18264
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node parent = ref.node.getParent();
                children: []
                pos: 18302
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node gramps = parent.getParent();
                children: []
                pos: 18342
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node greatGramps = gramps.getParent();
                children: []
                pos: 18380
                length: 38
              - type: local_variable_declaration
                fields:
                  text: Node greatGreatGramps = greatGramps.getParent();
                children: []
                pos: 18423
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: rvalue
                                children: []
                                pos: 18481
                                length: 6
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 18491
                                length: 4
                            children: []
                            pos: 18481
                            length: 14
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: rvalue.getType()
                                children: []
                                pos: 18499
                                length: 16
                              right:
                                type: field_access
                                fields:
                                  text: Token.FUNCTION
                                children: []
                                pos: 18519
                                length: 14
                            children: []
                            pos: 18499
                            length: 34
                        children: []
                        pos: 18481
                        length: 52
                    children: []
                    pos: 18480
                    length: 54
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: checkForHosedThisReferences(rvalue, refName.docInfo, refName);
                    children: []
                    pos: 18543
                    length: 62
                  pos: 18535
                  length: 76
                pos: 18477
                length: 134
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node nameNode = NodeUtil.newName(
                            compiler.getCodingConvention(), alias, gramps.getFirstChild(),
                            refName.fullName());
                children: []
                pos: 18651
                length: 133
              - type: expression_statement
                fields:
                  text: NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);
                children: []
                pos: 18789
                length: 64
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: gramps.getType()
                            children: []
                            pos: 18863
                            length: 16
                          right:
                            type: field_access
                            fields:
                              text: Token.EXPR_RESULT
                            children: []
                            pos: 18883
                            length: 17
                        children: []
                        pos: 18863
                        length: 37
                    children: []
                    pos: 18862
                    length: 39
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: parent.removeChild(rvalue);
                    children: []
                    pos: 19256
                    length: 27
                  - type: expression_statement
                    fields:
                      text: nameNode.addChildToFront(rvalue);
                    children: []
                    pos: 19290
                    length: 33
                  - type: local_variable_declaration
                    fields:
                      text: Node varNode = new Node(Token.VAR, nameNode);
                    children: []
                    pos: 19331
                    length: 45
                  - type: expression_statement
                    fields:
                      text: greatGramps.replaceChild(gramps, varNode);
                    children: []
                    pos: 19383
                    length: 42
                  pos: 18902
                  length: 529
                pos: 18859
                length: 1363
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 20228
                length: 28
              pos: 18258
              length: 2002
          children: []
          pos: 18184
          length: 2076
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclaration
              children: []
              pos: 21301
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 21335
                length: 6
              pos: 21288
              length: 736
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.declaration
                            children: []
                            pos: 21367
                            length: 13
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 21384
                            length: 4
                        children: []
                        pos: 21367
                        length: 21
                    children: []
                    pos: 21366
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 21500
                    length: 7
                  pos: 21390
                  length: 123
                pos: 21363
                length: 150
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: n.declaration.getTwin()
                            children: []
                            pos: 21523
                            length: 23
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 21550
                            length: 4
                        children: []
                        pos: 21523
                        length: 31
                    children: []
                    pos: 21522
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 21653
                    length: 7
                  pos: 21556
                  length: 110
                pos: 21519
                length: 147
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.declaration.node.getParent().getType()
                        children: []
                        pos: 21680
                        length: 40
                    children: []
                    pos: 21679
                    length: 42
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.ASSIGN:
                                updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);
                                break;
                              case Token.VAR:
                                updateObjLitOrFunctionDeclarationAtVarNode(n);
                                break;
                              case Token.FUNCTION:
                                updateFunctionDeclarationAtFunctionNode(n);
                                break;
                            }
                    children: []
                    pos: 21722
                    length: 298
                children: []
                pos: 21672
                length: 348
              pos: 21357
              length: 667
          children: []
          pos: 21288
          length: 736
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclarationAtAssignNode
              children: []
              pos: 22378
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 22431
                length: 6
              pos: 22365
              length: 1950
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.declaration;
                children: []
                pos: 22662
                length: 24
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getNext();
                children: []
                pos: 22691
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node varNode = new Node(Token.VAR);
                children: []
                pos: 22729
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node varParent = ref.node.getAncestor(3);
                children: []
                pos: 22769
                length: 41
              - type: local_variable_declaration
                fields:
                  text: Node gramps = ref.node.getAncestor(2);
                children: []
                pos: 22815
                length: 38
              - type: local_variable_declaration
                fields:
                  text: boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;
                children: []
                pos: 22858
                length: 55
              - type: local_variable_declaration
                fields:
                  text: boolean insertedVarNode = false;
                children: []
                pos: 22918
                length: 32
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 22960
                            length: 8
                          right:
                            type: method_invocation
                            fields:
                              text: n.canEliminate()
                            children: []
                            pos: 22972
                            length: 16
                        children: []
                        pos: 22960
                        length: 28
                    children: []
                    pos: 22959
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: varParent.replaceChild(gramps, varNode);
                    children: []
                    pos: 23048
                    length: 40
                  - type: expression_statement
                    fields:
                      text: ref.node = null;
                    children: []
                    pos: 23095
                    length: 16
                  - type: expression_statement
                    fields:
                      text: insertedVarNode = true;
                    children: []
                    pos: 23118
                    length: 23
                  pos: 22990
                  length: 158
                pos: 22956
                length: 971
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isObjLit
                        children: []
                        pos: 23937
                        length: 8
                    children: []
                    pos: 23936
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        declareVarsForObjLitValues(
                                    n, alias, rvalue,
                                    varNode, varParent.getChildBefore(varNode), varParent);
                    children: []
                    pos: 23957
                    length: 125
                  pos: 23947
                  length: 142
                pos: 23933
                length: 156
              - type: expression_statement
                fields:
                  text: addStubsForUndeclaredProperties(n, alias, varParent, varNode);
                children: []
                pos: 24096
                length: 62
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: insertedVarNode
                        children: []
                        pos: 24168
                        length: 15
                    children: []
                    pos: 24167
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!varNode.hasChildren()"
                            children: []
                            pos: 24197
                            length: 22
                        children: []
                        pos: 24196
                        length: 24
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: varParent.removeChild(varNode);
                        children: []
                        pos: 24231
                        length: 31
                      pos: 24221
                      length: 49
                    pos: 24193
                    length: 77
                  - type: expression_statement
                    fields:
                      text: compiler.reportCodeChange();
                    children: []
                    pos: 24277
                    length: 28
                  pos: 24185
                  length: 126
                pos: 24164
                length: 147
              pos: 22453
              length: 1862
          children: []
          pos: 22365
          length: 1950
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkForHosedThisReferences
              children: []
              pos: 24480
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node function
                children: []
                pos: 24508
                length: 13
              pos: 24467
              length: 772
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: docInfo
                                children: []
                                pos: 24712
                                length: 7
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 24723
                                length: 4
                            children: []
                            pos: 24712
                            length: 15
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: unary_expression
                                    fields:
                                      text: "!docInfo.isConstructor()"
                                    children: []
                                    pos: 24740
                                    length: 24
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!docInfo.hasThisType()"
                                    children: []
                                    pos: 24768
                                    length: 22
                                children: []
                                pos: 24740
                                length: 50
                            children: []
                            pos: 24739
                            length: 52
                        children: []
                        pos: 24712
                        length: 79
                    children: []
                    pos: 24711
                    length: 81
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        NodeTraversal.traverse(compiler, function.getLastChild(),
                                  new NodeTraversal.AbstractShallowCallback() {
                                    public void visit(NodeTraversal t, Node n, Node parent) {
                                      if (n.getType() == Token.THIS) {
                                        compiler.report(
                                            JSError.make(name.declaration.sourceName, n,
                                                UNSAFE_THIS, name.fullName()));
                                      }
                                    }
                                  });
                    children: []
                    pos: 24801
                    length: 428
                  pos: 24793
                  length: 442
                pos: 24708
                length: 527
              pos: 24565
              length: 674
          children: []
          pos: 24467
          length: 772
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateObjLitOrFunctionDeclarationAtVarNode
              children: []
              pos: 25509
              length: 42
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 25552
                length: 6
              pos: 25496
              length: 962
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.declaration;
                children: []
                pos: 25567
                length: 24
              - type: local_variable_declaration
                fields:
                  text: String name = ref.node.getString();
                children: []
                pos: 25596
                length: 35
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = ref.node.getFirstChild();
                children: []
                pos: 25636
                length: 39
              - type: local_variable_declaration
                fields:
                  text: Node varNode = ref.node.getParent();
                children: []
                pos: 25680
                length: 36
              - type: local_variable_declaration
                fields:
                  text: Node gramps = varNode.getParent();
                children: []
                pos: 25721
                length: 34
              - type: local_variable_declaration
                fields:
                  text: boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;
                children: []
                pos: 25761
                length: 55
              - type: local_variable_declaration
                fields:
                  text: int numChanges = 0;
                children: []
                pos: 25821
                length: 19
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isObjLit
                        children: []
                        pos: 25850
                        length: 8
                    children: []
                    pos: 25849
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        numChanges += declareVarsForObjLitValues(
                                  n, name, rvalue, varNode, gramps.getChildBefore(varNode),
                                  gramps);
                    children: []
                    pos: 25868
                    length: 128
                  pos: 25860
                  length: 142
                pos: 25846
                length: 156
              - type: expression_statement
                fields:
                  text: numChanges += addStubsForUndeclaredProperties(n, name, gramps,
                    varNode);
                children: []
                pos: 26008
                length: 72
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isObjLit
                            children: []
                            pos: 26090
                            length: 8
                          right:
                            type: method_invocation
                            fields:
                              text: n.canEliminate()
                            children: []
                            pos: 26102
                            length: 16
                        children: []
                        pos: 26090
                        length: 28
                    children: []
                    pos: 26089
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: varNode.removeChild(ref.node);
                    children: []
                    pos: 26128
                    length: 30
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!varNode.hasChildren()"
                            children: []
                            pos: 26169
                            length: 22
                        children: []
                        pos: 26168
                        length: 24
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: gramps.removeChild(varNode);
                        children: []
                        pos: 26203
                        length: 28
                      pos: 26193
                      length: 46
                    pos: 26165
                    length: 74
                  - type: expression_statement
                    fields:
                      text: numChanges++;
                    children: []
                    pos: 26246
                    length: 13
                  - type: expression_statement
                    fields:
                      text: ref.node = null;
                    children: []
                    pos: 26364
                    length: 16
                  pos: 26120
                  length: 266
                pos: 26086
                length: 300
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: numChanges
                            children: []
                            pos: 26396
                            length: 10
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 26409
                            length: 1
                        children: []
                        pos: 26396
                        length: 14
                    children: []
                    pos: 26395
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: compiler.reportCodeChange();
                    children: []
                    pos: 26420
                    length: 28
                  pos: 26412
                  length: 42
                pos: 26392
                length: 62
              pos: 25560
              length: 898
          children: []
          pos: 25496
          length: 962
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: updateFunctionDeclarationAtFunctionNode
              children: []
              pos: 26733
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 26773
                length: 6
              pos: 26720
              length: 242
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Ref ref = n.declaration;
                children: []
                pos: 26788
                length: 24
              - type: local_variable_declaration
                fields:
                  text: String fnName = ref.node.getString();
                children: []
                pos: 26817
                length: 37
              - type: expression_statement
                fields:
                  text: |-
                    addStubsForUndeclaredProperties(
                            n, fnName, ref.node.getAncestor(2), ref.node.getParent());
                children: []
                pos: 26859
                length: 99
              pos: 26781
              length: 181
          children: []
          pos: 26720
          length: 242
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: declareVarsForObjLitValues
              children: []
              pos: 27568
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name objlitName
                children: []
                pos: 27602
                length: 15
              pos: 27556
              length: 3105
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int numVars = 0;
                children: []
                pos: 27709
                length: 16
              - type: local_variable_declaration
                fields:
                  text: int arbitraryNameCounter = 0;
                children: []
                pos: 27730
                length: 29
              - type: local_variable_declaration
                fields:
                  text: boolean discardKeys = !objlitName.shouldKeepKeys();
                children: []
                pos: 27764
                length: 51
              - type: for_statement
                fields:
                  text: |-
                    for (Node key = objlit.getFirstChild(), nextKey; key != null;
                             key = nextKey) {
                          Node value = key.getFirstChild();
                          nextKey = key.getNext();

                          // A get or a set can not be rewritten as a VAR.
                          if (key.getType() == Token.GET || key.getType() == Token.SET) {
                            continue;
                          }

                          // We generate arbitrary names for keys that aren't valid JavaScript
                          // identifiers, since those keys are never referenced. (If they were,
                          // this object literal's child names wouldn't be collapsible.) The only
                          // reason that we don't eliminate them entirely is the off chance that
                          // their values are expressions that have side effects.
                          boolean isJsIdentifier = key.getType() != Token.NUMBER &&
                                                   TokenStream.isJSIdentifier(key.getString());
                          String propName = isJsIdentifier ?
                              key.getString() : String.valueOf(++arbitraryNameCounter);
                          String propAlias = appendPropForAlias(alias, propName);
                          String qName = objlitName.fullName() + '.' + propName;

                          Node refNode = null;
                          if (discardKeys) {
                            objlit.removeChild(key);
                            value.detachFromParent();
                          } else {
                            // Substitute a reference for the value.
                            refNode = Node.newString(Token.NAME, propAlias);
                            if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
                              refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                            }

                            key.replaceChild(value, refNode);
                          }

                          // Declare the collapsed name as a variable with the original value.
                          Node nameNode = Node.newString(Token.NAME, propAlias);
                          nameNode.addChildToFront(value);
                          if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
                            nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                          }
                          Node newVar = new Node(Token.VAR, nameNode)
                              .copyInformationFromForTree(key);
                          if (nameToAddAfter != null) {
                            varParent.addChildAfter(newVar, nameToAddAfter);
                          } else {
                            varParent.addChildBefore(newVar, varNode);
                          }
                          compiler.reportCodeChange();
                          nameToAddAfter = newVar;

                          if (isJsIdentifier) {
                            // Update the global name's node ancestry if it hasn't already been
                            // done. (Duplicate keys in an object literal can bring us here twice
                            // for the same global name.)
                            Name p = nameMap.get(qName);
                            if (p != null) {
                              if (!discardKeys) {
                                Ref newAlias =
                                    p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET);
                                newAlias.node = refNode;
                                p.addRef(newAlias);
                              }

                              p.declaration.node = nameNode;

                              if (value.getType() == Token.FUNCTION) {
                                checkForHosedThisReferences(value, value.getJSDocInfo(), p);
                              }
                            }
                          }

                          numVars++;
                        }
                children: []
                pos: 27821
                length: 2816
              - type: return_statement
                fields:
                  text: return numVars;
                children: []
                pos: 30642
                length: 15
              pos: 27703
              length: 2958
          children: []
          pos: 27556
          length: 3105
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: addStubsForUndeclaredProperties
              children: []
              pos: 31251
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Name n
                children: []
                pos: 31290
                length: 6
              pos: 31239
              length: 1157
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(n.canCollapseUnannotatedChildNames());
                children: []
                pos: 31346
                length: 63
              - type: expression_statement
                fields:
                  text: Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
                children: []
                pos: 31414
                length: 63
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(addAfter);
                children: []
                pos: 31482
                length: 37
              - type: local_variable_declaration
                fields:
                  text: int numStubs = 0;
                children: []
                pos: 31524
                length: 17
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: n.props
                            children: []
                            pos: 31550
                            length: 7
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 31561
                            length: 4
                        children: []
                        pos: 31550
                        length: 15
                    children: []
                    pos: 31549
                    length: 17
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Name p : n.props) {
                                if (p.needsToBeStubbed()) {
                                  String propAlias = appendPropForAlias(alias, p.name);
                                  Node nameNode = Node.newString(Token.NAME, propAlias);
                                  Node newVar = new Node(Token.VAR, nameNode)
                                      .copyInformationFromForTree(addAfter);
                                  parent.addChildAfter(newVar, addAfter);
                                  addAfter = newVar;
                                  numStubs++;
                                  compiler.reportCodeChange();

                                  // Determine if this is a constant var by checking the first
                                  // reference to it. Don't check the declaration, as it might be null.
                                  if (p.refs.get(0).node.getLastChild().getBooleanProp(
                                        Node.IS_CONSTANT_NAME)) {
                                    nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
                                  }
                                }
                              }
                    children: []
                    pos: 31575
                    length: 790
                  pos: 31567
                  length: 804
                pos: 31546
                length: 825
              - type: return_statement
                fields:
                  text: return numStubs;
                children: []
                pos: 32376
                length: 16
              pos: 31340
              length: 1056
          children: []
          pos: 31239
          length: 1157
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: appendPropForAlias
              children: []
              pos: 32422
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String root
                children: []
                pos: 32441
                length: 11
              pos: 32400
              length: 359
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: prop.indexOf('$')
                            children: []
                            pos: 32477
                            length: 17
                          right:
                            type: unary_expression
                            fields:
                              text: "-1"
                            children: []
                            pos: 32498
                            length: 2
                        children: []
                        pos: 32477
                        length: 23
                    children: []
                    pos: 32476
                    length: 25
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: prop = prop.replaceAll("\\$", "\\$0");
                    children: []
                    pos: 32681
                    length: 38
                  pos: 32502
                  length: 223
                pos: 32473
                length: 252
              - type: return_statement
                fields:
                  text: return root + '$' + prop;
                children: []
                pos: 32730
                length: 25
              pos: 32467
              length: 292
          children: []
          pos: 32400
          length: 359
        pos: 3081
        length: 29680
    children: []
    pos: 3081
    length: 29680
  pos: 0
  length: 32762
text_diff: "--- before\n+++ after\n@@ -452,8 +452,8 @@\n     boolean canCollapseChildNames
  = n.canCollapseUnannotatedChildNames();\n \n     // Handle this name first so that
  nested object literals get unrolled.\n-    if (n.canCollapse()) {\n-      updateObjLitOrFunctionDeclaration(n,
  alias, canCollapseChildNames);\n+    if (n.canCollapse() && canCollapseChildNames)
  {\n+      updateObjLitOrFunctionDeclaration(n, alias);\n     }\n \n     if (n.props
  != null) {\n@@ -571,8 +571,7 @@\n    *     this name. (This is mostly passed for
  convenience; it's equivalent to\n    *     n.canCollapseChildNames()).\n    */\n-
  \ private void updateObjLitOrFunctionDeclaration(\n-      Name n, String alias,
  boolean canCollapseChildNames) {\n+  private void updateObjLitOrFunctionDeclaration(Name
  n, String alias) {\n     if (n.declaration == null) {\n       // Some names do not
  have declarations, because they\n       // are only defined in local scopes.\n@@
  -587,14 +586,13 @@\n \n     switch (n.declaration.node.getParent().getType()) {\n
  \      case Token.ASSIGN:\n-        updateObjLitOrFunctionDeclarationAtAssignNode(\n-
  \           n, alias, canCollapseChildNames);\n+        updateObjLitOrFunctionDeclarationAtAssignNode(n,
  alias);\n         break;\n       case Token.VAR:\n-        updateObjLitOrFunctionDeclarationAtVarNode(n,
  canCollapseChildNames);\n+        updateObjLitOrFunctionDeclarationAtVarNode(n);\n
  \        break;\n       case Token.FUNCTION:\n-        updateFunctionDeclarationAtFunctionNode(n,
  canCollapseChildNames);\n+        updateFunctionDeclarationAtFunctionNode(n);\n
  \        break;\n     }\n   }\n@@ -608,7 +606,7 @@\n    * @param alias The flattened
  name for {@code n} (e.g. \"a\", \"a$b$c\")\n    */\n   private void updateObjLitOrFunctionDeclarationAtAssignNode(\n-
  \     Name n, String alias, boolean canCollapseChildNames) {\n+      Name n, String
  alias) {\n     // NOTE: It's important that we don't add additional nodes\n     //
  (e.g. a var node before the exprstmt) because the exprstmt might be\n     // the
  child of an if statement that's not inside a block).\n@@ -652,15 +650,13 @@\n       insertedVarNode
  = true;\n     }\n \n-    if (canCollapseChildNames) {\n-      if (isObjLit) {\n+
  \   if (isObjLit) {\n         declareVarsForObjLitValues(\n             n, alias,
  rvalue,\n             varNode, varParent.getChildBefore(varNode), varParent);\n-
  \     }\n \n-      addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n
  \    }\n+      addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n
  \n     if (insertedVarNode) {\n       if (!varNode.hasChildren()) {\n@@ -700,11
  +696,7 @@\n    *\n    * @param n An object representing a global name (e.g. \"a\")\n
  \   */\n-  private void updateObjLitOrFunctionDeclarationAtVarNode(\n-      Name
  n, boolean canCollapseChildNames) {\n-    if (!canCollapseChildNames) {\n-      return;\n-
  \   }\n+  private void updateObjLitOrFunctionDeclarationAtVarNode(Name n) {\n \n
  \    Ref ref = n.declaration;\n     String name = ref.node.getString();\n@@ -747,11
  +739,7 @@\n    *\n    * @param n An object representing a global name (e.g. \"a\")\n
  \   */\n-  private void updateFunctionDeclarationAtFunctionNode(\n-      Name n,
  boolean canCollapseChildNames) {\n-    if (!canCollapseChildNames) {\n-      return;\n-
  \   }\n+  private void updateFunctionDeclarationAtFunctionNode(Name n) {\n \n     Ref
  ref = n.declaration;\n     String fnName = ref.node.getString();\n"
tree_diff: |+
  New cluster:
  MOVE from block [22602,24507]
  ------------
  ===
  move-tree
  ---
  if_statement [24117,24274]
      parenthesized_expression [24120,24130]
          identifier: isObjLit [24121,24129]
      block [24131,24274]
          expression_statement: declareVarsForObjLitValues(
              n, alias, rvalue,
              varNode, varParent.getChildBefore(varNode), varParent); [24141,24266]
  to
  block [22602,24507]
  at 8

  New cluster:
  ===
  insert-node
  ---
  expression_statement: addStubsForUndeclaredProperties(n, alias, varParent, varNode); [24096,24158]
  to
  block [22602,24507]
  at 9
  ------------
  ===
  insert-node
  ---
  expression_statement: addStubsForUndeclaredProperties(n, alias, varParent, varNode); [24096,24158]
  to
  block [22602,24507]
  at 9

  New cluster:
  UPDATE from {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(
              n, alias, canCollapseChildNames);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
          break;
      } to {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n);
          break;
      }
  ------------
  ===
  update-node
  ---
  switch_block: {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(
              n, alias, canCollapseChildNames);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
          break;
      } [21758,22138]
  replace {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(
              n, alias, canCollapseChildNames);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
          break;
      } by {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n);
          break;
      }

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  and [16949,16989]
      method_invocation: n.canCollapse() [16949,16964]
      identifier: canCollapseChildNames [16968,16989]
  to
  parenthesized_expression [16948,16965]
  at 0

  New cluster:
  UPDATE from updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames); to updateObjLitOrFunctionDeclaration(n, alias);
  ------------
  ===
  update-node
  ---
  expression_statement: updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames); [16974,17041]
  replace updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames); by updateObjLitOrFunctionDeclaration(n, alias);

  New cluster:
  ===
  delete-node
  ---
  method_invocation: n.canCollapse() [16949,16964]
  ===
  ------------
  ===
  delete-node
  ---
  method_invocation: n.canCollapse() [16949,16964]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  parenthesized_expression [24085,24108]
      identifier: canCollapseChildNames [24086,24107]

  New cluster:
  ===
  delete-node
  ---
  if_statement [24082,24350]
  ===
  ------------
  ===
  delete-node
  ---
  if_statement [24082,24350]
  ===
  ===
  delete-node
  ---
  block [24109,24350]
  ===
  ===
  delete-node
  ---
  expression_statement: addStubsForUndeclaredProperties(n, alias, varParent, varNode); [24282,24344]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [25796,25845]
      parenthesized_expression [25799,25823]
          unary_expression: !canCollapseChildNames [25800,25822]
      block [25824,25845]
          return_statement: return; [25832,25839]

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [27109,27158]
      parenthesized_expression [27112,27136]
          unary_expression: !canCollapseChildNames [27113,27135]
      block [27137,27158]
          return_statement: return; [27145,27152]

...
