---
language: java
text_diff: "--- before\n+++ after\n@@ -452,8 +452,8 @@\n     boolean canCollapseChildNames
  = n.canCollapseUnannotatedChildNames();\n \n     // Handle this name first so that
  nested object literals get unrolled.\n-    if (n.canCollapse()) {\n-      updateObjLitOrFunctionDeclaration(n,
  alias, canCollapseChildNames);\n+    if (n.canCollapse() && canCollapseChildNames)
  {\n+      updateObjLitOrFunctionDeclaration(n, alias);\n     }\n \n     if (n.props
  != null) {\n@@ -571,8 +571,7 @@\n    *     this name. (This is mostly passed for
  convenience; it's equivalent to\n    *     n.canCollapseChildNames()).\n    */\n-
  \ private void updateObjLitOrFunctionDeclaration(\n-      Name n, String alias,
  boolean canCollapseChildNames) {\n+  private void updateObjLitOrFunctionDeclaration(Name
  n, String alias) {\n     if (n.declaration == null) {\n       // Some names do not
  have declarations, because they\n       // are only defined in local scopes.\n@@
  -587,14 +586,13 @@\n \n     switch (n.declaration.node.getParent().getType()) {\n
  \      case Token.ASSIGN:\n-        updateObjLitOrFunctionDeclarationAtAssignNode(\n-
  \           n, alias, canCollapseChildNames);\n+        updateObjLitOrFunctionDeclarationAtAssignNode(n,
  alias);\n         break;\n       case Token.VAR:\n-        updateObjLitOrFunctionDeclarationAtVarNode(n,
  canCollapseChildNames);\n+        updateObjLitOrFunctionDeclarationAtVarNode(n);\n
  \        break;\n       case Token.FUNCTION:\n-        updateFunctionDeclarationAtFunctionNode(n,
  canCollapseChildNames);\n+        updateFunctionDeclarationAtFunctionNode(n);\n
  \        break;\n     }\n   }\n@@ -608,7 +606,7 @@\n    * @param alias The flattened
  name for {@code n} (e.g. \"a\", \"a$b$c\")\n    */\n   private void updateObjLitOrFunctionDeclarationAtAssignNode(\n-
  \     Name n, String alias, boolean canCollapseChildNames) {\n+      Name n, String
  alias) {\n     // NOTE: It's important that we don't add additional nodes\n     //
  (e.g. a var node before the exprstmt) because the exprstmt might be\n     // the
  child of an if statement that's not inside a block).\n@@ -652,15 +650,13 @@\n       insertedVarNode
  = true;\n     }\n \n-    if (canCollapseChildNames) {\n-      if (isObjLit) {\n+
  \   if (isObjLit) {\n         declareVarsForObjLitValues(\n             n, alias,
  rvalue,\n             varNode, varParent.getChildBefore(varNode), varParent);\n-
  \     }\n \n-      addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n
  \    }\n+      addStubsForUndeclaredProperties(n, alias, varParent, varNode);\n
  \n     if (insertedVarNode) {\n       if (!varNode.hasChildren()) {\n@@ -700,11
  +696,7 @@\n    *\n    * @param n An object representing a global name (e.g. \"a\")\n
  \   */\n-  private void updateObjLitOrFunctionDeclarationAtVarNode(\n-      Name
  n, boolean canCollapseChildNames) {\n-    if (!canCollapseChildNames) {\n-      return;\n-
  \   }\n+  private void updateObjLitOrFunctionDeclarationAtVarNode(Name n) {\n \n
  \    Ref ref = n.declaration;\n     String name = ref.node.getString();\n@@ -747,11
  +739,7 @@\n    *\n    * @param n An object representing a global name (e.g. \"a\")\n
  \   */\n-  private void updateFunctionDeclarationAtFunctionNode(\n-      Name n,
  boolean canCollapseChildNames) {\n-    if (!canCollapseChildNames) {\n-      return;\n-
  \   }\n+  private void updateFunctionDeclarationAtFunctionNode(Name n) {\n \n     Ref
  ref = n.declaration;\n     String fnName = ref.node.getString();\n"
tree_diff: |+
  New cluster:
  MOVE from block [22602,24507]
  ------------
  ===
  move-tree
  ---
  if_statement [24117,24274]
      parenthesized_expression [24120,24130]
          identifier: isObjLit [24121,24129]
      block [24131,24274]
          expression_statement: declareVarsForObjLitValues(
              n, alias, rvalue,
              varNode, varParent.getChildBefore(varNode), varParent); [24141,24266]
  to
  block [22602,24507]
  at 8

  New cluster:
  ===
  insert-node
  ---
  expression_statement: addStubsForUndeclaredProperties(n, alias, varParent, varNode); [24096,24158]
  to
  block [22602,24507]
  at 9
  ------------
  ===
  insert-node
  ---
  expression_statement: addStubsForUndeclaredProperties(n, alias, varParent, varNode); [24096,24158]
  to
  block [22602,24507]
  at 9

  New cluster:
  UPDATE from {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(
              n, alias, canCollapseChildNames);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
          break;
      } to {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n);
          break;
      }
  ------------
  ===
  update-node
  ---
  switch_block: {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(
              n, alias, canCollapseChildNames);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
          break;
      } [21758,22138]
  replace {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(
              n, alias, canCollapseChildNames);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);
          break;
      } by {
        case Token.ASSIGN:
          updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);
          break;
        case Token.VAR:
          updateObjLitOrFunctionDeclarationAtVarNode(n);
          break;
        case Token.FUNCTION:
          updateFunctionDeclarationAtFunctionNode(n);
          break;
      }

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  and [16949,16989]
      method_invocation: n.canCollapse() [16949,16964]
      identifier: canCollapseChildNames [16968,16989]
  to
  parenthesized_expression [16948,16965]
  at 0

  New cluster:
  UPDATE from updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames); to updateObjLitOrFunctionDeclaration(n, alias);
  ------------
  ===
  update-node
  ---
  expression_statement: updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames); [16974,17041]
  replace updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames); by updateObjLitOrFunctionDeclaration(n, alias);

  New cluster:
  ===
  delete-node
  ---
  method_invocation: n.canCollapse() [16949,16964]
  ===
  ------------
  ===
  delete-node
  ---
  method_invocation: n.canCollapse() [16949,16964]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  parenthesized_expression [24085,24108]
      identifier: canCollapseChildNames [24086,24107]

  New cluster:
  ===
  delete-node
  ---
  if_statement [24082,24350]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: addStubsForUndeclaredProperties(n, alias, varParent, varNode); [24282,24344]
  ===
  ===
  delete-node
  ---
  if_statement [24082,24350]
  ===
  ===
  delete-node
  ---
  block [24109,24350]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [25796,25845]
      parenthesized_expression [25799,25823]
          unary_expression: !canCollapseChildNames [25800,25822]
      block [25824,25845]
          return_statement: return; [25832,25839]

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [27109,27158]
      parenthesized_expression [27112,27136]
          unary_expression: !canCollapseChildNames [27113,27135]
      block [27137,27158]
          return_statement: return; [27145,27152]

...
