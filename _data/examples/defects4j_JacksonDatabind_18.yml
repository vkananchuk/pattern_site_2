---
language: java
text_diff: "--- before\n+++ after\n@@ -25,24 +25,20 @@\n     /**\n      * State in
  which iterator is closed\n      */\n-    protected final static int STATE_CLOSED
  = 0;\n     \n     /**\n      * State in which value read failed\n      */\n-    protected
  final static int STATE_NEED_RESYNC = 1;\n     \n     /**\n      * State in which
  no recovery is needed, but \"hasNextValue()\" needs\n      * to be called first\n
  \     */\n-    protected final static int STATE_MAY_HAVE_VALUE = 2;\n \n     /**\n
  \     * State in which \"hasNextValue()\" has been succesfully called\n      * and
  deserializer can be called to fetch value\n      */\n-    protected final static
  int STATE_HAS_VALUE = 3;\n \n     /*\n     /**********************************************************\n@@
  -70,13 +66,12 @@\n      * as not <code>null</code> but set as <code>null</null>
  when\n      * iterator is closed, to denote closing.\n      */\n-    protected final
  JsonParser _parser;\n+    protected JsonParser _parser;\n \n     /**\n      * Context
  to resynchronize to, in case an exception is encountered\n      * but caller wants
  to try to read more elements.\n      */\n-    protected final JsonStreamContext
  _seqContext;\n     \n     /**\n      * If not null, \"value to update\" instead
  of creating a new instance\n@@ -100,7 +95,7 @@\n     /**\n      * State of the iterator\n
  \     */\n-    protected int _state;\n+    protected boolean _hasNextChecked;\n
  \n     /*\n     /**********************************************************\n@@
  -140,25 +135,12 @@\n          * and if not, caller needs to hand us JsonParser instead,
  pointing to\n          * the first token of the first element.\n          */\n-
  \       if (p == null) { // can this occur?\n-            _seqContext = null;\n-
  \           _state = STATE_CLOSED;\n-        } else {\n-            JsonStreamContext
  sctxt = p.getParsingContext();\n-            if (managedParser && p.isExpectedStartArrayToken())
  {\n+        if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {\n
  \                // If pointing to START_ARRAY, context should be that ARRAY\n                 p.clearCurrentToken();\n-
  \           } else {\n                 // regardless, recovery context should be
  whatever context we have now,\n                 // with sole exception of pointing
  to a start marker, in which case it's\n                 // the parent\n-                JsonToken
  t = p.getCurrentToken();\n-                if ((t == JsonToken.START_OBJECT) ||
  (t == JsonToken.START_ARRAY)) {\n-                    sctxt = sctxt.getParent();\n-
  \               }\n-            }\n-            _seqContext = sctxt;\n-            _state
  = STATE_MAY_HAVE_VALUE;\n         }\n     }\n \n@@ -204,12 +186,9 @@\n     \n     @Override\n
  \    public void close() throws IOException {\n-        if (_state != STATE_CLOSED)
  {\n-            _state = STATE_CLOSED;\n             if (_parser != null) {\n                 _parser.close();\n
  \            }\n-        }\n     }\n \n     /*\n@@ -228,28 +207,25 @@\n      */\n
  \    public boolean hasNextValue() throws IOException\n     {\n-        switch (_state)
  {\n-        case STATE_CLOSED:\n+        if (_parser == null) {\n             return
  false;\n-        case STATE_NEED_RESYNC:\n-            _resync();\n             //
  fall-through\n-        case STATE_MAY_HAVE_VALUE:\n+        }\n+        if (!_hasNextChecked)
  {\n             JsonToken t = _parser.getCurrentToken();\n+            _hasNextChecked
  = true;\n             if (t == null) { // un-initialized or cleared; find next\n
  \                t = _parser.nextToken();\n                 // If EOF, no more,
  or if we hit END_ARRAY (although we don't clear the token).\n                 if
  (t == null || t == JsonToken.END_ARRAY) {\n-                    _state = STATE_CLOSED;\n-
  \                   if (_closeParser && (_parser != null)) {\n-                        _parser.close();\n+
  \                   JsonParser jp = _parser;\n+                    _parser = null;\n+
  \                   if (_closeParser) {\n+                        jp.close();\n
  \                    }\n                     return false;\n                 }\n
  \            }\n-            _state = STATE_HAS_VALUE;\n-            return true;\n-
  \       case STATE_HAS_VALUE:\n             // fall through\n         }\n         return
  true;\n@@ -257,20 +233,16 @@\n \n     public T nextValue() throws IOException\n
  \    {\n-        switch (_state) {\n-        case STATE_CLOSED:\n-            return
  _throwNoSuchElement();\n-        case STATE_NEED_RESYNC: // fall-through, will do
  re-sync\n-        case STATE_MAY_HAVE_VALUE:\n+        if (!_hasNextChecked) {\n
  \            if (!hasNextValue()) {\n                 return _throwNoSuchElement();\n
  \            }\n-            break;\n-        case STATE_HAS_VALUE:\n-            break;\n
  \        }\n+        if (_parser == null) {\n+            return _throwNoSuchElement();\n+
  \       }\n+        _hasNextChecked = false;\n \n-        int nextState = STATE_NEED_RESYNC;\n
  \        try {\n             T value;\n             if (_updatedValue == null) {\n@@
  -279,10 +251,8 @@\n                 _deserializer.deserialize(_parser, _context,
  _updatedValue);\n                 value = _updatedValue;\n             }\n-            nextState
  = STATE_MAY_HAVE_VALUE;\n             return value;\n         } finally {\n-            _state
  = nextState;\n             /* 24-Mar-2015, tatu: As per [#733], need to mark token
  consumed no\n              *   matter what, to avoid infinite loop for certain failure
  cases.\n              *   For 2.6 need to improve further.\n@@ -379,28 +349,8 @@\n
  \    /**********************************************************\n      */\n \n-
  \   protected void _resync() throws IOException\n-    {\n-        final JsonParser
  p = _parser;\n         // First, a quick check to see if we might have been lucky
  and no re-sync needed\n-        if (p.getParsingContext() == _seqContext) {\n-            return;\n-
  \       }\n \n-        while (true) {\n-            JsonToken t = p.nextToken();\n-
  \           if ((t == JsonToken.END_ARRAY) || (t == JsonToken.END_OBJECT)) {\n-
  \               if (p.getParsingContext() == _seqContext) {\n-                    p.clearCurrentToken();\n-
  \                   return;\n-                }\n-            } else if ((t == JsonToken.START_ARRAY)
  || (t == JsonToken.START_OBJECT)) {\n-                p.skipChildren();\n-            }
  else if (t == null) {\n-                return;\n-            }\n-        }\n-    }\n
  \n     protected <R> R _throwNoSuchElement() {\n         throw new NoSuchElementException();\n"
tree_diff: |+
  New cluster:
  MOVE from class_body [368,12607]
  ------------
  ===
  move-tree
  ---
  field_declaration: protected final static int STATE_CLOSED = 0; [802,846]
  to
  class_body [368,12607]
  at 7
  ===
  move-tree
  ---
  field_declaration: protected final static int STATE_NEED_RESYNC = 1; [912,961]
  to
  class_body [368,12607]
  at 11

  New cluster:
  UPDATE from protected final static int STATE_CLOSED = 0; to protected JsonParser _parser;
  ------------
  ===
  update-node
  ---
  field_declaration: protected final static int STATE_CLOSED = 0; [802,846]
  replace protected final static int STATE_CLOSED = 0; by protected JsonParser _parser;

  New cluster:
  UPDATE from protected final static int STATE_NEED_RESYNC = 1; to protected boolean _hasNextChecked;
  ------------
  ===
  update-node
  ---
  field_declaration: protected final static int STATE_NEED_RESYNC = 1; [912,961]
  replace protected final static int STATE_NEED_RESYNC = 1; by protected boolean _hasNextChecked;

  New cluster:
  UPDATE from @SuppressWarnings("unchecked")
      protected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt,
              JsonDeserializer<?> deser,
              boolean managedParser, Object valueToUpdate)
      {
          _type = type;
          _parser = p;
          _context = ctxt;
          _deserializer = (JsonDeserializer<T>) deser;
          _closeParser = managedParser;
          if (valueToUpdate == null) {
              _updatedValue = null;
          } else {
              _updatedValue = (T) valueToUpdate;
          }

          /* Ok: one more thing; we may have to skip START_ARRAY, assuming
           * "wrapped" sequence; but this is ONLY done for 'managed' parsers
           * and never if JsonParser was directly passed by caller (if it
           * was, caller must have either positioned it over first token of
           * the first element, or cleared the START_ARRAY token explicitly).
           * Note, however, that we do not try to guess whether this could be
           * an unwrapped sequence of arrays/Lists: we just assume it is wrapped;
           * and if not, caller needs to hand us JsonParser instead, pointing to
           * the first token of the first element.
           */
          if (p == null) { // can this occur?
              _seqContext = null;
              _state = STATE_CLOSED;
          } else {
              JsonStreamContext sctxt = p.getParsingContext();
              if (managedParser && p.isExpectedStartArrayToken()) {
                  // If pointing to START_ARRAY, context should be that ARRAY
                  p.clearCurrentToken();
              } else {
                  // regardless, recovery context should be whatever context we have now,
                  // with sole exception of pointing to a start marker, in which case it's
                  // the parent
                  JsonToken t = p.getCurrentToken();
                  if ((t == JsonToken.START_OBJECT) || (t == JsonToken.START_ARRAY)) {
                      sctxt = sctxt.getParent();
                  }
              }
              _seqContext = sctxt;
              _state = STATE_MAY_HAVE_VALUE;
          }
      } to @SuppressWarnings("unchecked")
      protected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt,
              JsonDeserializer<?> deser,
              boolean managedParser, Object valueToUpdate)
      {
          _type = type;
          _parser = p;
          _context = ctxt;
          _deserializer = (JsonDeserializer<T>) deser;
          _closeParser = managedParser;
          if (valueToUpdate == null) {
              _updatedValue = null;
          } else {
              _updatedValue = (T) valueToUpdate;
          }

          /* Ok: one more thing; we may have to skip START_ARRAY, assuming
           * "wrapped" sequence; but this is ONLY done for 'managed' parsers
           * and never if JsonParser was directly passed by caller (if it
           * was, caller must have either positioned it over first token of
           * the first element, or cleared the START_ARRAY token explicitly).
           * Note, however, that we do not try to guess whether this could be
           * an unwrapped sequence of arrays/Lists: we just assume it is wrapped;
           * and if not, caller needs to hand us JsonParser instead, pointing to
           * the first token of the first element.
           */
          if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {
                  // If pointing to START_ARRAY, context should be that ARRAY
                  p.clearCurrentToken();
                  // regardless, recovery context should be whatever context we have now,
                  // with sole exception of pointing to a start marker, in which case it's
                  // the parent
          }
      }
  ------------
  ===
  update-node
  ---
  constructor_declaration: @SuppressWarnings("unchecked")
      protected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt,
              JsonDeserializer<?> deser,
              boolean managedParser, Object valueToUpdate)
      {
          _type = type;
          _parser = p;
          _context = ctxt;
          _deserializer = (JsonDeserializer<T>) deser;
          _closeParser = managedParser;
          if (valueToUpdate == null) {
              _updatedValue = null;
          } else {
              _updatedValue = (T) valueToUpdate;
          }

          /* Ok: one more thing; we may have to skip START_ARRAY, assuming
           * "wrapped" sequence; but this is ONLY done for 'managed' parsers
           * and never if JsonParser was directly passed by caller (if it
           * was, caller must have either positioned it over first token of
           * the first element, or cleared the START_ARRAY token explicitly).
           * Note, however, that we do not try to guess whether this could be
           * an unwrapped sequence of arrays/Lists: we just assume it is wrapped;
           * and if not, caller needs to hand us JsonParser instead, pointing to
           * the first token of the first element.
           */
          if (p == null) { // can this occur?
              _seqContext = null;
              _state = STATE_CLOSED;
          } else {
              JsonStreamContext sctxt = p.getParsingContext();
              if (managedParser && p.isExpectedStartArrayToken()) {
                  // If pointing to START_ARRAY, context should be that ARRAY
                  p.clearCurrentToken();
              } else {
                  // regardless, recovery context should be whatever context we have now,
                  // with sole exception of pointing to a start marker, in which case it's
                  // the parent
                  JsonToken t = p.getCurrentToken();
                  if ((t == JsonToken.START_OBJECT) || (t == JsonToken.START_ARRAY)) {
                      sctxt = sctxt.getParent();
                  }
              }
              _seqContext = sctxt;
              _state = STATE_MAY_HAVE_VALUE;
          }
      } [3381,5477]
  replace @SuppressWarnings("unchecked")
      protected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt,
              JsonDeserializer<?> deser,
              boolean managedParser, Object valueToUpdate)
      {
          _type = type;
          _parser = p;
          _context = ctxt;
          _deserializer = (JsonDeserializer<T>) deser;
          _closeParser = managedParser;
          if (valueToUpdate == null) {
              _updatedValue = null;
          } else {
              _updatedValue = (T) valueToUpdate;
          }

          /* Ok: one more thing; we may have to skip START_ARRAY, assuming
           * "wrapped" sequence; but this is ONLY done for 'managed' parsers
           * and never if JsonParser was directly passed by caller (if it
           * was, caller must have either positioned it over first token of
           * the first element, or cleared the START_ARRAY token explicitly).
           * Note, however, that we do not try to guess whether this could be
           * an unwrapped sequence of arrays/Lists: we just assume it is wrapped;
           * and if not, caller needs to hand us JsonParser instead, pointing to
           * the first token of the first element.
           */
          if (p == null) { // can this occur?
              _seqContext = null;
              _state = STATE_CLOSED;
          } else {
              JsonStreamContext sctxt = p.getParsingContext();
              if (managedParser && p.isExpectedStartArrayToken()) {
                  // If pointing to START_ARRAY, context should be that ARRAY
                  p.clearCurrentToken();
              } else {
                  // regardless, recovery context should be whatever context we have now,
                  // with sole exception of pointing to a start marker, in which case it's
                  // the parent
                  JsonToken t = p.getCurrentToken();
                  if ((t == JsonToken.START_OBJECT) || (t == JsonToken.START_ARRAY)) {
                      sctxt = sctxt.getParent();
                  }
              }
              _seqContext = sctxt;
              _state = STATE_MAY_HAVE_VALUE;
          }
      } by @SuppressWarnings("unchecked")
      protected MappingIterator(JavaType type, JsonParser p, DeserializationContext ctxt,
              JsonDeserializer<?> deser,
              boolean managedParser, Object valueToUpdate)
      {
          _type = type;
          _parser = p;
          _context = ctxt;
          _deserializer = (JsonDeserializer<T>) deser;
          _closeParser = managedParser;
          if (valueToUpdate == null) {
              _updatedValue = null;
          } else {
              _updatedValue = (T) valueToUpdate;
          }

          /* Ok: one more thing; we may have to skip START_ARRAY, assuming
           * "wrapped" sequence; but this is ONLY done for 'managed' parsers
           * and never if JsonParser was directly passed by caller (if it
           * was, caller must have either positioned it over first token of
           * the first element, or cleared the START_ARRAY token explicitly).
           * Note, however, that we do not try to guess whether this could be
           * an unwrapped sequence of arrays/Lists: we just assume it is wrapped;
           * and if not, caller needs to hand us JsonParser instead, pointing to
           * the first token of the first element.
           */
          if (managedParser && (p != null) && p.isExpectedStartArrayToken()) {
                  // If pointing to START_ARRAY, context should be that ARRAY
                  p.clearCurrentToken();
                  // regardless, recovery context should be whatever context we have now,
                  // with sole exception of pointing to a start marker, in which case it's
                  // the parent
          }
      }

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  method_declaration [6264,7111]
      identifier: hasNextValue [6279,6291]
      method_parameters [6264,7111]
      block [6317,7111]
          if_statement [6327,6413]
              parenthesized_expression [6330,6347]
                  equals [6331,6346]
                      identifier: _parser [6331,6338]
                      null_literal [6342,6346]
              block [6348,6413]
                  return_statement: return false; [6362,6375]
          if_statement [6422,7084]
              parenthesized_expression [6425,6443]
                  unary_expression: !_hasNextChecked [6426,6442]
              block [6444,7084]
                  local_variable_declaration: JsonToken t = _parser.getCurrentToken(); [6458,6498]
                  expression_statement: _hasNextChecked = true; [6511,6534]
                  if_statement [6547,7046]
                      parenthesized_expression [6550,6561]
                          equals [6551,6560]
                              identifier: t [6551,6552]
                              null_literal [6556,6560]
                      block [6562,7046]
                          expression_statement: t = _parser.nextToken(); [6620,6644]
                          if_statement [6757,7032]
                              parenthesized_expression [6760,6799]
                                  or [6761,6798]
                                      equals [6761,6770]
                                          identifier: t [6761,6762]
                                          null_literal [6766,6770]
                                      equals [6774,6798]
                                          identifier: t [6774,6775]
                                          field_access: JsonToken.END_ARRAY [6779,6798]
                              block [6800,7032]
                                  local_variable_declaration: JsonParser jp = _parser; [6822,6846]
                                  expression_statement: _parser = null; [6867,6882]
                                  if_statement [6903,6980]
                                      parenthesized_expression [6906,6920]
                                          identifier: _closeParser [6907,6919]
                                      block [6921,6980]
                                          expression_statement: jp.close(); [6947,6958]
                                  return_statement: return false; [7001,7014]
          return_statement: return true; [7093,7105]
  to
  class_body [368,12607]
  at 19

  New cluster:
  MOVE from method_declaration [6531,6756]
  ------------
  ===
  move-tree
  ---
  block [6622,6750]
      expression_statement: _state = STATE_CLOSED; [6636,6658]
      if_statement [6671,6740]
          parenthesized_expression [6674,6691]
              not_equals [6675,6690]
                  identifier: _parser [6675,6682]
                  null_literal [6686,6690]
          block [6692,6740]
              expression_statement: _parser.close(); [6710,6726]
  to
  method_declaration [6531,6756]
  at 2

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  if_statement [7171,7299]
      parenthesized_expression [7174,7192]
          unary_expression: !_hasNextChecked [7175,7191]
      block [7193,7299]
          if_statement [7207,7289]
              parenthesized_expression [7210,7227]
                  unary_expression: !hasNextValue() [7211,7226]
              block [7228,7289]
                  return_statement: return _throwNoSuchElement(); [7246,7275]
  to
  block [8105,9221]
  at 0

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  if_statement [7308,7382]
      parenthesized_expression [7311,7328]
          equals [7312,7327]
              identifier: _parser [7312,7319]
              null_literal [7323,7327]
      block [7329,7382]
          return_statement: return _throwNoSuchElement(); [7343,7372]
  to
  block [8105,9221]
  at 1

  New cluster:
  ===
  insert-node
  ---
  expression_statement: _hasNextChecked = false; [7391,7415]
  to
  block [8105,9221]
  at 2
  ------------
  ===
  insert-node
  ---
  expression_statement: _hasNextChecked = false; [7391,7415]
  to
  block [8105,9221]
  at 2

  New cluster:
  ===
  delete-node
  ---
  field_declaration: protected final static int STATE_MAY_HAVE_VALUE = 2; [1085,1137]
  ===
  ------------
  ===
  delete-node
  ---
  field_declaration: protected final static int STATE_MAY_HAVE_VALUE = 2; [1085,1137]
  ===

  New cluster:
  ===
  delete-node
  ---
  field_declaration: protected final static int STATE_HAS_VALUE = 3; [1279,1326]
  ===
  ------------
  ===
  delete-node
  ---
  field_declaration: protected final static int STATE_HAS_VALUE = 3; [1279,1326]
  ===

  New cluster:
  ===
  delete-node
  ---
  field_declaration: protected final JsonParser _parser; [2061,2096]
  ===
  ------------
  ===
  delete-node
  ---
  field_declaration: protected final JsonParser _parser; [2061,2096]
  ===

  New cluster:
  ===
  delete-node
  ---
  field_declaration: protected final JsonStreamContext _seqContext; [2244,2290]
  ===
  ------------
  ===
  delete-node
  ---
  field_declaration: protected final JsonStreamContext _seqContext; [2244,2290]
  ===

  New cluster:
  ===
  delete-node
  ---
  field_declaration: protected int _state; [2901,2922]
  ===
  ------------
  ===
  delete-node
  ---
  field_declaration: protected int _state; [2901,2922]
  ===

  New cluster:
  ===
  delete-node
  ---
  expression_statement: _state = STATE_CLOSED; [6636,6658]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: _state = STATE_CLOSED; [6636,6658]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  parenthesized_expression [6597,6621]
      not_equals [6598,6620]
          identifier: _state [6598,6604]
          identifier: STATE_CLOSED [6608,6620]

  New cluster:
  ===
  delete-node
  ---
  block [6584,6756]
  ===
  ------------
  ===
  delete-node
  ---
  block [6584,6756]
  ===
  ===
  delete-node
  ---
  if_statement [6594,6750]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  method_declaration [7093,8055]
      identifier: hasNextValue [7108,7120]
      method_parameters [7093,8055]
      block [7146,8055]
          switch_expression [7156,8028]
              parenthesized_expression [7163,7171]
                  identifier: _state [7164,7170]
              switch_block: {
          case STATE_CLOSED:
              return false;
          case STATE_NEED_RESYNC:
              _resync();
              // fall-through
          case STATE_MAY_HAVE_VALUE:
              JsonToken t = _parser.getCurrentToken();
              if (t == null) { // un-initialized or cleared; find next
                  t = _parser.nextToken();
                  // If EOF, no more, or if we hit END_ARRAY (although we don't clear the token).
                  if (t == null || t == JsonToken.END_ARRAY) {
                      _state = STATE_CLOSED;
                      if (_closeParser && (_parser != null)) {
                          _parser.close();
                      }
                      return false;
                  }
              }
              _state = STATE_HAS_VALUE;
              return true;
          case STATE_HAS_VALUE:
              // fall through
          } [7172,8028]
          return_statement: return true; [8037,8049]

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  switch_expression [8115,8474]
      parenthesized_expression [8122,8130]
          identifier: _state [8123,8129]
      switch_block: {
          case STATE_CLOSED:
              return _throwNoSuchElement();
          case STATE_NEED_RESYNC: // fall-through, will do re-sync
          case STATE_MAY_HAVE_VALUE:
              if (!hasNextValue()) {
                  return _throwNoSuchElement();
              }
              break;
          case STATE_HAS_VALUE:
              break;
          } [8131,8474]

  New cluster:
  ===
  delete-node
  ---
  local_variable_declaration: int nextState = STATE_NEED_RESYNC; [8484,8518]
  ===
  ------------
  ===
  delete-node
  ---
  local_variable_declaration: int nextState = STATE_NEED_RESYNC; [8484,8518]
  ===

  New cluster:
  ===
  delete-node
  ---
  expression_statement: nextState = STATE_MAY_HAVE_VALUE; [8827,8860]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: nextState = STATE_MAY_HAVE_VALUE; [8827,8860]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  method_declaration [11484,12245]
      identifier: _resync [11499,11506]
      method_parameters [11484,12245]
      block [11532,12245]
          local_variable_declaration: final JsonParser p = _parser; [11542,11571]
          if_statement [11669,11742]
              parenthesized_expression [11672,11710]
                  equals [11673,11709]
                      method_invocation: p.getParsingContext() [11673,11694]
                      identifier: _seqContext [11698,11709]
              block [11711,11742]
                  return_statement: return; [11725,11732]
          while_statement: while (true) {
              JsonToken t = p.nextToken();
              if ((t == JsonToken.END_ARRAY) || (t == JsonToken.END_OBJECT)) {
                  if (p.getParsingContext() == _seqContext) {
                      p.clearCurrentToken();
                      return;
                  }
              } else if ((t == JsonToken.START_ARRAY) || (t == JsonToken.START_OBJECT)) {
                  p.skipChildren();
              } else if (t == null) {
                  return;
              }
          } [11752,12239]

...
