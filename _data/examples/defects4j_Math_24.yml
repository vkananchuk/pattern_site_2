---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: BrentOptimizer
        children: []
        pos: 1731
        length: 14
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));
          children: []
          pos: 1831
          length: 74
        - type: field_declaration
          fields:
            text: private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
          children: []
          pos: 1961
          length: 74
        - type: field_declaration
          fields:
            text: private final double relativeThreshold;
          children: []
          pos: 2083
          length: 39
        - type: field_declaration
          fields:
            text: private final double absoluteThreshold;
          children: []
          pos: 2170
          length: 39
        - type: constructor_declaration
          fields:
            text: |-
              public BrentOptimizer(double rel,
                                        double abs,
                                        ConvergenceChecker<UnivariatePointValuePair> checker) {
                      super(checker);

                      if (rel < MIN_RELATIVE_TOLERANCE) {
                          throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);
                      }
                      if (abs <= 0) {
                          throw new NotStrictlyPositiveException(abs);
                      }

                      relativeThreshold = rel;
                      absoluteThreshold = abs;
                  }
          children: []
          pos: 2957
          length: 480
        - type: constructor_declaration
          fields:
            text: |-
              public BrentOptimizer(double rel,
                                        double abs) {
                      this(rel, abs, null);
                  }
          children: []
          pos: 4105
          length: 109
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: doOptimize
              children: []
              pos: 4294
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4245
              length: 5230
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
                children: []
                pos: 4317
                length: 59
              - type: local_variable_declaration
                fields:
                  text: final double lo = getMin();
                children: []
                pos: 4385
                length: 27
              - type: local_variable_declaration
                fields:
                  text: final double mid = getStartValue();
                children: []
                pos: 4421
                length: 35
              - type: local_variable_declaration
                fields:
                  text: final double hi = getMax();
                children: []
                pos: 4465
                length: 27
              - type: local_variable_declaration
                fields:
                  text: |-
                    final ConvergenceChecker<UnivariatePointValuePair> checker
                                = getConvergenceChecker();
                children: []
                pos: 4555
                length: 97
              - type: local_variable_declaration
                fields:
                  text: double a;
                children: []
                pos: 4662
                length: 9
              - type: local_variable_declaration
                fields:
                  text: double b;
                children: []
                pos: 4680
                length: 9
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lo
                            children: []
                            pos: 4702
                            length: 2
                          right:
                            type: identifier
                            fields:
                              text: hi
                            children: []
                            pos: 4707
                            length: 2
                        children: []
                        pos: 4702
                        length: 7
                    children: []
                    pos: 4701
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: a = lo;
                    children: []
                    pos: 4725
                    length: 7
                  - type: expression_statement
                    fields:
                      text: b = hi;
                    children: []
                    pos: 4745
                    length: 7
                  pos: 4711
                  length: 51
                pos: 4698
                length: 121
              - type: local_variable_declaration
                fields:
                  text: double x = mid;
                children: []
                pos: 4829
                length: 15
              - type: local_variable_declaration
                fields:
                  text: double v = x;
                children: []
                pos: 4853
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double w = x;
                children: []
                pos: 4875
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double d = 0;
                children: []
                pos: 4897
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double e = 0;
                children: []
                pos: 4919
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double fx = computeObjectiveValue(x);
                children: []
                pos: 4941
                length: 37
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!isMinim"
                        children: []
                        pos: 4991
                        length: 8
                    children: []
                    pos: 4990
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: fx = -fx;
                    children: []
                    pos: 5015
                    length: 9
                  pos: 5001
                  length: 33
                pos: 4987
                length: 47
              - type: local_variable_declaration
                fields:
                  text: double fv = fx;
                children: []
                pos: 5043
                length: 15
              - type: local_variable_declaration
                fields:
                  text: double fw = fx;
                children: []
                pos: 5067
                length: 15
              - type: local_variable_declaration
                fields:
                  text: UnivariatePointValuePair previous = null;
                children: []
                pos: 5092
                length: 41
              - type: local_variable_declaration
                fields:
                  text: |-
                    UnivariatePointValuePair current
                                = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
                children: []
                pos: 5142
                length: 99
              - type: local_variable_declaration
                fields:
                  text: int iter = 0;
                children: []
                pos: 5251
                length: 13
              - type: while_statement
                fields:
                  text: |-
                    while (true) {
                                final double m = 0.5 * (a + b);
                                final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
                                final double tol2 = 2 * tol1;

                                // Default stopping criterion.
                                final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
                                if (!stop) {
                                    double p = 0;
                                    double q = 0;
                                    double r = 0;
                                    double u = 0;

                                    if (FastMath.abs(e) > tol1) { // Fit parabola.
                                        r = (x - w) * (fx - fv);
                                        q = (x - v) * (fx - fw);
                                        p = (x - v) * q - (x - w) * r;
                                        q = 2 * (q - r);

                                        if (q > 0) {
                                            p = -p;
                                        } else {
                                            q = -q;
                                        }

                                        r = e;
                                        e = d;

                                        if (p > q * (a - x) &&
                                            p < q * (b - x) &&
                                            FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                                            // Parabolic interpolation step.
                                            d = p / q;
                                            u = x + d;

                                            // f must not be evaluated too close to a or b.
                                            if (u - a < tol2 || b - u < tol2) {
                                                if (x <= m) {
                                                    d = tol1;
                                                } else {
                                                    d = -tol1;
                                                }
                                            }
                                        } else {
                                            // Golden section step.
                                            if (x < m) {
                                                e = b - x;
                                            } else {
                                                e = a - x;
                                            }
                                            d = GOLDEN_SECTION * e;
                                        }
                                    } else {
                                        // Golden section step.
                                        if (x < m) {
                                            e = b - x;
                                        } else {
                                            e = a - x;
                                        }
                                        d = GOLDEN_SECTION * e;
                                    }

                                    // Update by at least "tol1".
                                    if (FastMath.abs(d) < tol1) {
                                        if (d >= 0) {
                                            u = x + tol1;
                                        } else {
                                            u = x - tol1;
                                        }
                                    } else {
                                        u = x + d;
                                    }

                                    double fu = computeObjectiveValue(u);
                                    if (!isMinim) {
                                        fu = -fu;
                                    }

                                    // User-defined convergence checker.
                                    previous = current;
                                    current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);

                                    if (checker != null) {
                                        if (checker.converged(iter, previous, current)) {
                                            return best(current, previous, isMinim);
                                        }
                                    }

                                    // Update a, b, v, w and x.
                                    if (fu <= fx) {
                                        if (u < x) {
                                            b = x;
                                        } else {
                                            a = x;
                                        }
                                        v = w;
                                        fv = fw;
                                        w = x;
                                        fw = fx;
                                        x = u;
                                        fx = fu;
                                    } else {
                                        if (u < x) {
                                            a = u;
                                        } else {
                                            b = u;
                                        }
                                        if (fu <= fw ||
                                            Precision.equals(w, x)) {
                                            v = w;
                                            fv = fw;
                                            w = u;
                                            fw = fu;
                                        } else if (fu <= fv ||
                                                   Precision.equals(v, x) ||
                                                   Precision.equals(v, w)) {
                                            v = u;
                                            fv = fu;
                                        }
                                    }
                                } else { // Default termination (Brent's criterion).
                                    return best(current, previous, isMinim);
                                }
                                ++iter;
                            }
                children: []
                pos: 5273
                length: 4196
              pos: 4307
              length: 5168
          children: []
          pos: 4245
          length: 5230
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: best
              children: []
              pos: 9849
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: UnivariatePointValuePair a
                children: []
                pos: 9854
                length: 26
              pos: 9816
              length: 479
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: a
                            children: []
                            pos: 10025
                            length: 1
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 10030
                            length: 4
                        children: []
                        pos: 10025
                        length: 9
                    children: []
                    pos: 10024
                    length: 11
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return b;
                    children: []
                    pos: 10050
                    length: 9
                  pos: 10036
                  length: 33
                pos: 10021
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: b
                            children: []
                            pos: 10082
                            length: 1
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 10087
                            length: 4
                        children: []
                        pos: 10082
                        length: 9
                    children: []
                    pos: 10081
                    length: 11
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return a;
                    children: []
                    pos: 10107
                    length: 9
                  pos: 10093
                  length: 33
                pos: 10078
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isMinim
                        children: []
                        pos: 10140
                        length: 7
                    children: []
                    pos: 10139
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: 'return a.getValue() < b.getValue() ? a : b;'
                    children: []
                    pos: 10163
                    length: 43
                  pos: 10149
                  length: 67
                pos: 10136
                length: 153
              pos: 10011
              length: 284
          children: []
          pos: 9816
          length: 479
        pos: 1718
        length: 8579
    children: []
    pos: 1718
    length: 8579
  pos: 0
  length: 10298
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: BrentOptimizer
        children: []
        pos: 1731
        length: 14
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));
          children: []
          pos: 1831
          length: 74
        - type: field_declaration
          fields:
            text: private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
          children: []
          pos: 1961
          length: 74
        - type: field_declaration
          fields:
            text: private final double relativeThreshold;
          children: []
          pos: 2083
          length: 39
        - type: field_declaration
          fields:
            text: private final double absoluteThreshold;
          children: []
          pos: 2170
          length: 39
        - type: constructor_declaration
          fields:
            text: |-
              public BrentOptimizer(double rel,
                                        double abs,
                                        ConvergenceChecker<UnivariatePointValuePair> checker) {
                      super(checker);

                      if (rel < MIN_RELATIVE_TOLERANCE) {
                          throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);
                      }
                      if (abs <= 0) {
                          throw new NotStrictlyPositiveException(abs);
                      }

                      relativeThreshold = rel;
                      absoluteThreshold = abs;
                  }
          children: []
          pos: 2957
          length: 480
        - type: constructor_declaration
          fields:
            text: |-
              public BrentOptimizer(double rel,
                                        double abs) {
                      this(rel, abs, null);
                  }
          children: []
          pos: 4105
          length: 109
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: doOptimize
              children: []
              pos: 4294
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4245
              length: 5180
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
                children: []
                pos: 4317
                length: 59
              - type: local_variable_declaration
                fields:
                  text: final double lo = getMin();
                children: []
                pos: 4385
                length: 27
              - type: local_variable_declaration
                fields:
                  text: final double mid = getStartValue();
                children: []
                pos: 4421
                length: 35
              - type: local_variable_declaration
                fields:
                  text: final double hi = getMax();
                children: []
                pos: 4465
                length: 27
              - type: local_variable_declaration
                fields:
                  text: |-
                    final ConvergenceChecker<UnivariatePointValuePair> checker
                                = getConvergenceChecker();
                children: []
                pos: 4555
                length: 97
              - type: local_variable_declaration
                fields:
                  text: double a;
                children: []
                pos: 4662
                length: 9
              - type: local_variable_declaration
                fields:
                  text: double b;
                children: []
                pos: 4680
                length: 9
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lo
                            children: []
                            pos: 4702
                            length: 2
                          right:
                            type: identifier
                            fields:
                              text: hi
                            children: []
                            pos: 4707
                            length: 2
                        children: []
                        pos: 4702
                        length: 7
                    children: []
                    pos: 4701
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: a = lo;
                    children: []
                    pos: 4725
                    length: 7
                  - type: expression_statement
                    fields:
                      text: b = hi;
                    children: []
                    pos: 4745
                    length: 7
                  pos: 4711
                  length: 51
                pos: 4698
                length: 121
              - type: local_variable_declaration
                fields:
                  text: double x = mid;
                children: []
                pos: 4829
                length: 15
              - type: local_variable_declaration
                fields:
                  text: double v = x;
                children: []
                pos: 4853
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double w = x;
                children: []
                pos: 4875
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double d = 0;
                children: []
                pos: 4897
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double e = 0;
                children: []
                pos: 4919
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double fx = computeObjectiveValue(x);
                children: []
                pos: 4941
                length: 37
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!isMinim"
                        children: []
                        pos: 4991
                        length: 8
                    children: []
                    pos: 4990
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: fx = -fx;
                    children: []
                    pos: 5015
                    length: 9
                  pos: 5001
                  length: 33
                pos: 4987
                length: 47
              - type: local_variable_declaration
                fields:
                  text: double fv = fx;
                children: []
                pos: 5043
                length: 15
              - type: local_variable_declaration
                fields:
                  text: double fw = fx;
                children: []
                pos: 5067
                length: 15
              - type: local_variable_declaration
                fields:
                  text: UnivariatePointValuePair previous = null;
                children: []
                pos: 5092
                length: 41
              - type: local_variable_declaration
                fields:
                  text: |-
                    UnivariatePointValuePair current
                                = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
                children: []
                pos: 5142
                length: 99
              - type: local_variable_declaration
                fields:
                  text: int iter = 0;
                children: []
                pos: 5251
                length: 13
              - type: while_statement
                fields:
                  text: |-
                    while (true) {
                                final double m = 0.5 * (a + b);
                                final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
                                final double tol2 = 2 * tol1;

                                // Default stopping criterion.
                                final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
                                if (!stop) {
                                    double p = 0;
                                    double q = 0;
                                    double r = 0;
                                    double u = 0;

                                    if (FastMath.abs(e) > tol1) { // Fit parabola.
                                        r = (x - w) * (fx - fv);
                                        q = (x - v) * (fx - fw);
                                        p = (x - v) * q - (x - w) * r;
                                        q = 2 * (q - r);

                                        if (q > 0) {
                                            p = -p;
                                        } else {
                                            q = -q;
                                        }

                                        r = e;
                                        e = d;

                                        if (p > q * (a - x) &&
                                            p < q * (b - x) &&
                                            FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                                            // Parabolic interpolation step.
                                            d = p / q;
                                            u = x + d;

                                            // f must not be evaluated too close to a or b.
                                            if (u - a < tol2 || b - u < tol2) {
                                                if (x <= m) {
                                                    d = tol1;
                                                } else {
                                                    d = -tol1;
                                                }
                                            }
                                        } else {
                                            // Golden section step.
                                            if (x < m) {
                                                e = b - x;
                                            } else {
                                                e = a - x;
                                            }
                                            d = GOLDEN_SECTION * e;
                                        }
                                    } else {
                                        // Golden section step.
                                        if (x < m) {
                                            e = b - x;
                                        } else {
                                            e = a - x;
                                        }
                                        d = GOLDEN_SECTION * e;
                                    }

                                    // Update by at least "tol1".
                                    if (FastMath.abs(d) < tol1) {
                                        if (d >= 0) {
                                            u = x + tol1;
                                        } else {
                                            u = x - tol1;
                                        }
                                    } else {
                                        u = x + d;
                                    }

                                    double fu = computeObjectiveValue(u);
                                    if (!isMinim) {
                                        fu = -fu;
                                    }

                                    // User-defined convergence checker.
                                    previous = current;
                                    current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);

                                    if (checker != null) {
                                        if (checker.converged(iter, previous, current)) {
                                            return current;
                                        }
                                    }

                                    // Update a, b, v, w and x.
                                    if (fu <= fx) {
                                        if (u < x) {
                                            b = x;
                                        } else {
                                            a = x;
                                        }
                                        v = w;
                                        fv = fw;
                                        w = x;
                                        fw = fx;
                                        x = u;
                                        fx = fu;
                                    } else {
                                        if (u < x) {
                                            a = u;
                                        } else {
                                            b = u;
                                        }
                                        if (fu <= fw ||
                                            Precision.equals(w, x)) {
                                            v = w;
                                            fv = fw;
                                            w = u;
                                            fw = fu;
                                        } else if (fu <= fv ||
                                                   Precision.equals(v, x) ||
                                                   Precision.equals(v, w)) {
                                            v = u;
                                            fv = fu;
                                        }
                                    }
                                } else { // Default termination (Brent's criterion).
                                    return current;
                                }
                                ++iter;
                            }
                children: []
                pos: 5273
                length: 4146
              pos: 4307
              length: 5118
          children: []
          pos: 4245
          length: 5180
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: best
              children: []
              pos: 9799
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: UnivariatePointValuePair a
                children: []
                pos: 9804
                length: 26
              pos: 9766
              length: 479
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: a
                            children: []
                            pos: 9975
                            length: 1
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 9980
                            length: 4
                        children: []
                        pos: 9975
                        length: 9
                    children: []
                    pos: 9974
                    length: 11
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return b;
                    children: []
                    pos: 10000
                    length: 9
                  pos: 9986
                  length: 33
                pos: 9971
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: b
                            children: []
                            pos: 10032
                            length: 1
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 10037
                            length: 4
                        children: []
                        pos: 10032
                        length: 9
                    children: []
                    pos: 10031
                    length: 11
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return a;
                    children: []
                    pos: 10057
                    length: 9
                  pos: 10043
                  length: 33
                pos: 10028
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isMinim
                        children: []
                        pos: 10090
                        length: 7
                    children: []
                    pos: 10089
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: 'return a.getValue() < b.getValue() ? a : b;'
                    children: []
                    pos: 10113
                    length: 43
                  pos: 10099
                  length: 67
                pos: 10086
                length: 153
              pos: 9961
              length: 284
          children: []
          pos: 9766
          length: 479
        pos: 1718
        length: 8529
    children: []
    pos: 1718
    length: 8529
  pos: 0
  length: 10248
text_diff: "--- before\n+++ after\n@@ -227,7 +227,7 @@\n \n                 if (checker
  != null) {\n                     if (checker.converged(iter, previous, current))
  {\n-                        return best(current, previous, isMinim);\n+                        return
  current;\n                     }\n                 }\n \n@@ -264,7 +264,7 @@\n                     }\n
  \                }\n             } else { // Default termination (Brent's criterion).\n-
  \               return best(current, previous, isMinim);\n+                return
  current;\n             }\n             ++iter;\n         }\n"
tree_diff: |+
  New cluster:
  UPDATE from while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return best(current, previous, isMinim);
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return best(current, previous, isMinim);
              }
              ++iter;
          } to while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return current;
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return current;
              }
              ++iter;
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return best(current, previous, isMinim);
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return best(current, previous, isMinim);
              }
              ++iter;
          } [5273,9469]
  replace while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return best(current, previous, isMinim);
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return best(current, previous, isMinim);
              }
              ++iter;
          } by while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return current;
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return current;
              }
              ++iter;
          }

...
