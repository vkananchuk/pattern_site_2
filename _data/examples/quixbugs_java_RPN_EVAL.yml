---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: RPN_EVAL
        children: []
        pos: 233
        length: 8
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: rpn_eval
              children: []
              pos: 269
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList tokens
                children: []
                pos: 278
                length: 16
              pos: 248
              length: 859
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<String, BinaryOperator<Double>> op = new HashMap<String,
                    BinaryOperator<Double>>();
                children: []
                pos: 306
                length: 87
              - type: expression_statement
                fields:
                  text: op.put("+", (a, b) -> a + b);
                children: []
                pos: 402
                length: 29
              - type: expression_statement
                fields:
                  text: op.put("-", (a, b) -> a - b);
                children: []
                pos: 440
                length: 29
              - type: expression_statement
                fields:
                  text: op.put("*", (a, b) -> a * b);
                children: []
                pos: 478
                length: 29
              - type: expression_statement
                fields:
                  text: op.put("/", (a, b) -> a / b);
                children: []
                pos: 516
                length: 29
              - type: local_variable_declaration
                fields:
                  text: Stack stack = new Stack();
                children: []
                pos: 556
                length: 26
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Object token : tokens) {
                                if (Double.class.isInstance(token)) {
                                    stack.push((Double) token);
                                } else {
                                    token = (String) token;
                                    Double a = (Double) stack.pop();
                                    Double b = (Double) stack.pop();
                                    Double c = 0.0;
                                    BinaryOperator<Double> bin_op = op.get(token);
                                    c = bin_op.apply(a,b);
                                    stack.push(c);
                                }
                            }
                children: []
                pos: 592
                length: 471
              - type: return_statement
                fields:
                  text: return (Double) stack.pop();
                children: []
                pos: 1073
                length: 28
              pos: 296
              length: 811
          children: []
          pos: 248
          length: 859
        pos: 220
        length: 889
    children: []
    pos: 220
    length: 889
  pos: 0
  length: 1110
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: RPN_EVAL
        children: []
        pos: 241
        length: 8
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: rpn_eval
              children: []
              pos: 277
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList tokens
                children: []
                pos: 286
                length: 16
              pos: 256
              length: 859
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<String, BinaryOperator<Double>> op = new HashMap<String,
                    BinaryOperator<Double>>();
                children: []
                pos: 314
                length: 87
              - type: expression_statement
                fields:
                  text: op.put("+", (a, b) -> a + b);
                children: []
                pos: 410
                length: 29
              - type: expression_statement
                fields:
                  text: op.put("-", (a, b) -> a - b);
                children: []
                pos: 448
                length: 29
              - type: expression_statement
                fields:
                  text: op.put("*", (a, b) -> a * b);
                children: []
                pos: 486
                length: 29
              - type: expression_statement
                fields:
                  text: op.put("/", (a, b) -> a / b);
                children: []
                pos: 524
                length: 29
              - type: local_variable_declaration
                fields:
                  text: Stack stack = new Stack();
                children: []
                pos: 564
                length: 26
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Object token : tokens) {
                                if (Double.class.isInstance(token)) {
                                    stack.push((Double) token);
                                } else {
                                    token = (String) token;
                                    Double a = (Double) stack.pop();
                                    Double b = (Double) stack.pop();
                                    Double c = 0.0;
                                    BinaryOperator<Double> bin_op = op.get(token);
                                    c = bin_op.apply(b,a);
                                    stack.push(c);
                                }
                            }
                children: []
                pos: 600
                length: 471
              - type: return_statement
                fields:
                  text: return (Double) stack.pop();
                children: []
                pos: 1081
                length: 28
              pos: 304
              length: 811
          children: []
          pos: 256
          length: 859
        pos: 228
        length: 889
    children: []
    pos: 228
    length: 889
  pos: 0
  length: 1118
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n import java.util.function.BinaryOperator;\n
  \n@@ -31,7 +31,7 @@\n                 Double b = (Double) stack.pop();\n                 Double
  c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c
  = bin_op.apply(a,b);\n+                c = bin_op.apply(b,a);\n                 stack.push(c);\n
  \            }\n         }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(a,b);
                  stack.push(c);
              }
          } to for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(b,a);
                  stack.push(c);
              }
          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(a,b);
                  stack.push(c);
              }
          } [592,1063]
  replace for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(a,b);
                  stack.push(c);
              }
          } by for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(b,a);
                  stack.push(c);
              }
          }

...
