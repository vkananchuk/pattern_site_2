---
language: java
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n import java.util.function.BinaryOperator;\n
  \n@@ -31,7 +31,7 @@\n                 Double b = (Double) stack.pop();\n                 Double
  c = 0.0;\n                 BinaryOperator<Double> bin_op = op.get(token);\n-                c
  = bin_op.apply(a,b);\n+                c = bin_op.apply(b,a);\n                 stack.push(c);\n
  \            }\n         }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(a,b);
                  stack.push(c);
              }
          } to for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(b,a);
                  stack.push(c);
              }
          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(a,b);
                  stack.push(c);
              }
          } [592,1063]
  replace for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(a,b);
                  stack.push(c);
              }
          } by for (Object token : tokens) {
              if (Double.class.isInstance(token)) {
                  stack.push((Double) token);
              } else {
                  token = (String) token;
                  Double a = (Double) stack.pop();
                  Double b = (Double) stack.pop();
                  Double c = 0.0;
                  BinaryOperator<Double> bin_op = op.get(token);
                  c = bin_op.apply(b,a);
                  stack.push(c);
              }
          }

...
