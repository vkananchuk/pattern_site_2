---
language: java
text_diff: "--- before\n+++ after\n@@ -32,13 +32,7 @@\n \n     public ChecksumCalculatingInputStream(final
  Checksum checksum, final InputStream in) {\n \n-        if ( checksum == null ){\n-
  \           throw new NullPointerException(\"Parameter checksum must not be null\");\n-
  \       }\n \n-        if ( in == null ){\n-            throw new NullPointerException(\"Parameter
  in must not be null\");\n-        }\n \n         this.checksum = checksum;\n         this.in
  = in;\n"
tree_diff: |+
  New cluster:
  UPDATE from public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {

          if ( checksum == null ){
              throw new NullPointerException("Parameter checksum must not be null");
          }

          if ( in == null ){
              throw new NullPointerException("Parameter in must not be null");
          }

          this.checksum = checksum;
          this.in = in;
      } to public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {



          this.checksum = checksum;
          this.in = in;
      }
  ------------
  ===
  update-node
  ---
  constructor_declaration: public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {

          if ( checksum == null ){
              throw new NullPointerException("Parameter checksum must not be null");
          }

          if ( in == null ){
              throw new NullPointerException("Parameter in must not be null");
          }

          this.checksum = checksum;
          this.in = in;
      } [1191,1582]
  replace public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {

          if ( checksum == null ){
              throw new NullPointerException("Parameter checksum must not be null");
          }

          if ( in == null ){
              throw new NullPointerException("Parameter in must not be null");
          }

          this.checksum = checksum;
          this.in = in;
      } by public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {



          this.checksum = checksum;
          this.in = in;
      }

...
