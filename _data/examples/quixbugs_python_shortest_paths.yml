---
language: python
text_diff: "--- before\n+++ after\n@@ -7,42 +7,10 @@\n \n     for i in range(len(weight_by_node)
  - 1):\n         for (u, v), weight in weight_by_edge.items():\n-            weight_by_edge[u,
  v] = min(\n+            weight_by_node[v] = min(\n                 weight_by_node[u]
  + weight,\n                 weight_by_node[v]\n             )\n \n     return weight_by_node\n
  \n-\n-\"\"\"\n-Minimum-Weight Paths\n-bellman-ford\n-\n-Bellman-Ford algorithm implementation\n-\n-Given
  a directed graph that may contain negative edges (as long as there are no negative-weight
  cycles), efficiently calculates the minimum path weights from a source node to every
  other node in the graph.\n-\n-Input:\n-    source: A node id\n-    weight_by_edge:
  A dict containing edge weights keyed by an ordered pair of node ids\n-\n-Precondition:\n-
  \   The input graph contains no negative-weight cycles\n-\n-Output:\n-   A dict
  mapping each node id to the minimum weight of a path from the source node to that
  node\n-\n-Example:\n-    >>> shortest_paths('A', {\n-        ('A', 'B'): 3,\n-        ('A',
  'C'): 3,\n-        ('A', 'F'): 5,\n-        ('C', 'B'): -2,\n-        ('C', 'D'):
  7,\n-        ('C', 'E'): 4,\n-        ('D', 'E'): -5,\n-        ('E', 'F'): -1\n-
  \   })\n-    {'A': 0, 'C': 3, 'B': 1, 'E': 5, 'D': 10, 'F': 4}\n-\"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from for i in range(len(weight_by_node) - 1):
          for (u, v), weight in weight_by_edge.items():
              weight_by_edge[u, v] = min(
                  weight_by_node[u] + weight,
                  weight_by_node[v]
              ) to for i in range(len(weight_by_node) - 1):
          for (u, v), weight in weight_by_edge.items():
              weight_by_node[v] = min(
                  weight_by_node[u] + weight,
                  weight_by_node[v]
              )
  ------------
  ===
  update-node
  ---
  for_statement: for i in range(len(weight_by_node) - 1):
          for (u, v), weight in weight_by_edge.items():
              weight_by_edge[u, v] = min(
                  weight_by_node[u] + weight,
                  weight_by_node[v]
              ) [161,387]
  replace for i in range(len(weight_by_node) - 1):
          for (u, v), weight in weight_by_edge.items():
              weight_by_edge[u, v] = min(
                  weight_by_node[u] + weight,
                  weight_by_node[v]
              ) by for i in range(len(weight_by_node) - 1):
          for (u, v), weight in weight_by_edge.items():
              weight_by_node[v] = min(
                  weight_by_node[u] + weight,
                  weight_by_node[v]
              )

  New cluster:
  ===
  delete-node
  ---
  expression_statement: """
  Minimum-Weight Paths
  bellman-ford

  Bellman-Ford algorithm implementation

  Given a directed graph that may contain negative edges (as long as there are no negative-weight cycles), efficiently calculates the minimum path weights from a source node to every other node in the graph.

  Input:
      source: A node id
      weight_by_edge: A dict containing edge weights keyed by an ordered pair of node ids

  Precondition:
      The input graph contains no negative-weight cycles

  Output:
     A dict mapping each node id to the minimum weight of a path from the source node to that node

  Example:
      >>> shortest_paths('A', {
          ('A', 'B'): 3,
          ('A', 'C'): 3,
          ('A', 'F'): 5,
          ('C', 'B'): -2,
          ('C', 'D'): 7,
          ('C', 'E'): 4,
          ('D', 'E'): -5,
          ('E', 'F'): -1
      })
      {'A': 0, 'C': 3, 'B': 1, 'E': 5, 'D': 10, 'F': 4}
  """ [417,1285]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: """
  Minimum-Weight Paths
  bellman-ford

  Bellman-Ford algorithm implementation

  Given a directed graph that may contain negative edges (as long as there are no negative-weight cycles), efficiently calculates the minimum path weights from a source node to every other node in the graph.

  Input:
      source: A node id
      weight_by_edge: A dict containing edge weights keyed by an ordered pair of node ids

  Precondition:
      The input graph contains no negative-weight cycles

  Output:
     A dict mapping each node id to the minimum weight of a path from the source node to that node

  Example:
      >>> shortest_paths('A', {
          ('A', 'B'): 3,
          ('A', 'C'): 3,
          ('A', 'F'): 5,
          ('C', 'B'): -2,
          ('C', 'D'): 7,
          ('C', 'E'): 4,
          ('D', 'E'): -5,
          ('E', 'F'): -1
      })
      {'A': 0, 'C': 3, 'B': 1, 'E': 5, 'D': 10, 'F': 4}
  """ [417,1285]
  ===

...
