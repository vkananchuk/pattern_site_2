---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: rpn_eval
        children: []
        pos: 4
        length: 8
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: tokens
          children: []
          pos: 13
          length: 6
        pos: 0
        length: 512
      body:
        type: block
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: op
              children: []
              pos: 30
              length: 2
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: identifier
                fields:
                  text: symbol
                children: []
                pos: 33
                length: 6
              pos: 26
              length: 209
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return {
                                '+': lambda a, b: a + b,
                                '-': lambda a, b: a - b,
                                '*': lambda a, b: a * b,
                                '/': lambda a, b: a / b
                            }[symbol](a, b)
                children: []
                pos: 56
                length: 179
              pos: 56
              length: 179
          children: []
          pos: 26
          length: 209
        - type: expression_statement
          fields:
            text: stack = []
          children: []
          pos: 241
          length: 10
        - type: for_statement
          fields:
            text: |-
              for token in tokens:
                      if isinstance(token, float):
                          stack.append(token)
                      else:
                          a = stack.pop()
                          b = stack.pop()
                          stack.append(
                              op(token, a, b)
                          )
          children: []
          pos: 257
          length: 231
        - type: return_statement
          fields:
            text: return stack.pop()
          children: []
          pos: 494
          length: 18
        pos: 26
        length: 486
    children: []
    pos: 0
    length: 512
  pos: 0
  length: 513
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: rpn_eval
        children: []
        pos: 4
        length: 8
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: tokens
          children: []
          pos: 13
          length: 6
        pos: 0
        length: 512
      body:
        type: block
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: op
              children: []
              pos: 30
              length: 2
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: identifier
                fields:
                  text: symbol
                children: []
                pos: 33
                length: 6
              pos: 26
              length: 209
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return {
                                '+': lambda a, b: a + b,
                                '-': lambda a, b: a - b,
                                '*': lambda a, b: a * b,
                                '/': lambda a, b: a / b
                            }[symbol](a, b)
                children: []
                pos: 56
                length: 179
              pos: 56
              length: 179
          children: []
          pos: 26
          length: 209
        - type: expression_statement
          fields:
            text: stack = []
          children: []
          pos: 241
          length: 10
        - type: for_statement
          fields:
            text: |-
              for token in tokens:
                      if isinstance(token, float):
                          stack.append(token)
                      else:
                          a = stack.pop()
                          b = stack.pop()
                          stack.append(
                              op(token, b, a)
                          )
          children: []
          pos: 257
          length: 231
        - type: return_statement
          fields:
            text: return stack.pop()
          children: []
          pos: 494
          length: 18
        pos: 26
        length: 486
    children: []
    pos: 0
    length: 512
  pos: 0
  length: 513
text_diff: "--- before\n+++ after\n@@ -16,7 +16,7 @@\n             a = stack.pop()\n
  \            b = stack.pop()\n             stack.append(\n-                op(token,
  a, b)\n+                op(token, b, a)\n             )\n \n     return stack.pop()\n"
tree_diff: |+
  New cluster:
  UPDATE from for token in tokens:
          if isinstance(token, float):
              stack.append(token)
          else:
              a = stack.pop()
              b = stack.pop()
              stack.append(
                  op(token, a, b)
              ) to for token in tokens:
          if isinstance(token, float):
              stack.append(token)
          else:
              a = stack.pop()
              b = stack.pop()
              stack.append(
                  op(token, b, a)
              )
  ------------
  ===
  update-node
  ---
  for_statement: for token in tokens:
          if isinstance(token, float):
              stack.append(token)
          else:
              a = stack.pop()
              b = stack.pop()
              stack.append(
                  op(token, a, b)
              ) [257,488]
  replace for token in tokens:
          if isinstance(token, float):
              stack.append(token)
          else:
              a = stack.pop()
              b = stack.pop()
              stack.append(
                  op(token, a, b)
              ) by for token in tokens:
          if isinstance(token, float):
              stack.append(token)
          else:
              a = stack.pop()
              b = stack.pop()
              stack.append(
                  op(token, b, a)
              )

...
