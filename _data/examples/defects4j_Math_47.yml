---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Complex
        children: []
        pos: 2266
        length: 7
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final Complex I = new Complex(0.0, 1.0);
          children: []
          pos: 2397
          length: 54
        - type: field_declaration
          fields:
            text: public static final Complex NaN = new Complex(Double.NaN, Double.NaN);
          children: []
          pos: 2547
          length: 70
        - type: field_declaration
          fields:
            text: public static final Complex INF = new Complex(Double.POSITIVE_INFINITY,
              Double.POSITIVE_INFINITY);
          children: []
          pos: 2716
          length: 98
        - type: field_declaration
          fields:
            text: public static final Complex ONE = new Complex(1.0, 0.0);
          children: []
          pos: 2873
          length: 56
        - type: field_declaration
          fields:
            text: public static final Complex ZERO = new Complex(0.0, 0.0);
          children: []
          pos: 2988
          length: 57
        - type: field_declaration
          fields:
            text: private static final long serialVersionUID = -6195664516687396620L;
          children: []
          pos: 3094
          length: 67
        - type: field_declaration
          fields:
            text: private final double imaginary;
          children: []
          pos: 3198
          length: 31
        - type: field_declaration
          fields:
            text: private final double real;
          children: []
          pos: 3260
          length: 26
        - type: field_declaration
          fields:
            text: private final transient boolean isNaN;
          children: []
          pos: 3354
          length: 38
        - type: field_declaration
          fields:
            text: private final transient boolean isInfinite;
          children: []
          pos: 3456
          length: 43
        - type: field_declaration
          fields:
            text: private final transient boolean isZero;
          children: []
          pos: 3559
          length: 39
        - type: constructor_declaration
          fields:
            text: |-
              public Complex(double real) {
                      this(real, 0.0);
                  }
          children: []
          pos: 3714
          length: 60
        - type: constructor_declaration
          fields:
            text: |-
              public Complex(double real, double imaginary) {
                      this.real = real;
                      this.imaginary = imaginary;

                      isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
                      isInfinite = !isNaN &&
                          (Double.isInfinite(real) || Double.isInfinite(imaginary));
                      isZero = real == 0 && imaginary == 0;
                  }
          children: []
          pos: 3940
          length: 327
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: abs
              children: []
              pos: 4595
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4581
              length: 664
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 4615
                        length: 5
                    children: []
                    pos: 4614
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return Double.NaN;
                    children: []
                    pos: 4636
                    length: 18
                  pos: 4622
                  length: 42
                pos: 4611
                length: 53
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: isInfinite()
                        children: []
                        pos: 4677
                        length: 12
                    children: []
                    pos: 4676
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return Double.POSITIVE_INFINITY;
                    children: []
                    pos: 4705
                    length: 32
                  pos: 4691
                  length: 56
                pos: 4673
                length: 74
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(real)
                            children: []
                            pos: 4760
                            length: 18
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(imaginary)
                            children: []
                            pos: 4781
                            length: 23
                        children: []
                        pos: 4760
                        length: 44
                    children: []
                    pos: 4759
                    length: 46
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 4824
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 4837
                                length: 3
                            children: []
                            pos: 4824
                            length: 16
                        children: []
                        pos: 4823
                        length: 18
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return FastMath.abs(real);
                        children: []
                        pos: 4860
                        length: 26
                      pos: 4842
                      length: 58
                    pos: 4820
                    length: 80
                  - type: local_variable_declaration
                    fields:
                      text: double q = real / imaginary;
                    children: []
                    pos: 4913
                    length: 28
                  - type: return_statement
                    fields:
                      text: return FastMath.abs(imaginary) * FastMath.sqrt(1 + q *
                        q);
                    children: []
                    pos: 4954
                    length: 58
                  pos: 4806
                  length: 216
                pos: 4756
                length: 483
              pos: 4601
              length: 644
          children: []
          pos: 4581
          length: 664
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: add
              children: []
              pos: 5987
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex addend
                children: []
                pos: 5991
                length: 14
              pos: 5972
              length: 302
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(addend);
                children: []
                pos: 6046
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 6090
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: addend.isNaN
                            children: []
                            pos: 6099
                            length: 12
                        children: []
                        pos: 6090
                        length: 21
                    children: []
                    pos: 6089
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 6127
                    length: 11
                  pos: 6113
                  length: 35
                pos: 6086
                length: 62
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real + addend.getReal(),
                                                 imaginary + addend.getImaginary());
                children: []
                pos: 6158
                length: 110
              pos: 6036
              length: 238
          children: []
          pos: 5972
          length: 302
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: add
              children: []
              pos: 6576
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double addend
                children: []
                pos: 6580
                length: 13
              pos: 6561
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 6609
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(addend)
                            children: []
                            pos: 6618
                            length: 20
                        children: []
                        pos: 6609
                        length: 29
                    children: []
                    pos: 6608
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 6654
                    length: 11
                  pos: 6640
                  length: 35
                pos: 6605
                length: 70
              - type: return_statement
                fields:
                  text: return createComplex(real + addend, imaginary);
                children: []
                pos: 6685
                length: 47
              pos: 6595
              length: 143
          children: []
          pos: 6561
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: conjugate
              children: []
              pos: 7358
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7343
              length: 138
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 7384
                        length: 5
                    children: []
                    pos: 7383
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 7405
                    length: 11
                  pos: 7391
                  length: 35
                pos: 7380
                length: 46
              - type: return_statement
                fields:
                  text: return createComplex(real, -imaginary);
                children: []
                pos: 7436
                length: 39
              pos: 7370
              length: 111
          children: []
          pos: 7343
          length: 138
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: divide
              children: []
              pos: 9361
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex divisor
                children: []
                pos: 9368
                length: 15
              pos: 9346
              length: 936
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(divisor);
                children: []
                pos: 9432
                length: 32
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 9477
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: divisor.isNaN
                            children: []
                            pos: 9486
                            length: 13
                        children: []
                        pos: 9477
                        length: 22
                    children: []
                    pos: 9476
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 9515
                    length: 11
                  pos: 9501
                  length: 35
                pos: 9473
                length: 63
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: field_access
                        fields:
                          text: divisor.isZero
                        children: []
                        pos: 9550
                        length: 14
                    children: []
                    pos: 9549
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: 'return isZero ? NaN : INF;'
                    children: []
                    pos: 9580
                    length: 26
                  pos: 9566
                  length: 50
                pos: 9546
                length: 70
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: divisor.isInfinite()
                            children: []
                            pos: 9630
                            length: 20
                          right:
                            type: unary_expression
                            fields:
                              text: "!isInfinite()"
                            children: []
                            pos: 9654
                            length: 13
                        children: []
                        pos: 9630
                        length: 37
                    children: []
                    pos: 9629
                    length: 39
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return ZERO;
                    children: []
                    pos: 9683
                    length: 12
                  pos: 9669
                  length: 36
                pos: 9626
                length: 79
              - type: local_variable_declaration
                fields:
                  text: final double c = divisor.getReal();
                children: []
                pos: 9715
                length: 35
              - type: local_variable_declaration
                fields:
                  text: final double d = divisor.getImaginary();
                children: []
                pos: 9759
                length: 40
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(c)
                            children: []
                            pos: 9813
                            length: 15
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(d)
                            children: []
                            pos: 9831
                            length: 15
                        children: []
                        pos: 9813
                        length: 33
                    children: []
                    pos: 9812
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: double q = c / d;
                    children: []
                    pos: 9862
                    length: 17
                  - type: local_variable_declaration
                    fields:
                      text: double denominator = c * q + d;
                    children: []
                    pos: 9892
                    length: 31
                  - type: return_statement
                    fields:
                      text: |-
                        return createComplex((real * q + imaginary) / denominator,
                                        (imaginary * q - real) / denominator);
                    children: []
                    pos: 9936
                    length: 113
                  pos: 9848
                  length: 211
                pos: 9809
                length: 467
              pos: 9422
              length: 860
          children: []
          pos: 9346
          length: 936
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: divide
              children: []
              pos: 10603
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double divisor
                children: []
                pos: 10610
                length: 14
              pos: 10588
              length: 399
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 10640
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(divisor)
                            children: []
                            pos: 10649
                            length: 21
                        children: []
                        pos: 10640
                        length: 30
                    children: []
                    pos: 10639
                    length: 32
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10686
                    length: 11
                  pos: 10672
                  length: 35
                pos: 10636
                length: 71
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: divisor
                            children: []
                            pos: 10720
                            length: 7
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: 0d
                            children: []
                            pos: 10731
                            length: 2
                        children: []
                        pos: 10720
                        length: 13
                    children: []
                    pos: 10719
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: 'return isZero ? NaN : INF;'
                    children: []
                    pos: 10749
                    length: 26
                  pos: 10735
                  length: 50
                pos: 10716
                length: 69
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Double.isInfinite(divisor)
                        children: []
                        pos: 10798
                        length: 26
                    children: []
                    pos: 10797
                    length: 28
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: 'return !isInfinite() ? ZERO : NaN;'
                    children: []
                    pos: 10840
                    length: 34
                  pos: 10826
                  length: 58
                pos: 10794
                length: 90
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real / divisor,
                                                 imaginary  / divisor);
                children: []
                pos: 10893
                length: 88
              pos: 10626
              length: 361
          children: []
          pos: 10588
          length: 399
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: equals
              children: []
              pos: 11741
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Object other
                children: []
                pos: 11748
                length: 12
              pos: 11712
              length: 395
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: this
                            fields: {}
                            children: []
                            pos: 11776
                            length: 4
                          right:
                            type: identifier
                            fields:
                              text: other
                            children: []
                            pos: 11784
                            length: 5
                        children: []
                        pos: 11776
                        length: 13
                    children: []
                    pos: 11775
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return true;
                    children: []
                    pos: 11805
                    length: 12
                  pos: 11791
                  length: 36
                pos: 11772
                length: 55
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: instanceof_expression
                        fields:
                          text: other instanceof Complex
                        children: []
                        pos: 11840
                        length: 24
                    children: []
                    pos: 11839
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Complex c = (Complex)other;
                    children: []
                    pos: 11879
                    length: 27
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: field_access
                            fields:
                              text: c.isNaN
                            children: []
                            pos: 11923
                            length: 7
                        children: []
                        pos: 11922
                        length: 9
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return isNaN;
                        children: []
                        pos: 11950
                        length: 13
                      pos: 11932
                      length: 45
                    pos: 11919
                    length: 150
                  pos: 11865
                  length: 214
                pos: 11836
                length: 243
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 12088
                length: 13
              pos: 11762
              length: 345
          children: []
          pos: 11712
          length: 395
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hashCode
              children: []
              pos: 12365
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 12340
              length: 185
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 12390
                        length: 5
                    children: []
                    pos: 12389
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return 7;
                    children: []
                    pos: 12411
                    length: 9
                  pos: 12397
                  length: 33
                pos: 12386
                length: 44
              - type: return_statement
                fields:
                  text: |-
                    return 37 * (17 * MathUtils.hash(imaginary) +
                                MathUtils.hash(real));
                children: []
                pos: 12439
                length: 80
              pos: 12376
              length: 149
          children: []
          pos: 12340
          length: 185
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getImaginary
              children: []
              pos: 12637
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 12623
              length: 62
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return imaginary;
                children: []
                pos: 12662
                length: 17
              pos: 12652
              length: 33
          children: []
          pos: 12623
          length: 62
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getReal
              children: []
              pos: 12787
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 12773
              length: 52
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return real;
                children: []
                pos: 12807
                length: 12
              pos: 12797
              length: 28
          children: []
          pos: 12773
          length: 52
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isNaN
              children: []
              pos: 13065
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13050
              length: 52
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isNaN;
                children: []
                pos: 13083
                length: 13
              pos: 13073
              length: 29
          children: []
          pos: 13050
          length: 52
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isInfinite
              children: []
              pos: 13498
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13483
              length: 62
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isInfinite;
                children: []
                pos: 13521
                length: 18
              pos: 13511
              length: 34
          children: []
          pos: 13483
          length: 62
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 14584
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex factor
                children: []
                pos: 14593
                length: 14
              pos: 14569
              length: 642
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(factor);
                children: []
                pos: 14656
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 14700
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: factor.isNaN
                            children: []
                            pos: 14709
                            length: 12
                        children: []
                        pos: 14700
                        length: 21
                    children: []
                    pos: 14699
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 14737
                    length: 11
                  pos: 14723
                  length: 35
                pos: 14696
                length: 62
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: or
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: Double.isInfinite(real)
                                    children: []
                                    pos: 14771
                                    length: 23
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: Double.isInfinite(imaginary)
                                    children: []
                                    pos: 14810
                                    length: 28
                                children: []
                                pos: 14771
                                length: 67
                              right:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(factor.real)
                                children: []
                                pos: 14854
                                length: 30
                            children: []
                            pos: 14771
                            length: 113
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(factor.imaginary)
                            children: []
                            pos: 14900
                            length: 35
                        children: []
                        pos: 14771
                        length: 164
                    children: []
                    pos: 14770
                    length: 166
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 15023
                    length: 11
                  pos: 14937
                  length: 107
                pos: 14767
                length: 277
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real * factor.real - imaginary * factor.imaginary,
                                                 real * factor.imaginary + imaginary * factor.real);
                children: []
                pos: 15053
                length: 152
              pos: 14646
              length: 565
          children: []
          pos: 14569
          length: 642
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 15522
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double factor
                children: []
                pos: 15531
                length: 13
              pos: 15507
              length: 420
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 15560
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(factor)
                            children: []
                            pos: 15569
                            length: 20
                        children: []
                        pos: 15560
                        length: 29
                    children: []
                    pos: 15559
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 15605
                    length: 11
                  pos: 15591
                  length: 35
                pos: 15556
                length: 70
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(real)
                                children: []
                                pos: 15639
                                length: 23
                              right:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(imaginary)
                                children: []
                                pos: 15678
                                length: 28
                            children: []
                            pos: 15639
                            length: 67
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(factor)
                            children: []
                            pos: 15722
                            length: 25
                        children: []
                        pos: 15639
                        length: 108
                    children: []
                    pos: 15638
                    length: 110
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 15835
                    length: 11
                  pos: 15749
                  length: 107
                pos: 15635
                length: 221
              - type: return_statement
                fields:
                  text: return createComplex(real * factor, imaginary * factor);
                children: []
                pos: 15865
                length: 56
              pos: 15546
              length: 381
          children: []
          pos: 15507
          length: 420
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: negate
              children: []
              pos: 16183
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 16168
              length: 136
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 16206
                        length: 5
                    children: []
                    pos: 16205
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 16227
                    length: 11
                  pos: 16213
                  length: 35
                pos: 16202
                length: 46
              - type: return_statement
                fields:
                  text: return createComplex(-real, -imaginary);
                children: []
                pos: 16258
                length: 40
              pos: 16192
              length: 112
          children: []
          pos: 16168
          length: 136
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subtract
              children: []
              pos: 17053
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex subtrahend
                children: []
                pos: 17062
                length: 18
              pos: 17038
              length: 335
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(subtrahend);
                children: []
                pos: 17129
                length: 35
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 17177
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: subtrahend.isNaN
                            children: []
                            pos: 17186
                            length: 16
                        children: []
                        pos: 17177
                        length: 25
                    children: []
                    pos: 17176
                    length: 27
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 17218
                    length: 11
                  pos: 17204
                  length: 35
                pos: 17173
                length: 66
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real - subtrahend.getReal(),
                                                 imaginary - subtrahend.getImaginary());
                children: []
                pos: 17249
                length: 118
              pos: 17119
              length: 254
          children: []
          pos: 17038
          length: 335
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subtract
              children: []
              pos: 17650
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double subtrahend
                children: []
                pos: 17659
                length: 17
              pos: 17635
              length: 193
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 17692
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(subtrahend)
                            children: []
                            pos: 17701
                            length: 24
                        children: []
                        pos: 17692
                        length: 33
                    children: []
                    pos: 17691
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 17741
                    length: 11
                  pos: 17727
                  length: 35
                pos: 17688
                length: 74
              - type: return_statement
                fields:
                  text: return createComplex(real - subtrahend, imaginary);
                children: []
                pos: 17771
                length: 51
              pos: 17678
              length: 150
          children: []
          pos: 17635
          length: 193
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: acos
              children: []
              pos: 18372
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 18357
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 18393
                        length: 5
                    children: []
                    pos: 18392
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 18414
                    length: 11
                  pos: 18400
                  length: 35
                pos: 18389
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return this.add(this.sqrt1z().multiply(I)).log()
                                .multiply(I.negate());
                children: []
                pos: 18445
                length: 83
              pos: 18379
              length: 155
          children: []
          pos: 18357
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: asin
              children: []
              pos: 19069
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 19054
              length: 172
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 19090
                        length: 5
                    children: []
                    pos: 19089
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 19111
                    length: 11
                  pos: 19097
                  length: 35
                pos: 19086
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return sqrt1z().add(this.multiply(I)).log()
                                .multiply(I.negate());
                children: []
                pos: 19142
                length: 78
              pos: 19076
              length: 150
          children: []
          pos: 19054
          length: 172
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: atan
              children: []
              pos: 19757
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 19742
              length: 201
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 19778
                        length: 5
                    children: []
                    pos: 19777
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 19799
                    length: 11
                  pos: 19785
                  length: 35
                pos: 19774
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return this.add(I).divide(I.subtract(this)).log()
                                .multiply(I.divide(createComplex(2.0, 0.0)));
                children: []
                pos: 19830
                length: 107
              pos: 19764
              length: 179
          children: []
          pos: 19742
          length: 201
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cos
              children: []
              pos: 21050
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 21035
              length: 240
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 21070
                        length: 5
                    children: []
                    pos: 21069
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 21091
                    length: 11
                  pos: 21077
                  length: 35
                pos: 21066
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
                                                 -FastMath.sin(real) * MathUtils.sinh(imaginary));
                children: []
                pos: 21122
                length: 147
              pos: 21056
              length: 219
          children: []
          pos: 21035
          length: 240
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cosh
              children: []
              pos: 22419
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 22404
              length: 240
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 22440
                        length: 5
                    children: []
                    pos: 22439
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 22461
                    length: 11
                  pos: 22447
                  length: 35
                pos: 22436
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
                                                 MathUtils.sinh(real) * FastMath.sin(imaginary));
                children: []
                pos: 22492
                length: 146
              pos: 22426
              length: 218
          children: []
          pos: 22404
          length: 240
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exp
              children: []
              pos: 23782
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 23767
              length: 259
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 23802
                        length: 5
                    children: []
                    pos: 23801
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 23823
                    length: 11
                  pos: 23809
                  length: 35
                pos: 23798
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double expReal = FastMath.exp(real);
                children: []
                pos: 23854
                length: 36
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(expReal *  FastMath.cos(imaginary),
                                                 expReal * FastMath.sin(imaginary));
                children: []
                pos: 23899
                length: 121
              pos: 23788
              length: 238
          children: []
          pos: 23767
          length: 259
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: log
              children: []
              pos: 25395
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 25380
              length: 197
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 25415
                        length: 5
                    children: []
                    pos: 25414
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 25436
                    length: 11
                  pos: 25422
                  length: 35
                pos: 25411
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.log(abs()),
                                                 FastMath.atan2(imaginary, real));
                children: []
                pos: 25467
                length: 104
              pos: 25401
              length: 176
          children: []
          pos: 25380
          length: 197
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pow
              children: []
              pos: 26329
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex x
                children: []
                pos: 26333
                length: 9
              pos: 26314
              length: 154
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(x);
                children: []
                pos: 26391
                length: 26
              - type: return_statement
                fields:
                  text: return this.log().multiply(x).exp();
                children: []
                pos: 26426
                length: 36
              pos: 26381
              length: 87
          children: []
          pos: 26314
          length: 154
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pow
              children: []
              pos: 26739
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 26743
                length: 8
              pos: 26724
              length: 81
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return this.log().multiply(x).exp();
                children: []
                pos: 26763
                length: 36
              pos: 26753
              length: 52
          children: []
          pos: 26724
          length: 81
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sin
              children: []
              pos: 27914
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 27899
              length: 239
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 27934
                        length: 5
                    children: []
                    pos: 27933
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 27955
                    length: 11
                  pos: 27941
                  length: 35
                pos: 27930
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),
                                                 FastMath.cos(real) * MathUtils.sinh(imaginary));
                children: []
                pos: 27986
                length: 146
              pos: 27920
              length: 218
          children: []
          pos: 27899
          length: 239
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sinh
              children: []
              pos: 29271
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 29256
              length: 223
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 29292
                        length: 5
                    children: []
                    pos: 29291
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 29313
                    length: 11
                  pos: 29299
                  length: 35
                pos: 29288
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),
                                MathUtils.cosh(real) * FastMath.sin(imaginary));
                children: []
                pos: 29344
                length: 129
              pos: 29278
              length: 201
          children: []
          pos: 29256
          length: 223
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sqrt
              children: []
              pos: 30850
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 30835
              length: 511
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 30871
                        length: 5
                    children: []
                    pos: 30870
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 30892
                    length: 11
                  pos: 30878
                  length: 35
                pos: 30867
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: real
                                children: []
                                pos: 30927
                                length: 4
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 30935
                                length: 3
                            children: []
                            pos: 30927
                            length: 11
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 30942
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 30955
                                length: 3
                            children: []
                            pos: 30942
                            length: 16
                        children: []
                        pos: 30927
                        length: 31
                    children: []
                    pos: 30926
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(0.0, 0.0);
                    children: []
                    pos: 30974
                    length: 31
                  pos: 30960
                  length: 55
                pos: 30923
                length: 92
              - type: local_variable_declaration
                fields:
                  text: double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
                children: []
                pos: 31025
                length: 61
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: real
                            children: []
                            pos: 31099
                            length: 4
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: '0.0'
                            children: []
                            pos: 31107
                            length: 3
                        children: []
                        pos: 31099
                        length: 11
                    children: []
                    pos: 31098
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(t, imaginary / (2.0 * t));
                    children: []
                    pos: 31126
                    length: 47
                  pos: 31112
                  length: 71
                pos: 31095
                length: 245
              pos: 30857
              length: 489
          children: []
          pos: 30835
          length: 511
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sqrt1z
              children: []
              pos: 32033
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 32018
              length: 108
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
                children: []
                pos: 32052
                length: 68
              pos: 32042
              length: 84
          children: []
          pos: 32018
          length: 108
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tan
              children: []
              pos: 33315
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 33300
              length: 350
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 33335
                        length: 5
                    children: []
                    pos: 33334
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 33356
                    length: 11
                  pos: 33342
                  length: 35
                pos: 33331
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double real2 = 2.0 * real;
                children: []
                pos: 33387
                length: 26
              - type: local_variable_declaration
                fields:
                  text: double imaginary2 = 2.0 * imaginary;
                children: []
                pos: 33422
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
                children: []
                pos: 33467
                length: 60
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sin(real2) / d,
                                                 MathUtils.sinh(imaginary2) / d);
                children: []
                pos: 33537
                length: 107
              pos: 33321
              length: 329
          children: []
          pos: 33300
          length: 350
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tanh
              children: []
              pos: 34846
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 34831
              length: 351
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 34867
                        length: 5
                    children: []
                    pos: 34866
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 34888
                    length: 11
                  pos: 34874
                  length: 35
                pos: 34863
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double real2 = 2.0 * real;
                children: []
                pos: 34919
                length: 26
              - type: local_variable_declaration
                fields:
                  text: double imaginary2 = 2.0 * imaginary;
                children: []
                pos: 34954
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);
                children: []
                pos: 34999
                length: 60
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(MathUtils.sinh(real2) / d,
                                                 FastMath.sin(imaginary2) / d);
                children: []
                pos: 35069
                length: 107
              pos: 34853
              length: 329
          children: []
          pos: 34831
          length: 351
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getArgument
              children: []
              pos: 36030
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 36016
              length: 93
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return FastMath.atan2(getImaginary(), getReal());
                children: []
                pos: 36054
                length: 49
              pos: 36044
              length: 65
          children: []
          pos: 36016
          length: 93
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nthRoot
              children: []
              pos: 37052
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 37060
                length: 5
              pos: 37031
              length: 1170
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 37082
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 37087
                            length: 1
                        children: []
                        pos: 37082
                        length: 6
                    children: []
                    pos: 37081
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: |-
                        throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,
                                                                   n);
                    children: []
                    pos: 37104
                    length: 134
                  pos: 37090
                  length: 158
                pos: 37078
                length: 170
              - type: local_variable_declaration
                fields:
                  text: final List<Complex> result = new ArrayList<Complex>();
                children: []
                pos: 37258
                length: 54
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 37326
                        length: 5
                    children: []
                    pos: 37325
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: result.add(NaN);
                    children: []
                    pos: 37347
                    length: 16
                  - type: return_statement
                    fields:
                      text: return result;
                    children: []
                    pos: 37376
                    length: 14
                  pos: 37333
                  length: 67
                pos: 37322
                length: 78
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: isInfinite()
                        children: []
                        pos: 37413
                        length: 12
                    children: []
                    pos: 37412
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: result.add(INF);
                    children: []
                    pos: 37441
                    length: 16
                  - type: return_statement
                    fields:
                      text: return result;
                    children: []
                    pos: 37470
                    length: 14
                  pos: 37427
                  length: 67
                pos: 37409
                length: 85
              - type: local_variable_declaration
                fields:
                  text: final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);
                children: []
                pos: 37579
                length: 57
              - type: local_variable_declaration
                fields:
                  text: final double nthPhi = getArgument() / n;
                children: []
                pos: 37716
                length: 40
              - type: local_variable_declaration
                fields:
                  text: final double slice = 2 * FastMath.PI / n;
                children: []
                pos: 37765
                length: 41
              - type: local_variable_declaration
                fields:
                  text: double innerPart = nthPhi;
                children: []
                pos: 37815
                length: 26
              - type: for_statement
                fields:
                  text: |-
                    for (int k = 0; k < n ; k++) {
                                // inner part
                                final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);
                                final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);
                                result.add(createComplex(realPart, imaginaryPart));
                                innerPart += slice;
                            }
                children: []
                pos: 37850
                length: 321
              - type: return_statement
                fields:
                  text: return result;
                children: []
                pos: 38181
                length: 14
              pos: 37067
              length: 1134
          children: []
          pos: 37031
          length: 1170
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createComplex
              children: []
              pos: 38494
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 38508
                length: 15
              pos: 38476
              length: 167
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new Complex(realPart, imaginaryPart);
                children: []
                pos: 38593
                length: 44
              pos: 38583
              length: 60
          children: []
          pos: 38476
          length: 167
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: valueOf
              children: []
              pos: 38874
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 38882
                length: 15
              pos: 38852
              length: 278
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(realPart)
                            children: []
                            pos: 38969
                            length: 22
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(imaginaryPart)
                            children: []
                            pos: 39007
                            length: 27
                        children: []
                        pos: 38969
                        length: 65
                    children: []
                    pos: 38968
                    length: 67
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 39050
                    length: 11
                  pos: 39036
                  length: 35
                pos: 38965
                length: 106
              - type: return_statement
                fields:
                  text: return new Complex(realPart, imaginaryPart);
                children: []
                pos: 39080
                length: 44
              pos: 38955
              length: 175
          children: []
          pos: 38852
          length: 278
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: valueOf
              children: []
              pos: 39307
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 39315
                length: 15
              pos: 39285
              length: 164
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Double.isNaN(realPart)
                        children: []
                        pos: 39346
                        length: 22
                    children: []
                    pos: 39345
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 39384
                    length: 11
                  pos: 39370
                  length: 35
                pos: 39342
                length: 63
              - type: return_statement
                fields:
                  text: return new Complex(realPart);
                children: []
                pos: 39414
                length: 29
              pos: 39332
              length: 117
          children: []
          pos: 39285
          length: 164
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: readResolve
              children: []
              pos: 39744
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 39721
              length: 91
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return createComplex(real, imaginary);
                children: []
                pos: 39768
                length: 38
              pos: 39758
              length: 54
          children: []
          pos: 39721
          length: 91
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getField
              children: []
              pos: 39863
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 39843
              length: 81
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return ComplexField.getInstance();
                children: []
                pos: 39884
                length: 34
              pos: 39874
              length: 50
          children: []
          pos: 39843
          length: 81
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: toString
              children: []
              pos: 39983
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 39955
              length: 98
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return "(" + real + ", " + imaginary + ")";
                children: []
                pos: 40004
                length: 43
              pos: 39994
              length: 59
          children: []
          pos: 39955
          length: 98
        pos: 2253
        length: 37802
    children: []
    pos: 2253
    length: 37802
  pos: 0
  length: 40056
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Complex
        children: []
        pos: 2266
        length: 7
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final Complex I = new Complex(0.0, 1.0);
          children: []
          pos: 2397
          length: 54
        - type: field_declaration
          fields:
            text: public static final Complex NaN = new Complex(Double.NaN, Double.NaN);
          children: []
          pos: 2547
          length: 70
        - type: field_declaration
          fields:
            text: public static final Complex INF = new Complex(Double.POSITIVE_INFINITY,
              Double.POSITIVE_INFINITY);
          children: []
          pos: 2716
          length: 98
        - type: field_declaration
          fields:
            text: public static final Complex ONE = new Complex(1.0, 0.0);
          children: []
          pos: 2873
          length: 56
        - type: field_declaration
          fields:
            text: public static final Complex ZERO = new Complex(0.0, 0.0);
          children: []
          pos: 2988
          length: 57
        - type: field_declaration
          fields:
            text: private static final long serialVersionUID = -6195664516687396620L;
          children: []
          pos: 3094
          length: 67
        - type: field_declaration
          fields:
            text: private final double imaginary;
          children: []
          pos: 3198
          length: 31
        - type: field_declaration
          fields:
            text: private final double real;
          children: []
          pos: 3260
          length: 26
        - type: field_declaration
          fields:
            text: private final transient boolean isNaN;
          children: []
          pos: 3354
          length: 38
        - type: field_declaration
          fields:
            text: private final transient boolean isInfinite;
          children: []
          pos: 3456
          length: 43
        - type: constructor_declaration
          fields:
            text: |-
              public Complex(double real) {
                      this(real, 0.0);
                  }
          children: []
          pos: 3670
          length: 60
        - type: constructor_declaration
          fields:
            text: |-
              public Complex(double real, double imaginary) {
                      this.real = real;
                      this.imaginary = imaginary;

                      isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
                      isInfinite = !isNaN &&
                          (Double.isInfinite(real) || Double.isInfinite(imaginary));
                  }
          children: []
          pos: 3896
          length: 281
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: abs
              children: []
              pos: 4505
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4491
              length: 664
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 4525
                        length: 5
                    children: []
                    pos: 4524
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return Double.NaN;
                    children: []
                    pos: 4546
                    length: 18
                  pos: 4532
                  length: 42
                pos: 4521
                length: 53
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: isInfinite()
                        children: []
                        pos: 4587
                        length: 12
                    children: []
                    pos: 4586
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return Double.POSITIVE_INFINITY;
                    children: []
                    pos: 4615
                    length: 32
                  pos: 4601
                  length: 56
                pos: 4583
                length: 74
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(real)
                            children: []
                            pos: 4670
                            length: 18
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(imaginary)
                            children: []
                            pos: 4691
                            length: 23
                        children: []
                        pos: 4670
                        length: 44
                    children: []
                    pos: 4669
                    length: 46
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 4734
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 4747
                                length: 3
                            children: []
                            pos: 4734
                            length: 16
                        children: []
                        pos: 4733
                        length: 18
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return FastMath.abs(real);
                        children: []
                        pos: 4770
                        length: 26
                      pos: 4752
                      length: 58
                    pos: 4730
                    length: 80
                  - type: local_variable_declaration
                    fields:
                      text: double q = real / imaginary;
                    children: []
                    pos: 4823
                    length: 28
                  - type: return_statement
                    fields:
                      text: return FastMath.abs(imaginary) * FastMath.sqrt(1 + q *
                        q);
                    children: []
                    pos: 4864
                    length: 58
                  pos: 4716
                  length: 216
                pos: 4666
                length: 483
              pos: 4511
              length: 644
          children: []
          pos: 4491
          length: 664
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: add
              children: []
              pos: 5897
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex addend
                children: []
                pos: 5901
                length: 14
              pos: 5882
              length: 302
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(addend);
                children: []
                pos: 5956
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 6000
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: addend.isNaN
                            children: []
                            pos: 6009
                            length: 12
                        children: []
                        pos: 6000
                        length: 21
                    children: []
                    pos: 5999
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 6037
                    length: 11
                  pos: 6023
                  length: 35
                pos: 5996
                length: 62
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real + addend.getReal(),
                                                 imaginary + addend.getImaginary());
                children: []
                pos: 6068
                length: 110
              pos: 5946
              length: 238
          children: []
          pos: 5882
          length: 302
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: add
              children: []
              pos: 6486
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double addend
                children: []
                pos: 6490
                length: 13
              pos: 6471
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 6519
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(addend)
                            children: []
                            pos: 6528
                            length: 20
                        children: []
                        pos: 6519
                        length: 29
                    children: []
                    pos: 6518
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 6564
                    length: 11
                  pos: 6550
                  length: 35
                pos: 6515
                length: 70
              - type: return_statement
                fields:
                  text: return createComplex(real + addend, imaginary);
                children: []
                pos: 6595
                length: 47
              pos: 6505
              length: 143
          children: []
          pos: 6471
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: conjugate
              children: []
              pos: 7268
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7253
              length: 138
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 7294
                        length: 5
                    children: []
                    pos: 7293
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 7315
                    length: 11
                  pos: 7301
                  length: 35
                pos: 7290
                length: 46
              - type: return_statement
                fields:
                  text: return createComplex(real, -imaginary);
                children: []
                pos: 7346
                length: 39
              pos: 7280
              length: 111
          children: []
          pos: 7253
          length: 138
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: divide
              children: []
              pos: 9271
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex divisor
                children: []
                pos: 9278
                length: 15
              pos: 9256
              length: 964
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(divisor);
                children: []
                pos: 9342
                length: 32
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 9387
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: divisor.isNaN
                            children: []
                            pos: 9396
                            length: 13
                        children: []
                        pos: 9387
                        length: 22
                    children: []
                    pos: 9386
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 9425
                    length: 11
                  pos: 9411
                  length: 35
                pos: 9383
                length: 63
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: divisor.getReal()
                                children: []
                                pos: 9460
                                length: 17
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 9481
                                length: 3
                            children: []
                            pos: 9460
                            length: 24
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: divisor.getImaginary()
                                children: []
                                pos: 9488
                                length: 22
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 9514
                                length: 3
                            children: []
                            pos: 9488
                            length: 29
                        children: []
                        pos: 9460
                        length: 57
                    children: []
                    pos: 9459
                    length: 59
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 9533
                    length: 11
                  pos: 9519
                  length: 35
                pos: 9456
                length: 98
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: divisor.isInfinite()
                            children: []
                            pos: 9568
                            length: 20
                          right:
                            type: unary_expression
                            fields:
                              text: "!isInfinite()"
                            children: []
                            pos: 9592
                            length: 13
                        children: []
                        pos: 9568
                        length: 37
                    children: []
                    pos: 9567
                    length: 39
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return ZERO;
                    children: []
                    pos: 9621
                    length: 12
                  pos: 9607
                  length: 36
                pos: 9564
                length: 79
              - type: local_variable_declaration
                fields:
                  text: final double c = divisor.getReal();
                children: []
                pos: 9653
                length: 35
              - type: local_variable_declaration
                fields:
                  text: final double d = divisor.getImaginary();
                children: []
                pos: 9697
                length: 40
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(c)
                            children: []
                            pos: 9751
                            length: 15
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(d)
                            children: []
                            pos: 9769
                            length: 15
                        children: []
                        pos: 9751
                        length: 33
                    children: []
                    pos: 9750
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: double q = c / d;
                    children: []
                    pos: 9800
                    length: 17
                  - type: local_variable_declaration
                    fields:
                      text: double denominator = c * q + d;
                    children: []
                    pos: 9830
                    length: 31
                  - type: return_statement
                    fields:
                      text: |-
                        return createComplex((real * q + imaginary) / denominator,
                                        (imaginary * q - real) / denominator);
                    children: []
                    pos: 9874
                    length: 113
                  pos: 9786
                  length: 211
                pos: 9747
                length: 467
              pos: 9332
              length: 888
          children: []
          pos: 9256
          length: 964
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: divide
              children: []
              pos: 10541
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double divisor
                children: []
                pos: 10548
                length: 14
              pos: 10526
              length: 384
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 10578
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(divisor)
                            children: []
                            pos: 10587
                            length: 21
                        children: []
                        pos: 10578
                        length: 30
                    children: []
                    pos: 10577
                    length: 32
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10624
                    length: 11
                  pos: 10610
                  length: 35
                pos: 10574
                length: 71
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: divisor
                            children: []
                            pos: 10658
                            length: 7
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: 0d
                            children: []
                            pos: 10669
                            length: 2
                        children: []
                        pos: 10658
                        length: 13
                    children: []
                    pos: 10657
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10687
                    length: 11
                  pos: 10673
                  length: 35
                pos: 10654
                length: 54
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Double.isInfinite(divisor)
                        children: []
                        pos: 10721
                        length: 26
                    children: []
                    pos: 10720
                    length: 28
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: 'return !isInfinite() ? ZERO : NaN;'
                    children: []
                    pos: 10763
                    length: 34
                  pos: 10749
                  length: 58
                pos: 10717
                length: 90
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real / divisor,
                                                 imaginary  / divisor);
                children: []
                pos: 10816
                length: 88
              pos: 10564
              length: 346
          children: []
          pos: 10526
          length: 384
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: equals
              children: []
              pos: 11664
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Object other
                children: []
                pos: 11671
                length: 12
              pos: 11635
              length: 395
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: this
                            fields: {}
                            children: []
                            pos: 11699
                            length: 4
                          right:
                            type: identifier
                            fields:
                              text: other
                            children: []
                            pos: 11707
                            length: 5
                        children: []
                        pos: 11699
                        length: 13
                    children: []
                    pos: 11698
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return true;
                    children: []
                    pos: 11728
                    length: 12
                  pos: 11714
                  length: 36
                pos: 11695
                length: 55
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: instanceof_expression
                        fields:
                          text: other instanceof Complex
                        children: []
                        pos: 11763
                        length: 24
                    children: []
                    pos: 11762
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Complex c = (Complex)other;
                    children: []
                    pos: 11802
                    length: 27
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: field_access
                            fields:
                              text: c.isNaN
                            children: []
                            pos: 11846
                            length: 7
                        children: []
                        pos: 11845
                        length: 9
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return isNaN;
                        children: []
                        pos: 11873
                        length: 13
                      pos: 11855
                      length: 45
                    pos: 11842
                    length: 150
                  pos: 11788
                  length: 214
                pos: 11759
                length: 243
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 12011
                length: 13
              pos: 11685
              length: 345
          children: []
          pos: 11635
          length: 395
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hashCode
              children: []
              pos: 12288
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 12263
              length: 185
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 12313
                        length: 5
                    children: []
                    pos: 12312
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return 7;
                    children: []
                    pos: 12334
                    length: 9
                  pos: 12320
                  length: 33
                pos: 12309
                length: 44
              - type: return_statement
                fields:
                  text: |-
                    return 37 * (17 * MathUtils.hash(imaginary) +
                                MathUtils.hash(real));
                children: []
                pos: 12362
                length: 80
              pos: 12299
              length: 149
          children: []
          pos: 12263
          length: 185
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getImaginary
              children: []
              pos: 12560
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 12546
              length: 62
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return imaginary;
                children: []
                pos: 12585
                length: 17
              pos: 12575
              length: 33
          children: []
          pos: 12546
          length: 62
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getReal
              children: []
              pos: 12710
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 12696
              length: 52
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return real;
                children: []
                pos: 12730
                length: 12
              pos: 12720
              length: 28
          children: []
          pos: 12696
          length: 52
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isNaN
              children: []
              pos: 12988
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 12973
              length: 52
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isNaN;
                children: []
                pos: 13006
                length: 13
              pos: 12996
              length: 29
          children: []
          pos: 12973
          length: 52
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isInfinite
              children: []
              pos: 13421
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13406
              length: 62
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isInfinite;
                children: []
                pos: 13444
                length: 18
              pos: 13434
              length: 34
          children: []
          pos: 13406
          length: 62
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 14507
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex factor
                children: []
                pos: 14516
                length: 14
              pos: 14492
              length: 642
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(factor);
                children: []
                pos: 14579
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 14623
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: factor.isNaN
                            children: []
                            pos: 14632
                            length: 12
                        children: []
                        pos: 14623
                        length: 21
                    children: []
                    pos: 14622
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 14660
                    length: 11
                  pos: 14646
                  length: 35
                pos: 14619
                length: 62
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: or
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: Double.isInfinite(real)
                                    children: []
                                    pos: 14694
                                    length: 23
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: Double.isInfinite(imaginary)
                                    children: []
                                    pos: 14733
                                    length: 28
                                children: []
                                pos: 14694
                                length: 67
                              right:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(factor.real)
                                children: []
                                pos: 14777
                                length: 30
                            children: []
                            pos: 14694
                            length: 113
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(factor.imaginary)
                            children: []
                            pos: 14823
                            length: 35
                        children: []
                        pos: 14694
                        length: 164
                    children: []
                    pos: 14693
                    length: 166
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 14946
                    length: 11
                  pos: 14860
                  length: 107
                pos: 14690
                length: 277
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real * factor.real - imaginary * factor.imaginary,
                                                 real * factor.imaginary + imaginary * factor.real);
                children: []
                pos: 14976
                length: 152
              pos: 14569
              length: 565
          children: []
          pos: 14492
          length: 642
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 15445
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double factor
                children: []
                pos: 15454
                length: 13
              pos: 15430
              length: 420
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 15483
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(factor)
                            children: []
                            pos: 15492
                            length: 20
                        children: []
                        pos: 15483
                        length: 29
                    children: []
                    pos: 15482
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 15528
                    length: 11
                  pos: 15514
                  length: 35
                pos: 15479
                length: 70
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(real)
                                children: []
                                pos: 15562
                                length: 23
                              right:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(imaginary)
                                children: []
                                pos: 15601
                                length: 28
                            children: []
                            pos: 15562
                            length: 67
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(factor)
                            children: []
                            pos: 15645
                            length: 25
                        children: []
                        pos: 15562
                        length: 108
                    children: []
                    pos: 15561
                    length: 110
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 15758
                    length: 11
                  pos: 15672
                  length: 107
                pos: 15558
                length: 221
              - type: return_statement
                fields:
                  text: return createComplex(real * factor, imaginary * factor);
                children: []
                pos: 15788
                length: 56
              pos: 15469
              length: 381
          children: []
          pos: 15430
          length: 420
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: negate
              children: []
              pos: 16106
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 16091
              length: 136
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 16129
                        length: 5
                    children: []
                    pos: 16128
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 16150
                    length: 11
                  pos: 16136
                  length: 35
                pos: 16125
                length: 46
              - type: return_statement
                fields:
                  text: return createComplex(-real, -imaginary);
                children: []
                pos: 16181
                length: 40
              pos: 16115
              length: 112
          children: []
          pos: 16091
          length: 136
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subtract
              children: []
              pos: 16976
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex subtrahend
                children: []
                pos: 16985
                length: 18
              pos: 16961
              length: 335
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(subtrahend);
                children: []
                pos: 17052
                length: 35
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 17100
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: subtrahend.isNaN
                            children: []
                            pos: 17109
                            length: 16
                        children: []
                        pos: 17100
                        length: 25
                    children: []
                    pos: 17099
                    length: 27
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 17141
                    length: 11
                  pos: 17127
                  length: 35
                pos: 17096
                length: 66
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real - subtrahend.getReal(),
                                                 imaginary - subtrahend.getImaginary());
                children: []
                pos: 17172
                length: 118
              pos: 17042
              length: 254
          children: []
          pos: 16961
          length: 335
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subtract
              children: []
              pos: 17573
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double subtrahend
                children: []
                pos: 17582
                length: 17
              pos: 17558
              length: 193
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 17615
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(subtrahend)
                            children: []
                            pos: 17624
                            length: 24
                        children: []
                        pos: 17615
                        length: 33
                    children: []
                    pos: 17614
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 17664
                    length: 11
                  pos: 17650
                  length: 35
                pos: 17611
                length: 74
              - type: return_statement
                fields:
                  text: return createComplex(real - subtrahend, imaginary);
                children: []
                pos: 17694
                length: 51
              pos: 17601
              length: 150
          children: []
          pos: 17558
          length: 193
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: acos
              children: []
              pos: 18295
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 18280
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 18316
                        length: 5
                    children: []
                    pos: 18315
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 18337
                    length: 11
                  pos: 18323
                  length: 35
                pos: 18312
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return this.add(this.sqrt1z().multiply(I)).log()
                                .multiply(I.negate());
                children: []
                pos: 18368
                length: 83
              pos: 18302
              length: 155
          children: []
          pos: 18280
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: asin
              children: []
              pos: 18992
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 18977
              length: 172
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 19013
                        length: 5
                    children: []
                    pos: 19012
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 19034
                    length: 11
                  pos: 19020
                  length: 35
                pos: 19009
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return sqrt1z().add(this.multiply(I)).log()
                                .multiply(I.negate());
                children: []
                pos: 19065
                length: 78
              pos: 18999
              length: 150
          children: []
          pos: 18977
          length: 172
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: atan
              children: []
              pos: 19680
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 19665
              length: 201
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 19701
                        length: 5
                    children: []
                    pos: 19700
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 19722
                    length: 11
                  pos: 19708
                  length: 35
                pos: 19697
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return this.add(I).divide(I.subtract(this)).log()
                                .multiply(I.divide(createComplex(2.0, 0.0)));
                children: []
                pos: 19753
                length: 107
              pos: 19687
              length: 179
          children: []
          pos: 19665
          length: 201
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cos
              children: []
              pos: 20973
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20958
              length: 240
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 20993
                        length: 5
                    children: []
                    pos: 20992
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 21014
                    length: 11
                  pos: 21000
                  length: 35
                pos: 20989
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
                                                 -FastMath.sin(real) * MathUtils.sinh(imaginary));
                children: []
                pos: 21045
                length: 147
              pos: 20979
              length: 219
          children: []
          pos: 20958
          length: 240
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cosh
              children: []
              pos: 22342
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 22327
              length: 240
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 22363
                        length: 5
                    children: []
                    pos: 22362
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 22384
                    length: 11
                  pos: 22370
                  length: 35
                pos: 22359
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
                                                 MathUtils.sinh(real) * FastMath.sin(imaginary));
                children: []
                pos: 22415
                length: 146
              pos: 22349
              length: 218
          children: []
          pos: 22327
          length: 240
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exp
              children: []
              pos: 23705
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 23690
              length: 259
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 23725
                        length: 5
                    children: []
                    pos: 23724
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 23746
                    length: 11
                  pos: 23732
                  length: 35
                pos: 23721
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double expReal = FastMath.exp(real);
                children: []
                pos: 23777
                length: 36
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(expReal *  FastMath.cos(imaginary),
                                                 expReal * FastMath.sin(imaginary));
                children: []
                pos: 23822
                length: 121
              pos: 23711
              length: 238
          children: []
          pos: 23690
          length: 259
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: log
              children: []
              pos: 25318
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 25303
              length: 197
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 25338
                        length: 5
                    children: []
                    pos: 25337
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 25359
                    length: 11
                  pos: 25345
                  length: 35
                pos: 25334
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.log(abs()),
                                                 FastMath.atan2(imaginary, real));
                children: []
                pos: 25390
                length: 104
              pos: 25324
              length: 176
          children: []
          pos: 25303
          length: 197
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pow
              children: []
              pos: 26252
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex x
                children: []
                pos: 26256
                length: 9
              pos: 26237
              length: 154
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(x);
                children: []
                pos: 26314
                length: 26
              - type: return_statement
                fields:
                  text: return this.log().multiply(x).exp();
                children: []
                pos: 26349
                length: 36
              pos: 26304
              length: 87
          children: []
          pos: 26237
          length: 154
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pow
              children: []
              pos: 26662
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 26666
                length: 8
              pos: 26647
              length: 81
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return this.log().multiply(x).exp();
                children: []
                pos: 26686
                length: 36
              pos: 26676
              length: 52
          children: []
          pos: 26647
          length: 81
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sin
              children: []
              pos: 27837
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 27822
              length: 239
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 27857
                        length: 5
                    children: []
                    pos: 27856
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 27878
                    length: 11
                  pos: 27864
                  length: 35
                pos: 27853
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),
                                                 FastMath.cos(real) * MathUtils.sinh(imaginary));
                children: []
                pos: 27909
                length: 146
              pos: 27843
              length: 218
          children: []
          pos: 27822
          length: 239
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sinh
              children: []
              pos: 29194
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 29179
              length: 223
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 29215
                        length: 5
                    children: []
                    pos: 29214
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 29236
                    length: 11
                  pos: 29222
                  length: 35
                pos: 29211
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),
                                MathUtils.cosh(real) * FastMath.sin(imaginary));
                children: []
                pos: 29267
                length: 129
              pos: 29201
              length: 201
          children: []
          pos: 29179
          length: 223
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sqrt
              children: []
              pos: 30773
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 30758
              length: 511
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 30794
                        length: 5
                    children: []
                    pos: 30793
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 30815
                    length: 11
                  pos: 30801
                  length: 35
                pos: 30790
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: real
                                children: []
                                pos: 30850
                                length: 4
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 30858
                                length: 3
                            children: []
                            pos: 30850
                            length: 11
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 30865
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 30878
                                length: 3
                            children: []
                            pos: 30865
                            length: 16
                        children: []
                        pos: 30850
                        length: 31
                    children: []
                    pos: 30849
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(0.0, 0.0);
                    children: []
                    pos: 30897
                    length: 31
                  pos: 30883
                  length: 55
                pos: 30846
                length: 92
              - type: local_variable_declaration
                fields:
                  text: double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
                children: []
                pos: 30948
                length: 61
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: real
                            children: []
                            pos: 31022
                            length: 4
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: '0.0'
                            children: []
                            pos: 31030
                            length: 3
                        children: []
                        pos: 31022
                        length: 11
                    children: []
                    pos: 31021
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(t, imaginary / (2.0 * t));
                    children: []
                    pos: 31049
                    length: 47
                  pos: 31035
                  length: 71
                pos: 31018
                length: 245
              pos: 30780
              length: 489
          children: []
          pos: 30758
          length: 511
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sqrt1z
              children: []
              pos: 31956
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 31941
              length: 108
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
                children: []
                pos: 31975
                length: 68
              pos: 31965
              length: 84
          children: []
          pos: 31941
          length: 108
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tan
              children: []
              pos: 33238
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 33223
              length: 350
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 33258
                        length: 5
                    children: []
                    pos: 33257
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 33279
                    length: 11
                  pos: 33265
                  length: 35
                pos: 33254
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double real2 = 2.0 * real;
                children: []
                pos: 33310
                length: 26
              - type: local_variable_declaration
                fields:
                  text: double imaginary2 = 2.0 * imaginary;
                children: []
                pos: 33345
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
                children: []
                pos: 33390
                length: 60
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sin(real2) / d,
                                                 MathUtils.sinh(imaginary2) / d);
                children: []
                pos: 33460
                length: 107
              pos: 33244
              length: 329
          children: []
          pos: 33223
          length: 350
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tanh
              children: []
              pos: 34769
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 34754
              length: 351
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 34790
                        length: 5
                    children: []
                    pos: 34789
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 34811
                    length: 11
                  pos: 34797
                  length: 35
                pos: 34786
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double real2 = 2.0 * real;
                children: []
                pos: 34842
                length: 26
              - type: local_variable_declaration
                fields:
                  text: double imaginary2 = 2.0 * imaginary;
                children: []
                pos: 34877
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);
                children: []
                pos: 34922
                length: 60
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(MathUtils.sinh(real2) / d,
                                                 FastMath.sin(imaginary2) / d);
                children: []
                pos: 34992
                length: 107
              pos: 34776
              length: 329
          children: []
          pos: 34754
          length: 351
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getArgument
              children: []
              pos: 35953
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 35939
              length: 93
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return FastMath.atan2(getImaginary(), getReal());
                children: []
                pos: 35977
                length: 49
              pos: 35967
              length: 65
          children: []
          pos: 35939
          length: 93
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nthRoot
              children: []
              pos: 36975
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 36983
                length: 5
              pos: 36954
              length: 1170
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 37005
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 37010
                            length: 1
                        children: []
                        pos: 37005
                        length: 6
                    children: []
                    pos: 37004
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: |-
                        throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,
                                                                   n);
                    children: []
                    pos: 37027
                    length: 134
                  pos: 37013
                  length: 158
                pos: 37001
                length: 170
              - type: local_variable_declaration
                fields:
                  text: final List<Complex> result = new ArrayList<Complex>();
                children: []
                pos: 37181
                length: 54
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 37249
                        length: 5
                    children: []
                    pos: 37248
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: result.add(NaN);
                    children: []
                    pos: 37270
                    length: 16
                  - type: return_statement
                    fields:
                      text: return result;
                    children: []
                    pos: 37299
                    length: 14
                  pos: 37256
                  length: 67
                pos: 37245
                length: 78
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: isInfinite()
                        children: []
                        pos: 37336
                        length: 12
                    children: []
                    pos: 37335
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: result.add(INF);
                    children: []
                    pos: 37364
                    length: 16
                  - type: return_statement
                    fields:
                      text: return result;
                    children: []
                    pos: 37393
                    length: 14
                  pos: 37350
                  length: 67
                pos: 37332
                length: 85
              - type: local_variable_declaration
                fields:
                  text: final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);
                children: []
                pos: 37502
                length: 57
              - type: local_variable_declaration
                fields:
                  text: final double nthPhi = getArgument() / n;
                children: []
                pos: 37639
                length: 40
              - type: local_variable_declaration
                fields:
                  text: final double slice = 2 * FastMath.PI / n;
                children: []
                pos: 37688
                length: 41
              - type: local_variable_declaration
                fields:
                  text: double innerPart = nthPhi;
                children: []
                pos: 37738
                length: 26
              - type: for_statement
                fields:
                  text: |-
                    for (int k = 0; k < n ; k++) {
                                // inner part
                                final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);
                                final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);
                                result.add(createComplex(realPart, imaginaryPart));
                                innerPart += slice;
                            }
                children: []
                pos: 37773
                length: 321
              - type: return_statement
                fields:
                  text: return result;
                children: []
                pos: 38104
                length: 14
              pos: 36990
              length: 1134
          children: []
          pos: 36954
          length: 1170
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createComplex
              children: []
              pos: 38417
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 38431
                length: 15
              pos: 38399
              length: 167
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new Complex(realPart, imaginaryPart);
                children: []
                pos: 38516
                length: 44
              pos: 38506
              length: 60
          children: []
          pos: 38399
          length: 167
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: valueOf
              children: []
              pos: 38797
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 38805
                length: 15
              pos: 38775
              length: 278
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(realPart)
                            children: []
                            pos: 38892
                            length: 22
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(imaginaryPart)
                            children: []
                            pos: 38930
                            length: 27
                        children: []
                        pos: 38892
                        length: 65
                    children: []
                    pos: 38891
                    length: 67
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 38973
                    length: 11
                  pos: 38959
                  length: 35
                pos: 38888
                length: 106
              - type: return_statement
                fields:
                  text: return new Complex(realPart, imaginaryPart);
                children: []
                pos: 39003
                length: 44
              pos: 38878
              length: 175
          children: []
          pos: 38775
          length: 278
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: valueOf
              children: []
              pos: 39230
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 39238
                length: 15
              pos: 39208
              length: 164
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Double.isNaN(realPart)
                        children: []
                        pos: 39269
                        length: 22
                    children: []
                    pos: 39268
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 39307
                    length: 11
                  pos: 39293
                  length: 35
                pos: 39265
                length: 63
              - type: return_statement
                fields:
                  text: return new Complex(realPart);
                children: []
                pos: 39337
                length: 29
              pos: 39255
              length: 117
          children: []
          pos: 39208
          length: 164
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: readResolve
              children: []
              pos: 39667
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 39644
              length: 91
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return createComplex(real, imaginary);
                children: []
                pos: 39691
                length: 38
              pos: 39681
              length: 54
          children: []
          pos: 39644
          length: 91
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getField
              children: []
              pos: 39786
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 39766
              length: 81
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return ComplexField.getInstance();
                children: []
                pos: 39807
                length: 34
              pos: 39797
              length: 50
          children: []
          pos: 39766
          length: 81
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: toString
              children: []
              pos: 39906
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 39878
              length: 98
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return "(" + real + ", " + imaginary + ")";
                children: []
                pos: 39927
                length: 43
              pos: 39917
              length: 59
          children: []
          pos: 39878
          length: 98
        pos: 2253
        length: 37725
    children: []
    pos: 2253
    length: 37725
  pos: 0
  length: 39979
text_diff: "--- before\n+++ after\n@@ -79,7 +79,6 @@\n     /** Record whether this
  complex number is infinite. */\n     private final transient boolean isInfinite;\n
  \    /** Record whether this complex number is zero. */\n-    private final transient
  boolean isZero;\n \n     /**\n      * Create a complex number given only the real
  part.\n@@ -103,7 +102,6 @@\n         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n
  \        isInfinite = !isNaN &&\n             (Double.isInfinite(real) || Double.isInfinite(imaginary));\n-
  \       isZero = real == 0 && imaginary == 0;\n     }\n \n     /**\n@@ -255,8 +253,8
  @@\n             return NaN;\n         }\n \n-        if (divisor.isZero) {\n-            return
  isZero ? NaN : INF;\n+        if (divisor.getReal() == 0.0 && divisor.getImaginary()
  == 0.0) {\n+            return NaN;\n         }\n \n         if (divisor.isInfinite()
  && !isInfinite()) {\n@@ -292,7 +290,7 @@\n             return NaN;\n         }\n
  \        if (divisor == 0d) {\n-            return isZero ? NaN : INF;\n+            return
  NaN;\n         }\n         if (Double.isInfinite(divisor)) {\n             return
  !isInfinite() ? ZERO : NaN;\n"
tree_diff: |+
  New cluster:
  UPDATE from public Complex(double real, double imaginary) {
          this.real = real;
          this.imaginary = imaginary;

          isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
          isInfinite = !isNaN &&
              (Double.isInfinite(real) || Double.isInfinite(imaginary));
          isZero = real == 0 && imaginary == 0;
      } to public Complex(double real, double imaginary) {
          this.real = real;
          this.imaginary = imaginary;

          isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
          isInfinite = !isNaN &&
              (Double.isInfinite(real) || Double.isInfinite(imaginary));
      }
  ------------
  ===
  update-node
  ---
  constructor_declaration: public Complex(double real, double imaginary) {
          this.real = real;
          this.imaginary = imaginary;

          isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
          isInfinite = !isNaN &&
              (Double.isInfinite(real) || Double.isInfinite(imaginary));
          isZero = real == 0 && imaginary == 0;
      } [3940,4267]
  replace public Complex(double real, double imaginary) {
          this.real = real;
          this.imaginary = imaginary;

          isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
          isInfinite = !isNaN &&
              (Double.isInfinite(real) || Double.isInfinite(imaginary));
          isZero = real == 0 && imaginary == 0;
      } by public Complex(double real, double imaginary) {
          this.real = real;
          this.imaginary = imaginary;

          isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
          isInfinite = !isNaN &&
              (Double.isInfinite(real) || Double.isInfinite(imaginary));
      }

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  and [9460,9517]
      equals [9460,9484]
          method_invocation: divisor.getReal() [9460,9477]
          decimal_floating_point_literal: 0.0 [9481,9484]
      equals [9488,9517]
          method_invocation: divisor.getImaginary() [9488,9510]
          decimal_floating_point_literal: 0.0 [9514,9517]
  to
  parenthesized_expression [9549,9565]
  at 0

  New cluster:
  UPDATE from return isZero ? NaN : INF; to return NaN;
  ------------
  ===
  update-node
  ---
  return_statement: return isZero ? NaN : INF; [9580,9606]
  replace return isZero ? NaN : INF; by return NaN;
  ===
  update-node
  ---
  return_statement: return isZero ? NaN : INF; [10749,10775]
  replace return isZero ? NaN : INF; by return NaN;

  New cluster:
  ===
  delete-node
  ---
  field_declaration: private final transient boolean isZero; [3559,3598]
  ===
  ------------
  ===
  delete-node
  ---
  field_declaration: private final transient boolean isZero; [3559,3598]
  ===

  New cluster:
  ===
  delete-node
  ---
  field_access: divisor.isZero [9550,9564]
  ===
  ------------
  ===
  delete-node
  ---
  field_access: divisor.isZero [9550,9564]
  ===

...
