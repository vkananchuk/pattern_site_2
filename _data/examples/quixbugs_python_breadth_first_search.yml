---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: breadth_first_search
        children: []
        pos: 44
        length: 20
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: startnode
          children: []
          pos: 65
          length: 9
        pos: 40
        length: 410
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: queue = Queue()
          children: []
          pos: 91
          length: 15
        - type: expression_statement
          fields:
            text: queue.append(startnode)
          children: []
          pos: 111
          length: 23
        - type: expression_statement
          fields:
            text: nodesseen = set()
          children: []
          pos: 140
          length: 17
        - type: expression_statement
          fields:
            text: nodesseen.add(startnode)
          children: []
          pos: 162
          length: 24
        - type: while_statement
          fields:
            text: |-
              while True:
                      node = queue.popleft()

                      if node is goalnode:
                          return True
                      else:
                          queue.extend(node for node in node.successors if node not in nodesseen)
                          nodesseen.update(node.successors)
          children: []
          pos: 192
          length: 240
        - type: return_statement
          fields:
            text: return False
          children: []
          pos: 438
          length: 12
        pos: 91
        length: 359
    children: []
    pos: 40
    length: 410
  pos: 0
  length: 451
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: breadth_first_search
        children: []
        pos: 44
        length: 20
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: startnode
          children: []
          pos: 65
          length: 9
        pos: 40
        length: 411
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: queue = Queue()
          children: []
          pos: 91
          length: 15
        - type: expression_statement
          fields:
            text: queue.append(startnode)
          children: []
          pos: 111
          length: 23
        - type: expression_statement
          fields:
            text: nodesseen = set()
          children: []
          pos: 140
          length: 17
        - type: expression_statement
          fields:
            text: nodesseen.add(startnode)
          children: []
          pos: 162
          length: 24
        - type: while_statement
          fields:
            text: |-
              while queue:
                      node = queue.popleft()

                      if node is goalnode:
                          return True
                      else:
                          queue.extend(node for node in node.successors if node not in nodesseen)
                          nodesseen.update(node.successors)
          children: []
          pos: 192
          length: 241
        - type: return_statement
          fields:
            text: return False
          children: []
          pos: 439
          length: 12
        pos: 91
        length: 360
    children: []
    pos: 40
    length: 411
  pos: 0
  length: 452
text_diff: "--- before\n+++ after\n@@ -7,7 +7,7 @@\n     nodesseen = set()\n     nodesseen.add(startnode)\n
  \n-    while True:\n+    while queue:\n         node = queue.popleft()\n \n         if
  node is goalnode:\n"
tree_diff: |+
  New cluster:
  UPDATE from while True:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors) to while queue:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)
  ------------
  ===
  update-node
  ---
  while_statement: while True:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors) [192,432]
  replace while True:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors) by while queue:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)

...
