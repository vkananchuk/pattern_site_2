---
language: python
text_diff: "--- before\n+++ after\n@@ -8,7 +8,7 @@\n     nodesseen = set()\n     nodesseen.add(startnode)\n
  \n-    while True:\n+    while queue:\n         node = queue.popleft()\n \n         if
  node is goalnode:\n@@ -20,15 +20,69 @@\n     return False\n \n \n-\n \"\"\"\n-Breadth-First
  Search\n+from collections import deque as Queue\n+\n+def breadth_first_search(startnode,
  goalnode):\n+    queue = Queue()\n+    queue.append(startnode)\n+\n+    nodesseen
  = set()\n+    nodesseen.add(startnode)\n+\n+    while len(queue):\n+        node
  = queue.popleft()\n+\n+        if node is goalnode:\n+            return True\n+
  \       else:\n+            queue.extend(node for node in node.successors if node
  not in nodesseen)\n+            nodesseen.update(node.successors)\n+\n+    return
  False\n+\n+\n+\n+from collections import deque as Queue\n \n+def breadth_first_search(startnode,
  goalnode):\n+    queue = Queue()\n+    queue.append(startnode)\n \n-Input:\n-    startnode:
  A digraph node\n-    goalnode: A digraph node\n+    nodesseen = set()\n+    nodesseen.add(startnode)\n+\n+
  \   while len(queue) > 0:\n+        node = queue.popleft()\n+\n+        if node
  is goalnode:\n+            return True\n+        else:\n+            queue.extend(node
  for node in node.successors if node not in nodesseen)\n+            nodesseen.update(node.successors)\n+\n+
  \   return False\n+\n+\n+\n+from collections import deque as Queue\n+\n+def breadth_first_search(startnode,
  goalnode):\n+    queue = Queue()\n+    queue.append(startnode)\n+\n+    nodesseen
  = set()\n+    nodesseen.add(startnode)\n+\n+    while len(queue) != 0:\n+        node
  = queue.popleft()\n+\n+        if node is goalnode:\n+            return True\n+
  \       else:\n+            queue.extend(node for node in node.successors if node
  not in nodesseen)\n+            nodesseen.update(node.successors)\n+\n+    return
  False\n \n-Output:\n-    Whether goalnode is reachable from startnode\n \"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from """
  Breadth-First Search


  Input:
      startnode: A digraph node
      goalnode: A digraph node

  Output:
      Whether goalnode is reachable from startnode
  """ to """
  from collections import deque as Queue

  def breadth_first_search(startnode, goalnode):
      queue = Queue()
      queue.append(startnode)

      nodesseen = set()
      nodesseen.add(startnode)

      while len(queue):
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)

      return False



  from collections import deque as Queue

  def breadth_first_search(startnode, goalnode):
      queue = Queue()
      queue.append(startnode)

      nodesseen = set()
      nodesseen.add(startnode)

      while len(queue) > 0:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)

      return False



  from collections import deque as Queue

  def breadth_first_search(startnode, goalnode):
      queue = Queue()
      queue.append(startnode)

      nodesseen = set()
      nodesseen.add(startnode)

      while len(queue) != 0:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)

      return False

  """
  ------------
  ===
  update-node
  ---
  expression_statement: """
  Breadth-First Search


  Input:
      startnode: A digraph node
      goalnode: A digraph node

  Output:
      Whether goalnode is reachable from startnode
  """ [455,609]
  replace """
  Breadth-First Search


  Input:
      startnode: A digraph node
      goalnode: A digraph node

  Output:
      Whether goalnode is reachable from startnode
  """ by """
  from collections import deque as Queue

  def breadth_first_search(startnode, goalnode):
      queue = Queue()
      queue.append(startnode)

      nodesseen = set()
      nodesseen.add(startnode)

      while len(queue):
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)

      return False



  from collections import deque as Queue

  def breadth_first_search(startnode, goalnode):
      queue = Queue()
      queue.append(startnode)

      nodesseen = set()
      nodesseen.add(startnode)

      while len(queue) > 0:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)

      return False



  from collections import deque as Queue

  def breadth_first_search(startnode, goalnode):
      queue = Queue()
      queue.append(startnode)

      nodesseen = set()
      nodesseen.add(startnode)

      while len(queue) != 0:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)

      return False

  """

  New cluster:
  UPDATE from while True:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors) to while queue:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)
  ------------
  ===
  update-node
  ---
  while_statement: while True:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors) [193,433]
  replace while True:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors) by while queue:
          node = queue.popleft()

          if node is goalnode:
              return True
          else:
              queue.extend(node for node in node.successors if node not in nodesseen)
              nodesseen.update(node.successors)

...
