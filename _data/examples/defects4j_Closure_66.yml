---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: TypeCheck
        children: []
        pos: 2333
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(
                    "JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN",
                    "Internal Error: Don't know how to handle {0}");
          children: []
          pos: 2427
          length: 168
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType BAD_DELETE =
                    // TODO(user): make this an error
                    DiagnosticType.warning(
                        "JSC_BAD_DELETE_OPERAND",
                        "delete operator needs a reference operand");
          children: []
          pos: 2627
          length: 202
        - type: field_declaration
          fields:
            text: |-
              protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =
                    "overriding prototype with non-object";
          children: []
          pos: 2864
          length: 114
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType DETERMINISTIC_TEST =
                    DiagnosticType.warning(
                        "JSC_DETERMINISTIC_TEST",
                        "condition always evaluates to {2}\n" +
                        "left : {0}\n" +
                        "right: {1}");
          children: []
          pos: 3112
          length: 216
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType DETERMINISTIC_TEST_NO_RESULT =
                    DiagnosticType.warning(
                        "JSC_DETERMINISTIC_TEST_NO_RESULT",
                        "condition always evaluates to the same value\n" +
                        "left : {0}\n" +
                        "right: {1}");
          children: []
          pos: 3332
          length: 247
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INEXISTENT_ENUM_ELEMENT =
                    DiagnosticType.warning(
                        "JSC_INEXISTENT_ENUM_ELEMENT",
                        "element {0} does not exist on this enum");
          children: []
          pos: 3583
          length: 178
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INEXISTENT_PROPERTY =
                    DiagnosticType.disabled(
                        "JSC_INEXISTENT_PROPERTY",
                        "Property {0} never defined on {1}");
          children: []
          pos: 3858
          length: 165
        - type: field_declaration
          fields:
            text: |-
              protected static final DiagnosticType NOT_A_CONSTRUCTOR =
                    DiagnosticType.warning(
                        "JSC_NOT_A_CONSTRUCTOR",
                        "cannot instantiate non-constructor");
          children: []
          pos: 4027
          length: 171
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType BIT_OPERATION =
                    DiagnosticType.warning(
                        "JSC_BAD_TYPE_FOR_BIT_OPERATION",
                        "operator {0} cannot be applied to {1}");
          children: []
          pos: 4202
          length: 169
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType NOT_CALLABLE =
                    DiagnosticType.warning(
                        "JSC_NOT_FUNCTION_TYPE",
                        "{0} expressions are not callable");
          children: []
          pos: 4375
          length: 154
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =
                    DiagnosticType.warning(
                        "JSC_CONSTRUCTOR_NOT_CALLABLE",
                        "Constructor {0} should be called with the \"new\" keyword");
          children: []
          pos: 4533
          length: 198
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType FUNCTION_MASKS_VARIABLE =
                    DiagnosticType.warning(
                        "JSC_FUNCTION_MASKS_VARIABLE",
                        "function {0} masks variable (IE bug)");
          children: []
          pos: 4735
          length: 175
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(
                    "JSC_MULTIPLE_VAR_DEF",
                    "declaration of multiple variables with shared type information");
          children: []
          pos: 4914
          length: 173
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType ENUM_DUP = DiagnosticType.error("JSC_ENUM_DUP",
                    "enum element {0} already defined");
          children: []
          pos: 5091
          length: 118
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType ENUM_NOT_CONSTANT =
                    DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT",
                        "enum key {0} must be a syntactic constant");
          children: []
          pos: 5213
          length: 157
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =
                    DiagnosticType.warning(
                        "JSC_INVALID_INTERFACE_MEMBER_DECLARATION",
                        "interface members can only be empty property declarations,"
                        + " empty functions{0}");
          children: []
          pos: 5374
          length: 257
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =
                    DiagnosticType.warning(
                        "JSC_INTERFACE_FUNCTION_NOT_EMPTY",
                        "interface member functions must have an empty body");
          children: []
          pos: 5635
          length: 199
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType CONFLICTING_EXTENDED_TYPE =
                    DiagnosticType.warning(
                        "JSC_CONFLICTING_EXTENDED_TYPE",
                        "{0} cannot extend this type; " +
                        "a constructor can only extend objects " +
                        "and an interface can only extend interfaces");
          children: []
          pos: 5838
          length: 283
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =
                  DiagnosticType.warning(
                      "JSC_CONFLICTING_IMPLEMENTED_TYPE",
                      "{0} cannot implement this type; " +
                      "an interface can only extend, but not implement interfaces");
          children: []
          pos: 6125
          length: 246
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType BAD_IMPLEMENTED_TYPE =
                    DiagnosticType.warning(
                        "JSC_IMPLEMENTS_NON_INTERFACE",
                        "can only implement interfaces");
          children: []
          pos: 6375
          length: 166
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =
                    DiagnosticType.warning(
                        "JSC_HIDDEN_SUPERCLASS_PROPERTY",
                        "property {0} already defined on superclass {1}; " +
                        "use @override to override it");
          children: []
          pos: 6545
          length: 236
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =
                    DiagnosticType.warning(
                        "JSC_HIDDEN_INTERFACE_PROPERTY",
                        "property {0} already defined on interface {1}; " +
                        "use @override to override it");
          children: []
          pos: 6785
          length: 233
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =
                    DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
                        "mismatch of the {0} property type and the type " +
                        "of the property it overrides from superclass {1}\n" +
                        "original: {2}\n" +
                        "override: {3}");
          children: []
          pos: 7022
          length: 322
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNKNOWN_OVERRIDE =
                    DiagnosticType.warning(
                        "JSC_UNKNOWN_OVERRIDE",
                        "property {0} not defined on any superclass of {1}");
          children: []
          pos: 7348
          length: 174
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INTERFACE_METHOD_OVERRIDE =
                    DiagnosticType.warning(
                        "JSC_INTERFACE_METHOD_OVERRIDE",
                        "property {0} is already defined by the {1} extended interface");
          children: []
          pos: 7526
          length: 204
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNKNOWN_EXPR_TYPE =
                    DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE",
                        "could not determine the type of this expression");
          children: []
          pos: 7734
          length: 163
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNRESOLVED_TYPE =
                    DiagnosticType.warning("JSC_UNRESOLVED_TYPE",
                        "could not resolve the name {0} to a type");
          children: []
          pos: 7901
          length: 152
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType WRONG_ARGUMENT_COUNT =
                    DiagnosticType.warning(
                        "JSC_WRONG_ARGUMENT_COUNT",
                        "Function {0}: called with {1} argument(s). " +
                        "Function requires at least {2} argument(s){3}.");
          children: []
          pos: 8057
          length: 237
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType ILLEGAL_IMPLICIT_CAST =
                    DiagnosticType.warning(
                        "JSC_ILLEGAL_IMPLICIT_CAST",
                        "Illegal annotation on {0}. @implicitCast may only be used in " +
                        "externs.");
          children: []
          pos: 8298
          length: 219
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =
                    DiagnosticType.warning(
                        "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",
                        "Interface {0} has a property {1} with incompatible types in " +
                        "its super interfaces {2} and {3}");
          children: []
          pos: 8521
          length: 270
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType EXPECTED_THIS_TYPE =
                    DiagnosticType.warning(
                        "JSC_EXPECTED_THIS_TYPE",
                        "\"{0}\" must be called with a \"this\" type");
          children: []
          pos: 8795
          length: 172
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(
                    DETERMINISTIC_TEST,
                    DETERMINISTIC_TEST_NO_RESULT,
                    INEXISTENT_ENUM_ELEMENT,
                    INEXISTENT_PROPERTY,
                    NOT_A_CONSTRUCTOR,
                    BIT_OPERATION,
                    NOT_CALLABLE,
                    CONSTRUCTOR_NOT_CALLABLE,
                    FUNCTION_MASKS_VARIABLE,
                    MULTIPLE_VAR_DEF,
                    ENUM_DUP,
                    ENUM_NOT_CONSTANT,
                    INVALID_INTERFACE_MEMBER_DECLARATION,
                    INTERFACE_FUNCTION_NOT_EMPTY,
                    CONFLICTING_EXTENDED_TYPE,
                    CONFLICTING_IMPLEMENTED_TYPE,
                    BAD_IMPLEMENTED_TYPE,
                    HIDDEN_SUPERCLASS_PROPERTY,
                    HIDDEN_INTERFACE_PROPERTY,
                    HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    UNKNOWN_OVERRIDE,
                    INTERFACE_METHOD_OVERRIDE,
                    UNKNOWN_EXPR_TYPE,
                    UNRESOLVED_TYPE,
                    WRONG_ARGUMENT_COUNT,
                    ILLEGAL_IMPLICIT_CAST,
                    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                    EXPECTED_THIS_TYPE,
                    RhinoErrorReporter.TYPE_PARSE_ERROR,
                    TypedScopeCreator.UNKNOWN_LENDS,
                    TypedScopeCreator.LENDS_ON_NON_OBJECT,
                    TypedScopeCreator.CTOR_INITIALIZER,
                    TypedScopeCreator.IFACE_INITIALIZER,
                    FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);
          children: []
          pos: 8971
          length: 1160
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 10135
          length: 40
        - type: field_declaration
          fields:
            text: private final TypeValidator validator;
          children: []
          pos: 10178
          length: 38
        - type: field_declaration
          fields:
            text: private final ReverseAbstractInterpreter reverseInterpreter;
          children: []
          pos: 10220
          length: 60
        - type: field_declaration
          fields:
            text: private final JSTypeRegistry typeRegistry;
          children: []
          pos: 10284
          length: 42
        - type: field_declaration
          fields:
            text: private Scope topScope;
          children: []
          pos: 10329
          length: 23
        - type: field_declaration
          fields:
            text: private ScopeCreator scopeCreator;
          children: []
          pos: 10356
          length: 34
        - type: field_declaration
          fields:
            text: private final CheckLevel reportMissingOverride;
          children: []
          pos: 10394
          length: 47
        - type: field_declaration
          fields:
            text: private final CheckLevel reportUnknownTypes;
          children: []
          pos: 10444
          length: 44
        - type: field_declaration
          fields:
            text: private boolean reportMissingProperties = true;
          children: []
          pos: 10588
          length: 47
        - type: field_declaration
          fields:
            text: private InferJSDocInfo inferJSDocInfo = null;
          children: []
          pos: 10639
          length: 45
        - type: field_declaration
          fields:
            text: private int typedCount = 0;
          children: []
          pos: 10765
          length: 27
        - type: field_declaration
          fields:
            text: private int nullCount = 0;
          children: []
          pos: 10795
          length: 26
        - type: field_declaration
          fields:
            text: private int unknownCount = 0;
          children: []
          pos: 10824
          length: 29
        - type: field_declaration
          fields:
            text: private boolean inExterns;
          children: []
          pos: 10856
          length: 26
        - type: field_declaration
          fields:
            text: private int noTypeCheckSection = 0;
          children: []
          pos: 10973
          length: 35
        - type: constructor_declaration
          fields:
            text: |-
              public TypeCheck(AbstractCompiler compiler,
                    ReverseAbstractInterpreter reverseInterpreter,
                    JSTypeRegistry typeRegistry,
                    Scope topScope,
                    ScopeCreator scopeCreator,
                    CheckLevel reportMissingOverride,
                    CheckLevel reportUnknownTypes) {
                  this.compiler = compiler;
                  this.validator = compiler.getTypeValidator();
                  this.reverseInterpreter = reverseInterpreter;
                  this.typeRegistry = typeRegistry;
                  this.topScope = topScope;
                  this.scopeCreator = scopeCreator;
                  this.reportMissingOverride = reportMissingOverride;
                  this.reportUnknownTypes = reportUnknownTypes;
                  this.inferJSDocInfo = new InferJSDocInfo(compiler);
                }
          children: []
          pos: 11012
          length: 667
        - type: constructor_declaration
          fields:
            text: |-
              public TypeCheck(AbstractCompiler compiler,
                    ReverseAbstractInterpreter reverseInterpreter,
                    JSTypeRegistry typeRegistry,
                    CheckLevel reportMissingOverride,
                    CheckLevel reportUnknownTypes) {
                  this(compiler, reverseInterpreter, typeRegistry, null, null,
                      reportMissingOverride, reportUnknownTypes);
                }
          children: []
          pos: 11683
          length: 331
        - type: constructor_declaration
          fields:
            text: |-
              TypeCheck(AbstractCompiler compiler,
                    ReverseAbstractInterpreter reverseInterpreter,
                    JSTypeRegistry typeRegistry) {
                  this(compiler, reverseInterpreter, typeRegistry, null, null,
                       CheckLevel.WARNING, CheckLevel.OFF);
                }
          children: []
          pos: 12018
          length: 241
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: reportMissingProperties
              children: []
              pos: 12350
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: boolean report
                children: []
                pos: 12374
                length: 14
              pos: 12340
              length: 110
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: reportMissingProperties = report;
                children: []
                pos: 12396
                length: 33
              - type: return_statement
                fields:
                  text: return this;
                children: []
                pos: 12434
                length: 12
              pos: 12390
              length: 60
          children: []
          pos: 12340
          length: 110
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 12715
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externsRoot
                children: []
                pos: 12723
                length: 16
              pos: 12703
              length: 435
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(scopeCreator);
                children: []
                pos: 12760
                length: 41
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(topScope);
                children: []
                pos: 12806
                length: 37
              - type: local_variable_declaration
                fields:
                  text: Node externsAndJs = jsRoot.getParent();
                children: []
                pos: 12849
                length: 39
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(externsAndJs != null);
                children: []
                pos: 12893
                length: 47
              - type: expression_statement
                fields:
                  text: |-
                    Preconditions.checkState(
                            externsRoot == null || externsAndJs.hasChild(externsRoot));
                children: []
                pos: 12945
                length: 93
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: externsRoot
                            children: []
                            pos: 13048
                            length: 11
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 13063
                            length: 4
                        children: []
                        pos: 13048
                        length: 19
                    children: []
                    pos: 13047
                    length: 21
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: check(externsRoot, true);
                    children: []
                    pos: 13077
                    length: 25
                  pos: 13069
                  length: 39
                pos: 13044
                length: 64
              - type: expression_statement
                fields:
                  text: check(jsRoot, false);
                children: []
                pos: 13113
                length: 21
              pos: 12754
              length: 384
          children: []
          pos: 12703
          length: 435
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: processForTesting
              children: []
              pos: 13213
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externsRoot
                children: []
                pos: 13231
                length: 16
              pos: 13200
              length: 639
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(scopeCreator == null);
                children: []
                pos: 13268
                length: 47
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(topScope == null);
                children: []
                pos: 13320
                length: 43
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(jsRoot.getParent() != null);
                children: []
                pos: 13369
                length: 53
              - type: local_variable_declaration
                fields:
                  text: Node externsAndJsRoot = jsRoot.getParent();
                children: []
                pos: 13427
                length: 43
              - type: expression_statement
                fields:
                  text: scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));
                children: []
                pos: 13476
                length: 73
              - type: expression_statement
                fields:
                  text: topScope = scopeCreator.createScope(externsAndJsRoot, null);
                children: []
                pos: 13554
                length: 60
              - type: local_variable_declaration
                fields:
                  text: |-
                    TypeInferencePass inference = new TypeInferencePass(compiler,
                            reverseInterpreter, topScope, scopeCreator);
                children: []
                pos: 13620
                length: 114
              - type: expression_statement
                fields:
                  text: inference.process(externsRoot, jsRoot);
                children: []
                pos: 13740
                length: 39
              - type: expression_statement
                fields:
                  text: process(externsRoot, jsRoot);
                children: []
                pos: 13784
                length: 29
              - type: return_statement
                fields:
                  text: return topScope;
                children: []
                pos: 13819
                length: 16
              pos: 13262
              length: 577
          children: []
          pos: 13200
          length: 639
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: check
              children: []
              pos: 13856
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 13862
                length: 9
              pos: 13844
              length: 349
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(node);
                children: []
                pos: 13896
                length: 33
              - type: local_variable_declaration
                fields:
                  text: NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);
                children: []
                pos: 13935
                length: 66
              - type: expression_statement
                fields:
                  text: inExterns = externs;
                children: []
                pos: 14006
                length: 20
              - type: expression_statement
                fields:
                  text: t.traverseWithScope(node, topScope);
                children: []
                pos: 14031
                length: 36
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: externs
                        children: []
                        pos: 14076
                        length: 7
                    children: []
                    pos: 14075
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: inferJSDocInfo.process(node, null);
                    children: []
                    pos: 14093
                    length: 35
                  pos: 14085
                  length: 49
                pos: 14072
                length: 117
              pos: 13890
              length: 303
          children: []
          pos: 13844
          length: 349
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkNoTypeCheckSection
              children: []
              pos: 14211
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 14235
                length: 6
              pos: 14198
              length: 537
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 14279
                        length: 11
                    children: []
                    pos: 14278
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.SCRIPT:
                              case Token.BLOCK:
                              case Token.VAR:
                              case Token.FUNCTION:
                              case Token.ASSIGN:
                                JSDocInfo info = n.getJSDocInfo();
                                if (info != null && info.isNoTypeCheck()) {
                                  if (enterSection) {
                                    noTypeCheckSection++;
                                  } else {
                                    noTypeCheckSection--;
                                  }
                                }
                                validator.setShouldReport(noTypeCheckSection == 0);
                                break;
                            }
                    children: []
                    pos: 14292
                    length: 439
                children: []
                pos: 14271
                length: 460
              pos: 14265
              length: 470
          children: []
          pos: 14198
          length: 537
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: report
              children: []
              pos: 14752
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 14759
                length: 15
              pos: 14739
              length: 195
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: noTypeCheckSection
                            children: []
                            pos: 14852
                            length: 18
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 14874
                            length: 1
                        children: []
                        pos: 14852
                        length: 23
                    children: []
                    pos: 14851
                    length: 25
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: t.report(n, diagnosticType, arguments);
                    children: []
                    pos: 14885
                    length: 39
                  pos: 14877
                  length: 53
                pos: 14848
                length: 82
              pos: 14842
              length: 92
          children: []
          pos: 14739
          length: 195
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shouldTraverse
              children: []
              pos: 14953
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 14975
                length: 15
              pos: 14938
              length: 1243
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: checkNoTypeCheckSection(n, true);
                children: []
                pos: 15019
                length: 33
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 15065
                        length: 11
                    children: []
                    pos: 15064
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.FUNCTION:
                                // normal type checking
                                final TypeCheck outerThis = this;
                                final Scope outerScope = t.getScope();
                                final FunctionType functionType = (FunctionType) n.getJSType();
                                final String functionPrivateName = n.getFirstChild().getString();
                                if (functionPrivateName != null && functionPrivateName.length() > 0 &&
                                    outerScope.isDeclared(functionPrivateName, false) &&
                                    // Ideally, we would want to check whether the type in the scope
                                    // differs from the type being defined, but then the extern
                                    // redeclarations of built-in types generates spurious warnings.
                                    !(outerScope.getVar(
                                        functionPrivateName).getType() instanceof FunctionType)) {
                                  report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);
                                }

                                // TODO(user): Only traverse the function's body. The function's
                                // name and arguments are traversed by the scope creator, and ideally
                                // should not be traversed by the type checker.
                                break;
                            }
                    children: []
                    pos: 15078
                    length: 1082
                children: []
                pos: 15057
                length: 1103
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 16165
                length: 12
              pos: 15013
              length: 1168
          children: []
          pos: 14938
          length: 1243
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 16642
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 16648
                length: 15
              pos: 16630
              length: 10393
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType childType;
                children: []
                pos: 16692
                length: 17
              - type: local_variable_declaration
                fields:
                  text: JSType leftType, rightType;
                children: []
                pos: 16714
                length: 27
              - type: local_variable_declaration
                fields:
                  text: Node left, right;
                children: []
                pos: 16746
                length: 17
              - type: local_variable_declaration
                fields:
                  text: boolean typeable = true;
                children: []
                pos: 16834
                length: 24
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 16872
                        length: 11
                    children: []
                    pos: 16871
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.NAME:
                                typeable = visitName(t, n, parent);
                                break;

                              case Token.LP:
                                // If this is under a FUNCTION node, it is a parameter list and can be
                                // ignored here.
                                if (parent.getType() != Token.FUNCTION) {
                                  ensureTyped(t, n, getJSType(n.getFirstChild()));
                                } else {
                                  typeable = false;
                                }
                                break;

                              case Token.COMMA:
                                ensureTyped(t, n, getJSType(n.getLastChild()));
                                break;

                              case Token.TRUE:
                              case Token.FALSE:
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.THIS:
                                ensureTyped(t, n, t.getScope().getTypeOfThis());
                                break;

                              case Token.REF_SPECIAL:
                                ensureTyped(t, n);
                                break;

                              case Token.GET_REF:
                                ensureTyped(t, n, getJSType(n.getFirstChild()));
                                break;

                              case Token.NULL:
                                ensureTyped(t, n, NULL_TYPE);
                                break;

                              case Token.NUMBER:
                                ensureTyped(t, n, NUMBER_TYPE);
                                break;

                              case Token.STRING:
                                // Object literal keys are handled with OBJECTLIT
                                if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                                  ensureTyped(t, n, STRING_TYPE);
                                } else {
                                  // Object literal keys are not typeable
                                  typeable = false;
                                }
                                break;

                              case Token.GET:
                              case Token.SET:
                                // Object literal keys are handled with OBJECTLIT
                                break;

                              case Token.ARRAYLIT:
                                ensureTyped(t, n, ARRAY_TYPE);
                                break;

                              case Token.REGEXP:
                                ensureTyped(t, n, REGEXP_TYPE);
                                break;

                              case Token.GETPROP:
                                visitGetProp(t, n, parent);
                                typeable = !(parent.getType() == Token.ASSIGN &&
                                             parent.getFirstChild() == n);
                                break;

                              case Token.GETELEM:
                                visitGetElem(t, n);
                                // The type of GETELEM is always unknown, so no point counting that.
                                // If that unknown leaks elsewhere (say by an assignment to another
                                // variable), then it will be counted.
                                typeable = false;
                                break;

                              case Token.VAR:
                                visitVar(t, n);
                                typeable = false;
                                break;

                              case Token.NEW:
                                visitNew(t, n);
                                typeable = true;
                                break;

                              case Token.CALL:
                                visitCall(t, n);
                                typeable = !NodeUtil.isExpressionNode(parent);
                                break;

                              case Token.RETURN:
                                visitReturn(t, n);
                                typeable = false;
                                break;

                              case Token.DEC:
                              case Token.INC:
                                left = n.getFirstChild();
                                validator.expectNumber(
                                    t, left, getJSType(left), "increment/decrement");
                                ensureTyped(t, n, NUMBER_TYPE);
                                break;

                              case Token.NOT:
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.VOID:
                                ensureTyped(t, n, VOID_TYPE);
                                break;

                              case Token.TYPEOF:
                                ensureTyped(t, n, STRING_TYPE);
                                break;

                              case Token.BITNOT:
                                childType = getJSType(n.getFirstChild());
                                if (!childType.matchesInt32Context()) {
                                  report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),
                                      childType.toString());
                                }
                                ensureTyped(t, n, NUMBER_TYPE);
                                break;

                              case Token.POS:
                              case Token.NEG:
                                left = n.getFirstChild();
                                validator.expectNumber(t, left, getJSType(left), "sign operator");
                                ensureTyped(t, n, NUMBER_TYPE);
                                break;

                              case Token.EQ:
                              case Token.NE: {
                                leftType = getJSType(n.getFirstChild());
                                rightType = getJSType(n.getLastChild());

                                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                                TernaryValue result =
                                    leftTypeRestricted.testForEquality(rightTypeRestricted);
                                if (result != TernaryValue.UNKNOWN) {
                                  if (n.getType() == Token.NE) {
                                    result = result.not();
                                  }
                                  report(t, n, DETERMINISTIC_TEST, leftType.toString(),
                                      rightType.toString(), result.toString());
                                }
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;
                              }

                              case Token.SHEQ:
                              case Token.SHNE: {
                                leftType = getJSType(n.getFirstChild());
                                rightType = getJSType(n.getLastChild());

                                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                                if (!leftTypeRestricted.canTestForShallowEqualityWith(
                                        rightTypeRestricted)) {
                                  report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),
                                      rightType.toString());
                                }
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;
                              }

                              case Token.LT:
                              case Token.LE:
                              case Token.GT:
                              case Token.GE:
                                leftType = getJSType(n.getFirstChild());
                                rightType = getJSType(n.getLastChild());
                                if (rightType.isNumber()) {
                                  validator.expectNumber(
                                      t, n, leftType, "left side of numeric comparison");
                                } else if (leftType.isNumber()) {
                                  validator.expectNumber(
                                      t, n, rightType, "right side of numeric comparison");
                                } else if (leftType.matchesNumberContext() &&
                                           rightType.matchesNumberContext()) {
                                  // OK.
                                } else {
                                  // Whether the comparison is numeric will be determined at runtime
                                  // each time the expression is evaluated. Regardless, both operands
                                  // should match a string context.
                                  String message = "left side of comparison";
                                  validator.expectString(t, n, leftType, message);
                                  validator.expectNotNullOrUndefined(
                                      t, n, leftType, message, getNativeType(STRING_TYPE));
                                  message = "right side of comparison";
                                  validator.expectString(t, n, rightType, message);
                                  validator.expectNotNullOrUndefined(
                                      t, n, rightType, message, getNativeType(STRING_TYPE));
                                }
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.IN:
                                left = n.getFirstChild();
                                right = n.getLastChild();
                                leftType = getJSType(left);
                                rightType = getJSType(right);
                                validator.expectObject(t, n, rightType, "'in' requires an object");
                                validator.expectString(t, left, leftType, "left side of 'in'");
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.INSTANCEOF:
                                left = n.getFirstChild();
                                right = n.getLastChild();
                                leftType = getJSType(left);
                                rightType = getJSType(right).restrictByNotNullOrUndefined();

                                validator.expectAnyObject(
                                    t, left, leftType, "deterministic instanceof yields false");
                                validator.expectActualObject(
                                    t, right, rightType, "instanceof requires an object");
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.ASSIGN:
                                visitAssign(t, n);
                                typeable = false;
                                break;

                              case Token.ASSIGN_LSH:
                              case Token.ASSIGN_RSH:
                              case Token.ASSIGN_URSH:
                              case Token.ASSIGN_DIV:
                              case Token.ASSIGN_MOD:
                              case Token.ASSIGN_BITOR:
                              case Token.ASSIGN_BITXOR:
                              case Token.ASSIGN_BITAND:
                              case Token.ASSIGN_SUB:
                              case Token.ASSIGN_ADD:
                              case Token.ASSIGN_MUL:
                              case Token.LSH:
                              case Token.RSH:
                              case Token.URSH:
                              case Token.DIV:
                              case Token.MOD:
                              case Token.BITOR:
                              case Token.BITXOR:
                              case Token.BITAND:
                              case Token.SUB:
                              case Token.ADD:
                              case Token.MUL:
                                visitBinaryOperator(n.getType(), t, n);
                                break;

                              case Token.DELPROP:
                                if (!isReference(n.getFirstChild())) {
                                  report(t, n, BAD_DELETE);
                                }
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.CASE:
                                JSType switchType = getJSType(parent.getFirstChild());
                                JSType caseType = getJSType(n.getFirstChild());
                                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                                typeable = false;
                                break;

                              case Token.WITH: {
                                Node child = n.getFirstChild();
                                childType = getJSType(child);
                                validator.expectObject(
                                    t, child, childType, "with requires an object");
                                typeable = false;
                                break;
                              }

                              case Token.FUNCTION:
                                visitFunction(t, n);
                                break;

                              // These nodes have no interesting type behavior.
                              case Token.LABEL:
                              case Token.LABEL_NAME:
                              case Token.SWITCH:
                              case Token.BREAK:
                              case Token.CATCH:
                              case Token.TRY:
                              case Token.SCRIPT:
                              case Token.EXPR_RESULT:
                              case Token.BLOCK:
                              case Token.EMPTY:
                              case Token.DEFAULT:
                              case Token.CONTINUE:
                              case Token.DEBUGGER:
                              case Token.THROW:
                                typeable = false;
                                break;

                              // These nodes require data flow analysis.
                              case Token.DO:
                              case Token.FOR:
                              case Token.IF:
                              case Token.WHILE:
                                typeable = false;
                                break;

                              // These nodes are typed during the type inference.
                              case Token.AND:
                              case Token.HOOK:
                              case Token.OBJECTLIT:
                              case Token.OR:
                                if (n.getJSType() != null) { // If we didn't run type inference.
                                  ensureTyped(t, n);
                                } else {
                                  // If this is an enum, then give that type to the objectlit as well.
                                  if ((n.getType() == Token.OBJECTLIT)
                                      && (parent.getJSType() instanceof EnumType)) {
                                    ensureTyped(t, n, parent.getJSType());
                                  } else {
                                    ensureTyped(t, n);
                                  }
                                }
                                if (n.getType() == Token.OBJECTLIT) {
                                  for (Node key : n.children()) {
                                    visitObjLitKey(t, key, n);
                                  }
                                }
                                break;

                              default:
                                report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
                                ensureTyped(t, n);
                                break;
                            }
                    children: []
                    pos: 16885
                    length: 9912
                children: []
                pos: 16864
                length: 9933
              - type: expression_statement
                fields:
                  text: typeable = typeable && !inExterns;
                children: []
                pos: 26880
                length: 34
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: typeable
                        children: []
                        pos: 26924
                        length: 8
                    children: []
                    pos: 26923
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: doPercentTypedAccounting(t, n);
                    children: []
                    pos: 26942
                    length: 31
                  pos: 26934
                  length: 45
                pos: 26920
                length: 59
              - type: expression_statement
                fields:
                  text: checkNoTypeCheckSection(n, false);
                children: []
                pos: 26985
                length: 34
              pos: 16686
              length: 10337
          children: []
          pos: 16630
          length: 10393
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: doPercentTypedAccounting
              children: []
              pos: 27146
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 27171
                length: 15
              pos: 27133
              length: 384
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType type = n.getJSType();
                children: []
                pos: 27202
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 27239
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 27247
                            length: 4
                        children: []
                        pos: 27239
                        length: 12
                    children: []
                    pos: 27238
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: nullCount++;
                    children: []
                    pos: 27261
                    length: 12
                  pos: 27253
                  length: 26
                pos: 27235
                length: 278
              pos: 27196
              length: 321
          children: []
          pos: 27133
          length: 384
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitAssign
              children: []
              pos: 27869
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 27881
                length: 15
              pos: 27856
              length: 3765
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSDocInfo info = assign.getJSDocInfo();
                children: []
                pos: 27917
                length: 39
              - type: local_variable_declaration
                fields:
                  text: Node lvalue = assign.getFirstChild();
                children: []
                pos: 27961
                length: 37
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = assign.getLastChild();
                children: []
                pos: 28003
                length: 36
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: lvalue.getType()
                            children: []
                            pos: 28049
                            length: 16
                          right:
                            type: field_access
                            fields:
                              text: Token.GETPROP
                            children: []
                            pos: 28069
                            length: 13
                        children: []
                        pos: 28049
                        length: 33
                    children: []
                    pos: 28048
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Node object = lvalue.getFirstChild();
                    children: []
                    pos: 28092
                    length: 37
                  - type: local_variable_declaration
                    fields:
                      text: JSType objectJsType = getJSType(object);
                    children: []
                    pos: 28136
                    length: 40
                  - type: local_variable_declaration
                    fields:
                      text: String property = lvalue.getLastChild().getString();
                    children: []
                    pos: 28183
                    length: 52
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: object.getType()
                                children: []
                                pos: 28367
                                length: 16
                              right:
                                type: field_access
                                fields:
                                  text: Token.GETPROP
                                children: []
                                pos: 28387
                                length: 13
                            children: []
                            pos: 28367
                            length: 33
                        children: []
                        pos: 28366
                        length: 35
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: JSType jsType = getJSType(object.getFirstChild());
                        children: []
                        pos: 28412
                        length: 50
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: jsType.isInterface()
                                    children: []
                                    pos: 28475
                                    length: 20
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: object.getLastChild().getString().equals("prototype")
                                    children: []
                                    pos: 28511
                                    length: 53
                                children: []
                                pos: 28475
                                length: 89
                            children: []
                            pos: 28474
                            length: 91
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: expression_statement
                            fields:
                              text: visitInterfaceGetprop(t, assign, object, property,
                                lvalue, rvalue);
                            children: []
                            pos: 28578
                            length: 67
                          pos: 28566
                          length: 89
                        pos: 28471
                        length: 184
                      pos: 28402
                      length: 261
                    pos: 28363
                    length: 300
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: info
                                    children: []
                                    pos: 28719
                                    length: 4
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 28727
                                    length: 4
                                children: []
                                pos: 28719
                                length: 12
                              right:
                                type: method_invocation
                                fields:
                                  text: info.hasType()
                                children: []
                                pos: 28735
                                length: 14
                            children: []
                            pos: 28719
                            length: 30
                        children: []
                        pos: 28718
                        length: 32
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            visitAnnotatedAssignGetprop(t, assign,
                                        info.getType().evaluate(t.getScope(), typeRegistry), object,
                                        property, rvalue);
                        children: []
                        pos: 28761
                        length: 142
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 28912
                        length: 7
                      pos: 28751
                      length: 176
                    pos: 28715
                    length: 212
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: info
                                    children: []
                                    pos: 28983
                                    length: 4
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 28991
                                    length: 4
                                children: []
                                pos: 28983
                                length: 12
                              right:
                                type: method_invocation
                                fields:
                                  text: info.hasEnumParameterType()
                                children: []
                                pos: 28999
                                length: 27
                            children: []
                            pos: 28983
                            length: 43
                        children: []
                        pos: 28982
                        length: 45
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            checkEnumInitializer(
                                        t, rvalue, info.getEnumParameterType().evaluate(
                                            t.getScope(), typeRegistry));
                        children: []
                        pos: 29038
                        length: 128
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 29175
                        length: 7
                      pos: 29028
                      length: 162
                    pos: 28979
                    length: 211
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: property.equals("prototype")
                            children: []
                            pos: 29235
                            length: 28
                        children: []
                        pos: 29234
                        length: 30
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: instanceof_expression
                                fields:
                                  text: objectJsType instanceof FunctionType
                                children: []
                                pos: 29279
                                length: 36
                            children: []
                            pos: 29278
                            length: 38
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: local_variable_declaration
                            fields:
                              text: FunctionType functionType = (FunctionType) objectJsType;
                            children: []
                            pos: 29329
                            length: 56
                          - type: if_statement
                            fields:
                              condition:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: method_invocation
                                    fields:
                                      text: functionType.isConstructor()
                                    children: []
                                    pos: 29400
                                    length: 28
                                children: []
                                pos: 29399
                                length: 30
                            children:
                            - type: block
                              fields: {}
                              children:
                              - type: local_variable_declaration
                                fields:
                                  text: JSType rvalueType = rvalue.getJSType();
                                children: []
                                pos: 29444
                                length: 39
                              - type: expression_statement
                                fields:
                                  text: |-
                                    validator.expectObject(t, rvalue, rvalueType,
                                                    OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                                children: []
                                pos: 29496
                                length: 100
                              pos: 29430
                              length: 178
                            pos: 29396
                            length: 212
                          pos: 29317
                          length: 301
                        pos: 29275
                        length: 409
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 29693
                        length: 7
                      pos: 29265
                      length: 443
                    pos: 29231
                    length: 477
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: object.getType()
                                children: []
                                pos: 29762
                                length: 16
                              right:
                                type: field_access
                                fields:
                                  text: Token.GETPROP
                                children: []
                                pos: 29782
                                length: 13
                            children: []
                            pos: 29762
                            length: 33
                        children: []
                        pos: 29761
                        length: 35
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: Node object2 = object.getFirstChild();
                        children: []
                        pos: 29807
                        length: 38
                      - type: local_variable_declaration
                        fields:
                          text: String property2 = NodeUtil.getStringValue(object.getLastChild());
                        children: []
                        pos: 29854
                        length: 66
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: method_invocation
                                fields:
                                  text: '"prototype".equals(property2)'
                                children: []
                                pos: 29934
                                length: 29
                            children: []
                            pos: 29933
                            length: 31
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: local_variable_declaration
                            fields:
                              text: JSType jsType = object2.getJSType();
                            children: []
                            pos: 29977
                            length: 36
                          - type: if_statement
                            fields:
                              condition:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: instanceof_expression
                                    fields:
                                      text: jsType instanceof FunctionType
                                    children: []
                                    pos: 30028
                                    length: 30
                                children: []
                                pos: 30027
                                length: 32
                            children:
                            - type: block
                              fields: {}
                              children:
                              - type: local_variable_declaration
                                fields:
                                  text: FunctionType functionType = (FunctionType)
                                    jsType;
                                children: []
                                pos: 30074
                                length: 50
                              - type: if_statement
                                fields:
                                  condition:
                                    type: parenthesized_expression
                                    fields:
                                      expression:
                                        type: or
                                        fields:
                                          left:
                                            type: method_invocation
                                            fields:
                                              text: functionType.isConstructor()
                                            children: []
                                            pos: 30141
                                            length: 28
                                          right:
                                            type: method_invocation
                                            fields:
                                              text: functionType.isInterface()
                                            children: []
                                            pos: 30173
                                            length: 26
                                        children: []
                                        pos: 30141
                                        length: 58
                                    children: []
                                    pos: 30140
                                    length: 60
                                children:
                                - type: block
                                  fields: {}
                                  children:
                                  - type: expression_statement
                                    fields:
                                      text: |-
                                        checkDeclaredPropertyInheritance(
                                                          t, assign, functionType, property, info, getJSType(rvalue));
                                    children: []
                                    pos: 30217
                                    length: 112
                                  pos: 30201
                                  length: 142
                                pos: 30137
                                length: 206
                              pos: 30060
                              length: 295
                            pos: 30024
                            length: 401
                          - type: return_statement
                            fields:
                              text: return;
                            children: []
                            pos: 30436
                            length: 7
                          pos: 29965
                          length: 488
                        pos: 29930
                        length: 523
                      pos: 29797
                      length: 664
                    pos: 29758
                    length: 703
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        ObjectType type = ObjectType.cast(
                                  objectJsType.restrictByNotNullOrUndefined());
                    children: []
                    pos: 30501
                    length: 90
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: type
                                children: []
                                pos: 30602
                                length: 4
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 30610
                                length: 4
                            children: []
                            pos: 30602
                            length: 12
                        children: []
                        pos: 30601
                        length: 14
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: and
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: type.hasProperty(property)
                                        children: []
                                        pos: 30630
                                        length: 26
                                      right:
                                        type: unary_expression
                                        fields:
                                          text: "!type.isPropertyTypeInferred(property)"
                                        children: []
                                        pos: 30672
                                        length: 38
                                    children: []
                                    pos: 30630
                                    length: 80
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!propertyIsImplicitCast(type, property)"
                                    children: []
                                    pos: 30726
                                    length: 39
                                children: []
                                pos: 30630
                                length: 135
                            children: []
                            pos: 30629
                            length: 137
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: expression_statement
                            fields:
                              text: |-
                                validator.expectCanAssignToPropertyOf(
                                              t, assign, getJSType(rvalue),
                                              type.getPropertyType(property), object, property);
                            children: []
                            pos: 30779
                            length: 147
                          pos: 30767
                          length: 169
                        pos: 30626
                        length: 310
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 30945
                        length: 7
                      pos: 30616
                      length: 344
                    pos: 30598
                    length: 362
                  pos: 28084
                  length: 2882
                pos: 28045
                length: 3226
              - type: local_variable_declaration
                fields:
                  text: JSType leftType = getJSType(lvalue);
                children: []
                pos: 31302
                length: 36
              - type: local_variable_declaration
                fields:
                  text: Node rightChild = assign.getLastChild();
                children: []
                pos: 31343
                length: 40
              - type: local_variable_declaration
                fields:
                  text: JSType rightType = getJSType(rightChild);
                children: []
                pos: 31388
                length: 41
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: |-
                            validator.expectCanAssignTo(
                                        t, assign, rightType, leftType, "assignment")
                        children: []
                        pos: 31438
                        length: 86
                    children: []
                    pos: 31437
                    length: 88
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, assign, rightType);
                    children: []
                    pos: 31534
                    length: 34
                  pos: 31526
                  length: 48
                pos: 31434
                length: 183
              pos: 27911
              length: 3710
          children: []
          pos: 27856
          length: 3765
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitObjLitKey
              children: []
              pos: 31919
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 31934
                length: 15
              pos: 31906
              length: 1693
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = key.getFirstChild();
                children: []
                pos: 32207
                length: 34
              - type: local_variable_declaration
                fields:
                  text: |-
                    JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(
                            key, getJSType(rvalue));
                children: []
                pos: 32246
                length: 94
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: rightType
                            children: []
                            pos: 32349
                            length: 9
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 32362
                            length: 4
                        children: []
                        pos: 32349
                        length: 17
                    children: []
                    pos: 32348
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: rightType = getNativeType(UNKNOWN_TYPE);
                    children: []
                    pos: 32376
                    length: 40
                  pos: 32368
                  length: 54
                pos: 32345
                length: 77
              - type: local_variable_declaration
                fields:
                  text: Node owner = objlit;
                children: []
                pos: 32428
                length: 20
              - type: local_variable_declaration
                fields:
                  text: JSType keyType = getJSType(key);
                children: []
                pos: 32508
                length: 32
              - type: local_variable_declaration
                fields:
                  text: |-
                    boolean valid = validator.expectCanAssignToPropertyOf(t, key,
                            rightType, keyType,
                            owner, NodeUtil.getObjectLitKeyName(key));
                children: []
                pos: 32545
                length: 140
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: valid
                        children: []
                        pos: 32694
                        length: 5
                    children: []
                    pos: 32693
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, key, rightType);
                    children: []
                    pos: 32709
                    length: 31
                  pos: 32701
                  length: 45
                pos: 32690
                length: 96
              - type: local_variable_declaration
                fields:
                  text: JSType objlitType = getJSType(objlit);
                children: []
                pos: 33072
                length: 38
              - type: local_variable_declaration
                fields:
                  text: |-
                    ObjectType type = ObjectType.cast(
                            objlitType.restrictByNotNullOrUndefined());
                children: []
                pos: 33115
                length: 86
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 33210
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 33218
                            length: 4
                        children: []
                        pos: 33210
                        length: 12
                    children: []
                    pos: 33209
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: String property = NodeUtil.getObjectLitKeyName(key);
                    children: []
                    pos: 33232
                    length: 52
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: type.hasProperty(property)
                                    children: []
                                    pos: 33295
                                    length: 26
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!type.isPropertyTypeInferred(property)"
                                    children: []
                                    pos: 33335
                                    length: 38
                                children: []
                                pos: 33295
                                length: 78
                              right:
                                type: unary_expression
                                fields:
                                  text: "!propertyIsImplicitCast(type, property)"
                                children: []
                                pos: 33387
                                length: 39
                            children: []
                            pos: 33295
                            length: 131
                        children: []
                        pos: 33294
                        length: 133
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            validator.expectCanAssignToPropertyOf(
                                        t, key, keyType,
                                        type.getPropertyType(property), owner, property);
                        children: []
                        pos: 33438
                        length: 129
                      pos: 33428
                      length: 147
                    pos: 33291
                    length: 284
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 33582
                    length: 7
                  pos: 33224
                  length: 371
                pos: 33206
                length: 389
              pos: 31974
              length: 1625
          children: []
          pos: 31906
          length: 1693
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: propertyIsImplicitCast
              children: []
              pos: 33733
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ObjectType type
                children: []
                pos: 33756
                length: 15
              pos: 33717
              length: 309
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (; type != null; type = type.getImplicitPrototype()) {
                          JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
                          if (docInfo != null && docInfo.isImplicitCast()) {
                            return true;
                          }
                        }
                children: []
                pos: 33792
                length: 212
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 34009
                length: 13
              pos: 33786
              length: 240
          children: []
          pos: 33717
          length: 309
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkDeclaredPropertyInheritance
              children: []
              pos: 34295
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 34335
                length: 15
              pos: 34282
              length: 4272
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: hasUnknownOrEmptySupertype(ctorType)
                        children: []
                        pos: 34548
                        length: 36
                    children: []
                    pos: 34547
                    length: 38
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 34594
                    length: 7
                  pos: 34586
                  length: 21
                pos: 34544
                length: 63
              - type: local_variable_declaration
                fields:
                  text: FunctionType superClass = ctorType.getSuperClassConstructor();
                children: []
                pos: 34613
                length: 62
              - type: local_variable_declaration
                fields:
                  text: |-
                    boolean superClassHasProperty = superClass != null &&
                            superClass.getPrototype().hasProperty(propertyName);
                children: []
                pos: 34680
                length: 114
              - type: local_variable_declaration
                fields:
                  text: boolean superInterfacesHasProperty = false;
                children: []
                pos: 34820
                length: 43
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: ctorType.isInterface()
                        children: []
                        pos: 34872
                        length: 22
                    children: []
                    pos: 34871
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                                superInterfacesHasProperty =
                                  superInterfacesHasProperty || interfaceType.hasProperty(propertyName);
                              }
                    children: []
                    pos: 34904
                    length: 193
                  pos: 34896
                  length: 207
                pos: 34868
                length: 235
              - type: local_variable_declaration
                fields:
                  text: boolean declaredOverride = info != null && info.isOverride();
                children: []
                pos: 35108
                length: 61
              - type: local_variable_declaration
                fields:
                  text: boolean foundInterfaceProperty = false;
                children: []
                pos: 35175
                length: 39
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: ctorType.isConstructor()
                        children: []
                        pos: 35223
                        length: 24
                    children: []
                    pos: 35222
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (JSType implementedInterface :
                                  ctorType.getAllImplementedInterfaces()) {
                                if (implementedInterface.isUnknownType() ||
                                    implementedInterface.isEmptyType()) {
                                  continue;
                                }
                                FunctionType interfaceType =
                                    implementedInterface.toObjectType().getConstructor();
                                Preconditions.checkNotNull(interfaceType);
                                boolean interfaceHasProperty =
                                    interfaceType.getPrototype().hasProperty(propertyName);
                                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                                if (reportMissingOverride.isOn() && !declaredOverride &&
                                    interfaceHasProperty) {
                                  // @override not present, but the property does override an interface
                                  // property
                                  compiler.report(t.makeError(n, reportMissingOverride,
                                      HIDDEN_INTERFACE_PROPERTY, propertyName,
                                      interfaceType.getTopMostDefiningType(propertyName).toString()));
                                }
                              }
                    children: []
                    pos: 35257
                    length: 979
                  pos: 35249
                  length: 993
                pos: 35219
                length: 1023
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: unary_expression
                                fields:
                                  text: "!declaredOverride"
                                children: []
                                pos: 36252
                                length: 17
                              right:
                                type: unary_expression
                                fields:
                                  text: "!superClassHasProperty"
                                children: []
                                pos: 36273
                                length: 22
                            children: []
                            pos: 36252
                            length: 43
                          right:
                            type: unary_expression
                            fields:
                              text: "!superInterfacesHasProperty"
                            children: []
                            pos: 36307
                            length: 27
                        children: []
                        pos: 36252
                        length: 82
                    children: []
                    pos: 36251
                    length: 84
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 36404
                    length: 7
                  pos: 36336
                  length: 81
                pos: 36248
                length: 169
              - type: local_variable_declaration
                fields:
                  text: |-
                    JSType topInstanceType = superClassHasProperty ?
                            superClass.getTopMostDefiningType(propertyName) : null;
                children: []
                pos: 36423
                length: 112
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: reportMissingOverride.isOn()
                                    children: []
                                    pos: 36544
                                    length: 28
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: ctorType.isConstructor()
                                    children: []
                                    pos: 36576
                                    length: 24
                                children: []
                                pos: 36544
                                length: 56
                              right:
                                type: unary_expression
                                fields:
                                  text: "!declaredOverride"
                                children: []
                                pos: 36612
                                length: 17
                            children: []
                            pos: 36544
                            length: 85
                          right:
                            type: identifier
                            fields:
                              text: superClassHasProperty
                            children: []
                            pos: 36633
                            length: 21
                        children: []
                        pos: 36544
                        length: 110
                    children: []
                    pos: 36543
                    length: 112
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        compiler.report(t.makeError(n, reportMissingOverride,
                                  HIDDEN_SUPERCLASS_PROPERTY, propertyName,
                                  topInstanceType.toString()));
                    children: []
                    pos: 36758
                    length: 145
                  pos: 36656
                  length: 253
                pos: 36540
                length: 369
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!declaredOverride"
                        children: []
                        pos: 36918
                        length: 17
                    children: []
                    pos: 36917
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 36984
                    length: 7
                  pos: 36937
                  length: 60
                pos: 36914
                length: 83
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: superClassHasProperty
                        children: []
                        pos: 37069
                        length: 21
                    children: []
                    pos: 37068
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        JSType superClassPropType =
                                  superClass.getPrototype().getPropertyType(propertyName);
                    children: []
                    pos: 37146
                    length: 94
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!propertyType.canAssignTo(superClassPropType)"
                            children: []
                            pos: 37251
                            length: 45
                        children: []
                        pos: 37250
                        length: 47
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            compiler.report(
                                        t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                                            propertyName, topInstanceType.toString(),
                                            superClassPropType.toString(), propertyType.toString()));
                        children: []
                        pos: 37308
                        length: 212
                      pos: 37298
                      length: 230
                    pos: 37247
                    length: 281
                  pos: 37092
                  length: 442
                pos: 37065
                length: 1485
              pos: 34447
              length: 4107
          children: []
          pos: 34282
          length: 4272
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hasUnknownOrEmptySupertype
              children: []
              pos: 38715
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: FunctionType ctor
                children: []
                pos: 38742
                length: 17
              pos: 38692
              length: 815
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
                children: []
                pos: 38767
                length: 72
              - type: expression_statement
                fields:
                  text: Preconditions.checkArgument(!ctor.isUnknownType());
                children: []
                pos: 38844
                length: 51
              - type: while_statement
                fields:
                  text: |-
                    while (true) {
                          ObjectType maybeSuperInstanceType =
                              ctor.getPrototype().getImplicitPrototype();
                          if (maybeSuperInstanceType == null) {
                            return false;
                          }
                          if (maybeSuperInstanceType.isUnknownType() ||
                              maybeSuperInstanceType.isEmptyType()) {
                            return true;
                          }
                          ctor = maybeSuperInstanceType.getConstructor();
                          if (ctor == null) {
                            return false;
                          }
                          Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
                        }
                children: []
                pos: 38996
                length: 507
              pos: 38761
              length: 746
          children: []
          pos: 38692
          length: 815
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitInterfaceGetprop
              children: []
              pos: 39645
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 39667
                length: 15
              pos: 39632
              length: 1206
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType rvalueType = getJSType(rvalue);
                children: []
                pos: 39766
                length: 38
              - type: local_variable_declaration
                fields:
                  text: |-
                    String abstractMethodName =
                            compiler.getCodingConvention().getAbstractMethodName();
                children: []
                pos: 40003
                length: 91
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: unary_expression
                            fields:
                              text: "!rvalueType.isOrdinaryFunction()"
                            children: []
                            pos: 40103
                            length: 32
                          right:
                            type: unary_expression
                            fields:
                              text: |-
                                !(rvalue.isQualifiedName() &&
                                          rvalue.getQualifiedName().equals(abstractMethodName))
                            children: []
                            pos: 40147
                            length: 93
                        children: []
                        pos: 40103
                        length: 137
                    children: []
                    pos: 40102
                    length: 139
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        String abstractMethodMessage = (abstractMethodName != null)
                                 ? ", or " + abstractMethodName
                                 : "";
                    children: []
                    pos: 40325
                    length: 114
                  - type: expression_statement
                    fields:
                      text: |-
                        compiler.report(
                                  t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,
                                      abstractMethodMessage));
                    children: []
                    pos: 40446
                    length: 123
                  pos: 40242
                  length: 333
                pos: 40099
                length: 476
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: assign.getLastChild().getType()
                                children: []
                                pos: 40585
                                length: 31
                              right:
                                type: field_access
                                fields:
                                  text: Token.FUNCTION
                                children: []
                                pos: 40620
                                length: 14
                            children: []
                            pos: 40585
                            length: 49
                          right:
                            type: unary_expression
                            fields:
                              text: "!NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild())"
                            children: []
                            pos: 40646
                            length: 60
                        children: []
                        pos: 40585
                        length: 121
                    children: []
                    pos: 40584
                    length: 123
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        compiler.report(
                                  t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,
                                      abstractMethodName));
                    children: []
                    pos: 40716
                    length: 112
                  pos: 40708
                  length: 126
                pos: 40581
                length: 253
              pos: 39759
              length: 1079
          children: []
          pos: 39632
          length: 1206
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitAnnotatedAssignGetprop
              children: []
              pos: 41007
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 41035
                length: 15
              pos: 40994
              length: 297
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,
                            object, property);
                children: []
                pos: 41187
                length: 100
              pos: 41127
              length: 164
          children: []
          pos: 40994
          length: 297
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitName
              children: []
              pos: 41620
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 41630
                length: 15
              pos: 41612
              length: 1088
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int parentNodeType = parent.getType();
                children: []
                pos: 42126
                length: 38
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: or
                                fields:
                                  left:
                                    type: equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: parentNodeType
                                        children: []
                                        pos: 42173
                                        length: 14
                                      right:
                                        type: field_access
                                        fields:
                                          text: Token.FUNCTION
                                        children: []
                                        pos: 42191
                                        length: 14
                                    children: []
                                    pos: 42173
                                    length: 32
                                  right:
                                    type: equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: parentNodeType
                                        children: []
                                        pos: 42217
                                        length: 14
                                      right:
                                        type: field_access
                                        fields:
                                          text: Token.CATCH
                                        children: []
                                        pos: 42235
                                        length: 11
                                    children: []
                                    pos: 42217
                                    length: 29
                                children: []
                                pos: 42173
                                length: 73
                              right:
                                type: equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: parentNodeType
                                    children: []
                                    pos: 42258
                                    length: 14
                                  right:
                                    type: field_access
                                    fields:
                                      text: Token.LP
                                    children: []
                                    pos: 42276
                                    length: 8
                                children: []
                                pos: 42258
                                length: 26
                            children: []
                            pos: 42173
                            length: 111
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: parentNodeType
                                children: []
                                pos: 42296
                                length: 14
                              right:
                                type: field_access
                                fields:
                                  text: Token.VAR
                                children: []
                                pos: 42314
                                length: 9
                            children: []
                            pos: 42296
                            length: 27
                        children: []
                        pos: 42173
                        length: 150
                    children: []
                    pos: 42172
                    length: 152
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 42333
                    length: 13
                  pos: 42325
                  length: 27
                pos: 42169
                length: 183
              - type: local_variable_declaration
                fields:
                  text: JSType type = n.getJSType();
                children: []
                pos: 42358
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 42395
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 42403
                            length: 4
                        children: []
                        pos: 42395
                        length: 12
                    children: []
                    pos: 42394
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: type = getNativeType(UNKNOWN_TYPE);
                    children: []
                    pos: 42417
                    length: 35
                  - type: local_variable_declaration
                    fields:
                      text: Var var = t.getScope().getVar(n.getString());
                    children: []
                    pos: 42459
                    length: 45
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: var
                                children: []
                                pos: 42515
                                length: 3
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 42522
                                length: 4
                            children: []
                            pos: 42515
                            length: 11
                        children: []
                        pos: 42514
                        length: 13
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: JSType varType = var.getType();
                        children: []
                        pos: 42538
                        length: 31
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: not_equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: varType
                                    children: []
                                    pos: 42582
                                    length: 7
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 42593
                                    length: 4
                                children: []
                                pos: 42582
                                length: 15
                            children: []
                            pos: 42581
                            length: 17
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: expression_statement
                            fields:
                              text: type = varType;
                            children: []
                            pos: 42611
                            length: 15
                          pos: 42599
                          length: 37
                        pos: 42578
                        length: 58
                      pos: 42528
                      length: 116
                    pos: 42511
                    length: 133
                  pos: 42409
                  length: 241
                pos: 42391
                length: 259
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n, type);
                children: []
                pos: 42655
                length: 24
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 42684
                length: 12
              pos: 41668
              length: 1032
          children: []
          pos: 41612
          length: 1088
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitGetProp
              children: []
              pos: 42991
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 43004
                length: 15
              pos: 42978
              length: 1058
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.getJSType()
                                children: []
                                pos: 43263
                                length: 13
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 43280
                                length: 4
                            children: []
                            pos: 43263
                            length: 21
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: parent.getType()
                                children: []
                                pos: 43288
                                length: 16
                              right:
                                type: field_access
                                fields:
                                  text: Token.ASSIGN
                                children: []
                                pos: 43308
                                length: 12
                            children: []
                            pos: 43288
                            length: 32
                        children: []
                        pos: 43263
                        length: 57
                    children: []
                    pos: 43262
                    length: 59
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 43330
                    length: 7
                  pos: 43322
                  length: 21
                pos: 43259
                length: 84
              - type: local_variable_declaration
                fields:
                  text: Node property = n.getLastChild();
                children: []
                pos: 43555
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node objNode = n.getFirstChild();
                children: []
                pos: 43593
                length: 33
              - type: local_variable_declaration
                fields:
                  text: JSType childType = getJSType(objNode);
                children: []
                pos: 43631
                length: 38
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: |-
                            !validator.expectNotNullOrUndefined(t, n, childType,
                                        childType + " has no properties", getNativeType(OBJECT_TYPE))
                        children: []
                        pos: 43770
                        length: 126
                    children: []
                    pos: 43769
                    length: 128
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, n);
                    children: []
                    pos: 43906
                    length: 18
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 43931
                    length: 7
                  pos: 43898
                  length: 46
                pos: 43766
                length: 178
              - type: expression_statement
                fields:
                  text: checkPropertyAccess(childType, property.getString(), t, n);
                children: []
                pos: 43950
                length: 59
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n);
                children: []
                pos: 44014
                length: 18
              pos: 43042
              length: 994
          children: []
          pos: 42978
          length: 1058
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkPropertyAccess
              children: []
              pos: 44120
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType childType
                children: []
                pos: 44140
                length: 16
              pos: 44107
              length: 1024
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ObjectType objectType = childType.dereference();
                children: []
                pos: 44212
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: objectType
                            children: []
                            pos: 44269
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 44283
                            length: 4
                        children: []
                        pos: 44269
                        length: 18
                    children: []
                    pos: 44268
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: JSType propType = getJSType(n);
                    children: []
                    pos: 44297
                    length: 31
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: or
                                    fields:
                                      left:
                                        type: unary_expression
                                        fields:
                                          text: "!objectType.hasProperty(propName)"
                                        children: []
                                        pos: 44340
                                        length: 33
                                      right:
                                        type: method_invocation
                                        fields:
                                          text: objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))
                                        children: []
                                        pos: 44388
                                        length: 59
                                    children: []
                                    pos: 44340
                                    length: 107
                                children: []
                                pos: 44339
                                length: 109
                              right:
                                type: method_invocation
                                fields:
                                  text: propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))
                                children: []
                                pos: 44462
                                length: 57
                            children: []
                            pos: 44339
                            length: 180
                        children: []
                        pos: 44338
                        length: 182
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: instanceof_expression
                                fields:
                                  text: objectType instanceof EnumType
                                children: []
                                pos: 44535
                                length: 30
                            children: []
                            pos: 44534
                            length: 32
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: expression_statement
                            fields:
                              text: report(t, n, INEXISTENT_ENUM_ELEMENT, propName);
                            children: []
                            pos: 44579
                            length: 48
                          pos: 44567
                          length: 70
                        pos: 44531
                        length: 432
                      pos: 44521
                      length: 450
                    pos: 44335
                    length: 636
                  pos: 44289
                  length: 688
                pos: 44265
                length: 862
              pos: 44206
              length: 925
          children: []
          pos: 44107
          length: 1024
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isPropertyTest
              children: []
              pos: 45358
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node getProp
                children: []
                pos: 45373
                length: 12
              pos: 45342
              length: 763
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node parent = getProp.getParent();
                children: []
                pos: 45393
                length: 34
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: parent.getType()
                        children: []
                        pos: 45440
                        length: 16
                    children: []
                    pos: 45439
                    length: 18
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.CALL:
                                return parent.getFirstChild() != getProp &&
                                    compiler.getCodingConvention().isPropertyTestFunction(parent);

                              case Token.IF:
                              case Token.WHILE:
                              case Token.DO:
                              case Token.FOR:
                                return NodeUtil.getConditionExpression(parent) == getProp;

                              case Token.INSTANCEOF:
                              case Token.TYPEOF:
                                return true;

                              case Token.AND:
                              case Token.HOOK:
                                return parent.getFirstChild() == getProp;

                              case Token.NOT:
                                return parent.getParent().getType() == Token.OR &&
                                    parent.getParent().getFirstChild() == parent;
                            }
                    children: []
                    pos: 45458
                    length: 625
                children: []
                pos: 45432
                length: 651
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 46088
                length: 13
              pos: 45387
              length: 718
          children: []
          pos: 45342
          length: 763
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitGetElem
              children: []
              pos: 46348
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 46361
                length: 15
              pos: 46335
              length: 222
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node left = n.getFirstChild();
                children: []
                pos: 46392
                length: 30
              - type: local_variable_declaration
                fields:
                  text: Node right = n.getLastChild();
                children: []
                pos: 46427
                length: 30
              - type: expression_statement
                fields:
                  text: validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
                children: []
                pos: 46462
                length: 68
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n);
                children: []
                pos: 46535
                length: 18
              pos: 46386
              length: 171
          children: []
          pos: 46335
          length: 222
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitVar
              children: []
              pos: 46796
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 46805
                length: 15
              pos: 46783
              length: 1336
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: 'JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() :
                    null;'
                children: []
                pos: 46998
                length: 62
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Node name : n.children()) {
                          Node value = name.getFirstChild();
                          // A null var would indicate a bug in the scope creation logic.
                          Var var = t.getScope().getVar(name.getString());

                          if (value != null) {
                            JSType valueType = getJSType(value);
                            JSType nameType = var.getType();
                            nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;

                            JSDocInfo info = name.getJSDocInfo();
                            if (info == null) {
                              info = varInfo;
                            }
                            if (info != null && info.hasEnumParameterType()) {
                              // var.getType() can never be null, this would indicate a bug in the
                              // scope creation logic.
                              checkEnumInitializer(
                                  t, value,
                                  info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));
                            } else if (var.isTypeInferred()) {
                              ensureTyped(t, name, valueType);
                            } else {
                              validator.expectCanAssignTo(
                                  t, value, valueType, nameType, "initializing variable");
                            }
                          }
                        }
                children: []
                pos: 47065
                length: 1050
              pos: 46830
              length: 1289
          children: []
          pos: 46783
          length: 1336
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitNew
              children: []
              pos: 48172
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 48181
                length: 15
              pos: 48159
              length: 863
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node constructor = n.getFirstChild();
                children: []
                pos: 48212
                length: 37
              - type: local_variable_declaration
                fields:
                  text: FunctionType type = getFunctionType(constructor);
                children: []
                pos: 48254
                length: 49
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: type
                                children: []
                                pos: 48312
                                length: 4
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 48320
                                length: 4
                            children: []
                            pos: 48312
                            length: 12
                          right:
                            type: method_invocation
                            fields:
                              text: type.isConstructor()
                            children: []
                            pos: 48328
                            length: 20
                        children: []
                        pos: 48312
                        length: 36
                    children: []
                    pos: 48311
                    length: 38
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: visitParameterList(t, n, type);
                    children: []
                    pos: 48358
                    length: 31
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, n, type.getInstanceType());
                    children: []
                    pos: 48396
                    length: 42
                  pos: 48350
                  length: 94
                pos: 48308
                length: 710
              pos: 48206
              length: 816
          children: []
          pos: 48159
          length: 863
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkInterfaceConflictProperties
              children: []
              pos: 49560
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 49593
                length: 15
              pos: 49547
              length: 987
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Set<String> currentPropertyNames = interfaceType.getPropertyNames();
                children: []
                pos: 49776
                length: 68
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (String name : currentPropertyNames) {
                          ObjectType oType = properties.get(name);
                          if (oType != null) {
                            if (!interfaceType.getPropertyType(name).isEquivalentTo(
                                oType.getPropertyType(name))) {
                              compiler.report(
                                  t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                                      functionName, name, oType.toString(),
                                      interfaceType.toString()));
                            }
                          }
                          currentProperties.put(name, interfaceType);
                        }
                children: []
                pos: 49849
                length: 494
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
                          checkInterfaceConflictProperties(t, n, functionName, properties,
                              currentProperties, iType);
                        }
                children: []
                pos: 50348
                length: 182
              pos: 49770
              length: 764
          children: []
          pos: 49547
          length: 987
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitFunction
              children: []
              pos: 50792
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 50806
                length: 15
              pos: 50779
              length: 2824
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: FunctionType functionType = (FunctionType) n.getJSType();
                children: []
                pos: 50837
                length: 57
              - type: local_variable_declaration
                fields:
                  text: String functionPrivateName = n.getFirstChild().getString();
                children: []
                pos: 50899
                length: 59
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: functionType.isConstructor()
                        children: []
                        pos: 50967
                        length: 28
                    children: []
                    pos: 50966
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        FunctionType baseConstructor = functionType.
                                  getPrototype().getImplicitPrototype().getConstructor();
                    children: []
                    pos: 51005
                    length: 110
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: not_equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: baseConstructor
                                        children: []
                                        pos: 51126
                                        length: 15
                                      right:
                                        type: null_literal
                                        fields: {}
                                        children: []
                                        pos: 51145
                                        length: 4
                                    children: []
                                    pos: 51126
                                    length: 23
                                  right:
                                    type: not_equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: baseConstructor
                                        children: []
                                        pos: 51163
                                        length: 15
                                      right:
                                        type: method_invocation
                                        fields:
                                          text: getNativeType(OBJECT_FUNCTION_TYPE)
                                        children: []
                                        pos: 51182
                                        length: 35
                                    children: []
                                    pos: 51163
                                    length: 54
                                children: []
                                pos: 51126
                                length: 91
                              right:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: and
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: baseConstructor.isInterface()
                                        children: []
                                        pos: 51232
                                        length: 29
                                      right:
                                        type: method_invocation
                                        fields:
                                          text: functionType.isConstructor()
                                        children: []
                                        pos: 51265
                                        length: 28
                                    children: []
                                    pos: 51232
                                    length: 61
                                children: []
                                pos: 51231
                                length: 63
                            children: []
                            pos: 51126
                            length: 168
                        children: []
                        pos: 51125
                        length: 170
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            compiler.report(
                                        t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                        children: []
                        pos: 51306
                        length: 93
                      pos: 51296
                      length: 111
                    pos: 51122
                    length: 1149
                  pos: 50997
                  length: 1280
                pos: 50963
                length: 2636
              pos: 50831
              length: 2772
          children: []
          pos: 50779
          length: 2824
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitCall
              children: []
              pos: 53843
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 53853
                length: 15
              pos: 53830
              length: 2099
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node child = n.getFirstChild();
                children: []
                pos: 53884
                length: 31
              - type: local_variable_declaration
                fields:
                  text: JSType childType = getJSType(child).restrictByNotNullOrUndefined();
                children: []
                pos: 53920
                length: 67
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!childType.canBeCalled()"
                        children: []
                        pos: 53997
                        length: 24
                    children: []
                    pos: 53996
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: report(t, n, NOT_CALLABLE, childType.toString());
                    children: []
                    pos: 54031
                    length: 49
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, n);
                    children: []
                    pos: 54087
                    length: 18
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 54112
                    length: 7
                  pos: 54023
                  length: 102
                pos: 53993
                length: 132
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: instanceof_expression
                        fields:
                          text: childType instanceof FunctionType
                        children: []
                        pos: 54260
                        length: 33
                    children: []
                    pos: 54259
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: FunctionType functionType = (FunctionType) childType;
                    children: []
                    pos: 54303
                    length: 53
                  - type: local_variable_declaration
                    fields:
                      text: boolean isExtern = false;
                    children: []
                    pos: 54364
                    length: 25
                  - type: local_variable_declaration
                    fields:
                      text: JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
                    children: []
                    pos: 54396
                    length: 58
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: functionJSDocInfo
                                children: []
                                pos: 54464
                                length: 17
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 54485
                                length: 4
                            children: []
                            pos: 54464
                            length: 25
                        children: []
                        pos: 54463
                        length: 27
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: String sourceName = functionJSDocInfo.getSourceName();
                        children: []
                        pos: 54501
                        length: 54
                      - type: local_variable_declaration
                        fields:
                          text: CompilerInput functionSource = compiler.getInput(sourceName);
                        children: []
                        pos: 54564
                        length: 61
                      - type: expression_statement
                        fields:
                          text: isExtern = functionSource.isExtern();
                        children: []
                        pos: 54634
                        length: 37
                      pos: 54491
                      length: 188
                    pos: 54461
                    length: 218
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: functionType.isConstructor()
                                    children: []
                                    pos: 54836
                                    length: 28
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!functionType.isNativeObjectType()"
                                    children: []
                                    pos: 54878
                                    length: 34
                                children: []
                                pos: 54836
                                length: 76
                              right:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: or
                                    fields:
                                      left:
                                        type: or
                                        fields:
                                          left:
                                            type: method_invocation
                                            fields:
                                              text: functionType.getReturnType().isUnknownType()
                                            children: []
                                            pos: 54927
                                            length: 44
                                          right:
                                            type: method_invocation
                                            fields:
                                              text: functionType.getReturnType().isVoidType()
                                            children: []
                                            pos: 54986
                                            length: 41
                                        children: []
                                        pos: 54927
                                        length: 100
                                      right:
                                        type: unary_expression
                                        fields:
                                          text: "!isExtern"
                                        children: []
                                        pos: 55042
                                        length: 9
                                    children: []
                                    pos: 54927
                                    length: 124
                                children: []
                                pos: 54926
                                length: 126
                            children: []
                            pos: 54836
                            length: 216
                        children: []
                        pos: 54835
                        length: 218
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
                        children: []
                        pos: 55064
                        length: 61
                      pos: 55054
                      length: 79
                    pos: 54832
                    length: 301
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: and
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: functionType.isOrdinaryFunction()
                                        children: []
                                        pos: 55239
                                        length: 33
                                      right:
                                        type: unary_expression
                                        fields:
                                          text: "!functionType.getTypeOfThis().isUnknownType()"
                                        children: []
                                        pos: 55286
                                        length: 45
                                    children: []
                                    pos: 55239
                                    length: 92
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!functionType.getTypeOfThis().isNativeObjectType()"
                                    children: []
                                    pos: 55345
                                    length: 50
                                children: []
                                pos: 55239
                                length: 156
                              right:
                                type: unary_expression
                                fields:
                                  text: |-
                                    !(child.getType() == Token.GETELEM ||
                                                child.getType() == Token.GETPROP)
                                children: []
                                pos: 55409
                                length: 83
                            children: []
                            pos: 55239
                            length: 253
                        children: []
                        pos: 55238
                        length: 255
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: report(t, n, EXPECTED_THIS_TYPE, functionType.toString());
                        children: []
                        pos: 55504
                        length: 58
                      pos: 55494
                      length: 76
                    pos: 55235
                    length: 335
                  - type: expression_statement
                    fields:
                      text: visitParameterList(t, n, functionType);
                    children: []
                    pos: 55578
                    length: 39
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, n, functionType.getReturnType());
                    children: []
                    pos: 55624
                    length: 48
                  pos: 54295
                  length: 1383
                pos: 54256
                length: 1460
              pos: 53878
              length: 2051
          children: []
          pos: 53830
          length: 2099
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitParameterList
              children: []
              pos: 56010
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 56029
                length: 15
              pos: 55997
              length: 1386
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Iterator<Node> arguments = call.children().iterator();
                children: []
                pos: 56096
                length: 54
              - type: expression_statement
                fields:
                  text: arguments.next();
                children: []
                pos: 56155
                length: 17
              - type: local_variable_declaration
                fields:
                  text: Iterator<Node> parameters = functionType.getParameters().iterator();
                children: []
                pos: 56204
                length: 68
              - type: local_variable_declaration
                fields:
                  text: int ordinal = 0;
                children: []
                pos: 56277
                length: 16
              - type: local_variable_declaration
                fields:
                  text: Node parameter = null;
                children: []
                pos: 56298
                length: 22
              - type: local_variable_declaration
                fields:
                  text: Node argument = null;
                children: []
                pos: 56325
                length: 21
              - type: while_statement
                fields:
                  text: |-
                    while (arguments.hasNext() &&
                               (parameters.hasNext() ||
                                parameter != null && parameter.isVarArgs())) {
                          // If there are no parameters left in the list, then the while loop
                          // above implies that this must be a var_args function.
                          if (parameters.hasNext()) {
                            parameter = parameters.next();
                          }
                          argument = arguments.next();
                          ordinal++;

                          validator.expectArgumentMatchesParameter(t, argument,
                              getJSType(argument), getJSType(parameter), call, ordinal);
                        }
                children: []
                pos: 56351
                length: 529
              - type: local_variable_declaration
                fields:
                  text: int numArgs = call.getChildCount() - 1;
                children: []
                pos: 56886
                length: 39
              - type: local_variable_declaration
                fields:
                  text: int minArgs = functionType.getMinArguments();
                children: []
                pos: 56930
                length: 45
              - type: local_variable_declaration
                fields:
                  text: int maxArgs = functionType.getMaxArguments();
                children: []
                pos: 56980
                length: 45
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: greater_than
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: minArgs
                                children: []
                                pos: 57034
                                length: 7
                              right:
                                type: identifier
                                fields:
                                  text: numArgs
                                children: []
                                pos: 57044
                                length: 7
                            children: []
                            pos: 57034
                            length: 17
                          right:
                            type: less_than
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: maxArgs
                                children: []
                                pos: 57055
                                length: 7
                              right:
                                type: identifier
                                fields:
                                  text: numArgs
                                children: []
                                pos: 57065
                                length: 7
                            children: []
                            pos: 57055
                            length: 17
                        children: []
                        pos: 57034
                        length: 38
                    children: []
                    pos: 57033
                    length: 40
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        report(t, call, WRONG_ARGUMENT_COUNT,
                                      validator.getReadableJSTypeName(call.getFirstChild(), false),
                                      String.valueOf(numArgs), String.valueOf(minArgs),
                                      maxArgs != Integer.MAX_VALUE ?
                                      " and no more than " + maxArgs + " argument(s)" : "");
                    children: []
                    pos: 57082
                    length: 291
                  pos: 57074
                  length: 305
                pos: 57030
                length: 349
              pos: 56090
              length: 1293
          children: []
          pos: 55997
          length: 1386
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitReturn
              children: []
              pos: 57625
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 57637
                length: 15
              pos: 57612
              length: 1070
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node function = t.getEnclosingFunction();
                children: []
                pos: 57668
                length: 41
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: function
                            children: []
                            pos: 57813
                            length: 8
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 57825
                            length: 4
                        children: []
                        pos: 57813
                        length: 16
                    children: []
                    pos: 57812
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 57839
                    length: 7
                  pos: 57831
                  length: 21
                pos: 57809
                length: 43
              - type: local_variable_declaration
                fields:
                  text: JSType jsType = getJSType(function);
                children: []
                pos: 57857
                length: 36
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: instanceof_expression
                        fields:
                          text: jsType instanceof FunctionType
                        children: []
                        pos: 57903
                        length: 30
                    children: []
                    pos: 57902
                    length: 32
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: FunctionType functionType = (FunctionType) jsType;
                    children: []
                    pos: 57943
                    length: 50
                  - type: local_variable_declaration
                    fields:
                      text: JSType returnType = functionType.getReturnType();
                    children: []
                    pos: 58001
                    length: 49
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: returnType
                                children: []
                                pos: 58162
                                length: 10
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 58176
                                length: 4
                            children: []
                            pos: 58162
                            length: 18
                        children: []
                        pos: 58161
                        length: 20
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: returnType = getNativeType(VOID_TYPE);
                        children: []
                        pos: 58192
                        length: 38
                      pos: 58182
                      length: 56
                    pos: 58158
                    length: 80
                  - type: local_variable_declaration
                    fields:
                      text: Node valueNode = n.getFirstChild();
                    children: []
                    pos: 58290
                    length: 35
                  - type: local_variable_declaration
                    fields:
                      text: JSType actualReturnType;
                    children: []
                    pos: 58332
                    length: 24
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: valueNode
                                children: []
                                pos: 58367
                                length: 9
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 58380
                                length: 4
                            children: []
                            pos: 58367
                            length: 17
                        children: []
                        pos: 58366
                        length: 19
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: actualReturnType = getNativeType(VOID_TYPE);
                        children: []
                        pos: 58396
                        length: 44
                      - type: expression_statement
                        fields:
                          text: valueNode = n;
                        children: []
                        pos: 58449
                        length: 14
                      pos: 58386
                      length: 85
                    pos: 58363
                    length: 172
                  - type: expression_statement
                    fields:
                      text: |-
                        validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,
                                  "inconsistent return type");
                    children: []
                    pos: 58562
                    length: 110
                  pos: 57935
                  length: 743
                pos: 57899
                length: 779
              pos: 57662
              length: 1020
          children: []
          pos: 57612
          length: 1070
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitBinaryOperator
              children: []
              pos: 59090
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int op
                children: []
                pos: 59110
                length: 6
              pos: 59077
              length: 1688
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node left = n.getFirstChild();
                children: []
                pos: 59149
                length: 30
              - type: local_variable_declaration
                fields:
                  text: JSType leftType = getJSType(left);
                children: []
                pos: 59184
                length: 34
              - type: local_variable_declaration
                fields:
                  text: Node right = n.getLastChild();
                children: []
                pos: 59223
                length: 30
              - type: local_variable_declaration
                fields:
                  text: JSType rightType = getJSType(right);
                children: []
                pos: 59258
                length: 36
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: op
                        children: []
                        pos: 59307
                        length: 2
                    children: []
                    pos: 59306
                    length: 4
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.ASSIGN_LSH:
                              case Token.ASSIGN_RSH:
                              case Token.LSH:
                              case Token.RSH:
                              case Token.ASSIGN_URSH:
                              case Token.URSH:
                                if (!leftType.matchesInt32Context()) {
                                  report(t, left, BIT_OPERATION,
                                           NodeUtil.opToStr(n.getType()), leftType.toString());
                                }
                                if (!rightType.matchesUint32Context()) {
                                  report(t, right, BIT_OPERATION,
                                           NodeUtil.opToStr(n.getType()), rightType.toString());
                                }
                                break;

                              case Token.ASSIGN_DIV:
                              case Token.ASSIGN_MOD:
                              case Token.ASSIGN_MUL:
                              case Token.ASSIGN_SUB:
                              case Token.DIV:
                              case Token.MOD:
                              case Token.MUL:
                              case Token.SUB:
                                validator.expectNumber(t, left, leftType, "left operand");
                                validator.expectNumber(t, right, rightType, "right operand");
                                break;

                              case Token.ASSIGN_BITAND:
                              case Token.ASSIGN_BITXOR:
                              case Token.ASSIGN_BITOR:
                              case Token.BITAND:
                              case Token.BITXOR:
                              case Token.BITOR:
                                validator.expectBitwiseable(t, left, leftType,
                                    "bad left operand to bitwise operator");
                                validator.expectBitwiseable(t, right, rightType,
                                    "bad right operand to bitwise operator");
                                break;

                              case Token.ASSIGN_ADD:
                              case Token.ADD:
                                break;

                              default:
                                report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));
                            }
                    children: []
                    pos: 59311
                    length: 1427
                children: []
                pos: 59299
                length: 1439
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n);
                children: []
                pos: 60743
                length: 18
              pos: 59143
              length: 1622
          children: []
          pos: 59077
          length: 1688
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkEnumInitializer
              children: []
              pos: 61445
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 61473
                length: 15
              pos: 61432
              length: 1288
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: value.getType()
                            children: []
                            pos: 61534
                            length: 15
                          right:
                            type: field_access
                            fields:
                              text: Token.OBJECTLIT
                            children: []
                            pos: 61553
                            length: 15
                        children: []
                        pos: 61534
                        length: 34
                    children: []
                    pos: 61533
                    length: 36
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (Node key = value.getFirstChild();
                                   key != null; key = key.getNext()) {
                                Node propValue = key.getFirstChild();

                                // the value's type must be assignable to the enum's primitive type
                                validator.expectCanAssignTo(
                                    t, propValue, getJSType(propValue), primitiveType,
                                    "element type must match enum's type");
                              }
                    children: []
                    pos: 61578
                    length: 368
                  pos: 61570
                  length: 382
                pos: 61530
                length: 1186
              pos: 61524
              length: 1196
          children: []
          pos: 61432
          length: 1288
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isReference
              children: []
              pos: 63012
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 63024
                length: 6
              pos: 62989
              length: 216
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 63046
                        length: 11
                    children: []
                    pos: 63045
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.GETELEM:
                              case Token.GETPROP:
                              case Token.NAME:
                                return true;

                              default:
                                return false;
                            }
                    children: []
                    pos: 63059
                    length: 141
                children: []
                pos: 63038
                length: 162
              pos: 63032
              length: 173
          children: []
          pos: 62989
          length: 216
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getJSType
              children: []
              pos: 63330
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 63340
                length: 6
              pos: 63315
              length: 461
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType jsType = n.getJSType();
                children: []
                pos: 63354
                length: 30
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: jsType
                            children: []
                            pos: 63393
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 63403
                            length: 4
                        children: []
                        pos: 63393
                        length: 14
                    children: []
                    pos: 63392
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return getNativeType(UNKNOWN_TYPE);
                    children: []
                    pos: 63697
                    length: 35
                  pos: 63409
                  length: 329
                pos: 63389
                length: 383
              pos: 63348
              length: 428
          children: []
          pos: 63315
          length: 461
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getFunctionType
              children: []
              pos: 63903
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 63919
                length: 6
              pos: 63882
              length: 335
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType type = getJSType(n).restrictByNotNullOrUndefined();
                children: []
                pos: 63933
                length: 58
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: type.isUnknownType()
                        children: []
                        pos: 64000
                        length: 20
                    children: []
                    pos: 63999
                    length: 22
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);
                    children: []
                    pos: 64030
                    length: 64
                  pos: 64022
                  length: 78
                pos: 63996
                length: 217
              pos: 63927
              length: 290
          children: []
          pos: 63882
          length: 335
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: ensureTyped
              children: []
              pos: 64669
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 64681
                length: 15
              pos: 64656
              length: 107
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));
                children: []
                pos: 64712
                length: 47
              pos: 64706
              length: 57
          children: []
          pos: 64656
          length: 107
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: ensureTyped
              children: []
              pos: 64780
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 64792
                length: 15
              pos: 64767
              length: 118
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n, getNativeType(type));
                children: []
                pos: 64842
                length: 39
              pos: 64836
              length: 49
          children: []
          pos: 64767
          length: 118
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: ensureTyped
              children: []
              pos: 65714
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 65726
                length: 15
              pos: 65701
              length: 854
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    Preconditions.checkState(n.getType() != Token.FUNCTION ||
                                type instanceof FunctionType ||
                                type.isUnknownType());
                children: []
                pos: 65828
                length: 136
              - type: local_variable_declaration
                fields:
                  text: JSDocInfo info = n.getJSDocInfo();
                children: []
                pos: 65969
                length: 34
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: info
                            children: []
                            pos: 66012
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 66020
                            length: 4
                        children: []
                        pos: 66012
                        length: 12
                    children: []
                    pos: 66011
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: info.hasType()
                            children: []
                            pos: 66038
                            length: 14
                        children: []
                        pos: 66037
                        length: 16
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: JSType infoType = info.getType().evaluate(t.getScope(),
                            typeRegistry);
                        children: []
                        pos: 66064
                        length: 70
                      - type: expression_statement
                        fields:
                          text: validator.expectCanCast(t, n, infoType, type);
                        children: []
                        pos: 66143
                        length: 46
                      - type: expression_statement
                        fields:
                          text: type = infoType;
                        children: []
                        pos: 66198
                        length: 16
                      pos: 66054
                      length: 168
                    pos: 66034
                    length: 188
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: info.isImplicitCast()
                                children: []
                                pos: 66234
                                length: 21
                              right:
                                type: unary_expression
                                fields:
                                  text: "!inExterns"
                                children: []
                                pos: 66259
                                length: 10
                            children: []
                            pos: 66234
                            length: 35
                        children: []
                        pos: 66233
                        length: 37
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: |-
                            String propName = n.getType() == Token.GETPROP ?
                                        n.getLastChild().getString() : "(missing)";
                        children: []
                        pos: 66281
                        length: 104
                      - type: expression_statement
                        fields:
                          text: |-
                            compiler.report(
                                        t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));
                        children: []
                        pos: 66394
                        length: 78
                      pos: 66271
                      length: 209
                    pos: 66230
                    length: 250
                  pos: 66026
                  length: 460
                pos: 66008
                length: 478
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: n.getJSType()
                            children: []
                            pos: 66496
                            length: 13
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 66513
                            length: 4
                        children: []
                        pos: 66496
                        length: 21
                    children: []
                    pos: 66495
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: n.setJSType(type);
                    children: []
                    pos: 66527
                    length: 18
                  pos: 66519
                  length: 32
                pos: 66492
                length: 59
              pos: 65764
              length: 791
          children: []
          pos: 65701
          length: 854
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getTypedPercent
              children: []
              pos: 66686
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 66679
              length: 187
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int total = nullCount + unknownCount + typedCount;
                children: []
                pos: 66710
                length: 50
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: total
                            children: []
                            pos: 66769
                            length: 5
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 66778
                            length: 1
                        children: []
                        pos: 66769
                        length: 10
                    children: []
                    pos: 66768
                    length: 12
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return 0.0;
                    children: []
                    pos: 66789
                    length: 11
                  pos: 66781
                  length: 25
                pos: 66765
                length: 97
              pos: 66704
              length: 162
          children: []
          pos: 66679
          length: 187
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getNativeType
              children: []
              pos: 66885
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSTypeNative typeId
                children: []
                pos: 66899
                length: 19
              pos: 66870
              length: 102
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return typeRegistry.getNativeType(typeId);
                children: []
                pos: 66926
                length: 42
              pos: 66920
              length: 52
          children: []
          pos: 66870
          length: 102
        pos: 2320
        length: 64654
    children: []
    pos: 2320
    length: 64654
  pos: 0
  length: 66975
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: TypeCheck
        children: []
        pos: 2333
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(
                    "JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN",
                    "Internal Error: Don't know how to handle {0}");
          children: []
          pos: 2427
          length: 168
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType BAD_DELETE =
                    // TODO(user): make this an error
                    DiagnosticType.warning(
                        "JSC_BAD_DELETE_OPERAND",
                        "delete operator needs a reference operand");
          children: []
          pos: 2627
          length: 202
        - type: field_declaration
          fields:
            text: |-
              protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =
                    "overriding prototype with non-object";
          children: []
          pos: 2864
          length: 114
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType DETERMINISTIC_TEST =
                    DiagnosticType.warning(
                        "JSC_DETERMINISTIC_TEST",
                        "condition always evaluates to {2}\n" +
                        "left : {0}\n" +
                        "right: {1}");
          children: []
          pos: 3112
          length: 216
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType DETERMINISTIC_TEST_NO_RESULT =
                    DiagnosticType.warning(
                        "JSC_DETERMINISTIC_TEST_NO_RESULT",
                        "condition always evaluates to the same value\n" +
                        "left : {0}\n" +
                        "right: {1}");
          children: []
          pos: 3332
          length: 247
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INEXISTENT_ENUM_ELEMENT =
                    DiagnosticType.warning(
                        "JSC_INEXISTENT_ENUM_ELEMENT",
                        "element {0} does not exist on this enum");
          children: []
          pos: 3583
          length: 178
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INEXISTENT_PROPERTY =
                    DiagnosticType.disabled(
                        "JSC_INEXISTENT_PROPERTY",
                        "Property {0} never defined on {1}");
          children: []
          pos: 3858
          length: 165
        - type: field_declaration
          fields:
            text: |-
              protected static final DiagnosticType NOT_A_CONSTRUCTOR =
                    DiagnosticType.warning(
                        "JSC_NOT_A_CONSTRUCTOR",
                        "cannot instantiate non-constructor");
          children: []
          pos: 4027
          length: 171
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType BIT_OPERATION =
                    DiagnosticType.warning(
                        "JSC_BAD_TYPE_FOR_BIT_OPERATION",
                        "operator {0} cannot be applied to {1}");
          children: []
          pos: 4202
          length: 169
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType NOT_CALLABLE =
                    DiagnosticType.warning(
                        "JSC_NOT_FUNCTION_TYPE",
                        "{0} expressions are not callable");
          children: []
          pos: 4375
          length: 154
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =
                    DiagnosticType.warning(
                        "JSC_CONSTRUCTOR_NOT_CALLABLE",
                        "Constructor {0} should be called with the \"new\" keyword");
          children: []
          pos: 4533
          length: 198
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType FUNCTION_MASKS_VARIABLE =
                    DiagnosticType.warning(
                        "JSC_FUNCTION_MASKS_VARIABLE",
                        "function {0} masks variable (IE bug)");
          children: []
          pos: 4735
          length: 175
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(
                    "JSC_MULTIPLE_VAR_DEF",
                    "declaration of multiple variables with shared type information");
          children: []
          pos: 4914
          length: 173
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType ENUM_DUP = DiagnosticType.error("JSC_ENUM_DUP",
                    "enum element {0} already defined");
          children: []
          pos: 5091
          length: 118
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType ENUM_NOT_CONSTANT =
                    DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT",
                        "enum key {0} must be a syntactic constant");
          children: []
          pos: 5213
          length: 157
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =
                    DiagnosticType.warning(
                        "JSC_INVALID_INTERFACE_MEMBER_DECLARATION",
                        "interface members can only be empty property declarations,"
                        + " empty functions{0}");
          children: []
          pos: 5374
          length: 257
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =
                    DiagnosticType.warning(
                        "JSC_INTERFACE_FUNCTION_NOT_EMPTY",
                        "interface member functions must have an empty body");
          children: []
          pos: 5635
          length: 199
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType CONFLICTING_EXTENDED_TYPE =
                    DiagnosticType.warning(
                        "JSC_CONFLICTING_EXTENDED_TYPE",
                        "{0} cannot extend this type; " +
                        "a constructor can only extend objects " +
                        "and an interface can only extend interfaces");
          children: []
          pos: 5838
          length: 283
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =
                  DiagnosticType.warning(
                      "JSC_CONFLICTING_IMPLEMENTED_TYPE",
                      "{0} cannot implement this type; " +
                      "an interface can only extend, but not implement interfaces");
          children: []
          pos: 6125
          length: 246
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType BAD_IMPLEMENTED_TYPE =
                    DiagnosticType.warning(
                        "JSC_IMPLEMENTS_NON_INTERFACE",
                        "can only implement interfaces");
          children: []
          pos: 6375
          length: 166
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =
                    DiagnosticType.warning(
                        "JSC_HIDDEN_SUPERCLASS_PROPERTY",
                        "property {0} already defined on superclass {1}; " +
                        "use @override to override it");
          children: []
          pos: 6545
          length: 236
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =
                    DiagnosticType.warning(
                        "JSC_HIDDEN_INTERFACE_PROPERTY",
                        "property {0} already defined on interface {1}; " +
                        "use @override to override it");
          children: []
          pos: 6785
          length: 233
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =
                    DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
                        "mismatch of the {0} property type and the type " +
                        "of the property it overrides from superclass {1}\n" +
                        "original: {2}\n" +
                        "override: {3}");
          children: []
          pos: 7022
          length: 322
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNKNOWN_OVERRIDE =
                    DiagnosticType.warning(
                        "JSC_UNKNOWN_OVERRIDE",
                        "property {0} not defined on any superclass of {1}");
          children: []
          pos: 7348
          length: 174
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INTERFACE_METHOD_OVERRIDE =
                    DiagnosticType.warning(
                        "JSC_INTERFACE_METHOD_OVERRIDE",
                        "property {0} is already defined by the {1} extended interface");
          children: []
          pos: 7526
          length: 204
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNKNOWN_EXPR_TYPE =
                    DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE",
                        "could not determine the type of this expression");
          children: []
          pos: 7734
          length: 163
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType UNRESOLVED_TYPE =
                    DiagnosticType.warning("JSC_UNRESOLVED_TYPE",
                        "could not resolve the name {0} to a type");
          children: []
          pos: 7901
          length: 152
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType WRONG_ARGUMENT_COUNT =
                    DiagnosticType.warning(
                        "JSC_WRONG_ARGUMENT_COUNT",
                        "Function {0}: called with {1} argument(s). " +
                        "Function requires at least {2} argument(s){3}.");
          children: []
          pos: 8057
          length: 237
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType ILLEGAL_IMPLICIT_CAST =
                    DiagnosticType.warning(
                        "JSC_ILLEGAL_IMPLICIT_CAST",
                        "Illegal annotation on {0}. @implicitCast may only be used in " +
                        "externs.");
          children: []
          pos: 8298
          length: 219
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =
                    DiagnosticType.warning(
                        "JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",
                        "Interface {0} has a property {1} with incompatible types in " +
                        "its super interfaces {2} and {3}");
          children: []
          pos: 8521
          length: 270
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticType EXPECTED_THIS_TYPE =
                    DiagnosticType.warning(
                        "JSC_EXPECTED_THIS_TYPE",
                        "\"{0}\" must be called with a \"this\" type");
          children: []
          pos: 8795
          length: 172
        - type: field_declaration
          fields:
            text: |-
              static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(
                    DETERMINISTIC_TEST,
                    DETERMINISTIC_TEST_NO_RESULT,
                    INEXISTENT_ENUM_ELEMENT,
                    INEXISTENT_PROPERTY,
                    NOT_A_CONSTRUCTOR,
                    BIT_OPERATION,
                    NOT_CALLABLE,
                    CONSTRUCTOR_NOT_CALLABLE,
                    FUNCTION_MASKS_VARIABLE,
                    MULTIPLE_VAR_DEF,
                    ENUM_DUP,
                    ENUM_NOT_CONSTANT,
                    INVALID_INTERFACE_MEMBER_DECLARATION,
                    INTERFACE_FUNCTION_NOT_EMPTY,
                    CONFLICTING_EXTENDED_TYPE,
                    CONFLICTING_IMPLEMENTED_TYPE,
                    BAD_IMPLEMENTED_TYPE,
                    HIDDEN_SUPERCLASS_PROPERTY,
                    HIDDEN_INTERFACE_PROPERTY,
                    HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    UNKNOWN_OVERRIDE,
                    INTERFACE_METHOD_OVERRIDE,
                    UNKNOWN_EXPR_TYPE,
                    UNRESOLVED_TYPE,
                    WRONG_ARGUMENT_COUNT,
                    ILLEGAL_IMPLICIT_CAST,
                    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                    EXPECTED_THIS_TYPE,
                    RhinoErrorReporter.TYPE_PARSE_ERROR,
                    TypedScopeCreator.UNKNOWN_LENDS,
                    TypedScopeCreator.LENDS_ON_NON_OBJECT,
                    TypedScopeCreator.CTOR_INITIALIZER,
                    TypedScopeCreator.IFACE_INITIALIZER,
                    FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);
          children: []
          pos: 8971
          length: 1160
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 10135
          length: 40
        - type: field_declaration
          fields:
            text: private final TypeValidator validator;
          children: []
          pos: 10178
          length: 38
        - type: field_declaration
          fields:
            text: private final ReverseAbstractInterpreter reverseInterpreter;
          children: []
          pos: 10220
          length: 60
        - type: field_declaration
          fields:
            text: private final JSTypeRegistry typeRegistry;
          children: []
          pos: 10284
          length: 42
        - type: field_declaration
          fields:
            text: private Scope topScope;
          children: []
          pos: 10329
          length: 23
        - type: field_declaration
          fields:
            text: private ScopeCreator scopeCreator;
          children: []
          pos: 10356
          length: 34
        - type: field_declaration
          fields:
            text: private final CheckLevel reportMissingOverride;
          children: []
          pos: 10394
          length: 47
        - type: field_declaration
          fields:
            text: private final CheckLevel reportUnknownTypes;
          children: []
          pos: 10444
          length: 44
        - type: field_declaration
          fields:
            text: private boolean reportMissingProperties = true;
          children: []
          pos: 10588
          length: 47
        - type: field_declaration
          fields:
            text: private InferJSDocInfo inferJSDocInfo = null;
          children: []
          pos: 10639
          length: 45
        - type: field_declaration
          fields:
            text: private int typedCount = 0;
          children: []
          pos: 10765
          length: 27
        - type: field_declaration
          fields:
            text: private int nullCount = 0;
          children: []
          pos: 10795
          length: 26
        - type: field_declaration
          fields:
            text: private int unknownCount = 0;
          children: []
          pos: 10824
          length: 29
        - type: field_declaration
          fields:
            text: private boolean inExterns;
          children: []
          pos: 10856
          length: 26
        - type: field_declaration
          fields:
            text: private int noTypeCheckSection = 0;
          children: []
          pos: 10973
          length: 35
        - type: constructor_declaration
          fields:
            text: |-
              public TypeCheck(AbstractCompiler compiler,
                    ReverseAbstractInterpreter reverseInterpreter,
                    JSTypeRegistry typeRegistry,
                    Scope topScope,
                    ScopeCreator scopeCreator,
                    CheckLevel reportMissingOverride,
                    CheckLevel reportUnknownTypes) {
                  this.compiler = compiler;
                  this.validator = compiler.getTypeValidator();
                  this.reverseInterpreter = reverseInterpreter;
                  this.typeRegistry = typeRegistry;
                  this.topScope = topScope;
                  this.scopeCreator = scopeCreator;
                  this.reportMissingOverride = reportMissingOverride;
                  this.reportUnknownTypes = reportUnknownTypes;
                  this.inferJSDocInfo = new InferJSDocInfo(compiler);
                }
          children: []
          pos: 11012
          length: 667
        - type: constructor_declaration
          fields:
            text: |-
              public TypeCheck(AbstractCompiler compiler,
                    ReverseAbstractInterpreter reverseInterpreter,
                    JSTypeRegistry typeRegistry,
                    CheckLevel reportMissingOverride,
                    CheckLevel reportUnknownTypes) {
                  this(compiler, reverseInterpreter, typeRegistry, null, null,
                      reportMissingOverride, reportUnknownTypes);
                }
          children: []
          pos: 11683
          length: 331
        - type: constructor_declaration
          fields:
            text: |-
              TypeCheck(AbstractCompiler compiler,
                    ReverseAbstractInterpreter reverseInterpreter,
                    JSTypeRegistry typeRegistry) {
                  this(compiler, reverseInterpreter, typeRegistry, null, null,
                       CheckLevel.WARNING, CheckLevel.OFF);
                }
          children: []
          pos: 12018
          length: 241
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: reportMissingProperties
              children: []
              pos: 12350
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: boolean report
                children: []
                pos: 12374
                length: 14
              pos: 12340
              length: 110
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: reportMissingProperties = report;
                children: []
                pos: 12396
                length: 33
              - type: return_statement
                fields:
                  text: return this;
                children: []
                pos: 12434
                length: 12
              pos: 12390
              length: 60
          children: []
          pos: 12340
          length: 110
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 12715
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externsRoot
                children: []
                pos: 12723
                length: 16
              pos: 12703
              length: 435
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(scopeCreator);
                children: []
                pos: 12760
                length: 41
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(topScope);
                children: []
                pos: 12806
                length: 37
              - type: local_variable_declaration
                fields:
                  text: Node externsAndJs = jsRoot.getParent();
                children: []
                pos: 12849
                length: 39
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(externsAndJs != null);
                children: []
                pos: 12893
                length: 47
              - type: expression_statement
                fields:
                  text: |-
                    Preconditions.checkState(
                            externsRoot == null || externsAndJs.hasChild(externsRoot));
                children: []
                pos: 12945
                length: 93
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: externsRoot
                            children: []
                            pos: 13048
                            length: 11
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 13063
                            length: 4
                        children: []
                        pos: 13048
                        length: 19
                    children: []
                    pos: 13047
                    length: 21
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: check(externsRoot, true);
                    children: []
                    pos: 13077
                    length: 25
                  pos: 13069
                  length: 39
                pos: 13044
                length: 64
              - type: expression_statement
                fields:
                  text: check(jsRoot, false);
                children: []
                pos: 13113
                length: 21
              pos: 12754
              length: 384
          children: []
          pos: 12703
          length: 435
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: processForTesting
              children: []
              pos: 13213
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externsRoot
                children: []
                pos: 13231
                length: 16
              pos: 13200
              length: 639
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(scopeCreator == null);
                children: []
                pos: 13268
                length: 47
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(topScope == null);
                children: []
                pos: 13320
                length: 43
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(jsRoot.getParent() != null);
                children: []
                pos: 13369
                length: 53
              - type: local_variable_declaration
                fields:
                  text: Node externsAndJsRoot = jsRoot.getParent();
                children: []
                pos: 13427
                length: 43
              - type: expression_statement
                fields:
                  text: scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));
                children: []
                pos: 13476
                length: 73
              - type: expression_statement
                fields:
                  text: topScope = scopeCreator.createScope(externsAndJsRoot, null);
                children: []
                pos: 13554
                length: 60
              - type: local_variable_declaration
                fields:
                  text: |-
                    TypeInferencePass inference = new TypeInferencePass(compiler,
                            reverseInterpreter, topScope, scopeCreator);
                children: []
                pos: 13620
                length: 114
              - type: expression_statement
                fields:
                  text: inference.process(externsRoot, jsRoot);
                children: []
                pos: 13740
                length: 39
              - type: expression_statement
                fields:
                  text: process(externsRoot, jsRoot);
                children: []
                pos: 13784
                length: 29
              - type: return_statement
                fields:
                  text: return topScope;
                children: []
                pos: 13819
                length: 16
              pos: 13262
              length: 577
          children: []
          pos: 13200
          length: 639
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: check
              children: []
              pos: 13856
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 13862
                length: 9
              pos: 13844
              length: 349
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkNotNull(node);
                children: []
                pos: 13896
                length: 33
              - type: local_variable_declaration
                fields:
                  text: NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);
                children: []
                pos: 13935
                length: 66
              - type: expression_statement
                fields:
                  text: inExterns = externs;
                children: []
                pos: 14006
                length: 20
              - type: expression_statement
                fields:
                  text: t.traverseWithScope(node, topScope);
                children: []
                pos: 14031
                length: 36
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: externs
                        children: []
                        pos: 14076
                        length: 7
                    children: []
                    pos: 14075
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: inferJSDocInfo.process(node, null);
                    children: []
                    pos: 14093
                    length: 35
                  pos: 14085
                  length: 49
                pos: 14072
                length: 117
              pos: 13890
              length: 303
          children: []
          pos: 13844
          length: 349
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkNoTypeCheckSection
              children: []
              pos: 14211
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 14235
                length: 6
              pos: 14198
              length: 537
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 14279
                        length: 11
                    children: []
                    pos: 14278
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.SCRIPT:
                              case Token.BLOCK:
                              case Token.VAR:
                              case Token.FUNCTION:
                              case Token.ASSIGN:
                                JSDocInfo info = n.getJSDocInfo();
                                if (info != null && info.isNoTypeCheck()) {
                                  if (enterSection) {
                                    noTypeCheckSection++;
                                  } else {
                                    noTypeCheckSection--;
                                  }
                                }
                                validator.setShouldReport(noTypeCheckSection == 0);
                                break;
                            }
                    children: []
                    pos: 14292
                    length: 439
                children: []
                pos: 14271
                length: 460
              pos: 14265
              length: 470
          children: []
          pos: 14198
          length: 537
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: report
              children: []
              pos: 14752
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 14759
                length: 15
              pos: 14739
              length: 195
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: noTypeCheckSection
                            children: []
                            pos: 14852
                            length: 18
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 14874
                            length: 1
                        children: []
                        pos: 14852
                        length: 23
                    children: []
                    pos: 14851
                    length: 25
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: t.report(n, diagnosticType, arguments);
                    children: []
                    pos: 14885
                    length: 39
                  pos: 14877
                  length: 53
                pos: 14848
                length: 82
              pos: 14842
              length: 92
          children: []
          pos: 14739
          length: 195
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shouldTraverse
              children: []
              pos: 14953
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 14975
                length: 15
              pos: 14938
              length: 1243
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: checkNoTypeCheckSection(n, true);
                children: []
                pos: 15019
                length: 33
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 15065
                        length: 11
                    children: []
                    pos: 15064
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.FUNCTION:
                                // normal type checking
                                final TypeCheck outerThis = this;
                                final Scope outerScope = t.getScope();
                                final FunctionType functionType = (FunctionType) n.getJSType();
                                final String functionPrivateName = n.getFirstChild().getString();
                                if (functionPrivateName != null && functionPrivateName.length() > 0 &&
                                    outerScope.isDeclared(functionPrivateName, false) &&
                                    // Ideally, we would want to check whether the type in the scope
                                    // differs from the type being defined, but then the extern
                                    // redeclarations of built-in types generates spurious warnings.
                                    !(outerScope.getVar(
                                        functionPrivateName).getType() instanceof FunctionType)) {
                                  report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);
                                }

                                // TODO(user): Only traverse the function's body. The function's
                                // name and arguments are traversed by the scope creator, and ideally
                                // should not be traversed by the type checker.
                                break;
                            }
                    children: []
                    pos: 15078
                    length: 1082
                children: []
                pos: 15057
                length: 1103
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 16165
                length: 12
              pos: 15013
              length: 1168
          children: []
          pos: 14938
          length: 1243
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 16642
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 16648
                length: 15
              pos: 16630
              length: 10348
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType childType;
                children: []
                pos: 16692
                length: 17
              - type: local_variable_declaration
                fields:
                  text: JSType leftType, rightType;
                children: []
                pos: 16714
                length: 27
              - type: local_variable_declaration
                fields:
                  text: Node left, right;
                children: []
                pos: 16746
                length: 17
              - type: local_variable_declaration
                fields:
                  text: boolean typeable = true;
                children: []
                pos: 16834
                length: 24
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 16872
                        length: 11
                    children: []
                    pos: 16871
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.NAME:
                                typeable = visitName(t, n, parent);
                                break;

                              case Token.LP:
                                // If this is under a FUNCTION node, it is a parameter list and can be
                                // ignored here.
                                if (parent.getType() != Token.FUNCTION) {
                                  ensureTyped(t, n, getJSType(n.getFirstChild()));
                                } else {
                                  typeable = false;
                                }
                                break;

                              case Token.COMMA:
                                ensureTyped(t, n, getJSType(n.getLastChild()));
                                break;

                              case Token.TRUE:
                              case Token.FALSE:
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.THIS:
                                ensureTyped(t, n, t.getScope().getTypeOfThis());
                                break;

                              case Token.REF_SPECIAL:
                                ensureTyped(t, n);
                                break;

                              case Token.GET_REF:
                                ensureTyped(t, n, getJSType(n.getFirstChild()));
                                break;

                              case Token.NULL:
                                ensureTyped(t, n, NULL_TYPE);
                                break;

                              case Token.NUMBER:
                                ensureTyped(t, n, NUMBER_TYPE);
                                break;

                              case Token.STRING:
                                // Object literal keys are handled with OBJECTLIT
                                if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                                  ensureTyped(t, n, STRING_TYPE);
                                  // Object literal keys are not typeable
                                }
                                break;

                              case Token.GET:
                              case Token.SET:
                                // Object literal keys are handled with OBJECTLIT
                                break;

                              case Token.ARRAYLIT:
                                ensureTyped(t, n, ARRAY_TYPE);
                                break;

                              case Token.REGEXP:
                                ensureTyped(t, n, REGEXP_TYPE);
                                break;

                              case Token.GETPROP:
                                visitGetProp(t, n, parent);
                                typeable = !(parent.getType() == Token.ASSIGN &&
                                             parent.getFirstChild() == n);
                                break;

                              case Token.GETELEM:
                                visitGetElem(t, n);
                                // The type of GETELEM is always unknown, so no point counting that.
                                // If that unknown leaks elsewhere (say by an assignment to another
                                // variable), then it will be counted.
                                typeable = false;
                                break;

                              case Token.VAR:
                                visitVar(t, n);
                                typeable = false;
                                break;

                              case Token.NEW:
                                visitNew(t, n);
                                typeable = true;
                                break;

                              case Token.CALL:
                                visitCall(t, n);
                                typeable = !NodeUtil.isExpressionNode(parent);
                                break;

                              case Token.RETURN:
                                visitReturn(t, n);
                                typeable = false;
                                break;

                              case Token.DEC:
                              case Token.INC:
                                left = n.getFirstChild();
                                validator.expectNumber(
                                    t, left, getJSType(left), "increment/decrement");
                                ensureTyped(t, n, NUMBER_TYPE);
                                break;

                              case Token.NOT:
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.VOID:
                                ensureTyped(t, n, VOID_TYPE);
                                break;

                              case Token.TYPEOF:
                                ensureTyped(t, n, STRING_TYPE);
                                break;

                              case Token.BITNOT:
                                childType = getJSType(n.getFirstChild());
                                if (!childType.matchesInt32Context()) {
                                  report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),
                                      childType.toString());
                                }
                                ensureTyped(t, n, NUMBER_TYPE);
                                break;

                              case Token.POS:
                              case Token.NEG:
                                left = n.getFirstChild();
                                validator.expectNumber(t, left, getJSType(left), "sign operator");
                                ensureTyped(t, n, NUMBER_TYPE);
                                break;

                              case Token.EQ:
                              case Token.NE: {
                                leftType = getJSType(n.getFirstChild());
                                rightType = getJSType(n.getLastChild());

                                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                                TernaryValue result =
                                    leftTypeRestricted.testForEquality(rightTypeRestricted);
                                if (result != TernaryValue.UNKNOWN) {
                                  if (n.getType() == Token.NE) {
                                    result = result.not();
                                  }
                                  report(t, n, DETERMINISTIC_TEST, leftType.toString(),
                                      rightType.toString(), result.toString());
                                }
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;
                              }

                              case Token.SHEQ:
                              case Token.SHNE: {
                                leftType = getJSType(n.getFirstChild());
                                rightType = getJSType(n.getLastChild());

                                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                                if (!leftTypeRestricted.canTestForShallowEqualityWith(
                                        rightTypeRestricted)) {
                                  report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),
                                      rightType.toString());
                                }
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;
                              }

                              case Token.LT:
                              case Token.LE:
                              case Token.GT:
                              case Token.GE:
                                leftType = getJSType(n.getFirstChild());
                                rightType = getJSType(n.getLastChild());
                                if (rightType.isNumber()) {
                                  validator.expectNumber(
                                      t, n, leftType, "left side of numeric comparison");
                                } else if (leftType.isNumber()) {
                                  validator.expectNumber(
                                      t, n, rightType, "right side of numeric comparison");
                                } else if (leftType.matchesNumberContext() &&
                                           rightType.matchesNumberContext()) {
                                  // OK.
                                } else {
                                  // Whether the comparison is numeric will be determined at runtime
                                  // each time the expression is evaluated. Regardless, both operands
                                  // should match a string context.
                                  String message = "left side of comparison";
                                  validator.expectString(t, n, leftType, message);
                                  validator.expectNotNullOrUndefined(
                                      t, n, leftType, message, getNativeType(STRING_TYPE));
                                  message = "right side of comparison";
                                  validator.expectString(t, n, rightType, message);
                                  validator.expectNotNullOrUndefined(
                                      t, n, rightType, message, getNativeType(STRING_TYPE));
                                }
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.IN:
                                left = n.getFirstChild();
                                right = n.getLastChild();
                                leftType = getJSType(left);
                                rightType = getJSType(right);
                                validator.expectObject(t, n, rightType, "'in' requires an object");
                                validator.expectString(t, left, leftType, "left side of 'in'");
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.INSTANCEOF:
                                left = n.getFirstChild();
                                right = n.getLastChild();
                                leftType = getJSType(left);
                                rightType = getJSType(right).restrictByNotNullOrUndefined();

                                validator.expectAnyObject(
                                    t, left, leftType, "deterministic instanceof yields false");
                                validator.expectActualObject(
                                    t, right, rightType, "instanceof requires an object");
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.ASSIGN:
                                visitAssign(t, n);
                                typeable = false;
                                break;

                              case Token.ASSIGN_LSH:
                              case Token.ASSIGN_RSH:
                              case Token.ASSIGN_URSH:
                              case Token.ASSIGN_DIV:
                              case Token.ASSIGN_MOD:
                              case Token.ASSIGN_BITOR:
                              case Token.ASSIGN_BITXOR:
                              case Token.ASSIGN_BITAND:
                              case Token.ASSIGN_SUB:
                              case Token.ASSIGN_ADD:
                              case Token.ASSIGN_MUL:
                              case Token.LSH:
                              case Token.RSH:
                              case Token.URSH:
                              case Token.DIV:
                              case Token.MOD:
                              case Token.BITOR:
                              case Token.BITXOR:
                              case Token.BITAND:
                              case Token.SUB:
                              case Token.ADD:
                              case Token.MUL:
                                visitBinaryOperator(n.getType(), t, n);
                                break;

                              case Token.DELPROP:
                                if (!isReference(n.getFirstChild())) {
                                  report(t, n, BAD_DELETE);
                                }
                                ensureTyped(t, n, BOOLEAN_TYPE);
                                break;

                              case Token.CASE:
                                JSType switchType = getJSType(parent.getFirstChild());
                                JSType caseType = getJSType(n.getFirstChild());
                                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                                typeable = false;
                                break;

                              case Token.WITH: {
                                Node child = n.getFirstChild();
                                childType = getJSType(child);
                                validator.expectObject(
                                    t, child, childType, "with requires an object");
                                typeable = false;
                                break;
                              }

                              case Token.FUNCTION:
                                visitFunction(t, n);
                                break;

                              // These nodes have no interesting type behavior.
                              case Token.LABEL:
                              case Token.LABEL_NAME:
                              case Token.SWITCH:
                              case Token.BREAK:
                              case Token.CATCH:
                              case Token.TRY:
                              case Token.SCRIPT:
                              case Token.EXPR_RESULT:
                              case Token.BLOCK:
                              case Token.EMPTY:
                              case Token.DEFAULT:
                              case Token.CONTINUE:
                              case Token.DEBUGGER:
                              case Token.THROW:
                                typeable = false;
                                break;

                              // These nodes require data flow analysis.
                              case Token.DO:
                              case Token.FOR:
                              case Token.IF:
                              case Token.WHILE:
                                typeable = false;
                                break;

                              // These nodes are typed during the type inference.
                              case Token.AND:
                              case Token.HOOK:
                              case Token.OBJECTLIT:
                              case Token.OR:
                                if (n.getJSType() != null) { // If we didn't run type inference.
                                  ensureTyped(t, n);
                                } else {
                                  // If this is an enum, then give that type to the objectlit as well.
                                  if ((n.getType() == Token.OBJECTLIT)
                                      && (parent.getJSType() instanceof EnumType)) {
                                    ensureTyped(t, n, parent.getJSType());
                                  } else {
                                    ensureTyped(t, n);
                                  }
                                }
                                if (n.getType() == Token.OBJECTLIT) {
                                  for (Node key : n.children()) {
                                    visitObjLitKey(t, key, n);
                                  }
                                }
                                break;

                              default:
                                report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
                                ensureTyped(t, n);
                                break;
                            }
                    children: []
                    pos: 16885
                    length: 9867
                children: []
                pos: 16864
                length: 9888
              - type: expression_statement
                fields:
                  text: typeable = typeable && !inExterns;
                children: []
                pos: 26835
                length: 34
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: typeable
                        children: []
                        pos: 26879
                        length: 8
                    children: []
                    pos: 26878
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: doPercentTypedAccounting(t, n);
                    children: []
                    pos: 26897
                    length: 31
                  pos: 26889
                  length: 45
                pos: 26875
                length: 59
              - type: expression_statement
                fields:
                  text: checkNoTypeCheckSection(n, false);
                children: []
                pos: 26940
                length: 34
              pos: 16686
              length: 10292
          children: []
          pos: 16630
          length: 10348
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: doPercentTypedAccounting
              children: []
              pos: 27101
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 27126
                length: 15
              pos: 27088
              length: 384
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType type = n.getJSType();
                children: []
                pos: 27157
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 27194
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 27202
                            length: 4
                        children: []
                        pos: 27194
                        length: 12
                    children: []
                    pos: 27193
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: nullCount++;
                    children: []
                    pos: 27216
                    length: 12
                  pos: 27208
                  length: 26
                pos: 27190
                length: 278
              pos: 27151
              length: 321
          children: []
          pos: 27088
          length: 384
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitAssign
              children: []
              pos: 27824
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 27836
                length: 15
              pos: 27811
              length: 3765
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSDocInfo info = assign.getJSDocInfo();
                children: []
                pos: 27872
                length: 39
              - type: local_variable_declaration
                fields:
                  text: Node lvalue = assign.getFirstChild();
                children: []
                pos: 27916
                length: 37
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = assign.getLastChild();
                children: []
                pos: 27958
                length: 36
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: lvalue.getType()
                            children: []
                            pos: 28004
                            length: 16
                          right:
                            type: field_access
                            fields:
                              text: Token.GETPROP
                            children: []
                            pos: 28024
                            length: 13
                        children: []
                        pos: 28004
                        length: 33
                    children: []
                    pos: 28003
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Node object = lvalue.getFirstChild();
                    children: []
                    pos: 28047
                    length: 37
                  - type: local_variable_declaration
                    fields:
                      text: JSType objectJsType = getJSType(object);
                    children: []
                    pos: 28091
                    length: 40
                  - type: local_variable_declaration
                    fields:
                      text: String property = lvalue.getLastChild().getString();
                    children: []
                    pos: 28138
                    length: 52
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: object.getType()
                                children: []
                                pos: 28322
                                length: 16
                              right:
                                type: field_access
                                fields:
                                  text: Token.GETPROP
                                children: []
                                pos: 28342
                                length: 13
                            children: []
                            pos: 28322
                            length: 33
                        children: []
                        pos: 28321
                        length: 35
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: JSType jsType = getJSType(object.getFirstChild());
                        children: []
                        pos: 28367
                        length: 50
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: jsType.isInterface()
                                    children: []
                                    pos: 28430
                                    length: 20
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: object.getLastChild().getString().equals("prototype")
                                    children: []
                                    pos: 28466
                                    length: 53
                                children: []
                                pos: 28430
                                length: 89
                            children: []
                            pos: 28429
                            length: 91
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: expression_statement
                            fields:
                              text: visitInterfaceGetprop(t, assign, object, property,
                                lvalue, rvalue);
                            children: []
                            pos: 28533
                            length: 67
                          pos: 28521
                          length: 89
                        pos: 28426
                        length: 184
                      pos: 28357
                      length: 261
                    pos: 28318
                    length: 300
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: info
                                    children: []
                                    pos: 28674
                                    length: 4
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 28682
                                    length: 4
                                children: []
                                pos: 28674
                                length: 12
                              right:
                                type: method_invocation
                                fields:
                                  text: info.hasType()
                                children: []
                                pos: 28690
                                length: 14
                            children: []
                            pos: 28674
                            length: 30
                        children: []
                        pos: 28673
                        length: 32
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            visitAnnotatedAssignGetprop(t, assign,
                                        info.getType().evaluate(t.getScope(), typeRegistry), object,
                                        property, rvalue);
                        children: []
                        pos: 28716
                        length: 142
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 28867
                        length: 7
                      pos: 28706
                      length: 176
                    pos: 28670
                    length: 212
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: info
                                    children: []
                                    pos: 28938
                                    length: 4
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 28946
                                    length: 4
                                children: []
                                pos: 28938
                                length: 12
                              right:
                                type: method_invocation
                                fields:
                                  text: info.hasEnumParameterType()
                                children: []
                                pos: 28954
                                length: 27
                            children: []
                            pos: 28938
                            length: 43
                        children: []
                        pos: 28937
                        length: 45
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            checkEnumInitializer(
                                        t, rvalue, info.getEnumParameterType().evaluate(
                                            t.getScope(), typeRegistry));
                        children: []
                        pos: 28993
                        length: 128
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 29130
                        length: 7
                      pos: 28983
                      length: 162
                    pos: 28934
                    length: 211
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: property.equals("prototype")
                            children: []
                            pos: 29190
                            length: 28
                        children: []
                        pos: 29189
                        length: 30
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: instanceof_expression
                                fields:
                                  text: objectJsType instanceof FunctionType
                                children: []
                                pos: 29234
                                length: 36
                            children: []
                            pos: 29233
                            length: 38
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: local_variable_declaration
                            fields:
                              text: FunctionType functionType = (FunctionType) objectJsType;
                            children: []
                            pos: 29284
                            length: 56
                          - type: if_statement
                            fields:
                              condition:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: method_invocation
                                    fields:
                                      text: functionType.isConstructor()
                                    children: []
                                    pos: 29355
                                    length: 28
                                children: []
                                pos: 29354
                                length: 30
                            children:
                            - type: block
                              fields: {}
                              children:
                              - type: local_variable_declaration
                                fields:
                                  text: JSType rvalueType = rvalue.getJSType();
                                children: []
                                pos: 29399
                                length: 39
                              - type: expression_statement
                                fields:
                                  text: |-
                                    validator.expectObject(t, rvalue, rvalueType,
                                                    OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                                children: []
                                pos: 29451
                                length: 100
                              pos: 29385
                              length: 178
                            pos: 29351
                            length: 212
                          pos: 29272
                          length: 301
                        pos: 29230
                        length: 409
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 29648
                        length: 7
                      pos: 29220
                      length: 443
                    pos: 29186
                    length: 477
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: object.getType()
                                children: []
                                pos: 29717
                                length: 16
                              right:
                                type: field_access
                                fields:
                                  text: Token.GETPROP
                                children: []
                                pos: 29737
                                length: 13
                            children: []
                            pos: 29717
                            length: 33
                        children: []
                        pos: 29716
                        length: 35
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: Node object2 = object.getFirstChild();
                        children: []
                        pos: 29762
                        length: 38
                      - type: local_variable_declaration
                        fields:
                          text: String property2 = NodeUtil.getStringValue(object.getLastChild());
                        children: []
                        pos: 29809
                        length: 66
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: method_invocation
                                fields:
                                  text: '"prototype".equals(property2)'
                                children: []
                                pos: 29889
                                length: 29
                            children: []
                            pos: 29888
                            length: 31
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: local_variable_declaration
                            fields:
                              text: JSType jsType = object2.getJSType();
                            children: []
                            pos: 29932
                            length: 36
                          - type: if_statement
                            fields:
                              condition:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: instanceof_expression
                                    fields:
                                      text: jsType instanceof FunctionType
                                    children: []
                                    pos: 29983
                                    length: 30
                                children: []
                                pos: 29982
                                length: 32
                            children:
                            - type: block
                              fields: {}
                              children:
                              - type: local_variable_declaration
                                fields:
                                  text: FunctionType functionType = (FunctionType)
                                    jsType;
                                children: []
                                pos: 30029
                                length: 50
                              - type: if_statement
                                fields:
                                  condition:
                                    type: parenthesized_expression
                                    fields:
                                      expression:
                                        type: or
                                        fields:
                                          left:
                                            type: method_invocation
                                            fields:
                                              text: functionType.isConstructor()
                                            children: []
                                            pos: 30096
                                            length: 28
                                          right:
                                            type: method_invocation
                                            fields:
                                              text: functionType.isInterface()
                                            children: []
                                            pos: 30128
                                            length: 26
                                        children: []
                                        pos: 30096
                                        length: 58
                                    children: []
                                    pos: 30095
                                    length: 60
                                children:
                                - type: block
                                  fields: {}
                                  children:
                                  - type: expression_statement
                                    fields:
                                      text: |-
                                        checkDeclaredPropertyInheritance(
                                                          t, assign, functionType, property, info, getJSType(rvalue));
                                    children: []
                                    pos: 30172
                                    length: 112
                                  pos: 30156
                                  length: 142
                                pos: 30092
                                length: 206
                              pos: 30015
                              length: 295
                            pos: 29979
                            length: 401
                          - type: return_statement
                            fields:
                              text: return;
                            children: []
                            pos: 30391
                            length: 7
                          pos: 29920
                          length: 488
                        pos: 29885
                        length: 523
                      pos: 29752
                      length: 664
                    pos: 29713
                    length: 703
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        ObjectType type = ObjectType.cast(
                                  objectJsType.restrictByNotNullOrUndefined());
                    children: []
                    pos: 30456
                    length: 90
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: type
                                children: []
                                pos: 30557
                                length: 4
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 30565
                                length: 4
                            children: []
                            pos: 30557
                            length: 12
                        children: []
                        pos: 30556
                        length: 14
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: and
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: type.hasProperty(property)
                                        children: []
                                        pos: 30585
                                        length: 26
                                      right:
                                        type: unary_expression
                                        fields:
                                          text: "!type.isPropertyTypeInferred(property)"
                                        children: []
                                        pos: 30627
                                        length: 38
                                    children: []
                                    pos: 30585
                                    length: 80
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!propertyIsImplicitCast(type, property)"
                                    children: []
                                    pos: 30681
                                    length: 39
                                children: []
                                pos: 30585
                                length: 135
                            children: []
                            pos: 30584
                            length: 137
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: expression_statement
                            fields:
                              text: |-
                                validator.expectCanAssignToPropertyOf(
                                              t, assign, getJSType(rvalue),
                                              type.getPropertyType(property), object, property);
                            children: []
                            pos: 30734
                            length: 147
                          pos: 30722
                          length: 169
                        pos: 30581
                        length: 310
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 30900
                        length: 7
                      pos: 30571
                      length: 344
                    pos: 30553
                    length: 362
                  pos: 28039
                  length: 2882
                pos: 28000
                length: 3226
              - type: local_variable_declaration
                fields:
                  text: JSType leftType = getJSType(lvalue);
                children: []
                pos: 31257
                length: 36
              - type: local_variable_declaration
                fields:
                  text: Node rightChild = assign.getLastChild();
                children: []
                pos: 31298
                length: 40
              - type: local_variable_declaration
                fields:
                  text: JSType rightType = getJSType(rightChild);
                children: []
                pos: 31343
                length: 41
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: |-
                            validator.expectCanAssignTo(
                                        t, assign, rightType, leftType, "assignment")
                        children: []
                        pos: 31393
                        length: 86
                    children: []
                    pos: 31392
                    length: 88
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, assign, rightType);
                    children: []
                    pos: 31489
                    length: 34
                  pos: 31481
                  length: 48
                pos: 31389
                length: 183
              pos: 27866
              length: 3710
          children: []
          pos: 27811
          length: 3765
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitObjLitKey
              children: []
              pos: 31874
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 31889
                length: 15
              pos: 31861
              length: 1693
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node rvalue = key.getFirstChild();
                children: []
                pos: 32162
                length: 34
              - type: local_variable_declaration
                fields:
                  text: |-
                    JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(
                            key, getJSType(rvalue));
                children: []
                pos: 32201
                length: 94
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: rightType
                            children: []
                            pos: 32304
                            length: 9
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 32317
                            length: 4
                        children: []
                        pos: 32304
                        length: 17
                    children: []
                    pos: 32303
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: rightType = getNativeType(UNKNOWN_TYPE);
                    children: []
                    pos: 32331
                    length: 40
                  pos: 32323
                  length: 54
                pos: 32300
                length: 77
              - type: local_variable_declaration
                fields:
                  text: Node owner = objlit;
                children: []
                pos: 32383
                length: 20
              - type: local_variable_declaration
                fields:
                  text: JSType keyType = getJSType(key);
                children: []
                pos: 32463
                length: 32
              - type: local_variable_declaration
                fields:
                  text: |-
                    boolean valid = validator.expectCanAssignToPropertyOf(t, key,
                            rightType, keyType,
                            owner, NodeUtil.getObjectLitKeyName(key));
                children: []
                pos: 32500
                length: 140
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: valid
                        children: []
                        pos: 32649
                        length: 5
                    children: []
                    pos: 32648
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, key, rightType);
                    children: []
                    pos: 32664
                    length: 31
                  pos: 32656
                  length: 45
                pos: 32645
                length: 96
              - type: local_variable_declaration
                fields:
                  text: JSType objlitType = getJSType(objlit);
                children: []
                pos: 33027
                length: 38
              - type: local_variable_declaration
                fields:
                  text: |-
                    ObjectType type = ObjectType.cast(
                            objlitType.restrictByNotNullOrUndefined());
                children: []
                pos: 33070
                length: 86
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 33165
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 33173
                            length: 4
                        children: []
                        pos: 33165
                        length: 12
                    children: []
                    pos: 33164
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: String property = NodeUtil.getObjectLitKeyName(key);
                    children: []
                    pos: 33187
                    length: 52
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: type.hasProperty(property)
                                    children: []
                                    pos: 33250
                                    length: 26
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!type.isPropertyTypeInferred(property)"
                                    children: []
                                    pos: 33290
                                    length: 38
                                children: []
                                pos: 33250
                                length: 78
                              right:
                                type: unary_expression
                                fields:
                                  text: "!propertyIsImplicitCast(type, property)"
                                children: []
                                pos: 33342
                                length: 39
                            children: []
                            pos: 33250
                            length: 131
                        children: []
                        pos: 33249
                        length: 133
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            validator.expectCanAssignToPropertyOf(
                                        t, key, keyType,
                                        type.getPropertyType(property), owner, property);
                        children: []
                        pos: 33393
                        length: 129
                      pos: 33383
                      length: 147
                    pos: 33246
                    length: 284
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 33537
                    length: 7
                  pos: 33179
                  length: 371
                pos: 33161
                length: 389
              pos: 31929
              length: 1625
          children: []
          pos: 31861
          length: 1693
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: propertyIsImplicitCast
              children: []
              pos: 33688
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ObjectType type
                children: []
                pos: 33711
                length: 15
              pos: 33672
              length: 309
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (; type != null; type = type.getImplicitPrototype()) {
                          JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
                          if (docInfo != null && docInfo.isImplicitCast()) {
                            return true;
                          }
                        }
                children: []
                pos: 33747
                length: 212
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 33964
                length: 13
              pos: 33741
              length: 240
          children: []
          pos: 33672
          length: 309
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkDeclaredPropertyInheritance
              children: []
              pos: 34250
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 34290
                length: 15
              pos: 34237
              length: 4272
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: hasUnknownOrEmptySupertype(ctorType)
                        children: []
                        pos: 34503
                        length: 36
                    children: []
                    pos: 34502
                    length: 38
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 34549
                    length: 7
                  pos: 34541
                  length: 21
                pos: 34499
                length: 63
              - type: local_variable_declaration
                fields:
                  text: FunctionType superClass = ctorType.getSuperClassConstructor();
                children: []
                pos: 34568
                length: 62
              - type: local_variable_declaration
                fields:
                  text: |-
                    boolean superClassHasProperty = superClass != null &&
                            superClass.getPrototype().hasProperty(propertyName);
                children: []
                pos: 34635
                length: 114
              - type: local_variable_declaration
                fields:
                  text: boolean superInterfacesHasProperty = false;
                children: []
                pos: 34775
                length: 43
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: ctorType.isInterface()
                        children: []
                        pos: 34827
                        length: 22
                    children: []
                    pos: 34826
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                                superInterfacesHasProperty =
                                  superInterfacesHasProperty || interfaceType.hasProperty(propertyName);
                              }
                    children: []
                    pos: 34859
                    length: 193
                  pos: 34851
                  length: 207
                pos: 34823
                length: 235
              - type: local_variable_declaration
                fields:
                  text: boolean declaredOverride = info != null && info.isOverride();
                children: []
                pos: 35063
                length: 61
              - type: local_variable_declaration
                fields:
                  text: boolean foundInterfaceProperty = false;
                children: []
                pos: 35130
                length: 39
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: ctorType.isConstructor()
                        children: []
                        pos: 35178
                        length: 24
                    children: []
                    pos: 35177
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (JSType implementedInterface :
                                  ctorType.getAllImplementedInterfaces()) {
                                if (implementedInterface.isUnknownType() ||
                                    implementedInterface.isEmptyType()) {
                                  continue;
                                }
                                FunctionType interfaceType =
                                    implementedInterface.toObjectType().getConstructor();
                                Preconditions.checkNotNull(interfaceType);
                                boolean interfaceHasProperty =
                                    interfaceType.getPrototype().hasProperty(propertyName);
                                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                                if (reportMissingOverride.isOn() && !declaredOverride &&
                                    interfaceHasProperty) {
                                  // @override not present, but the property does override an interface
                                  // property
                                  compiler.report(t.makeError(n, reportMissingOverride,
                                      HIDDEN_INTERFACE_PROPERTY, propertyName,
                                      interfaceType.getTopMostDefiningType(propertyName).toString()));
                                }
                              }
                    children: []
                    pos: 35212
                    length: 979
                  pos: 35204
                  length: 993
                pos: 35174
                length: 1023
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: unary_expression
                                fields:
                                  text: "!declaredOverride"
                                children: []
                                pos: 36207
                                length: 17
                              right:
                                type: unary_expression
                                fields:
                                  text: "!superClassHasProperty"
                                children: []
                                pos: 36228
                                length: 22
                            children: []
                            pos: 36207
                            length: 43
                          right:
                            type: unary_expression
                            fields:
                              text: "!superInterfacesHasProperty"
                            children: []
                            pos: 36262
                            length: 27
                        children: []
                        pos: 36207
                        length: 82
                    children: []
                    pos: 36206
                    length: 84
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 36359
                    length: 7
                  pos: 36291
                  length: 81
                pos: 36203
                length: 169
              - type: local_variable_declaration
                fields:
                  text: |-
                    JSType topInstanceType = superClassHasProperty ?
                            superClass.getTopMostDefiningType(propertyName) : null;
                children: []
                pos: 36378
                length: 112
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: reportMissingOverride.isOn()
                                    children: []
                                    pos: 36499
                                    length: 28
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: ctorType.isConstructor()
                                    children: []
                                    pos: 36531
                                    length: 24
                                children: []
                                pos: 36499
                                length: 56
                              right:
                                type: unary_expression
                                fields:
                                  text: "!declaredOverride"
                                children: []
                                pos: 36567
                                length: 17
                            children: []
                            pos: 36499
                            length: 85
                          right:
                            type: identifier
                            fields:
                              text: superClassHasProperty
                            children: []
                            pos: 36588
                            length: 21
                        children: []
                        pos: 36499
                        length: 110
                    children: []
                    pos: 36498
                    length: 112
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        compiler.report(t.makeError(n, reportMissingOverride,
                                  HIDDEN_SUPERCLASS_PROPERTY, propertyName,
                                  topInstanceType.toString()));
                    children: []
                    pos: 36713
                    length: 145
                  pos: 36611
                  length: 253
                pos: 36495
                length: 369
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!declaredOverride"
                        children: []
                        pos: 36873
                        length: 17
                    children: []
                    pos: 36872
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 36939
                    length: 7
                  pos: 36892
                  length: 60
                pos: 36869
                length: 83
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: superClassHasProperty
                        children: []
                        pos: 37024
                        length: 21
                    children: []
                    pos: 37023
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        JSType superClassPropType =
                                  superClass.getPrototype().getPropertyType(propertyName);
                    children: []
                    pos: 37101
                    length: 94
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: unary_expression
                            fields:
                              text: "!propertyType.canAssignTo(superClassPropType)"
                            children: []
                            pos: 37206
                            length: 45
                        children: []
                        pos: 37205
                        length: 47
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            compiler.report(
                                        t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                                            propertyName, topInstanceType.toString(),
                                            superClassPropType.toString(), propertyType.toString()));
                        children: []
                        pos: 37263
                        length: 212
                      pos: 37253
                      length: 230
                    pos: 37202
                    length: 281
                  pos: 37047
                  length: 442
                pos: 37020
                length: 1485
              pos: 34402
              length: 4107
          children: []
          pos: 34237
          length: 4272
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hasUnknownOrEmptySupertype
              children: []
              pos: 38670
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: FunctionType ctor
                children: []
                pos: 38697
                length: 17
              pos: 38647
              length: 815
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
                children: []
                pos: 38722
                length: 72
              - type: expression_statement
                fields:
                  text: Preconditions.checkArgument(!ctor.isUnknownType());
                children: []
                pos: 38799
                length: 51
              - type: while_statement
                fields:
                  text: |-
                    while (true) {
                          ObjectType maybeSuperInstanceType =
                              ctor.getPrototype().getImplicitPrototype();
                          if (maybeSuperInstanceType == null) {
                            return false;
                          }
                          if (maybeSuperInstanceType.isUnknownType() ||
                              maybeSuperInstanceType.isEmptyType()) {
                            return true;
                          }
                          ctor = maybeSuperInstanceType.getConstructor();
                          if (ctor == null) {
                            return false;
                          }
                          Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
                        }
                children: []
                pos: 38951
                length: 507
              pos: 38716
              length: 746
          children: []
          pos: 38647
          length: 815
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitInterfaceGetprop
              children: []
              pos: 39600
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 39622
                length: 15
              pos: 39587
              length: 1206
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType rvalueType = getJSType(rvalue);
                children: []
                pos: 39721
                length: 38
              - type: local_variable_declaration
                fields:
                  text: |-
                    String abstractMethodName =
                            compiler.getCodingConvention().getAbstractMethodName();
                children: []
                pos: 39958
                length: 91
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: unary_expression
                            fields:
                              text: "!rvalueType.isOrdinaryFunction()"
                            children: []
                            pos: 40058
                            length: 32
                          right:
                            type: unary_expression
                            fields:
                              text: |-
                                !(rvalue.isQualifiedName() &&
                                          rvalue.getQualifiedName().equals(abstractMethodName))
                            children: []
                            pos: 40102
                            length: 93
                        children: []
                        pos: 40058
                        length: 137
                    children: []
                    pos: 40057
                    length: 139
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        String abstractMethodMessage = (abstractMethodName != null)
                                 ? ", or " + abstractMethodName
                                 : "";
                    children: []
                    pos: 40280
                    length: 114
                  - type: expression_statement
                    fields:
                      text: |-
                        compiler.report(
                                  t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,
                                      abstractMethodMessage));
                    children: []
                    pos: 40401
                    length: 123
                  pos: 40197
                  length: 333
                pos: 40054
                length: 476
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: assign.getLastChild().getType()
                                children: []
                                pos: 40540
                                length: 31
                              right:
                                type: field_access
                                fields:
                                  text: Token.FUNCTION
                                children: []
                                pos: 40575
                                length: 14
                            children: []
                            pos: 40540
                            length: 49
                          right:
                            type: unary_expression
                            fields:
                              text: "!NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild())"
                            children: []
                            pos: 40601
                            length: 60
                        children: []
                        pos: 40540
                        length: 121
                    children: []
                    pos: 40539
                    length: 123
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        compiler.report(
                                  t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,
                                      abstractMethodName));
                    children: []
                    pos: 40671
                    length: 112
                  pos: 40663
                  length: 126
                pos: 40536
                length: 253
              pos: 39714
              length: 1079
          children: []
          pos: 39587
          length: 1206
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitAnnotatedAssignGetprop
              children: []
              pos: 40962
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 40990
                length: 15
              pos: 40949
              length: 297
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,
                            object, property);
                children: []
                pos: 41142
                length: 100
              pos: 41082
              length: 164
          children: []
          pos: 40949
          length: 297
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitName
              children: []
              pos: 41575
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 41585
                length: 15
              pos: 41567
              length: 1088
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int parentNodeType = parent.getType();
                children: []
                pos: 42081
                length: 38
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: or
                                fields:
                                  left:
                                    type: equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: parentNodeType
                                        children: []
                                        pos: 42128
                                        length: 14
                                      right:
                                        type: field_access
                                        fields:
                                          text: Token.FUNCTION
                                        children: []
                                        pos: 42146
                                        length: 14
                                    children: []
                                    pos: 42128
                                    length: 32
                                  right:
                                    type: equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: parentNodeType
                                        children: []
                                        pos: 42172
                                        length: 14
                                      right:
                                        type: field_access
                                        fields:
                                          text: Token.CATCH
                                        children: []
                                        pos: 42190
                                        length: 11
                                    children: []
                                    pos: 42172
                                    length: 29
                                children: []
                                pos: 42128
                                length: 73
                              right:
                                type: equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: parentNodeType
                                    children: []
                                    pos: 42213
                                    length: 14
                                  right:
                                    type: field_access
                                    fields:
                                      text: Token.LP
                                    children: []
                                    pos: 42231
                                    length: 8
                                children: []
                                pos: 42213
                                length: 26
                            children: []
                            pos: 42128
                            length: 111
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: parentNodeType
                                children: []
                                pos: 42251
                                length: 14
                              right:
                                type: field_access
                                fields:
                                  text: Token.VAR
                                children: []
                                pos: 42269
                                length: 9
                            children: []
                            pos: 42251
                            length: 27
                        children: []
                        pos: 42128
                        length: 150
                    children: []
                    pos: 42127
                    length: 152
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 42288
                    length: 13
                  pos: 42280
                  length: 27
                pos: 42124
                length: 183
              - type: local_variable_declaration
                fields:
                  text: JSType type = n.getJSType();
                children: []
                pos: 42313
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: type
                            children: []
                            pos: 42350
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 42358
                            length: 4
                        children: []
                        pos: 42350
                        length: 12
                    children: []
                    pos: 42349
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: type = getNativeType(UNKNOWN_TYPE);
                    children: []
                    pos: 42372
                    length: 35
                  - type: local_variable_declaration
                    fields:
                      text: Var var = t.getScope().getVar(n.getString());
                    children: []
                    pos: 42414
                    length: 45
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: var
                                children: []
                                pos: 42470
                                length: 3
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 42477
                                length: 4
                            children: []
                            pos: 42470
                            length: 11
                        children: []
                        pos: 42469
                        length: 13
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: JSType varType = var.getType();
                        children: []
                        pos: 42493
                        length: 31
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: not_equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: varType
                                    children: []
                                    pos: 42537
                                    length: 7
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 42548
                                    length: 4
                                children: []
                                pos: 42537
                                length: 15
                            children: []
                            pos: 42536
                            length: 17
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: expression_statement
                            fields:
                              text: type = varType;
                            children: []
                            pos: 42566
                            length: 15
                          pos: 42554
                          length: 37
                        pos: 42533
                        length: 58
                      pos: 42483
                      length: 116
                    pos: 42466
                    length: 133
                  pos: 42364
                  length: 241
                pos: 42346
                length: 259
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n, type);
                children: []
                pos: 42610
                length: 24
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 42639
                length: 12
              pos: 41623
              length: 1032
          children: []
          pos: 41567
          length: 1088
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitGetProp
              children: []
              pos: 42946
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 42959
                length: 15
              pos: 42933
              length: 1058
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.getJSType()
                                children: []
                                pos: 43218
                                length: 13
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 43235
                                length: 4
                            children: []
                            pos: 43218
                            length: 21
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: parent.getType()
                                children: []
                                pos: 43243
                                length: 16
                              right:
                                type: field_access
                                fields:
                                  text: Token.ASSIGN
                                children: []
                                pos: 43263
                                length: 12
                            children: []
                            pos: 43243
                            length: 32
                        children: []
                        pos: 43218
                        length: 57
                    children: []
                    pos: 43217
                    length: 59
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 43285
                    length: 7
                  pos: 43277
                  length: 21
                pos: 43214
                length: 84
              - type: local_variable_declaration
                fields:
                  text: Node property = n.getLastChild();
                children: []
                pos: 43510
                length: 33
              - type: local_variable_declaration
                fields:
                  text: Node objNode = n.getFirstChild();
                children: []
                pos: 43548
                length: 33
              - type: local_variable_declaration
                fields:
                  text: JSType childType = getJSType(objNode);
                children: []
                pos: 43586
                length: 38
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: |-
                            !validator.expectNotNullOrUndefined(t, n, childType,
                                        childType + " has no properties", getNativeType(OBJECT_TYPE))
                        children: []
                        pos: 43725
                        length: 126
                    children: []
                    pos: 43724
                    length: 128
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, n);
                    children: []
                    pos: 43861
                    length: 18
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 43886
                    length: 7
                  pos: 43853
                  length: 46
                pos: 43721
                length: 178
              - type: expression_statement
                fields:
                  text: checkPropertyAccess(childType, property.getString(), t, n);
                children: []
                pos: 43905
                length: 59
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n);
                children: []
                pos: 43969
                length: 18
              pos: 42997
              length: 994
          children: []
          pos: 42933
          length: 1058
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkPropertyAccess
              children: []
              pos: 44075
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType childType
                children: []
                pos: 44095
                length: 16
              pos: 44062
              length: 1024
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ObjectType objectType = childType.dereference();
                children: []
                pos: 44167
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: objectType
                            children: []
                            pos: 44224
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 44238
                            length: 4
                        children: []
                        pos: 44224
                        length: 18
                    children: []
                    pos: 44223
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: JSType propType = getJSType(n);
                    children: []
                    pos: 44252
                    length: 31
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: or
                                    fields:
                                      left:
                                        type: unary_expression
                                        fields:
                                          text: "!objectType.hasProperty(propName)"
                                        children: []
                                        pos: 44295
                                        length: 33
                                      right:
                                        type: method_invocation
                                        fields:
                                          text: objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))
                                        children: []
                                        pos: 44343
                                        length: 59
                                    children: []
                                    pos: 44295
                                    length: 107
                                children: []
                                pos: 44294
                                length: 109
                              right:
                                type: method_invocation
                                fields:
                                  text: propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))
                                children: []
                                pos: 44417
                                length: 57
                            children: []
                            pos: 44294
                            length: 180
                        children: []
                        pos: 44293
                        length: 182
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: if_statement
                        fields:
                          condition:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: instanceof_expression
                                fields:
                                  text: objectType instanceof EnumType
                                children: []
                                pos: 44490
                                length: 30
                            children: []
                            pos: 44489
                            length: 32
                        children:
                        - type: block
                          fields: {}
                          children:
                          - type: expression_statement
                            fields:
                              text: report(t, n, INEXISTENT_ENUM_ELEMENT, propName);
                            children: []
                            pos: 44534
                            length: 48
                          pos: 44522
                          length: 70
                        pos: 44486
                        length: 432
                      pos: 44476
                      length: 450
                    pos: 44290
                    length: 636
                  pos: 44244
                  length: 688
                pos: 44220
                length: 862
              pos: 44161
              length: 925
          children: []
          pos: 44062
          length: 1024
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isPropertyTest
              children: []
              pos: 45313
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node getProp
                children: []
                pos: 45328
                length: 12
              pos: 45297
              length: 763
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node parent = getProp.getParent();
                children: []
                pos: 45348
                length: 34
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: parent.getType()
                        children: []
                        pos: 45395
                        length: 16
                    children: []
                    pos: 45394
                    length: 18
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.CALL:
                                return parent.getFirstChild() != getProp &&
                                    compiler.getCodingConvention().isPropertyTestFunction(parent);

                              case Token.IF:
                              case Token.WHILE:
                              case Token.DO:
                              case Token.FOR:
                                return NodeUtil.getConditionExpression(parent) == getProp;

                              case Token.INSTANCEOF:
                              case Token.TYPEOF:
                                return true;

                              case Token.AND:
                              case Token.HOOK:
                                return parent.getFirstChild() == getProp;

                              case Token.NOT:
                                return parent.getParent().getType() == Token.OR &&
                                    parent.getParent().getFirstChild() == parent;
                            }
                    children: []
                    pos: 45413
                    length: 625
                children: []
                pos: 45387
                length: 651
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 46043
                length: 13
              pos: 45342
              length: 718
          children: []
          pos: 45297
          length: 763
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitGetElem
              children: []
              pos: 46303
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 46316
                length: 15
              pos: 46290
              length: 222
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node left = n.getFirstChild();
                children: []
                pos: 46347
                length: 30
              - type: local_variable_declaration
                fields:
                  text: Node right = n.getLastChild();
                children: []
                pos: 46382
                length: 30
              - type: expression_statement
                fields:
                  text: validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
                children: []
                pos: 46417
                length: 68
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n);
                children: []
                pos: 46490
                length: 18
              pos: 46341
              length: 171
          children: []
          pos: 46290
          length: 222
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitVar
              children: []
              pos: 46751
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 46760
                length: 15
              pos: 46738
              length: 1336
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: 'JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() :
                    null;'
                children: []
                pos: 46953
                length: 62
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Node name : n.children()) {
                          Node value = name.getFirstChild();
                          // A null var would indicate a bug in the scope creation logic.
                          Var var = t.getScope().getVar(name.getString());

                          if (value != null) {
                            JSType valueType = getJSType(value);
                            JSType nameType = var.getType();
                            nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;

                            JSDocInfo info = name.getJSDocInfo();
                            if (info == null) {
                              info = varInfo;
                            }
                            if (info != null && info.hasEnumParameterType()) {
                              // var.getType() can never be null, this would indicate a bug in the
                              // scope creation logic.
                              checkEnumInitializer(
                                  t, value,
                                  info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));
                            } else if (var.isTypeInferred()) {
                              ensureTyped(t, name, valueType);
                            } else {
                              validator.expectCanAssignTo(
                                  t, value, valueType, nameType, "initializing variable");
                            }
                          }
                        }
                children: []
                pos: 47020
                length: 1050
              pos: 46785
              length: 1289
          children: []
          pos: 46738
          length: 1336
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitNew
              children: []
              pos: 48127
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 48136
                length: 15
              pos: 48114
              length: 863
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node constructor = n.getFirstChild();
                children: []
                pos: 48167
                length: 37
              - type: local_variable_declaration
                fields:
                  text: FunctionType type = getFunctionType(constructor);
                children: []
                pos: 48209
                length: 49
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: type
                                children: []
                                pos: 48267
                                length: 4
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 48275
                                length: 4
                            children: []
                            pos: 48267
                            length: 12
                          right:
                            type: method_invocation
                            fields:
                              text: type.isConstructor()
                            children: []
                            pos: 48283
                            length: 20
                        children: []
                        pos: 48267
                        length: 36
                    children: []
                    pos: 48266
                    length: 38
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: visitParameterList(t, n, type);
                    children: []
                    pos: 48313
                    length: 31
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, n, type.getInstanceType());
                    children: []
                    pos: 48351
                    length: 42
                  pos: 48305
                  length: 94
                pos: 48263
                length: 710
              pos: 48161
              length: 816
          children: []
          pos: 48114
          length: 863
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkInterfaceConflictProperties
              children: []
              pos: 49515
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 49548
                length: 15
              pos: 49502
              length: 987
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Set<String> currentPropertyNames = interfaceType.getPropertyNames();
                children: []
                pos: 49731
                length: 68
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (String name : currentPropertyNames) {
                          ObjectType oType = properties.get(name);
                          if (oType != null) {
                            if (!interfaceType.getPropertyType(name).isEquivalentTo(
                                oType.getPropertyType(name))) {
                              compiler.report(
                                  t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                                      functionName, name, oType.toString(),
                                      interfaceType.toString()));
                            }
                          }
                          currentProperties.put(name, interfaceType);
                        }
                children: []
                pos: 49804
                length: 494
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
                          checkInterfaceConflictProperties(t, n, functionName, properties,
                              currentProperties, iType);
                        }
                children: []
                pos: 50303
                length: 182
              pos: 49725
              length: 764
          children: []
          pos: 49502
          length: 987
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitFunction
              children: []
              pos: 50747
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 50761
                length: 15
              pos: 50734
              length: 2824
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: FunctionType functionType = (FunctionType) n.getJSType();
                children: []
                pos: 50792
                length: 57
              - type: local_variable_declaration
                fields:
                  text: String functionPrivateName = n.getFirstChild().getString();
                children: []
                pos: 50854
                length: 59
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: functionType.isConstructor()
                        children: []
                        pos: 50922
                        length: 28
                    children: []
                    pos: 50921
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: |-
                        FunctionType baseConstructor = functionType.
                                  getPrototype().getImplicitPrototype().getConstructor();
                    children: []
                    pos: 50960
                    length: 110
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: not_equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: baseConstructor
                                        children: []
                                        pos: 51081
                                        length: 15
                                      right:
                                        type: null_literal
                                        fields: {}
                                        children: []
                                        pos: 51100
                                        length: 4
                                    children: []
                                    pos: 51081
                                    length: 23
                                  right:
                                    type: not_equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: baseConstructor
                                        children: []
                                        pos: 51118
                                        length: 15
                                      right:
                                        type: method_invocation
                                        fields:
                                          text: getNativeType(OBJECT_FUNCTION_TYPE)
                                        children: []
                                        pos: 51137
                                        length: 35
                                    children: []
                                    pos: 51118
                                    length: 54
                                children: []
                                pos: 51081
                                length: 91
                              right:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: and
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: baseConstructor.isInterface()
                                        children: []
                                        pos: 51187
                                        length: 29
                                      right:
                                        type: method_invocation
                                        fields:
                                          text: functionType.isConstructor()
                                        children: []
                                        pos: 51220
                                        length: 28
                                    children: []
                                    pos: 51187
                                    length: 61
                                children: []
                                pos: 51186
                                length: 63
                            children: []
                            pos: 51081
                            length: 168
                        children: []
                        pos: 51080
                        length: 170
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: |-
                            compiler.report(
                                        t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                        children: []
                        pos: 51261
                        length: 93
                      pos: 51251
                      length: 111
                    pos: 51077
                    length: 1149
                  pos: 50952
                  length: 1280
                pos: 50918
                length: 2636
              pos: 50786
              length: 2772
          children: []
          pos: 50734
          length: 2824
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitCall
              children: []
              pos: 53798
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 53808
                length: 15
              pos: 53785
              length: 2099
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node child = n.getFirstChild();
                children: []
                pos: 53839
                length: 31
              - type: local_variable_declaration
                fields:
                  text: JSType childType = getJSType(child).restrictByNotNullOrUndefined();
                children: []
                pos: 53875
                length: 67
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!childType.canBeCalled()"
                        children: []
                        pos: 53952
                        length: 24
                    children: []
                    pos: 53951
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: report(t, n, NOT_CALLABLE, childType.toString());
                    children: []
                    pos: 53986
                    length: 49
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, n);
                    children: []
                    pos: 54042
                    length: 18
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 54067
                    length: 7
                  pos: 53978
                  length: 102
                pos: 53948
                length: 132
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: instanceof_expression
                        fields:
                          text: childType instanceof FunctionType
                        children: []
                        pos: 54215
                        length: 33
                    children: []
                    pos: 54214
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: FunctionType functionType = (FunctionType) childType;
                    children: []
                    pos: 54258
                    length: 53
                  - type: local_variable_declaration
                    fields:
                      text: boolean isExtern = false;
                    children: []
                    pos: 54319
                    length: 25
                  - type: local_variable_declaration
                    fields:
                      text: JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
                    children: []
                    pos: 54351
                    length: 58
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: not_equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: functionJSDocInfo
                                children: []
                                pos: 54419
                                length: 17
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 54440
                                length: 4
                            children: []
                            pos: 54419
                            length: 25
                        children: []
                        pos: 54418
                        length: 27
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: String sourceName = functionJSDocInfo.getSourceName();
                        children: []
                        pos: 54456
                        length: 54
                      - type: local_variable_declaration
                        fields:
                          text: CompilerInput functionSource = compiler.getInput(sourceName);
                        children: []
                        pos: 54519
                        length: 61
                      - type: expression_statement
                        fields:
                          text: isExtern = functionSource.isExtern();
                        children: []
                        pos: 54589
                        length: 37
                      pos: 54446
                      length: 188
                    pos: 54416
                    length: 218
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: functionType.isConstructor()
                                    children: []
                                    pos: 54791
                                    length: 28
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!functionType.isNativeObjectType()"
                                    children: []
                                    pos: 54833
                                    length: 34
                                children: []
                                pos: 54791
                                length: 76
                              right:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: or
                                    fields:
                                      left:
                                        type: or
                                        fields:
                                          left:
                                            type: method_invocation
                                            fields:
                                              text: functionType.getReturnType().isUnknownType()
                                            children: []
                                            pos: 54882
                                            length: 44
                                          right:
                                            type: method_invocation
                                            fields:
                                              text: functionType.getReturnType().isVoidType()
                                            children: []
                                            pos: 54941
                                            length: 41
                                        children: []
                                        pos: 54882
                                        length: 100
                                      right:
                                        type: unary_expression
                                        fields:
                                          text: "!isExtern"
                                        children: []
                                        pos: 54997
                                        length: 9
                                    children: []
                                    pos: 54882
                                    length: 124
                                children: []
                                pos: 54881
                                length: 126
                            children: []
                            pos: 54791
                            length: 216
                        children: []
                        pos: 54790
                        length: 218
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
                        children: []
                        pos: 55019
                        length: 61
                      pos: 55009
                      length: 79
                    pos: 54787
                    length: 301
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: and
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: functionType.isOrdinaryFunction()
                                        children: []
                                        pos: 55194
                                        length: 33
                                      right:
                                        type: unary_expression
                                        fields:
                                          text: "!functionType.getTypeOfThis().isUnknownType()"
                                        children: []
                                        pos: 55241
                                        length: 45
                                    children: []
                                    pos: 55194
                                    length: 92
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!functionType.getTypeOfThis().isNativeObjectType()"
                                    children: []
                                    pos: 55300
                                    length: 50
                                children: []
                                pos: 55194
                                length: 156
                              right:
                                type: unary_expression
                                fields:
                                  text: |-
                                    !(child.getType() == Token.GETELEM ||
                                                child.getType() == Token.GETPROP)
                                children: []
                                pos: 55364
                                length: 83
                            children: []
                            pos: 55194
                            length: 253
                        children: []
                        pos: 55193
                        length: 255
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: report(t, n, EXPECTED_THIS_TYPE, functionType.toString());
                        children: []
                        pos: 55459
                        length: 58
                      pos: 55449
                      length: 76
                    pos: 55190
                    length: 335
                  - type: expression_statement
                    fields:
                      text: visitParameterList(t, n, functionType);
                    children: []
                    pos: 55533
                    length: 39
                  - type: expression_statement
                    fields:
                      text: ensureTyped(t, n, functionType.getReturnType());
                    children: []
                    pos: 55579
                    length: 48
                  pos: 54250
                  length: 1383
                pos: 54211
                length: 1460
              pos: 53833
              length: 2051
          children: []
          pos: 53785
          length: 2099
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitParameterList
              children: []
              pos: 55965
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 55984
                length: 15
              pos: 55952
              length: 1386
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Iterator<Node> arguments = call.children().iterator();
                children: []
                pos: 56051
                length: 54
              - type: expression_statement
                fields:
                  text: arguments.next();
                children: []
                pos: 56110
                length: 17
              - type: local_variable_declaration
                fields:
                  text: Iterator<Node> parameters = functionType.getParameters().iterator();
                children: []
                pos: 56159
                length: 68
              - type: local_variable_declaration
                fields:
                  text: int ordinal = 0;
                children: []
                pos: 56232
                length: 16
              - type: local_variable_declaration
                fields:
                  text: Node parameter = null;
                children: []
                pos: 56253
                length: 22
              - type: local_variable_declaration
                fields:
                  text: Node argument = null;
                children: []
                pos: 56280
                length: 21
              - type: while_statement
                fields:
                  text: |-
                    while (arguments.hasNext() &&
                               (parameters.hasNext() ||
                                parameter != null && parameter.isVarArgs())) {
                          // If there are no parameters left in the list, then the while loop
                          // above implies that this must be a var_args function.
                          if (parameters.hasNext()) {
                            parameter = parameters.next();
                          }
                          argument = arguments.next();
                          ordinal++;

                          validator.expectArgumentMatchesParameter(t, argument,
                              getJSType(argument), getJSType(parameter), call, ordinal);
                        }
                children: []
                pos: 56306
                length: 529
              - type: local_variable_declaration
                fields:
                  text: int numArgs = call.getChildCount() - 1;
                children: []
                pos: 56841
                length: 39
              - type: local_variable_declaration
                fields:
                  text: int minArgs = functionType.getMinArguments();
                children: []
                pos: 56885
                length: 45
              - type: local_variable_declaration
                fields:
                  text: int maxArgs = functionType.getMaxArguments();
                children: []
                pos: 56935
                length: 45
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: greater_than
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: minArgs
                                children: []
                                pos: 56989
                                length: 7
                              right:
                                type: identifier
                                fields:
                                  text: numArgs
                                children: []
                                pos: 56999
                                length: 7
                            children: []
                            pos: 56989
                            length: 17
                          right:
                            type: less_than
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: maxArgs
                                children: []
                                pos: 57010
                                length: 7
                              right:
                                type: identifier
                                fields:
                                  text: numArgs
                                children: []
                                pos: 57020
                                length: 7
                            children: []
                            pos: 57010
                            length: 17
                        children: []
                        pos: 56989
                        length: 38
                    children: []
                    pos: 56988
                    length: 40
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        report(t, call, WRONG_ARGUMENT_COUNT,
                                      validator.getReadableJSTypeName(call.getFirstChild(), false),
                                      String.valueOf(numArgs), String.valueOf(minArgs),
                                      maxArgs != Integer.MAX_VALUE ?
                                      " and no more than " + maxArgs + " argument(s)" : "");
                    children: []
                    pos: 57037
                    length: 291
                  pos: 57029
                  length: 305
                pos: 56985
                length: 349
              pos: 56045
              length: 1293
          children: []
          pos: 55952
          length: 1386
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitReturn
              children: []
              pos: 57580
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 57592
                length: 15
              pos: 57567
              length: 1070
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node function = t.getEnclosingFunction();
                children: []
                pos: 57623
                length: 41
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: function
                            children: []
                            pos: 57768
                            length: 8
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 57780
                            length: 4
                        children: []
                        pos: 57768
                        length: 16
                    children: []
                    pos: 57767
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 57794
                    length: 7
                  pos: 57786
                  length: 21
                pos: 57764
                length: 43
              - type: local_variable_declaration
                fields:
                  text: JSType jsType = getJSType(function);
                children: []
                pos: 57812
                length: 36
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: instanceof_expression
                        fields:
                          text: jsType instanceof FunctionType
                        children: []
                        pos: 57858
                        length: 30
                    children: []
                    pos: 57857
                    length: 32
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: FunctionType functionType = (FunctionType) jsType;
                    children: []
                    pos: 57898
                    length: 50
                  - type: local_variable_declaration
                    fields:
                      text: JSType returnType = functionType.getReturnType();
                    children: []
                    pos: 57956
                    length: 49
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: returnType
                                children: []
                                pos: 58117
                                length: 10
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 58131
                                length: 4
                            children: []
                            pos: 58117
                            length: 18
                        children: []
                        pos: 58116
                        length: 20
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: returnType = getNativeType(VOID_TYPE);
                        children: []
                        pos: 58147
                        length: 38
                      pos: 58137
                      length: 56
                    pos: 58113
                    length: 80
                  - type: local_variable_declaration
                    fields:
                      text: Node valueNode = n.getFirstChild();
                    children: []
                    pos: 58245
                    length: 35
                  - type: local_variable_declaration
                    fields:
                      text: JSType actualReturnType;
                    children: []
                    pos: 58287
                    length: 24
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: valueNode
                                children: []
                                pos: 58322
                                length: 9
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 58335
                                length: 4
                            children: []
                            pos: 58322
                            length: 17
                        children: []
                        pos: 58321
                        length: 19
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: actualReturnType = getNativeType(VOID_TYPE);
                        children: []
                        pos: 58351
                        length: 44
                      - type: expression_statement
                        fields:
                          text: valueNode = n;
                        children: []
                        pos: 58404
                        length: 14
                      pos: 58341
                      length: 85
                    pos: 58318
                    length: 172
                  - type: expression_statement
                    fields:
                      text: |-
                        validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,
                                  "inconsistent return type");
                    children: []
                    pos: 58517
                    length: 110
                  pos: 57890
                  length: 743
                pos: 57854
                length: 779
              pos: 57617
              length: 1020
          children: []
          pos: 57567
          length: 1070
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visitBinaryOperator
              children: []
              pos: 59045
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int op
                children: []
                pos: 59065
                length: 6
              pos: 59032
              length: 1688
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node left = n.getFirstChild();
                children: []
                pos: 59104
                length: 30
              - type: local_variable_declaration
                fields:
                  text: JSType leftType = getJSType(left);
                children: []
                pos: 59139
                length: 34
              - type: local_variable_declaration
                fields:
                  text: Node right = n.getLastChild();
                children: []
                pos: 59178
                length: 30
              - type: local_variable_declaration
                fields:
                  text: JSType rightType = getJSType(right);
                children: []
                pos: 59213
                length: 36
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: op
                        children: []
                        pos: 59262
                        length: 2
                    children: []
                    pos: 59261
                    length: 4
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.ASSIGN_LSH:
                              case Token.ASSIGN_RSH:
                              case Token.LSH:
                              case Token.RSH:
                              case Token.ASSIGN_URSH:
                              case Token.URSH:
                                if (!leftType.matchesInt32Context()) {
                                  report(t, left, BIT_OPERATION,
                                           NodeUtil.opToStr(n.getType()), leftType.toString());
                                }
                                if (!rightType.matchesUint32Context()) {
                                  report(t, right, BIT_OPERATION,
                                           NodeUtil.opToStr(n.getType()), rightType.toString());
                                }
                                break;

                              case Token.ASSIGN_DIV:
                              case Token.ASSIGN_MOD:
                              case Token.ASSIGN_MUL:
                              case Token.ASSIGN_SUB:
                              case Token.DIV:
                              case Token.MOD:
                              case Token.MUL:
                              case Token.SUB:
                                validator.expectNumber(t, left, leftType, "left operand");
                                validator.expectNumber(t, right, rightType, "right operand");
                                break;

                              case Token.ASSIGN_BITAND:
                              case Token.ASSIGN_BITXOR:
                              case Token.ASSIGN_BITOR:
                              case Token.BITAND:
                              case Token.BITXOR:
                              case Token.BITOR:
                                validator.expectBitwiseable(t, left, leftType,
                                    "bad left operand to bitwise operator");
                                validator.expectBitwiseable(t, right, rightType,
                                    "bad right operand to bitwise operator");
                                break;

                              case Token.ASSIGN_ADD:
                              case Token.ADD:
                                break;

                              default:
                                report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));
                            }
                    children: []
                    pos: 59266
                    length: 1427
                children: []
                pos: 59254
                length: 1439
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n);
                children: []
                pos: 60698
                length: 18
              pos: 59098
              length: 1622
          children: []
          pos: 59032
          length: 1688
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkEnumInitializer
              children: []
              pos: 61400
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 61428
                length: 15
              pos: 61387
              length: 1288
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: value.getType()
                            children: []
                            pos: 61489
                            length: 15
                          right:
                            type: field_access
                            fields:
                              text: Token.OBJECTLIT
                            children: []
                            pos: 61508
                            length: 15
                        children: []
                        pos: 61489
                        length: 34
                    children: []
                    pos: 61488
                    length: 36
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (Node key = value.getFirstChild();
                                   key != null; key = key.getNext()) {
                                Node propValue = key.getFirstChild();

                                // the value's type must be assignable to the enum's primitive type
                                validator.expectCanAssignTo(
                                    t, propValue, getJSType(propValue), primitiveType,
                                    "element type must match enum's type");
                              }
                    children: []
                    pos: 61533
                    length: 368
                  pos: 61525
                  length: 382
                pos: 61485
                length: 1186
              pos: 61479
              length: 1196
          children: []
          pos: 61387
          length: 1288
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isReference
              children: []
              pos: 62967
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 62979
                length: 6
              pos: 62944
              length: 216
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 63001
                        length: 11
                    children: []
                    pos: 63000
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.GETELEM:
                              case Token.GETPROP:
                              case Token.NAME:
                                return true;

                              default:
                                return false;
                            }
                    children: []
                    pos: 63014
                    length: 141
                children: []
                pos: 62993
                length: 162
              pos: 62987
              length: 173
          children: []
          pos: 62944
          length: 216
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getJSType
              children: []
              pos: 63285
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 63295
                length: 6
              pos: 63270
              length: 461
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType jsType = n.getJSType();
                children: []
                pos: 63309
                length: 30
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: jsType
                            children: []
                            pos: 63348
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 63358
                            length: 4
                        children: []
                        pos: 63348
                        length: 14
                    children: []
                    pos: 63347
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return getNativeType(UNKNOWN_TYPE);
                    children: []
                    pos: 63652
                    length: 35
                  pos: 63364
                  length: 329
                pos: 63344
                length: 383
              pos: 63303
              length: 428
          children: []
          pos: 63270
          length: 461
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getFunctionType
              children: []
              pos: 63858
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 63874
                length: 6
              pos: 63837
              length: 335
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: JSType type = getJSType(n).restrictByNotNullOrUndefined();
                children: []
                pos: 63888
                length: 58
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: type.isUnknownType()
                        children: []
                        pos: 63955
                        length: 20
                    children: []
                    pos: 63954
                    length: 22
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);
                    children: []
                    pos: 63985
                    length: 64
                  pos: 63977
                  length: 78
                pos: 63951
                length: 217
              pos: 63882
              length: 290
          children: []
          pos: 63837
          length: 335
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: ensureTyped
              children: []
              pos: 64624
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 64636
                length: 15
              pos: 64611
              length: 107
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));
                children: []
                pos: 64667
                length: 47
              pos: 64661
              length: 57
          children: []
          pos: 64611
          length: 107
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: ensureTyped
              children: []
              pos: 64735
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 64747
                length: 15
              pos: 64722
              length: 118
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: ensureTyped(t, n, getNativeType(type));
                children: []
                pos: 64797
                length: 39
              pos: 64791
              length: 49
          children: []
          pos: 64722
          length: 118
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: ensureTyped
              children: []
              pos: 65669
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 65681
                length: 15
              pos: 65656
              length: 854
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    Preconditions.checkState(n.getType() != Token.FUNCTION ||
                                type instanceof FunctionType ||
                                type.isUnknownType());
                children: []
                pos: 65783
                length: 136
              - type: local_variable_declaration
                fields:
                  text: JSDocInfo info = n.getJSDocInfo();
                children: []
                pos: 65924
                length: 34
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: info
                            children: []
                            pos: 65967
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 65975
                            length: 4
                        children: []
                        pos: 65967
                        length: 12
                    children: []
                    pos: 65966
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: info.hasType()
                            children: []
                            pos: 65993
                            length: 14
                        children: []
                        pos: 65992
                        length: 16
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: JSType infoType = info.getType().evaluate(t.getScope(),
                            typeRegistry);
                        children: []
                        pos: 66019
                        length: 70
                      - type: expression_statement
                        fields:
                          text: validator.expectCanCast(t, n, infoType, type);
                        children: []
                        pos: 66098
                        length: 46
                      - type: expression_statement
                        fields:
                          text: type = infoType;
                        children: []
                        pos: 66153
                        length: 16
                      pos: 66009
                      length: 168
                    pos: 65989
                    length: 188
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: info.isImplicitCast()
                                children: []
                                pos: 66189
                                length: 21
                              right:
                                type: unary_expression
                                fields:
                                  text: "!inExterns"
                                children: []
                                pos: 66214
                                length: 10
                            children: []
                            pos: 66189
                            length: 35
                        children: []
                        pos: 66188
                        length: 37
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: local_variable_declaration
                        fields:
                          text: |-
                            String propName = n.getType() == Token.GETPROP ?
                                        n.getLastChild().getString() : "(missing)";
                        children: []
                        pos: 66236
                        length: 104
                      - type: expression_statement
                        fields:
                          text: |-
                            compiler.report(
                                        t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));
                        children: []
                        pos: 66349
                        length: 78
                      pos: 66226
                      length: 209
                    pos: 66185
                    length: 250
                  pos: 65981
                  length: 460
                pos: 65963
                length: 478
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: n.getJSType()
                            children: []
                            pos: 66451
                            length: 13
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 66468
                            length: 4
                        children: []
                        pos: 66451
                        length: 21
                    children: []
                    pos: 66450
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: n.setJSType(type);
                    children: []
                    pos: 66482
                    length: 18
                  pos: 66474
                  length: 32
                pos: 66447
                length: 59
              pos: 65719
              length: 791
          children: []
          pos: 65656
          length: 854
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getTypedPercent
              children: []
              pos: 66641
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 66634
              length: 187
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int total = nullCount + unknownCount + typedCount;
                children: []
                pos: 66665
                length: 50
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: total
                            children: []
                            pos: 66724
                            length: 5
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 66733
                            length: 1
                        children: []
                        pos: 66724
                        length: 10
                    children: []
                    pos: 66723
                    length: 12
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return 0.0;
                    children: []
                    pos: 66744
                    length: 11
                  pos: 66736
                  length: 25
                pos: 66720
                length: 97
              pos: 66659
              length: 162
          children: []
          pos: 66634
          length: 187
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getNativeType
              children: []
              pos: 66840
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSTypeNative typeId
                children: []
                pos: 66854
                length: 19
              pos: 66825
              length: 102
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return typeRegistry.getNativeType(typeId);
                children: []
                pos: 66881
                length: 42
              pos: 66875
              length: 52
          children: []
          pos: 66825
          length: 102
        pos: 2320
        length: 64609
    children: []
    pos: 2320
    length: 64609
  pos: 0
  length: 66930
text_diff: "--- before\n+++ after\n@@ -513,9 +513,7 @@\n         // Object literal
  keys are handled with OBJECTLIT\n         if (!NodeUtil.isObjectLitKey(n, n.getParent()))
  {\n           ensureTyped(t, n, STRING_TYPE);\n-        } else {\n           //
  Object literal keys are not typeable\n-          typeable = false;\n         }\n
  \        break;\n \n"
tree_diff: |+
  New cluster:
  UPDATE from {
        case Token.NAME:
          typeable = visitName(t, n, parent);
          break;

        case Token.LP:
          // If this is under a FUNCTION node, it is a parameter list and can be
          // ignored here.
          if (parent.getType() != Token.FUNCTION) {
            ensureTyped(t, n, getJSType(n.getFirstChild()));
          } else {
            typeable = false;
          }
          break;

        case Token.COMMA:
          ensureTyped(t, n, getJSType(n.getLastChild()));
          break;

        case Token.TRUE:
        case Token.FALSE:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.THIS:
          ensureTyped(t, n, t.getScope().getTypeOfThis());
          break;

        case Token.REF_SPECIAL:
          ensureTyped(t, n);
          break;

        case Token.GET_REF:
          ensureTyped(t, n, getJSType(n.getFirstChild()));
          break;

        case Token.NULL:
          ensureTyped(t, n, NULL_TYPE);
          break;

        case Token.NUMBER:
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.STRING:
          // Object literal keys are handled with OBJECTLIT
          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
            ensureTyped(t, n, STRING_TYPE);
          } else {
            // Object literal keys are not typeable
            typeable = false;
          }
          break;

        case Token.GET:
        case Token.SET:
          // Object literal keys are handled with OBJECTLIT
          break;

        case Token.ARRAYLIT:
          ensureTyped(t, n, ARRAY_TYPE);
          break;

        case Token.REGEXP:
          ensureTyped(t, n, REGEXP_TYPE);
          break;

        case Token.GETPROP:
          visitGetProp(t, n, parent);
          typeable = !(parent.getType() == Token.ASSIGN &&
                       parent.getFirstChild() == n);
          break;

        case Token.GETELEM:
          visitGetElem(t, n);
          // The type of GETELEM is always unknown, so no point counting that.
          // If that unknown leaks elsewhere (say by an assignment to another
          // variable), then it will be counted.
          typeable = false;
          break;

        case Token.VAR:
          visitVar(t, n);
          typeable = false;
          break;

        case Token.NEW:
          visitNew(t, n);
          typeable = true;
          break;

        case Token.CALL:
          visitCall(t, n);
          typeable = !NodeUtil.isExpressionNode(parent);
          break;

        case Token.RETURN:
          visitReturn(t, n);
          typeable = false;
          break;

        case Token.DEC:
        case Token.INC:
          left = n.getFirstChild();
          validator.expectNumber(
              t, left, getJSType(left), "increment/decrement");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.NOT:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.VOID:
          ensureTyped(t, n, VOID_TYPE);
          break;

        case Token.TYPEOF:
          ensureTyped(t, n, STRING_TYPE);
          break;

        case Token.BITNOT:
          childType = getJSType(n.getFirstChild());
          if (!childType.matchesInt32Context()) {
            report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),
                childType.toString());
          }
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.POS:
        case Token.NEG:
          left = n.getFirstChild();
          validator.expectNumber(t, left, getJSType(left), "sign operator");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.EQ:
        case Token.NE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          TernaryValue result =
              leftTypeRestricted.testForEquality(rightTypeRestricted);
          if (result != TernaryValue.UNKNOWN) {
            if (n.getType() == Token.NE) {
              result = result.not();
            }
            report(t, n, DETERMINISTIC_TEST, leftType.toString(),
                rightType.toString(), result.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.SHEQ:
        case Token.SHNE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          if (!leftTypeRestricted.canTestForShallowEqualityWith(
                  rightTypeRestricted)) {
            report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),
                rightType.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());
          if (rightType.isNumber()) {
            validator.expectNumber(
                t, n, leftType, "left side of numeric comparison");
          } else if (leftType.isNumber()) {
            validator.expectNumber(
                t, n, rightType, "right side of numeric comparison");
          } else if (leftType.matchesNumberContext() &&
                     rightType.matchesNumberContext()) {
            // OK.
          } else {
            // Whether the comparison is numeric will be determined at runtime
            // each time the expression is evaluated. Regardless, both operands
            // should match a string context.
            String message = "left side of comparison";
            validator.expectString(t, n, leftType, message);
            validator.expectNotNullOrUndefined(
                t, n, leftType, message, getNativeType(STRING_TYPE));
            message = "right side of comparison";
            validator.expectString(t, n, rightType, message);
            validator.expectNotNullOrUndefined(
                t, n, rightType, message, getNativeType(STRING_TYPE));
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.IN:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right);
          validator.expectObject(t, n, rightType, "'in' requires an object");
          validator.expectString(t, left, leftType, "left side of 'in'");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.INSTANCEOF:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right).restrictByNotNullOrUndefined();

          validator.expectAnyObject(
              t, left, leftType, "deterministic instanceof yields false");
          validator.expectActualObject(
              t, right, rightType, "instanceof requires an object");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.ASSIGN:
          visitAssign(t, n);
          typeable = false;
          break;

        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
          visitBinaryOperator(n.getType(), t, n);
          break;

        case Token.DELPROP:
          if (!isReference(n.getFirstChild())) {
            report(t, n, BAD_DELETE);
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.CASE:
          JSType switchType = getJSType(parent.getFirstChild());
          JSType caseType = getJSType(n.getFirstChild());
          validator.expectSwitchMatchesCase(t, n, switchType, caseType);
          typeable = false;
          break;

        case Token.WITH: {
          Node child = n.getFirstChild();
          childType = getJSType(child);
          validator.expectObject(
              t, child, childType, "with requires an object");
          typeable = false;
          break;
        }

        case Token.FUNCTION:
          visitFunction(t, n);
          break;

        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
          typeable = false;
          break;

        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
          typeable = false;
          break;

        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
          if (n.getJSType() != null) { // If we didn't run type inference.
            ensureTyped(t, n);
          } else {
            // If this is an enum, then give that type to the objectlit as well.
            if ((n.getType() == Token.OBJECTLIT)
                && (parent.getJSType() instanceof EnumType)) {
              ensureTyped(t, n, parent.getJSType());
            } else {
              ensureTyped(t, n);
            }
          }
          if (n.getType() == Token.OBJECTLIT) {
            for (Node key : n.children()) {
              visitObjLitKey(t, key, n);
            }
          }
          break;

        default:
          report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
          ensureTyped(t, n);
          break;
      } to {
        case Token.NAME:
          typeable = visitName(t, n, parent);
          break;

        case Token.LP:
          // If this is under a FUNCTION node, it is a parameter list and can be
          // ignored here.
          if (parent.getType() != Token.FUNCTION) {
            ensureTyped(t, n, getJSType(n.getFirstChild()));
          } else {
            typeable = false;
          }
          break;

        case Token.COMMA:
          ensureTyped(t, n, getJSType(n.getLastChild()));
          break;

        case Token.TRUE:
        case Token.FALSE:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.THIS:
          ensureTyped(t, n, t.getScope().getTypeOfThis());
          break;

        case Token.REF_SPECIAL:
          ensureTyped(t, n);
          break;

        case Token.GET_REF:
          ensureTyped(t, n, getJSType(n.getFirstChild()));
          break;

        case Token.NULL:
          ensureTyped(t, n, NULL_TYPE);
          break;

        case Token.NUMBER:
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.STRING:
          // Object literal keys are handled with OBJECTLIT
          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
            ensureTyped(t, n, STRING_TYPE);
            // Object literal keys are not typeable
          }
          break;

        case Token.GET:
        case Token.SET:
          // Object literal keys are handled with OBJECTLIT
          break;

        case Token.ARRAYLIT:
          ensureTyped(t, n, ARRAY_TYPE);
          break;

        case Token.REGEXP:
          ensureTyped(t, n, REGEXP_TYPE);
          break;

        case Token.GETPROP:
          visitGetProp(t, n, parent);
          typeable = !(parent.getType() == Token.ASSIGN &&
                       parent.getFirstChild() == n);
          break;

        case Token.GETELEM:
          visitGetElem(t, n);
          // The type of GETELEM is always unknown, so no point counting that.
          // If that unknown leaks elsewhere (say by an assignment to another
          // variable), then it will be counted.
          typeable = false;
          break;

        case Token.VAR:
          visitVar(t, n);
          typeable = false;
          break;

        case Token.NEW:
          visitNew(t, n);
          typeable = true;
          break;

        case Token.CALL:
          visitCall(t, n);
          typeable = !NodeUtil.isExpressionNode(parent);
          break;

        case Token.RETURN:
          visitReturn(t, n);
          typeable = false;
          break;

        case Token.DEC:
        case Token.INC:
          left = n.getFirstChild();
          validator.expectNumber(
              t, left, getJSType(left), "increment/decrement");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.NOT:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.VOID:
          ensureTyped(t, n, VOID_TYPE);
          break;

        case Token.TYPEOF:
          ensureTyped(t, n, STRING_TYPE);
          break;

        case Token.BITNOT:
          childType = getJSType(n.getFirstChild());
          if (!childType.matchesInt32Context()) {
            report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),
                childType.toString());
          }
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.POS:
        case Token.NEG:
          left = n.getFirstChild();
          validator.expectNumber(t, left, getJSType(left), "sign operator");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.EQ:
        case Token.NE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          TernaryValue result =
              leftTypeRestricted.testForEquality(rightTypeRestricted);
          if (result != TernaryValue.UNKNOWN) {
            if (n.getType() == Token.NE) {
              result = result.not();
            }
            report(t, n, DETERMINISTIC_TEST, leftType.toString(),
                rightType.toString(), result.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.SHEQ:
        case Token.SHNE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          if (!leftTypeRestricted.canTestForShallowEqualityWith(
                  rightTypeRestricted)) {
            report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),
                rightType.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());
          if (rightType.isNumber()) {
            validator.expectNumber(
                t, n, leftType, "left side of numeric comparison");
          } else if (leftType.isNumber()) {
            validator.expectNumber(
                t, n, rightType, "right side of numeric comparison");
          } else if (leftType.matchesNumberContext() &&
                     rightType.matchesNumberContext()) {
            // OK.
          } else {
            // Whether the comparison is numeric will be determined at runtime
            // each time the expression is evaluated. Regardless, both operands
            // should match a string context.
            String message = "left side of comparison";
            validator.expectString(t, n, leftType, message);
            validator.expectNotNullOrUndefined(
                t, n, leftType, message, getNativeType(STRING_TYPE));
            message = "right side of comparison";
            validator.expectString(t, n, rightType, message);
            validator.expectNotNullOrUndefined(
                t, n, rightType, message, getNativeType(STRING_TYPE));
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.IN:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right);
          validator.expectObject(t, n, rightType, "'in' requires an object");
          validator.expectString(t, left, leftType, "left side of 'in'");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.INSTANCEOF:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right).restrictByNotNullOrUndefined();

          validator.expectAnyObject(
              t, left, leftType, "deterministic instanceof yields false");
          validator.expectActualObject(
              t, right, rightType, "instanceof requires an object");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.ASSIGN:
          visitAssign(t, n);
          typeable = false;
          break;

        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
          visitBinaryOperator(n.getType(), t, n);
          break;

        case Token.DELPROP:
          if (!isReference(n.getFirstChild())) {
            report(t, n, BAD_DELETE);
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.CASE:
          JSType switchType = getJSType(parent.getFirstChild());
          JSType caseType = getJSType(n.getFirstChild());
          validator.expectSwitchMatchesCase(t, n, switchType, caseType);
          typeable = false;
          break;

        case Token.WITH: {
          Node child = n.getFirstChild();
          childType = getJSType(child);
          validator.expectObject(
              t, child, childType, "with requires an object");
          typeable = false;
          break;
        }

        case Token.FUNCTION:
          visitFunction(t, n);
          break;

        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
          typeable = false;
          break;

        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
          typeable = false;
          break;

        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
          if (n.getJSType() != null) { // If we didn't run type inference.
            ensureTyped(t, n);
          } else {
            // If this is an enum, then give that type to the objectlit as well.
            if ((n.getType() == Token.OBJECTLIT)
                && (parent.getJSType() instanceof EnumType)) {
              ensureTyped(t, n, parent.getJSType());
            } else {
              ensureTyped(t, n);
            }
          }
          if (n.getType() == Token.OBJECTLIT) {
            for (Node key : n.children()) {
              visitObjLitKey(t, key, n);
            }
          }
          break;

        default:
          report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
          ensureTyped(t, n);
          break;
      }
  ------------
  ===
  update-node
  ---
  switch_block: {
        case Token.NAME:
          typeable = visitName(t, n, parent);
          break;

        case Token.LP:
          // If this is under a FUNCTION node, it is a parameter list and can be
          // ignored here.
          if (parent.getType() != Token.FUNCTION) {
            ensureTyped(t, n, getJSType(n.getFirstChild()));
          } else {
            typeable = false;
          }
          break;

        case Token.COMMA:
          ensureTyped(t, n, getJSType(n.getLastChild()));
          break;

        case Token.TRUE:
        case Token.FALSE:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.THIS:
          ensureTyped(t, n, t.getScope().getTypeOfThis());
          break;

        case Token.REF_SPECIAL:
          ensureTyped(t, n);
          break;

        case Token.GET_REF:
          ensureTyped(t, n, getJSType(n.getFirstChild()));
          break;

        case Token.NULL:
          ensureTyped(t, n, NULL_TYPE);
          break;

        case Token.NUMBER:
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.STRING:
          // Object literal keys are handled with OBJECTLIT
          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
            ensureTyped(t, n, STRING_TYPE);
          } else {
            // Object literal keys are not typeable
            typeable = false;
          }
          break;

        case Token.GET:
        case Token.SET:
          // Object literal keys are handled with OBJECTLIT
          break;

        case Token.ARRAYLIT:
          ensureTyped(t, n, ARRAY_TYPE);
          break;

        case Token.REGEXP:
          ensureTyped(t, n, REGEXP_TYPE);
          break;

        case Token.GETPROP:
          visitGetProp(t, n, parent);
          typeable = !(parent.getType() == Token.ASSIGN &&
                       parent.getFirstChild() == n);
          break;

        case Token.GETELEM:
          visitGetElem(t, n);
          // The type of GETELEM is always unknown, so no point counting that.
          // If that unknown leaks elsewhere (say by an assignment to another
          // variable), then it will be counted.
          typeable = false;
          break;

        case Token.VAR:
          visitVar(t, n);
          typeable = false;
          break;

        case Token.NEW:
          visitNew(t, n);
          typeable = true;
          break;

        case Token.CALL:
          visitCall(t, n);
          typeable = !NodeUtil.isExpressionNode(parent);
          break;

        case Token.RETURN:
          visitReturn(t, n);
          typeable = false;
          break;

        case Token.DEC:
        case Token.INC:
          left = n.getFirstChild();
          validator.expectNumber(
              t, left, getJSType(left), "increment/decrement");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.NOT:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.VOID:
          ensureTyped(t, n, VOID_TYPE);
          break;

        case Token.TYPEOF:
          ensureTyped(t, n, STRING_TYPE);
          break;

        case Token.BITNOT:
          childType = getJSType(n.getFirstChild());
          if (!childType.matchesInt32Context()) {
            report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),
                childType.toString());
          }
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.POS:
        case Token.NEG:
          left = n.getFirstChild();
          validator.expectNumber(t, left, getJSType(left), "sign operator");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.EQ:
        case Token.NE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          TernaryValue result =
              leftTypeRestricted.testForEquality(rightTypeRestricted);
          if (result != TernaryValue.UNKNOWN) {
            if (n.getType() == Token.NE) {
              result = result.not();
            }
            report(t, n, DETERMINISTIC_TEST, leftType.toString(),
                rightType.toString(), result.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.SHEQ:
        case Token.SHNE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          if (!leftTypeRestricted.canTestForShallowEqualityWith(
                  rightTypeRestricted)) {
            report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),
                rightType.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());
          if (rightType.isNumber()) {
            validator.expectNumber(
                t, n, leftType, "left side of numeric comparison");
          } else if (leftType.isNumber()) {
            validator.expectNumber(
                t, n, rightType, "right side of numeric comparison");
          } else if (leftType.matchesNumberContext() &&
                     rightType.matchesNumberContext()) {
            // OK.
          } else {
            // Whether the comparison is numeric will be determined at runtime
            // each time the expression is evaluated. Regardless, both operands
            // should match a string context.
            String message = "left side of comparison";
            validator.expectString(t, n, leftType, message);
            validator.expectNotNullOrUndefined(
                t, n, leftType, message, getNativeType(STRING_TYPE));
            message = "right side of comparison";
            validator.expectString(t, n, rightType, message);
            validator.expectNotNullOrUndefined(
                t, n, rightType, message, getNativeType(STRING_TYPE));
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.IN:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right);
          validator.expectObject(t, n, rightType, "'in' requires an object");
          validator.expectString(t, left, leftType, "left side of 'in'");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.INSTANCEOF:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right).restrictByNotNullOrUndefined();

          validator.expectAnyObject(
              t, left, leftType, "deterministic instanceof yields false");
          validator.expectActualObject(
              t, right, rightType, "instanceof requires an object");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.ASSIGN:
          visitAssign(t, n);
          typeable = false;
          break;

        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
          visitBinaryOperator(n.getType(), t, n);
          break;

        case Token.DELPROP:
          if (!isReference(n.getFirstChild())) {
            report(t, n, BAD_DELETE);
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.CASE:
          JSType switchType = getJSType(parent.getFirstChild());
          JSType caseType = getJSType(n.getFirstChild());
          validator.expectSwitchMatchesCase(t, n, switchType, caseType);
          typeable = false;
          break;

        case Token.WITH: {
          Node child = n.getFirstChild();
          childType = getJSType(child);
          validator.expectObject(
              t, child, childType, "with requires an object");
          typeable = false;
          break;
        }

        case Token.FUNCTION:
          visitFunction(t, n);
          break;

        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
          typeable = false;
          break;

        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
          typeable = false;
          break;

        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
          if (n.getJSType() != null) { // If we didn't run type inference.
            ensureTyped(t, n);
          } else {
            // If this is an enum, then give that type to the objectlit as well.
            if ((n.getType() == Token.OBJECTLIT)
                && (parent.getJSType() instanceof EnumType)) {
              ensureTyped(t, n, parent.getJSType());
            } else {
              ensureTyped(t, n);
            }
          }
          if (n.getType() == Token.OBJECTLIT) {
            for (Node key : n.children()) {
              visitObjLitKey(t, key, n);
            }
          }
          break;

        default:
          report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
          ensureTyped(t, n);
          break;
      } [16885,26797]
  replace {
        case Token.NAME:
          typeable = visitName(t, n, parent);
          break;

        case Token.LP:
          // If this is under a FUNCTION node, it is a parameter list and can be
          // ignored here.
          if (parent.getType() != Token.FUNCTION) {
            ensureTyped(t, n, getJSType(n.getFirstChild()));
          } else {
            typeable = false;
          }
          break;

        case Token.COMMA:
          ensureTyped(t, n, getJSType(n.getLastChild()));
          break;

        case Token.TRUE:
        case Token.FALSE:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.THIS:
          ensureTyped(t, n, t.getScope().getTypeOfThis());
          break;

        case Token.REF_SPECIAL:
          ensureTyped(t, n);
          break;

        case Token.GET_REF:
          ensureTyped(t, n, getJSType(n.getFirstChild()));
          break;

        case Token.NULL:
          ensureTyped(t, n, NULL_TYPE);
          break;

        case Token.NUMBER:
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.STRING:
          // Object literal keys are handled with OBJECTLIT
          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
            ensureTyped(t, n, STRING_TYPE);
          } else {
            // Object literal keys are not typeable
            typeable = false;
          }
          break;

        case Token.GET:
        case Token.SET:
          // Object literal keys are handled with OBJECTLIT
          break;

        case Token.ARRAYLIT:
          ensureTyped(t, n, ARRAY_TYPE);
          break;

        case Token.REGEXP:
          ensureTyped(t, n, REGEXP_TYPE);
          break;

        case Token.GETPROP:
          visitGetProp(t, n, parent);
          typeable = !(parent.getType() == Token.ASSIGN &&
                       parent.getFirstChild() == n);
          break;

        case Token.GETELEM:
          visitGetElem(t, n);
          // The type of GETELEM is always unknown, so no point counting that.
          // If that unknown leaks elsewhere (say by an assignment to another
          // variable), then it will be counted.
          typeable = false;
          break;

        case Token.VAR:
          visitVar(t, n);
          typeable = false;
          break;

        case Token.NEW:
          visitNew(t, n);
          typeable = true;
          break;

        case Token.CALL:
          visitCall(t, n);
          typeable = !NodeUtil.isExpressionNode(parent);
          break;

        case Token.RETURN:
          visitReturn(t, n);
          typeable = false;
          break;

        case Token.DEC:
        case Token.INC:
          left = n.getFirstChild();
          validator.expectNumber(
              t, left, getJSType(left), "increment/decrement");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.NOT:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.VOID:
          ensureTyped(t, n, VOID_TYPE);
          break;

        case Token.TYPEOF:
          ensureTyped(t, n, STRING_TYPE);
          break;

        case Token.BITNOT:
          childType = getJSType(n.getFirstChild());
          if (!childType.matchesInt32Context()) {
            report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),
                childType.toString());
          }
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.POS:
        case Token.NEG:
          left = n.getFirstChild();
          validator.expectNumber(t, left, getJSType(left), "sign operator");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.EQ:
        case Token.NE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          TernaryValue result =
              leftTypeRestricted.testForEquality(rightTypeRestricted);
          if (result != TernaryValue.UNKNOWN) {
            if (n.getType() == Token.NE) {
              result = result.not();
            }
            report(t, n, DETERMINISTIC_TEST, leftType.toString(),
                rightType.toString(), result.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.SHEQ:
        case Token.SHNE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          if (!leftTypeRestricted.canTestForShallowEqualityWith(
                  rightTypeRestricted)) {
            report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),
                rightType.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());
          if (rightType.isNumber()) {
            validator.expectNumber(
                t, n, leftType, "left side of numeric comparison");
          } else if (leftType.isNumber()) {
            validator.expectNumber(
                t, n, rightType, "right side of numeric comparison");
          } else if (leftType.matchesNumberContext() &&
                     rightType.matchesNumberContext()) {
            // OK.
          } else {
            // Whether the comparison is numeric will be determined at runtime
            // each time the expression is evaluated. Regardless, both operands
            // should match a string context.
            String message = "left side of comparison";
            validator.expectString(t, n, leftType, message);
            validator.expectNotNullOrUndefined(
                t, n, leftType, message, getNativeType(STRING_TYPE));
            message = "right side of comparison";
            validator.expectString(t, n, rightType, message);
            validator.expectNotNullOrUndefined(
                t, n, rightType, message, getNativeType(STRING_TYPE));
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.IN:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right);
          validator.expectObject(t, n, rightType, "'in' requires an object");
          validator.expectString(t, left, leftType, "left side of 'in'");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.INSTANCEOF:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right).restrictByNotNullOrUndefined();

          validator.expectAnyObject(
              t, left, leftType, "deterministic instanceof yields false");
          validator.expectActualObject(
              t, right, rightType, "instanceof requires an object");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.ASSIGN:
          visitAssign(t, n);
          typeable = false;
          break;

        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
          visitBinaryOperator(n.getType(), t, n);
          break;

        case Token.DELPROP:
          if (!isReference(n.getFirstChild())) {
            report(t, n, BAD_DELETE);
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.CASE:
          JSType switchType = getJSType(parent.getFirstChild());
          JSType caseType = getJSType(n.getFirstChild());
          validator.expectSwitchMatchesCase(t, n, switchType, caseType);
          typeable = false;
          break;

        case Token.WITH: {
          Node child = n.getFirstChild();
          childType = getJSType(child);
          validator.expectObject(
              t, child, childType, "with requires an object");
          typeable = false;
          break;
        }

        case Token.FUNCTION:
          visitFunction(t, n);
          break;

        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
          typeable = false;
          break;

        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
          typeable = false;
          break;

        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
          if (n.getJSType() != null) { // If we didn't run type inference.
            ensureTyped(t, n);
          } else {
            // If this is an enum, then give that type to the objectlit as well.
            if ((n.getType() == Token.OBJECTLIT)
                && (parent.getJSType() instanceof EnumType)) {
              ensureTyped(t, n, parent.getJSType());
            } else {
              ensureTyped(t, n);
            }
          }
          if (n.getType() == Token.OBJECTLIT) {
            for (Node key : n.children()) {
              visitObjLitKey(t, key, n);
            }
          }
          break;

        default:
          report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
          ensureTyped(t, n);
          break;
      } by {
        case Token.NAME:
          typeable = visitName(t, n, parent);
          break;

        case Token.LP:
          // If this is under a FUNCTION node, it is a parameter list and can be
          // ignored here.
          if (parent.getType() != Token.FUNCTION) {
            ensureTyped(t, n, getJSType(n.getFirstChild()));
          } else {
            typeable = false;
          }
          break;

        case Token.COMMA:
          ensureTyped(t, n, getJSType(n.getLastChild()));
          break;

        case Token.TRUE:
        case Token.FALSE:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.THIS:
          ensureTyped(t, n, t.getScope().getTypeOfThis());
          break;

        case Token.REF_SPECIAL:
          ensureTyped(t, n);
          break;

        case Token.GET_REF:
          ensureTyped(t, n, getJSType(n.getFirstChild()));
          break;

        case Token.NULL:
          ensureTyped(t, n, NULL_TYPE);
          break;

        case Token.NUMBER:
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.STRING:
          // Object literal keys are handled with OBJECTLIT
          if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
            ensureTyped(t, n, STRING_TYPE);
            // Object literal keys are not typeable
          }
          break;

        case Token.GET:
        case Token.SET:
          // Object literal keys are handled with OBJECTLIT
          break;

        case Token.ARRAYLIT:
          ensureTyped(t, n, ARRAY_TYPE);
          break;

        case Token.REGEXP:
          ensureTyped(t, n, REGEXP_TYPE);
          break;

        case Token.GETPROP:
          visitGetProp(t, n, parent);
          typeable = !(parent.getType() == Token.ASSIGN &&
                       parent.getFirstChild() == n);
          break;

        case Token.GETELEM:
          visitGetElem(t, n);
          // The type of GETELEM is always unknown, so no point counting that.
          // If that unknown leaks elsewhere (say by an assignment to another
          // variable), then it will be counted.
          typeable = false;
          break;

        case Token.VAR:
          visitVar(t, n);
          typeable = false;
          break;

        case Token.NEW:
          visitNew(t, n);
          typeable = true;
          break;

        case Token.CALL:
          visitCall(t, n);
          typeable = !NodeUtil.isExpressionNode(parent);
          break;

        case Token.RETURN:
          visitReturn(t, n);
          typeable = false;
          break;

        case Token.DEC:
        case Token.INC:
          left = n.getFirstChild();
          validator.expectNumber(
              t, left, getJSType(left), "increment/decrement");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.NOT:
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.VOID:
          ensureTyped(t, n, VOID_TYPE);
          break;

        case Token.TYPEOF:
          ensureTyped(t, n, STRING_TYPE);
          break;

        case Token.BITNOT:
          childType = getJSType(n.getFirstChild());
          if (!childType.matchesInt32Context()) {
            report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),
                childType.toString());
          }
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.POS:
        case Token.NEG:
          left = n.getFirstChild();
          validator.expectNumber(t, left, getJSType(left), "sign operator");
          ensureTyped(t, n, NUMBER_TYPE);
          break;

        case Token.EQ:
        case Token.NE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          TernaryValue result =
              leftTypeRestricted.testForEquality(rightTypeRestricted);
          if (result != TernaryValue.UNKNOWN) {
            if (n.getType() == Token.NE) {
              result = result.not();
            }
            report(t, n, DETERMINISTIC_TEST, leftType.toString(),
                rightType.toString(), result.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.SHEQ:
        case Token.SHNE: {
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());

          JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
          JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
          if (!leftTypeRestricted.canTestForShallowEqualityWith(
                  rightTypeRestricted)) {
            report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),
                rightType.toString());
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;
        }

        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
          leftType = getJSType(n.getFirstChild());
          rightType = getJSType(n.getLastChild());
          if (rightType.isNumber()) {
            validator.expectNumber(
                t, n, leftType, "left side of numeric comparison");
          } else if (leftType.isNumber()) {
            validator.expectNumber(
                t, n, rightType, "right side of numeric comparison");
          } else if (leftType.matchesNumberContext() &&
                     rightType.matchesNumberContext()) {
            // OK.
          } else {
            // Whether the comparison is numeric will be determined at runtime
            // each time the expression is evaluated. Regardless, both operands
            // should match a string context.
            String message = "left side of comparison";
            validator.expectString(t, n, leftType, message);
            validator.expectNotNullOrUndefined(
                t, n, leftType, message, getNativeType(STRING_TYPE));
            message = "right side of comparison";
            validator.expectString(t, n, rightType, message);
            validator.expectNotNullOrUndefined(
                t, n, rightType, message, getNativeType(STRING_TYPE));
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.IN:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right);
          validator.expectObject(t, n, rightType, "'in' requires an object");
          validator.expectString(t, left, leftType, "left side of 'in'");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.INSTANCEOF:
          left = n.getFirstChild();
          right = n.getLastChild();
          leftType = getJSType(left);
          rightType = getJSType(right).restrictByNotNullOrUndefined();

          validator.expectAnyObject(
              t, left, leftType, "deterministic instanceof yields false");
          validator.expectActualObject(
              t, right, rightType, "instanceof requires an object");
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.ASSIGN:
          visitAssign(t, n);
          typeable = false;
          break;

        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
          visitBinaryOperator(n.getType(), t, n);
          break;

        case Token.DELPROP:
          if (!isReference(n.getFirstChild())) {
            report(t, n, BAD_DELETE);
          }
          ensureTyped(t, n, BOOLEAN_TYPE);
          break;

        case Token.CASE:
          JSType switchType = getJSType(parent.getFirstChild());
          JSType caseType = getJSType(n.getFirstChild());
          validator.expectSwitchMatchesCase(t, n, switchType, caseType);
          typeable = false;
          break;

        case Token.WITH: {
          Node child = n.getFirstChild();
          childType = getJSType(child);
          validator.expectObject(
              t, child, childType, "with requires an object");
          typeable = false;
          break;
        }

        case Token.FUNCTION:
          visitFunction(t, n);
          break;

        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
          typeable = false;
          break;

        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
          typeable = false;
          break;

        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
          if (n.getJSType() != null) { // If we didn't run type inference.
            ensureTyped(t, n);
          } else {
            // If this is an enum, then give that type to the objectlit as well.
            if ((n.getType() == Token.OBJECTLIT)
                && (parent.getJSType() instanceof EnumType)) {
              ensureTyped(t, n, parent.getJSType());
            } else {
              ensureTyped(t, n);
            }
          }
          if (n.getType() == Token.OBJECTLIT) {
            for (Node key : n.children()) {
              visitObjLitKey(t, key, n);
            }
          }
          break;

        default:
          report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
          ensureTyped(t, n);
          break;
      }

...
