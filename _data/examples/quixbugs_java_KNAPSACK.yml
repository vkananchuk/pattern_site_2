---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: KNAPSACK
        children: []
        pos: 210
        length: 8
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: knapsack
              children: []
              pos: 243
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int capacity
                children: []
                pos: 252
                length: 12
              pos: 225
              length: 811
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int weight = 0, value = 0;
                children: []
                pos: 292
                length: 26
              - type: local_variable_declaration
                fields:
                  text: int n = items.length;
                children: []
                pos: 327
                length: 21
              - type: local_variable_declaration
                fields:
                  text: int memo[][] = new int[n + 1][capacity + 1];
                children: []
                pos: 357
                length: 44
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i <= n ; i++)
                            {
                                if (i - 1 >= 0) {
                                    weight = items[i - 1][0];
                                    value = items[i - 1][1];
                                }
                                for (int j = 0; j <= capacity; j++)
                                {
                                    if (i == 0 || j == 0) {
                                        memo[i][j] = 0;
                                    }
                                    else if (weight < j) {
                                        memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);
                                    }
                                    else {
                                        memo[i][j] = memo [i-1][j];
                                    }

                                }
                            }
                children: []
                pos: 411
                length: 585
              - type: return_statement
                fields:
                  text: return memo[n][capacity];
                children: []
                pos: 1005
                length: 25
              pos: 282
              length: 754
          children: []
          pos: 225
          length: 811
        pos: 197
        length: 842
    children: []
    pos: 197
    length: 842
  pos: 0
  length: 1040
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: KNAPSACK
        children: []
        pos: 219
        length: 8
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: knapsack
              children: []
              pos: 252
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int capacity
                children: []
                pos: 261
                length: 12
              pos: 234
              length: 812
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int weight = 0, value = 0;
                children: []
                pos: 301
                length: 26
              - type: local_variable_declaration
                fields:
                  text: int n = items.length;
                children: []
                pos: 336
                length: 21
              - type: local_variable_declaration
                fields:
                  text: int memo[][] = new int[n + 1][capacity + 1];
                children: []
                pos: 366
                length: 44
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i <= n ; i++)
                            {
                                if (i - 1 >= 0) {
                                    weight = items[i - 1][0];
                                    value = items[i - 1][1];
                                }
                                for (int j = 0; j <= capacity; j++)
                                {
                                    if (i == 0 || j == 0) {
                                        memo[i][j] = 0;
                                    }
                                    else if (weight <= j) {
                                        memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);
                                    }
                                    else {
                                        memo[i][j] = memo [i-1][j];
                                    }

                                }
                            }
                children: []
                pos: 420
                length: 586
              - type: return_statement
                fields:
                  text: return memo[n][capacity];
                children: []
                pos: 1015
                length: 25
              pos: 291
              length: 755
          children: []
          pos: 234
          length: 812
        pos: 206
        length: 843
    children: []
    pos: 206
    length: 843
  pos: 0
  length: 1050
text_diff: |
  --- before
  +++ after
  @@ -1,6 +1,7 @@
  -package java_programs;
  +package correct_java_programs;
   import java.util.*;
   import java.lang.*;
  +
   /*
    * To change this template, choose Tools | Templates
    * and open the template in the editor.
  @@ -27,7 +28,7 @@
                   if (i == 0 || j == 0) {
                       memo[i][j] = 0;
                   }
  -                else if (weight < j) {
  +                else if (weight <= j) {
                       memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);
                   }
                   else {
tree_diff: |+
  New cluster:
  UPDATE from for (int i = 0; i <= n ; i++)
          {
              if (i - 1 >= 0) {
                  weight = items[i - 1][0];
                  value = items[i - 1][1];
              }
              for (int j = 0; j <= capacity; j++)
              {
                  if (i == 0 || j == 0) {
                      memo[i][j] = 0;
                  }
                  else if (weight < j) {
                      memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);
                  }
                  else {
                      memo[i][j] = memo [i-1][j];
                  }

              }
          } to for (int i = 0; i <= n ; i++)
          {
              if (i - 1 >= 0) {
                  weight = items[i - 1][0];
                  value = items[i - 1][1];
              }
              for (int j = 0; j <= capacity; j++)
              {
                  if (i == 0 || j == 0) {
                      memo[i][j] = 0;
                  }
                  else if (weight <= j) {
                      memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);
                  }
                  else {
                      memo[i][j] = memo [i-1][j];
                  }

              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int i = 0; i <= n ; i++)
          {
              if (i - 1 >= 0) {
                  weight = items[i - 1][0];
                  value = items[i - 1][1];
              }
              for (int j = 0; j <= capacity; j++)
              {
                  if (i == 0 || j == 0) {
                      memo[i][j] = 0;
                  }
                  else if (weight < j) {
                      memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);
                  }
                  else {
                      memo[i][j] = memo [i-1][j];
                  }

              }
          } [411,996]
  replace for (int i = 0; i <= n ; i++)
          {
              if (i - 1 >= 0) {
                  weight = items[i - 1][0];
                  value = items[i - 1][1];
              }
              for (int j = 0; j <= capacity; j++)
              {
                  if (i == 0 || j == 0) {
                      memo[i][j] = 0;
                  }
                  else if (weight < j) {
                      memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);
                  }
                  else {
                      memo[i][j] = memo [i-1][j];
                  }

              }
          } by for (int i = 0; i <= n ; i++)
          {
              if (i - 1 >= 0) {
                  weight = items[i - 1][0];
                  value = items[i - 1][1];
              }
              for (int j = 0; j <= capacity; j++)
              {
                  if (i == 0 || j == 0) {
                      memo[i][j] = 0;
                  }
                  else if (weight <= j) {
                      memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);
                  }
                  else {
                      memo[i][j] = memo [i-1][j];
                  }

              }
          }

...
