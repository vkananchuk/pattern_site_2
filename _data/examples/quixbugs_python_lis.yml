---
language: python
text_diff: "--- before\n+++ after\n@@ -11,27 +11,24 @@\n \n         if length == longest
  or val < arr[ends[length + 1]]:\n             ends[length + 1] = i\n-            longest
  = length + 1\n+            longest = max(longest, length + 1)\n \n     return longest\n
  \n-\n-\n \"\"\"\n-Longest Increasing Subsequence\n-longest-increasing-subsequence\n+def
  lis(arr):\n+    ends = {}\n+    longest = 0\n \n+    for i, val in enumerate(arr):\n
  \n-Input:\n-    arr: A sequence of ints\n+        prefix_lengths = [j for j in range(1,
  longest + 1) if arr[ends[j]] < val]\n \n-Precondition:\n-    The ints in arr are
  unique\n+        length = max(prefix_lengths) if prefix_lengths else 0\n \n-Output:\n-
  \   The length of the longest monotonically increasing subsequence of arr\n+        if
  length == longest or val < arr[ends[length + 1]]:\n+            ends[length + 1]
  = i\n+            longest = max(length + 1, longest)\n \n-Example:\n-    >>> lis([4,
  1, 5, 3, 7, 6, 2])\n-    3\n+    return longest\n \"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from """
  Longest Increasing Subsequence
  longest-increasing-subsequence


  Input:
      arr: A sequence of ints

  Precondition:
      The ints in arr are unique

  Output:
      The length of the longest monotonically increasing subsequence of arr

  Example:
      >>> lis([4, 1, 5, 3, 7, 6, 2])
      3
  """ to """
  def lis(arr):
      ends = {}
      longest = 0

      for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = max(length + 1, longest)

      return longest
  """
  ------------
  ===
  update-node
  ---
  expression_statement: """
  Longest Increasing Subsequence
  longest-increasing-subsequence


  Input:
      arr: A sequence of ints

  Precondition:
      The ints in arr are unique

  Output:
      The length of the longest monotonically increasing subsequence of arr

  Example:
      >>> lis([4, 1, 5, 3, 7, 6, 2])
      3
  """ [377,663]
  replace """
  Longest Increasing Subsequence
  longest-increasing-subsequence


  Input:
      arr: A sequence of ints

  Precondition:
      The ints in arr are unique

  Output:
      The length of the longest monotonically increasing subsequence of arr

  Example:
      >>> lis([4, 1, 5, 3, 7, 6, 2])
      3
  """ by """
  def lis(arr):
      ends = {}
      longest = 0

      for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = max(length + 1, longest)

      return longest
  """

  New cluster:
  UPDATE from for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = length + 1 to for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = max(longest, length + 1)
  ------------
  ===
  update-node
  ---
  for_statement: for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = length + 1 [50,353]
  replace for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = length + 1 by for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = max(longest, length + 1)

...
