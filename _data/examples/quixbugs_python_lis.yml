---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: lis
        children: []
        pos: 4
        length: 3
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: arr
          children: []
          pos: 8
          length: 3
        pos: 0
        length: 372
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: ends = {}
          children: []
          pos: 18
          length: 9
        - type: expression_statement
          fields:
            text: longest = 0
          children: []
          pos: 32
          length: 11
        - type: for_statement
          fields:
            text: |-
              for i, val in enumerate(arr):

                      prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

                      length = max(prefix_lengths) if prefix_lengths else 0

                      if length == longest or val < arr[ends[length + 1]]:
                          ends[length + 1] = i
                          longest = length + 1
          children: []
          pos: 49
          length: 303
        - type: return_statement
          fields:
            text: return longest
          children: []
          pos: 358
          length: 14
        pos: 18
        length: 354
    children: []
    pos: 0
    length: 372
  pos: 0
  length: 373
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: lis
        children: []
        pos: 4
        length: 3
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: arr
          children: []
          pos: 8
          length: 3
        pos: 0
        length: 386
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: ends = {}
          children: []
          pos: 18
          length: 9
        - type: expression_statement
          fields:
            text: longest = 0
          children: []
          pos: 32
          length: 11
        - type: for_statement
          fields:
            text: |-
              for i, val in enumerate(arr):

                      prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

                      length = max(prefix_lengths) if prefix_lengths else 0

                      if length == longest or val < arr[ends[length + 1]]:
                          ends[length + 1] = i
                          longest = max(longest, length + 1)
          children: []
          pos: 49
          length: 317
        - type: return_statement
          fields:
            text: return longest
          children: []
          pos: 372
          length: 14
        pos: 18
        length: 368
    children: []
    pos: 0
    length: 386
  pos: 0
  length: 387
text_diff: "--- before\n+++ after\n@@ -10,6 +10,6 @@\n \n         if length == longest
  or val < arr[ends[length + 1]]:\n             ends[length + 1] = i\n-            longest
  = length + 1\n+            longest = max(longest, length + 1)\n \n     return longest\n"
tree_diff: |+
  New cluster:
  UPDATE from for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = length + 1 to for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = max(longest, length + 1)
  ------------
  ===
  update-node
  ---
  for_statement: for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = length + 1 [49,352]
  replace for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = length + 1 by for i, val in enumerate(arr):

          prefix_lengths = [j for j in range(1, longest + 1) if arr[ends[j]] < val]

          length = max(prefix_lengths) if prefix_lengths else 0

          if length == longest or val < arr[ends[length + 1]]:
              ends[length + 1] = i
              longest = max(longest, length + 1)

...
