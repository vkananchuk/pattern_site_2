---
language: java
text_diff: |
  --- before
  +++ after
  @@ -300,7 +300,6 @@
               else if (stopAtNonOption)
               {
                   process(token.substring(i));
  -                break;
               }
               else
               {
tree_diff: |+
  New cluster:
  UPDATE from for (int i = 1; i < token.length(); i++)
          {
              String ch = String.valueOf(token.charAt(i));

              if (options.hasOption(ch))
              {
                  tokens.add("-" + ch);
                  currentOption = options.getOption(ch);

                  if (currentOption.hasArg() && (token.length() != (i + 1)))
                  {
                      tokens.add(token.substring(i + 1));

                      break;
                  }
              }
              else if (stopAtNonOption)
              {
                  process(token.substring(i));
                  break;
              }
              else
              {
                  tokens.add(token);
                  break;
              }
          } to for (int i = 1; i < token.length(); i++)
          {
              String ch = String.valueOf(token.charAt(i));

              if (options.hasOption(ch))
              {
                  tokens.add("-" + ch);
                  currentOption = options.getOption(ch);

                  if (currentOption.hasArg() && (token.length() != (i + 1)))
                  {
                      tokens.add(token.substring(i + 1));

                      break;
                  }
              }
              else if (stopAtNonOption)
              {
                  process(token.substring(i));
              }
              else
              {
                  tokens.add(token);
                  break;
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int i = 1; i < token.length(); i++)
          {
              String ch = String.valueOf(token.charAt(i));

              if (options.hasOption(ch))
              {
                  tokens.add("-" + ch);
                  currentOption = options.getOption(ch);

                  if (currentOption.hasArg() && (token.length() != (i + 1)))
                  {
                      tokens.add(token.substring(i + 1));

                      break;
                  }
              }
              else if (stopAtNonOption)
              {
                  process(token.substring(i));
                  break;
              }
              else
              {
                  tokens.add(token);
                  break;
              }
          } [9878,10589]
  replace for (int i = 1; i < token.length(); i++)
          {
              String ch = String.valueOf(token.charAt(i));

              if (options.hasOption(ch))
              {
                  tokens.add("-" + ch);
                  currentOption = options.getOption(ch);

                  if (currentOption.hasArg() && (token.length() != (i + 1)))
                  {
                      tokens.add(token.substring(i + 1));

                      break;
                  }
              }
              else if (stopAtNonOption)
              {
                  process(token.substring(i));
                  break;
              }
              else
              {
                  tokens.add(token);
                  break;
              }
          } by for (int i = 1; i < token.length(); i++)
          {
              String ch = String.valueOf(token.charAt(i));

              if (options.hasOption(ch))
              {
                  tokens.add("-" + ch);
                  currentOption = options.getOption(ch);

                  if (currentOption.hasArg() && (token.length() != (i + 1)))
                  {
                      tokens.add(token.substring(i + 1));

                      break;
                  }
              }
              else if (stopAtNonOption)
              {
                  process(token.substring(i));
              }
              else
              {
                  tokens.add(token);
                  break;
              }
          }

...
