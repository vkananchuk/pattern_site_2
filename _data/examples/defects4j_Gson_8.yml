---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: UnsafeAllocator
        children: []
        pos: 957
        length: 15
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newInstance
              children: []
              pos: 999
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<T> c
                children: []
                pos: 1011
                length: 10
              pos: 977
              length: 63
          children: []
          pos: 977
          length: 63
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: create
              children: []
              pos: 1074
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 1044
              length: 2640
            body:
              type: block
              fields: {}
              children:
              - type: try_statement
                fields:
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Class<?> unsafeClass = Class.forName("sun.misc.Unsafe");
                      children: []
                      pos: 1210
                      length: 56
                    - type: local_variable_declaration
                      fields:
                        text: Field f = unsafeClass.getDeclaredField("theUnsafe");
                      children: []
                      pos: 1273
                      length: 52
                    - type: expression_statement
                      fields:
                        text: f.setAccessible(true);
                      children: []
                      pos: 1332
                      length: 22
                    - type: local_variable_declaration
                      fields:
                        text: final Object unsafe = f.get(null);
                      children: []
                      pos: 1361
                      length: 34
                    - type: local_variable_declaration
                      fields:
                        text: final Method allocateInstance = unsafeClass.getMethod("allocateInstance",
                          Class.class);
                      children: []
                      pos: 1402
                      length: 87
                    - type: return_statement
                      fields:
                        text: |-
                          return new UnsafeAllocator() {
                                  @Override
                                  @SuppressWarnings("unchecked")
                                  public <T> T newInstance(Class<T> c) throws Exception {
                                    assertInstantiable(c);
                                    return (T) allocateInstance.invoke(unsafe, c);
                                  }
                                };
                      children: []
                      pos: 1496
                      length: 260
                    pos: 1202
                    length: 560
                  excepts:
                    type: excepts
                    fields: {}
                    children:
                    - type: catch_clause
                      fields:
                        text: |-
                          catch (Exception ignored) {
                              }
                      children: []
                      pos: 1763
                      length: 33
                    pos: 1198
                    length: 598
                children: []
                pos: 1198
                length: 598
              - type: try_statement
                fields:
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          Method getConstructorId = ObjectStreamClass.class
                                    .getDeclaredMethod("getConstructorId", Class.class);
                      children: []
                      pos: 2060
                      length: 112
                    - type: expression_statement
                      fields:
                        text: getConstructorId.setAccessible(true);
                      children: []
                      pos: 2179
                      length: 37
                    - type: local_variable_declaration
                      fields:
                        text: final int constructorId = (Integer) getConstructorId.invoke(null,
                          Object.class);
                      children: []
                      pos: 2223
                      length: 80
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          final Method newInstance = ObjectStreamClass.class
                                    .getDeclaredMethod("newInstance", Class.class, int.class);
                      children: []
                      pos: 2310
                      length: 119
                    - type: expression_statement
                      fields:
                        text: newInstance.setAccessible(true);
                      children: []
                      pos: 2436
                      length: 32
                    - type: return_statement
                      fields:
                        text: |-
                          return new UnsafeAllocator() {
                                  @Override
                                  @SuppressWarnings("unchecked")
                                  public <T> T newInstance(Class<T> c) throws Exception {
                                    assertInstantiable(c);
                                    return (T) newInstance.invoke(null, c, constructorId);
                                  }
                                };
                      children: []
                      pos: 2475
                      length: 268
                    pos: 2052
                    length: 697
                  excepts:
                    type: excepts
                    fields: {}
                    children:
                    - type: catch_clause
                      fields:
                        text: |-
                          catch (Exception ignored) {
                              }
                      children: []
                      pos: 2750
                      length: 33
                    pos: 2048
                    length: 735
                children: []
                pos: 2048
                length: 735
              - type: try_statement
                fields:
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          final Method newInstance = ObjectInputStream.class
                                    .getDeclaredMethod("newInstance", Class.class, Class.class);
                      children: []
                      pos: 3006
                      length: 121
                    - type: expression_statement
                      fields:
                        text: newInstance.setAccessible(true);
                      children: []
                      pos: 3134
                      length: 32
                    - type: return_statement
                      fields:
                        text: |-
                          return new UnsafeAllocator() {
                                  @Override
                                  @SuppressWarnings("unchecked")
                                  public <T> T newInstance(Class<T> c) throws Exception {
                                    assertInstantiable(c);
                                    return (T) newInstance.invoke(null, c, Object.class);
                                  }
                                };
                      children: []
                      pos: 3173
                      length: 267
                    pos: 2998
                    length: 448
                  excepts:
                    type: excepts
                    fields: {}
                    children:
                    - type: catch_clause
                      fields:
                        text: |-
                          catch (Exception ignored) {
                              }
                      children: []
                      pos: 3447
                      length: 33
                    pos: 2994
                    length: 486
                children: []
                pos: 2994
                length: 486
              - type: return_statement
                fields:
                  text: |-
                    return new UnsafeAllocator() {
                          @Override
                          public <T> T newInstance(Class<T> c) {
                            throw new UnsupportedOperationException("Cannot allocate " + c);
                          }
                        };
                children: []
                pos: 3501
                length: 179
              pos: 1083
              length: 2601
          children: []
          pos: 1044
          length: 2640
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: assertInstantiable
              children: []
              pos: 3949
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> c
                children: []
                pos: 3968
                length: 10
              pos: 3929
              length: 420
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int modifiers = c.getModifiers();
                children: []
                pos: 3986
                length: 33
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Modifier.isInterface(modifiers)
                        children: []
                        pos: 4028
                        length: 31
                    children: []
                    pos: 4027
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: 'throw new UnsupportedOperationException("Interface can''t
                        be instantiated! Interface name: " + c.getName());'
                    children: []
                    pos: 4069
                    length: 107
                  pos: 4061
                  length: 121
                pos: 4024
                length: 158
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Modifier.isAbstract(modifiers)
                        children: []
                        pos: 4191
                        length: 30
                    children: []
                    pos: 4190
                    length: 32
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: 'throw new UnsupportedOperationException("Abstract class
                        can''t be instantiated! Class name: " + c.getName());'
                    children: []
                    pos: 4231
                    length: 108
                  pos: 4223
                  length: 122
                pos: 4187
                length: 158
              pos: 3980
              length: 369
          children: []
          pos: 3929
          length: 420
        pos: 935
        length: 3416
    children: []
    pos: 935
    length: 3416
  pos: 0
  length: 4352
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: UnsafeAllocator
        children: []
        pos: 922
        length: 15
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newInstance
              children: []
              pos: 964
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<T> c
                children: []
                pos: 976
                length: 10
              pos: 942
              length: 63
          children: []
          pos: 942
          length: 63
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: create
              children: []
              pos: 1039
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 1009
              length: 2541
            body:
              type: block
              fields: {}
              children:
              - type: try_statement
                fields:
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Class<?> unsafeClass = Class.forName("sun.misc.Unsafe");
                      children: []
                      pos: 1175
                      length: 56
                    - type: local_variable_declaration
                      fields:
                        text: Field f = unsafeClass.getDeclaredField("theUnsafe");
                      children: []
                      pos: 1238
                      length: 52
                    - type: expression_statement
                      fields:
                        text: f.setAccessible(true);
                      children: []
                      pos: 1297
                      length: 22
                    - type: local_variable_declaration
                      fields:
                        text: final Object unsafe = f.get(null);
                      children: []
                      pos: 1326
                      length: 34
                    - type: local_variable_declaration
                      fields:
                        text: final Method allocateInstance = unsafeClass.getMethod("allocateInstance",
                          Class.class);
                      children: []
                      pos: 1367
                      length: 87
                    - type: return_statement
                      fields:
                        text: |-
                          return new UnsafeAllocator() {
                                  @Override
                                  @SuppressWarnings("unchecked")
                                  public <T> T newInstance(Class<T> c) throws Exception {
                                    return (T) allocateInstance.invoke(unsafe, c);
                                  }
                                };
                      children: []
                      pos: 1461
                      length: 227
                    pos: 1167
                    length: 527
                  excepts:
                    type: excepts
                    fields: {}
                    children:
                    - type: catch_clause
                      fields:
                        text: |-
                          catch (Exception ignored) {
                              }
                      children: []
                      pos: 1695
                      length: 33
                    pos: 1163
                    length: 565
                children: []
                pos: 1163
                length: 565
              - type: try_statement
                fields:
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          Method getConstructorId = ObjectStreamClass.class
                                    .getDeclaredMethod("getConstructorId", Class.class);
                      children: []
                      pos: 1992
                      length: 112
                    - type: expression_statement
                      fields:
                        text: getConstructorId.setAccessible(true);
                      children: []
                      pos: 2111
                      length: 37
                    - type: local_variable_declaration
                      fields:
                        text: final int constructorId = (Integer) getConstructorId.invoke(null,
                          Object.class);
                      children: []
                      pos: 2155
                      length: 80
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          final Method newInstance = ObjectStreamClass.class
                                    .getDeclaredMethod("newInstance", Class.class, int.class);
                      children: []
                      pos: 2242
                      length: 119
                    - type: expression_statement
                      fields:
                        text: newInstance.setAccessible(true);
                      children: []
                      pos: 2368
                      length: 32
                    - type: return_statement
                      fields:
                        text: |-
                          return new UnsafeAllocator() {
                                  @Override
                                  @SuppressWarnings("unchecked")
                                  public <T> T newInstance(Class<T> c) throws Exception {
                                    return (T) newInstance.invoke(null, c, constructorId);
                                  }
                                };
                      children: []
                      pos: 2407
                      length: 235
                    pos: 1984
                    length: 664
                  excepts:
                    type: excepts
                    fields: {}
                    children:
                    - type: catch_clause
                      fields:
                        text: |-
                          catch (Exception ignored) {
                              }
                      children: []
                      pos: 2649
                      length: 33
                    pos: 1980
                    length: 702
                children: []
                pos: 1980
                length: 702
              - type: try_statement
                fields:
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          final Method newInstance = ObjectInputStream.class
                                    .getDeclaredMethod("newInstance", Class.class, Class.class);
                      children: []
                      pos: 2905
                      length: 121
                    - type: expression_statement
                      fields:
                        text: newInstance.setAccessible(true);
                      children: []
                      pos: 3033
                      length: 32
                    - type: return_statement
                      fields:
                        text: |-
                          return new UnsafeAllocator() {
                                  @Override
                                  @SuppressWarnings("unchecked")
                                  public <T> T newInstance(Class<T> c) throws Exception {
                                    return (T) newInstance.invoke(null, c, Object.class);
                                  }
                                };
                      children: []
                      pos: 3072
                      length: 234
                    pos: 2897
                    length: 415
                  excepts:
                    type: excepts
                    fields: {}
                    children:
                    - type: catch_clause
                      fields:
                        text: |-
                          catch (Exception ignored) {
                              }
                      children: []
                      pos: 3313
                      length: 33
                    pos: 2893
                    length: 453
                children: []
                pos: 2893
                length: 453
              - type: return_statement
                fields:
                  text: |-
                    return new UnsafeAllocator() {
                          @Override
                          public <T> T newInstance(Class<T> c) {
                            throw new UnsupportedOperationException("Cannot allocate " + c);
                          }
                        };
                children: []
                pos: 3367
                length: 179
              pos: 1048
              length: 2502
          children: []
          pos: 1009
          length: 2541
        pos: 900
        length: 2894
    children: []
    pos: 900
    length: 2894
  pos: 0
  length: 3795
text_diff: "--- before\n+++ after\n@@ -20,7 +20,6 @@\n import java.io.ObjectStreamClass;\n
  import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n
  \n /**\n  * Do sneaky things to allocate objects without invoking their constructors.\n@@
  -46,7 +45,6 @@\n         @Override\n         @SuppressWarnings(\"unchecked\")\n
  \        public <T> T newInstance(Class<T> c) throws Exception {\n-          assertInstantiable(c);\n
  \          return (T) allocateInstance.invoke(unsafe, c);\n         }\n       };\n@@
  -70,7 +68,6 @@\n         @Override\n         @SuppressWarnings(\"unchecked\")\n
  \        public <T> T newInstance(Class<T> c) throws Exception {\n-          assertInstantiable(c);\n
  \          return (T) newInstance.invoke(null, c, constructorId);\n         }\n
  \      };\n@@ -90,7 +87,6 @@\n         @Override\n         @SuppressWarnings(\"unchecked\")\n
  \        public <T> T newInstance(Class<T> c) throws Exception {\n-          assertInstantiable(c);\n
  \          return (T) newInstance.invoke(null, c, Object.class);\n         }\n       };\n@@
  -111,13 +107,4 @@\n    * throw an {@link java.lang.UnsupportedOperationException}\n
  \   * @param c instance of the class to be checked\n    */\n-  private static void
  assertInstantiable(Class<?> c) {\n-    int modifiers = c.getModifiers();\n-    if
  (Modifier.isInterface(modifiers)) {\n-      throw new UnsupportedOperationException(\"Interface
  can't be instantiated! Interface name: \" + c.getName());\n-    }\n-    if (Modifier.isAbstract(modifiers))
  {\n-      throw new UnsupportedOperationException(\"Abstract class can't be instantiated!
  Class name: \" + c.getName());\n-    }\n-  }\n }\n"
tree_diff: |+
  New cluster:
  ===
  insert-node
  ---
  try_statement [1163,1728]
  to
  block [1083,3684]
  at 0
  ------------
  ===
  insert-node
  ---
  try_statement [1163,1728]
  to
  block [1083,3684]
  at 0

  New cluster:
  ===
  insert-node
  ---
  try_statement [1980,2682]
  to
  block [1083,3684]
  at 1
  ------------
  ===
  insert-node
  ---
  try_statement [1980,2682]
  to
  block [1083,3684]
  at 1

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  block [1167,1694]
      local_variable_declaration: Class<?> unsafeClass = Class.forName("sun.misc.Unsafe"); [1175,1231]
      local_variable_declaration: Field f = unsafeClass.getDeclaredField("theUnsafe"); [1238,1290]
      expression_statement: f.setAccessible(true); [1297,1319]
      local_variable_declaration: final Object unsafe = f.get(null); [1326,1360]
      local_variable_declaration: final Method allocateInstance = unsafeClass.getMethod("allocateInstance", Class.class); [1367,1454]
      return_statement: return new UnsafeAllocator() {
          @Override
          @SuppressWarnings("unchecked")
          public <T> T newInstance(Class<T> c) throws Exception {
            return (T) allocateInstance.invoke(unsafe, c);
          }
        }; [1461,1688]
  to
  try_statement [1163,1728]
  at 0

  New cluster:
  MOVE from try_statement [1163,1728]
  ------------
  ===
  move-tree
  ---
  excepts [1198,1796]
      catch_clause: catch (Exception ignored) {
      } [1763,1796]
  to
  try_statement [1163,1728]
  at 1

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  block [1984,2648]
      local_variable_declaration: Method getConstructorId = ObjectStreamClass.class
            .getDeclaredMethod("getConstructorId", Class.class); [1992,2104]
      expression_statement: getConstructorId.setAccessible(true); [2111,2148]
      local_variable_declaration: final int constructorId = (Integer) getConstructorId.invoke(null, Object.class); [2155,2235]
      local_variable_declaration: final Method newInstance = ObjectStreamClass.class
            .getDeclaredMethod("newInstance", Class.class, int.class); [2242,2361]
      expression_statement: newInstance.setAccessible(true); [2368,2400]
      return_statement: return new UnsafeAllocator() {
          @Override
          @SuppressWarnings("unchecked")
          public <T> T newInstance(Class<T> c) throws Exception {
            return (T) newInstance.invoke(null, c, constructorId);
          }
        }; [2407,2642]
  to
  try_statement [1980,2682]
  at 0

  New cluster:
  MOVE from try_statement [1980,2682]
  ------------
  ===
  move-tree
  ---
  excepts [2048,2783]
      catch_clause: catch (Exception ignored) {
      } [2750,2783]
  to
  try_statement [1980,2682]
  at 1

  New cluster:
  UPDATE from return new UnsafeAllocator() {
          @Override
          @SuppressWarnings("unchecked")
          public <T> T newInstance(Class<T> c) throws Exception {
            assertInstantiable(c);
            return (T) newInstance.invoke(null, c, Object.class);
          }
        }; to return new UnsafeAllocator() {
          @Override
          @SuppressWarnings("unchecked")
          public <T> T newInstance(Class<T> c) throws Exception {
            return (T) newInstance.invoke(null, c, Object.class);
          }
        };
  ------------
  ===
  update-node
  ---
  return_statement: return new UnsafeAllocator() {
          @Override
          @SuppressWarnings("unchecked")
          public <T> T newInstance(Class<T> c) throws Exception {
            assertInstantiable(c);
            return (T) newInstance.invoke(null, c, Object.class);
          }
        }; [3173,3440]
  replace return new UnsafeAllocator() {
          @Override
          @SuppressWarnings("unchecked")
          public <T> T newInstance(Class<T> c) throws Exception {
            assertInstantiable(c);
            return (T) newInstance.invoke(null, c, Object.class);
          }
        }; by return new UnsafeAllocator() {
          @Override
          @SuppressWarnings("unchecked")
          public <T> T newInstance(Class<T> c) throws Exception {
            return (T) newInstance.invoke(null, c, Object.class);
          }
        };

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  block [1202,1762]
      local_variable_declaration: Class<?> unsafeClass = Class.forName("sun.misc.Unsafe"); [1210,1266]
      local_variable_declaration: Field f = unsafeClass.getDeclaredField("theUnsafe"); [1273,1325]
      expression_statement: f.setAccessible(true); [1332,1354]
      local_variable_declaration: final Object unsafe = f.get(null); [1361,1395]
      local_variable_declaration: final Method allocateInstance = unsafeClass.getMethod("allocateInstance", Class.class); [1402,1489]
      return_statement: return new UnsafeAllocator() {
          @Override
          @SuppressWarnings("unchecked")
          public <T> T newInstance(Class<T> c) throws Exception {
            assertInstantiable(c);
            return (T) allocateInstance.invoke(unsafe, c);
          }
        }; [1496,1756]

  New cluster:
  ===
  delete-node
  ---
  try_statement [1198,1796]
  ===
  ------------
  ===
  delete-node
  ---
  try_statement [1198,1796]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  block [2052,2749]
      local_variable_declaration: Method getConstructorId = ObjectStreamClass.class
            .getDeclaredMethod("getConstructorId", Class.class); [2060,2172]
      expression_statement: getConstructorId.setAccessible(true); [2179,2216]
      local_variable_declaration: final int constructorId = (Integer) getConstructorId.invoke(null, Object.class); [2223,2303]
      local_variable_declaration: final Method newInstance = ObjectStreamClass.class
            .getDeclaredMethod("newInstance", Class.class, int.class); [2310,2429]
      expression_statement: newInstance.setAccessible(true); [2436,2468]
      return_statement: return new UnsafeAllocator() {
          @Override
          @SuppressWarnings("unchecked")
          public <T> T newInstance(Class<T> c) throws Exception {
            assertInstantiable(c);
            return (T) newInstance.invoke(null, c, constructorId);
          }
        }; [2475,2743]

  New cluster:
  ===
  delete-node
  ---
  try_statement [2048,2783]
  ===
  ------------
  ===
  delete-node
  ---
  try_statement [2048,2783]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  method_declaration [3929,4349]
      identifier: assertInstantiable [3949,3967]
      method_parameters [3929,4349]
          formal_parameter: Class<?> c [3968,3978]
      block [3980,4349]
          local_variable_declaration: int modifiers = c.getModifiers(); [3986,4019]
          if_statement [4024,4182]
              parenthesized_expression [4027,4060]
                  method_invocation: Modifier.isInterface(modifiers) [4028,4059]
              block [4061,4182]
                  throw_statement: throw new UnsupportedOperationException("Interface can't be instantiated! Interface name: " + c.getName()); [4069,4176]
          if_statement [4187,4345]
              parenthesized_expression [4190,4222]
                  method_invocation: Modifier.isAbstract(modifiers) [4191,4221]
              block [4223,4345]
                  throw_statement: throw new UnsupportedOperationException("Abstract class can't be instantiated! Class name: " + c.getName()); [4231,4339]

...
