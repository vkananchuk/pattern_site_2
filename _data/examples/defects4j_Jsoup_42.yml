---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: FormElement
        children: []
        pos: 441
        length: 11
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private final Elements elements = new Elements();
          children: []
          pos: 475
          length: 49
        - type: constructor_declaration
          fields:
            text: |-
              public FormElement(Tag tag, String baseUri, Attributes attributes) {
                      super(tag, baseUri, attributes);
                  }
          children: []
          pos: 726
          length: 115
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: elements
              children: []
              pos: 1010
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 994
              length: 59
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return elements;
                children: []
                pos: 1031
                length: 16
              pos: 1021
              length: 32
          children: []
          pos: 994
          length: 59
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: addElement
              children: []
              pos: 1231
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Element element
                children: []
                pos: 1242
                length: 15
              pos: 1212
              length: 106
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: elements.add(element);
                children: []
                pos: 1269
                length: 22
              - type: return_statement
                fields:
                  text: return this;
                children: []
                pos: 1300
                length: 12
              pos: 1259
              length: 59
          children: []
          pos: 1212
          length: 106
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: submit
              children: []
              pos: 1793
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 1775
              length: 517
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: 'String action = hasAttr("action") ? absUrl("action") : baseUri();'
                children: []
                pos: 1812
                length: 65
              - type: expression_statement
                fields:
                  text: Validate.notEmpty(action, "Could not determine a form action
                    URL for submit. Ensure you set a base URI when parsing.");
                children: []
                pos: 1886
                length: 119
              - type: local_variable_declaration
                fields:
                  text: |-
                    Connection.Method method = attr("method").toUpperCase().equals("POST") ?
                                    Connection.Method.POST : Connection.Method.GET;
                children: []
                pos: 2014
                length: 136
              - type: local_variable_declaration
                fields:
                  text: |-
                    Connection con = Jsoup.connect(action)
                                    .data(formData())
                                    .method(method);
                children: []
                pos: 2160
                length: 105
              - type: return_statement
                fields:
                  text: return con;
                children: []
                pos: 2275
                length: 11
              pos: 1802
              length: 490
          children: []
          pos: 1775
          length: 517
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: formData
              children: []
              pos: 2545
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 2514
              length: 1657
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();
                children: []
                pos: 2566
                length: 71
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Element el: elements) {
                                if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
                                if (el.hasAttr("disabled")) continue; // skip disabled form inputs
                                String name = el.attr("name");
                                if (name.length() == 0) continue;
                                String type = el.attr("type");

                                if ("select".equals(el.tagName())) {
                                    Elements options = el.select("option[selected]");
                                    boolean set = false;
                                    for (Element option: options) {
                                        data.add(HttpConnection.KeyVal.create(name, option.val()));
                                        set = true;
                                    }
                                    if (!set) {
                                        Element option = el.select("option").first();
                                        if (option != null)
                                            data.add(HttpConnection.KeyVal.create(name, option.val()));
                                    }
                                } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                                    // only add checkbox or radio if they have the checked attribute
                                    if (el.hasAttr("checked")) {
                                        final String val = el.val().length() >  0 ? el.val() : "on";
                                        data.add(HttpConnection.KeyVal.create(name, val));
                                    }
                                } else {
                                    data.add(HttpConnection.KeyVal.create(name, el.val()));
                                }
                            }
                children: []
                pos: 2720
                length: 1424
              - type: return_statement
                fields:
                  text: return data;
                children: []
                pos: 4153
                length: 12
              pos: 2556
              length: 1615
          children: []
          pos: 2514
          length: 1657
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: equals
              children: []
              pos: 4206
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Object o
                children: []
                pos: 4213
                length: 8
              pos: 4177
              length: 85
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return super.equals(o);
                children: []
                pos: 4233
                length: 23
              pos: 4223
              length: 39
          children: []
          pos: 4177
          length: 85
        pos: 428
        length: 3836
    children: []
    pos: 428
    length: 3836
  pos: 0
  length: 4265
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: FormElement
        children: []
        pos: 441
        length: 11
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private final Elements elements = new Elements();
          children: []
          pos: 475
          length: 49
        - type: constructor_declaration
          fields:
            text: |-
              public FormElement(Tag tag, String baseUri, Attributes attributes) {
                      super(tag, baseUri, attributes);
                  }
          children: []
          pos: 726
          length: 115
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: elements
              children: []
              pos: 1010
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 994
              length: 59
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return elements;
                children: []
                pos: 1031
                length: 16
              pos: 1021
              length: 32
          children: []
          pos: 994
          length: 59
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: addElement
              children: []
              pos: 1231
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Element element
                children: []
                pos: 1242
                length: 15
              pos: 1212
              length: 106
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: elements.add(element);
                children: []
                pos: 1269
                length: 22
              - type: return_statement
                fields:
                  text: return this;
                children: []
                pos: 1300
                length: 12
              pos: 1259
              length: 59
          children: []
          pos: 1212
          length: 106
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: submit
              children: []
              pos: 1793
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 1775
              length: 517
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: 'String action = hasAttr("action") ? absUrl("action") : baseUri();'
                children: []
                pos: 1812
                length: 65
              - type: expression_statement
                fields:
                  text: Validate.notEmpty(action, "Could not determine a form action
                    URL for submit. Ensure you set a base URI when parsing.");
                children: []
                pos: 1886
                length: 119
              - type: local_variable_declaration
                fields:
                  text: |-
                    Connection.Method method = attr("method").toUpperCase().equals("POST") ?
                                    Connection.Method.POST : Connection.Method.GET;
                children: []
                pos: 2014
                length: 136
              - type: local_variable_declaration
                fields:
                  text: |-
                    Connection con = Jsoup.connect(action)
                                    .data(formData())
                                    .method(method);
                children: []
                pos: 2160
                length: 105
              - type: return_statement
                fields:
                  text: return con;
                children: []
                pos: 2275
                length: 11
              pos: 1802
              length: 490
          children: []
          pos: 1775
          length: 517
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: formData
              children: []
              pos: 2545
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 2514
              length: 1546
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();
                children: []
                pos: 2566
                length: 71
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Element el: elements) {
                                if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
                                String name = el.attr("name");
                                if (name.length() == 0) continue;
                                String type = el.attr("type");

                                if ("select".equals(el.tagName())) {
                                    Elements options = el.select("option[selected]");
                                    boolean set = false;
                                    for (Element option: options) {
                                        data.add(HttpConnection.KeyVal.create(name, option.val()));
                                        set = true;
                                    }
                                    if (!set) {
                                        Element option = el.select("option").first();
                                        if (option != null)
                                            data.add(HttpConnection.KeyVal.create(name, option.val()));
                                    }
                                } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                                    // only add checkbox or radio if they have the checked attribute
                                    if (el.hasAttr("checked")) {
                                        final String val = el.val();
                                        data.add(HttpConnection.KeyVal.create(name, val));
                                    }
                                } else {
                                    data.add(HttpConnection.KeyVal.create(name, el.val()));
                                }
                            }
                children: []
                pos: 2720
                length: 1313
              - type: return_statement
                fields:
                  text: return data;
                children: []
                pos: 4042
                length: 12
              pos: 2556
              length: 1504
          children: []
          pos: 2514
          length: 1546
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: equals
              children: []
              pos: 4095
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Object o
                children: []
                pos: 4102
                length: 8
              pos: 4066
              length: 85
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return super.equals(o);
                children: []
                pos: 4122
                length: 23
              pos: 4112
              length: 39
          children: []
          pos: 4066
          length: 85
        pos: 428
        length: 3725
    children: []
    pos: 428
    length: 3725
  pos: 0
  length: 4154
text_diff: |
  --- before
  +++ after
  @@ -77,7 +77,6 @@
           // iterate the form control elements and accumulate their values
           for (Element el: elements) {
               if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
  -            if (el.hasAttr("disabled")) continue; // skip disabled form inputs
               String name = el.attr("name");
               if (name.length() == 0) continue;
               String type = el.attr("type");
  @@ -97,7 +96,7 @@
               } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                   // only add checkbox or radio if they have the checked attribute
                   if (el.hasAttr("checked")) {
  -                    final String val = el.val().length() >  0 ? el.val() : "on";
  +                    final String val = el.val();
                       data.add(HttpConnection.KeyVal.create(name, val));
                   }
               } else {
tree_diff: |+
  New cluster:
  UPDATE from for (Element el: elements) {
              if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
              if (el.hasAttr("disabled")) continue; // skip disabled form inputs
              String name = el.attr("name");
              if (name.length() == 0) continue;
              String type = el.attr("type");

              if ("select".equals(el.tagName())) {
                  Elements options = el.select("option[selected]");
                  boolean set = false;
                  for (Element option: options) {
                      data.add(HttpConnection.KeyVal.create(name, option.val()));
                      set = true;
                  }
                  if (!set) {
                      Element option = el.select("option").first();
                      if (option != null)
                          data.add(HttpConnection.KeyVal.create(name, option.val()));
                  }
              } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                  // only add checkbox or radio if they have the checked attribute
                  if (el.hasAttr("checked")) {
                      final String val = el.val().length() >  0 ? el.val() : "on";
                      data.add(HttpConnection.KeyVal.create(name, val));
                  }
              } else {
                  data.add(HttpConnection.KeyVal.create(name, el.val()));
              }
          } to for (Element el: elements) {
              if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
              String name = el.attr("name");
              if (name.length() == 0) continue;
              String type = el.attr("type");

              if ("select".equals(el.tagName())) {
                  Elements options = el.select("option[selected]");
                  boolean set = false;
                  for (Element option: options) {
                      data.add(HttpConnection.KeyVal.create(name, option.val()));
                      set = true;
                  }
                  if (!set) {
                      Element option = el.select("option").first();
                      if (option != null)
                          data.add(HttpConnection.KeyVal.create(name, option.val()));
                  }
              } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                  // only add checkbox or radio if they have the checked attribute
                  if (el.hasAttr("checked")) {
                      final String val = el.val();
                      data.add(HttpConnection.KeyVal.create(name, val));
                  }
              } else {
                  data.add(HttpConnection.KeyVal.create(name, el.val()));
              }
          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Element el: elements) {
              if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
              if (el.hasAttr("disabled")) continue; // skip disabled form inputs
              String name = el.attr("name");
              if (name.length() == 0) continue;
              String type = el.attr("type");

              if ("select".equals(el.tagName())) {
                  Elements options = el.select("option[selected]");
                  boolean set = false;
                  for (Element option: options) {
                      data.add(HttpConnection.KeyVal.create(name, option.val()));
                      set = true;
                  }
                  if (!set) {
                      Element option = el.select("option").first();
                      if (option != null)
                          data.add(HttpConnection.KeyVal.create(name, option.val()));
                  }
              } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                  // only add checkbox or radio if they have the checked attribute
                  if (el.hasAttr("checked")) {
                      final String val = el.val().length() >  0 ? el.val() : "on";
                      data.add(HttpConnection.KeyVal.create(name, val));
                  }
              } else {
                  data.add(HttpConnection.KeyVal.create(name, el.val()));
              }
          } [2720,4144]
  replace for (Element el: elements) {
              if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
              if (el.hasAttr("disabled")) continue; // skip disabled form inputs
              String name = el.attr("name");
              if (name.length() == 0) continue;
              String type = el.attr("type");

              if ("select".equals(el.tagName())) {
                  Elements options = el.select("option[selected]");
                  boolean set = false;
                  for (Element option: options) {
                      data.add(HttpConnection.KeyVal.create(name, option.val()));
                      set = true;
                  }
                  if (!set) {
                      Element option = el.select("option").first();
                      if (option != null)
                          data.add(HttpConnection.KeyVal.create(name, option.val()));
                  }
              } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                  // only add checkbox or radio if they have the checked attribute
                  if (el.hasAttr("checked")) {
                      final String val = el.val().length() >  0 ? el.val() : "on";
                      data.add(HttpConnection.KeyVal.create(name, val));
                  }
              } else {
                  data.add(HttpConnection.KeyVal.create(name, el.val()));
              }
          } by for (Element el: elements) {
              if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable
              String name = el.attr("name");
              if (name.length() == 0) continue;
              String type = el.attr("type");

              if ("select".equals(el.tagName())) {
                  Elements options = el.select("option[selected]");
                  boolean set = false;
                  for (Element option: options) {
                      data.add(HttpConnection.KeyVal.create(name, option.val()));
                      set = true;
                  }
                  if (!set) {
                      Element option = el.select("option").first();
                      if (option != null)
                          data.add(HttpConnection.KeyVal.create(name, option.val()));
                  }
              } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
                  // only add checkbox or radio if they have the checked attribute
                  if (el.hasAttr("checked")) {
                      final String val = el.val();
                      data.add(HttpConnection.KeyVal.create(name, val));
                  }
              } else {
                  data.add(HttpConnection.KeyVal.create(name, el.val()));
              }
          }

...
