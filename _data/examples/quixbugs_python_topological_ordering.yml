---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: topological_ordering
        children: []
        pos: 4
        length: 20
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: nodes
          children: []
          pos: 25
          length: 5
        pos: 0
        length: 359
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: ordered_nodes = [node for node in nodes if not node.incoming_nodes]
          children: []
          pos: 37
          length: 67
        - type: for_statement
          fields:
            text: |-
              for node in ordered_nodes:
                      for nextnode in node.outgoing_nodes:
                          if set(ordered_nodes).issuperset(nextnode.outgoing_nodes) and nextnode not in ordered_nodes:
                              ordered_nodes.append(nextnode)
          children: []
          pos: 110
          length: 223
        - type: return_statement
          fields:
            text: return ordered_nodes
          children: []
          pos: 339
          length: 20
        pos: 37
        length: 322
    children: []
    pos: 0
    length: 359
  pos: 0
  length: 360
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: topological_ordering
        children: []
        pos: 4
        length: 20
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: nodes
          children: []
          pos: 25
          length: 5
        pos: 0
        length: 359
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: ordered_nodes = [node for node in nodes if not node.incoming_nodes]
          children: []
          pos: 37
          length: 67
        - type: for_statement
          fields:
            text: |-
              for node in ordered_nodes:
                      for nextnode in node.outgoing_nodes:
                          if set(ordered_nodes).issuperset(nextnode.incoming_nodes) and nextnode not in ordered_nodes:
                              ordered_nodes.append(nextnode)
          children: []
          pos: 110
          length: 223
        - type: return_statement
          fields:
            text: return ordered_nodes
          children: []
          pos: 339
          length: 20
        pos: 37
        length: 322
    children: []
    pos: 0
    length: 359
  pos: 0
  length: 360
text_diff: "--- before\n+++ after\n@@ -3,7 +3,7 @@\n \n     for node in ordered_nodes:\n
  \        for nextnode in node.outgoing_nodes:\n-            if set(ordered_nodes).issuperset(nextnode.outgoing_nodes)
  and nextnode not in ordered_nodes:\n+            if set(ordered_nodes).issuperset(nextnode.incoming_nodes)
  and nextnode not in ordered_nodes:\n                 ordered_nodes.append(nextnode)\n
  \n     return ordered_nodes\n"
tree_diff: |+
  New cluster:
  UPDATE from for node in ordered_nodes:
          for nextnode in node.outgoing_nodes:
              if set(ordered_nodes).issuperset(nextnode.outgoing_nodes) and nextnode not in ordered_nodes:
                  ordered_nodes.append(nextnode) to for node in ordered_nodes:
          for nextnode in node.outgoing_nodes:
              if set(ordered_nodes).issuperset(nextnode.incoming_nodes) and nextnode not in ordered_nodes:
                  ordered_nodes.append(nextnode)
  ------------
  ===
  update-node
  ---
  for_statement: for node in ordered_nodes:
          for nextnode in node.outgoing_nodes:
              if set(ordered_nodes).issuperset(nextnode.outgoing_nodes) and nextnode not in ordered_nodes:
                  ordered_nodes.append(nextnode) [110,333]
  replace for node in ordered_nodes:
          for nextnode in node.outgoing_nodes:
              if set(ordered_nodes).issuperset(nextnode.outgoing_nodes) and nextnode not in ordered_nodes:
                  ordered_nodes.append(nextnode) by for node in ordered_nodes:
          for nextnode in node.outgoing_nodes:
              if set(ordered_nodes).issuperset(nextnode.incoming_nodes) and nextnode not in ordered_nodes:
                  ordered_nodes.append(nextnode)

...
