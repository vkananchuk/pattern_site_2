---
language: python
text_diff: |
  --- before
  +++ after
  @@ -1,3 +1,4 @@
  +
   def kth(arr, k):
       pivot = arr[0]
       below = [x for x in arr if x < pivot]
  @@ -9,24 +10,6 @@
       if k < num_less:
           return kth(below, k)
       elif k >= num_lessoreq:
  -        return kth(above, k)
  +        return kth(above, k - num_lessoreq)
       else:
           return pivot
  -
  -
  -
  -"""
  -QuickSelect
  -
  -This is an efficient equivalent to sorted(arr)[k].
  -
  -Input:
  -    arr: A list of ints
  -    k: An int
  -
  -Precondition:
  -    0 <= k < len(arr)
  -
  -Output:
  -    The kth-lowest element of arr (0-based)
  -"""
tree_diff: |+
  New cluster:
  UPDATE from return kth(above, k) to return kth(above, k - num_lessoreq)
  ------------
  ===
  update-node
  ---
  return_statement: return kth(above, k) [275,295]
  replace return kth(above, k) by return kth(above, k - num_lessoreq)

  New cluster:
  ===
  delete-node
  ---
  expression_statement: """
  QuickSelect

  This is an efficient equivalent to sorted(arr)[k].

  Input:
      arr: A list of ints
      k: An int

  Precondition:
      0 <= k < len(arr)

  Output:
      The kth-lowest element of arr (0-based)
  """ [330,537]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: """
  QuickSelect

  This is an efficient equivalent to sorted(arr)[k].

  Input:
      arr: A list of ints
      k: An int

  Precondition:
      0 <= k < len(arr)

  Output:
      The kth-lowest element of arr (0-based)
  """ [330,537]
  ===

...
