---
language: python
text_diff: "--- before\n+++ after\n@@ -1,3 +1,4 @@\n+\n def lcs_length(s, t):\n     from
  collections import Counter\n \n@@ -6,26 +7,6 @@\n     for i in range(len(s)):\n
  \        for j in range(len(t)):\n             if s[i] == t[j]:\n-                dp[i,
  j] = dp[i - 1, j] + 1\n+                dp[i, j] = dp[i - 1, j - 1] + 1\n \n     return
  max(dp.values()) if dp else 0\n-\n-\n-\n-\"\"\"\n-Longest Common Substring\n-longest-common-substring\n-\n-Input:\n-
  \   s: a string\n-    t: a string\n-\n-Output:\n-    Length of the longest substring
  common to s and t\n-\n-Example:\n-    >>> lcs_length('witch', 'sandwich')\n-    2\n-
  \   >>> lcs_length('meow', 'homeowner')\n-    4\n-\"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j] + 1 to for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j - 1] + 1
  ------------
  ===
  update-node
  ---
  for_statement: for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j] + 1 [83,211]
  replace for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j] + 1 by for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j - 1] + 1

  New cluster:
  ===
  delete-node
  ---
  expression_statement: """
  Longest Common Substring
  longest-common-substring

  Input:
      s: a string
      t: a string

  Output:
      Length of the longest substring common to s and t

  Example:
      >>> lcs_length('witch', 'sandwich')
      2
      >>> lcs_length('meow', 'homeowner')
      4
  """ [257,519]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: """
  Longest Common Substring
  longest-common-substring

  Input:
      s: a string
      t: a string

  Output:
      Length of the longest substring common to s and t

  Example:
      >>> lcs_length('witch', 'sandwich')
      2
      >>> lcs_length('meow', 'homeowner')
      4
  """ [257,519]
  ===

...
