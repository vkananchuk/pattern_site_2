---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: lcs_length
        children: []
        pos: 4
        length: 10
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: s
          children: []
          pos: 15
          length: 1
        pos: 0
        length: 253
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: dp = Counter()
          children: []
          pos: 63
          length: 14
        - type: for_statement
          fields:
            text: |-
              for i in range(len(s)):
                      for j in range(len(t)):
                          if s[i] == t[j]:
                              dp[i, j] = dp[i - 1, j] + 1
          children: []
          pos: 83
          length: 128
        - type: return_statement
          fields:
            text: return max(dp.values()) if dp else 0
          children: []
          pos: 217
          length: 36
        pos: 26
        length: 227
    children: []
    pos: 0
    length: 253
  pos: 0
  length: 254
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: lcs_length
        children: []
        pos: 4
        length: 10
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: s
          children: []
          pos: 15
          length: 1
        pos: 0
        length: 257
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: dp = Counter()
          children: []
          pos: 63
          length: 14
        - type: for_statement
          fields:
            text: |-
              for i in range(len(s)):
                      for j in range(len(t)):
                          if s[i] == t[j]:
                              dp[i, j] = dp[i - 1, j - 1] + 1
          children: []
          pos: 83
          length: 132
        - type: return_statement
          fields:
            text: return max(dp.values()) if dp else 0
          children: []
          pos: 221
          length: 36
        pos: 26
        length: 231
    children: []
    pos: 0
    length: 257
  pos: 0
  length: 258
text_diff: "--- before\n+++ after\n@@ -6,6 +6,6 @@\n     for i in range(len(s)):\n
  \        for j in range(len(t)):\n             if s[i] == t[j]:\n-                dp[i,
  j] = dp[i - 1, j] + 1\n+                dp[i, j] = dp[i - 1, j - 1] + 1\n \n     return
  max(dp.values()) if dp else 0\n"
tree_diff: |+
  New cluster:
  UPDATE from for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j] + 1 to for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j - 1] + 1
  ------------
  ===
  update-node
  ---
  for_statement: for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j] + 1 [83,211]
  replace for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j] + 1 by for i in range(len(s)):
          for j in range(len(t)):
              if s[i] == t[j]:
                  dp[i, j] = dp[i - 1, j - 1] + 1

...
