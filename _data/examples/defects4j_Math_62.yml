---
language: java
text_diff: "--- before\n+++ after\n@@ -143,7 +143,7 @@\n                                                  final
  GoalType goal,\n                                                  final double min,
  final double max)\n         throws FunctionEvaluationException {\n-        return
  optimize(f, goal, min, max, min + 0.5 * (max - min));\n+        return optimize(f,
  goal, min, max, 0);\n     }\n \n     /** {@inheritDoc} */\n@@ -157,8 +157,9 @@\n
  \        // Multi-start loop.\n         for (int i = 0; i < starts; ++i) {\n             try
  {\n-                final double s = (i == 0) ? startValue : min + generator.nextDouble()
  * (max - min);\n-                optima[i] = optimizer.optimize(f, goal, min, max,
  s);\n+                final double bound1 = (i == 0) ? min : min + generator.nextDouble()
  * (max - min);\n+                final double bound2 = (i == 0) ? max : min + generator.nextDouble()
  * (max - min);\n+                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1,
  bound2), FastMath.max(bound1, bound2));\n             } catch (FunctionEvaluationException
  fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException
  ce) {\n"
tree_diff: |+
  New cluster:
  UPDATE from return optimize(f, goal, min, max, min + 0.5 * (max - min)); to return optimize(f, goal, min, max, 0);
  ------------
  ===
  update-node
  ---
  return_statement: return optimize(f, goal, min, max, min + 0.5 * (max - min)); [5957,6017]
  replace return optimize(f, goal, min, max, min + 0.5 * (max - min)); by return optimize(f, goal, min, max, 0);

  New cluster:
  UPDATE from for (int i = 0; i < starts; ++i) {
              try {
                  final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);
                  optima[i] = optimizer.optimize(f, goal, min, max, s);
              } catch (FunctionEvaluationException fee) {
                  optima[i] = null;
              } catch (ConvergenceException ce) {
                  optima[i] = null;
              }

              final int usedEvaluations = optimizer.getEvaluations();
              optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
              totalEvaluations += usedEvaluations;
          } to for (int i = 0; i < starts; ++i) {
              try {
                  final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
                  final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
                  optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
              } catch (FunctionEvaluationException fee) {
                  optima[i] = null;
              } catch (ConvergenceException ce) {
                  optima[i] = null;
              }

              final int usedEvaluations = optimizer.getEvaluations();
              optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
              totalEvaluations += usedEvaluations;
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int i = 0; i < starts; ++i) {
              try {
                  final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);
                  optima[i] = optimizer.optimize(f, goal, min, max, s);
              } catch (FunctionEvaluationException fee) {
                  optima[i] = null;
              } catch (ConvergenceException ce) {
                  optima[i] = null;
              }

              final int usedEvaluations = optimizer.getEvaluations();
              optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
              totalEvaluations += usedEvaluations;
          } [6465,7092]
  replace for (int i = 0; i < starts; ++i) {
              try {
                  final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);
                  optima[i] = optimizer.optimize(f, goal, min, max, s);
              } catch (FunctionEvaluationException fee) {
                  optima[i] = null;
              } catch (ConvergenceException ce) {
                  optima[i] = null;
              }

              final int usedEvaluations = optimizer.getEvaluations();
              optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
              totalEvaluations += usedEvaluations;
          } by for (int i = 0; i < starts; ++i) {
              try {
                  final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
                  final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
                  optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
              } catch (FunctionEvaluationException fee) {
                  optima[i] = null;
              } catch (ConvergenceException ce) {
                  optima[i] = null;
              }

              final int usedEvaluations = optimizer.getEvaluations();
              optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
              totalEvaluations += usedEvaluations;
          }

...
