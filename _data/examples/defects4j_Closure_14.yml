---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: ControlFlowAnalysis
        children: []
        pos: 1368
        length: 19
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 2004
          length: 40
        - type: field_declaration
          fields:
            text: private ControlFlowGraph<Node> cfg;
          children: []
          pos: 2048
          length: 35
        - type: field_declaration
          fields:
            text: private Map<Node, Integer> astPosition;
          children: []
          pos: 2087
          length: 39
        - type: field_declaration
          fields:
            text: private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;
          children: []
          pos: 2187
          length: 63
        - type: field_declaration
          fields:
            text: |-
              private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =
                    new Comparator<DiGraphNode<Node, Branch>>() {
                  @Override
                  public int compare(
                      DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {
                    return astPosition.get(a.getValue()) - astPosition.get(b.getValue());
                  }
                };
          children: []
          pos: 2450
          length: 317
        - type: field_declaration
          fields:
            text: private int astPositionCounter;
          children: []
          pos: 2771
          length: 31
        - type: field_declaration
          fields:
            text: private int priorityCounter;
          children: []
          pos: 2805
          length: 28
        - type: field_declaration
          fields:
            text: private final boolean shouldTraverseFunctions;
          children: []
          pos: 2837
          length: 46
        - type: field_declaration
          fields:
            text: private final boolean edgeAnnotations;
          children: []
          pos: 2886
          length: 38
        - type: field_declaration
          fields:
            text: private Node root;
          children: []
          pos: 3115
          length: 18
        - type: field_declaration
          fields:
            text: private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();
          children: []
          pos: 3380
          length: 68
        - type: field_declaration
          fields:
            text: private final Multimap<Node, Node> finallyMap = HashMultimap.create();
          children: []
          pos: 4076
          length: 70
        - type: constructor_declaration
          fields:
            text: |-
              ControlFlowAnalysis(AbstractCompiler compiler,
                    boolean shouldTraverseFunctions, boolean edgeAnnotations) {
                  this.compiler = compiler;
                  this.shouldTraverseFunctions = shouldTraverseFunctions;
                  this.edgeAnnotations = edgeAnnotations;
                }
          children: []
          pos: 4444
          length: 250
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getCfg
              children: []
              pos: 4721
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4698
              length: 53
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return cfg;
                children: []
                pos: 4736
                length: 11
              pos: 4730
              length: 21
          children: []
          pos: 4698
          length: 53
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 4779
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 4787
                length: 12
              pos: 4755
              length: 1736
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: this.root = root;
                children: []
                pos: 4818
                length: 17
              - type: expression_statement
                fields:
                  text: astPositionCounter = 0;
                children: []
                pos: 4840
                length: 23
              - type: expression_statement
                fields:
                  text: astPosition = Maps.newHashMap();
                children: []
                pos: 4868
                length: 32
              - type: expression_statement
                fields:
                  text: nodePriorities = Maps.newHashMap();
                children: []
                pos: 4905
                length: 35
              - type: expression_statement
                fields:
                  text: |-
                    cfg = new AstControlFlowGraph(computeFallThrough(root), nodePriorities,
                                                      edgeAnnotations);
                children: []
                pos: 4945
                length: 123
              - type: expression_statement
                fields:
                  text: NodeTraversal.traverse(compiler, root, this);
                children: []
                pos: 5073
                length: 45
              - type: expression_statement
                fields:
                  text: astPosition.put(null, ++astPositionCounter);
                children: []
                pos: 5123
                length: 44
              - type: expression_statement
                fields:
                  text: priorityCounter = 0;
                children: []
                pos: 5297
                length: 20
              - type: local_variable_declaration
                fields:
                  text: DiGraphNode<Node, Branch> entry = cfg.getEntry();
                children: []
                pos: 5322
                length: 49
              - type: expression_statement
                fields:
                  text: prioritizeFromEntryNode(entry);
                children: []
                pos: 5376
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: shouldTraverseFunctions
                        children: []
                        pos: 5417
                        length: 23
                    children: []
                    pos: 5416
                    length: 25
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {
                                Node value = candidate.getValue();
                                if (value != null && value.isFunction()) {
                                  Preconditions.checkState(
                                      !nodePriorities.containsKey(candidate) || candidate == entry);
                                  prioritizeFromEntryNode(candidate);
                                }
                              }
                    children: []
                    pos: 5547
                    length: 344
                  pos: 5442
                  length: 455
                pos: 5413
                length: 484
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {
                          if (!nodePriorities.containsKey(candidate)) {
                            nodePriorities.put(candidate, ++priorityCounter);
                          }
                        }
                children: []
                pos: 6166
                length: 197
              - type: expression_statement
                fields:
                  text: nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);
                children: []
                pos: 6424
                length: 63
              pos: 4812
              length: 1679
          children: []
          pos: 4755
          length: 1736
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: prioritizeFromEntryNode
              children: []
              pos: 6616
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DiGraphNode<Node, Branch> entry
                children: []
                pos: 6640
                length: 31
              pos: 6603
              length: 667
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    PriorityQueue<DiGraphNode<Node, Branch>> worklist =
                            new PriorityQueue<DiGraphNode<Node, Branch>>(10, priorityComparator);
                children: []
                pos: 6679
                length: 129
              - type: expression_statement
                fields:
                  text: worklist.add(entry);
                children: []
                pos: 6813
                length: 20
              - type: while_statement
                fields:
                  text: |-
                    while (!worklist.isEmpty()) {
                          DiGraphNode<Node, Branch> current = worklist.remove();
                          if (nodePriorities.containsKey(current)) {
                            continue;
                          }

                          nodePriorities.put(current, ++priorityCounter);

                          List<DiGraphNode<Node, Branch>> successors =
                              cfg.getDirectedSuccNodes(current);
                          for (DiGraphNode<Node, Branch> candidate : successors) {
                            worklist.add(candidate);
                          }
                        }
                children: []
                pos: 6839
                length: 427
              pos: 6673
              length: 597
          children: []
          pos: 6603
          length: 667
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shouldTraverse
              children: []
              pos: 7301
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal nodeTraversal
                children: []
                pos: 7323
                length: 27
              pos: 7274
              length: 2754
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: astPosition.put(n, astPositionCounter++);
                children: []
                pos: 7379
                length: 41
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 7434
                        length: 11
                    children: []
                    pos: 7433
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.FUNCTION:
                                if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) {
                                  exceptionHandler.push(n);
                                  return true;
                                }
                                return false;
                              case Token.TRY:
                                exceptionHandler.push(n);
                                return true;
                            }
                    children: []
                    pos: 7447
                    length: 275
                children: []
                pos: 7426
                length: 296
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parent
                            children: []
                            pos: 8501
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 8511
                            length: 4
                        children: []
                        pos: 8501
                        length: 14
                    children: []
                    pos: 8500
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: switch_expression
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: parent.getType()
                            children: []
                            pos: 8533
                            length: 16
                        children: []
                        pos: 8532
                        length: 18
                      body:
                        type: switch_block
                        fields:
                          text: |-
                            {
                                    case Token.FOR:
                                      // Only traverse the body of the for loop.
                                      return n == parent.getLastChild();

                                    // Skip the conditions.
                                    case Token.IF:
                                    case Token.WHILE:
                                    case Token.WITH:
                                      return n != parent.getFirstChild();
                                    case Token.DO:
                                      return n != parent.getFirstChild().getNext();
                                    // Only traverse the body of the cases
                                    case Token.SWITCH:
                                    case Token.CASE:
                                    case Token.CATCH:
                                    case Token.LABEL:
                                      return n != parent.getFirstChild();
                                    case Token.FUNCTION:
                                      return n == parent.getFirstChild().getNext().getNext();
                                    case Token.CONTINUE:
                                    case Token.BREAK:
                                    case Token.EXPR_RESULT:
                                    case Token.VAR:
                                    case Token.RETURN:
                                    case Token.THROW:
                                      return false;
                                    case Token.TRY:
                                      /* Just before we are about to visit the second child of the TRY node,
                                       * we know that we will be visiting either the CATCH or the FINALLY.
                                       * In other words, we know that the post order traversal of the TRY
                                       * block has been finished, no more exceptions can be caught by the
                                       * handler at this TRY block and should be taken out of the stack.
                                       */
                                      if (n == parent.getFirstChild().getNext()) {
                                        Preconditions.checkState(exceptionHandler.peek() == parent);
                                        exceptionHandler.pop();
                                      }
                                  }
                        children: []
                        pos: 8551
                        length: 1450
                    children: []
                    pos: 8525
                    length: 1476
                  pos: 8517
                  length: 1490
                pos: 8497
                length: 1510
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 10012
                length: 12
              pos: 7373
              length: 2655
          children: []
          pos: 7274
          length: 2754
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 10056
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 10062
                length: 15
              pos: 10032
              length: 1322
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 10114
                        length: 11
                    children: []
                    pos: 10113
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.IF:
                                handleIf(n);
                                return;
                              case Token.WHILE:
                                handleWhile(n);
                                return;
                              case Token.DO:
                                handleDo(n);
                                return;
                              case Token.FOR:
                                handleFor(n);
                                return;
                              case Token.SWITCH:
                                handleSwitch(n);
                                return;
                              case Token.CASE:
                                handleCase(n);
                                return;
                              case Token.DEFAULT_CASE:
                                handleDefault(n);
                                return;
                              case Token.BLOCK:
                              case Token.SCRIPT:
                                handleStmtList(n);
                                return;
                              case Token.FUNCTION:
                                handleFunction(n);
                                return;
                              case Token.EXPR_RESULT:
                                handleExpr(n);
                                return;
                              case Token.THROW:
                                handleThrow(n);
                                return;
                              case Token.TRY:
                                handleTry(n);
                                return;
                              case Token.CATCH:
                                handleCatch(n);
                                return;
                              case Token.BREAK:
                                handleBreak(n);
                                return;
                              case Token.CONTINUE:
                                handleContinue(n);
                                return;
                              case Token.RETURN:
                                handleReturn(n);
                                return;
                              case Token.WITH:
                                handleWith(n);
                                return;
                              case Token.LABEL:
                                return;
                              default:
                                handleStmt(n);
                                return;
                            }
                    children: []
                    pos: 10127
                    length: 1223
                children: []
                pos: 10106
                length: 1244
              pos: 10100
              length: 1254
          children: []
          pos: 10032
          length: 1322
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleIf
              children: []
              pos: 11371
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 11380
                length: 9
              pos: 11358
              length: 518
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node thenBlock = node.getFirstChild().getNext();
                children: []
                pos: 11397
                length: 48
              - type: local_variable_declaration
                fields:
                  text: Node elseBlock = thenBlock.getNext();
                children: []
                pos: 11450
                length: 37
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));
                children: []
                pos: 11492
                length: 64
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: elseBlock
                            children: []
                            pos: 11566
                            length: 9
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 11579
                            length: 4
                        children: []
                        pos: 11566
                        length: 17
                    children: []
                    pos: 11565
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        createEdge(node, Branch.ON_FALSE,
                                  computeFollowNode(node, this));
                    children: []
                    pos: 11593
                    length: 75
                  pos: 11585
                  length: 109
                pos: 11562
                length: 217
              - type: expression_statement
                fields:
                  text: |-
                    connectToPossibleExceptionHandler(
                            node, NodeUtil.getConditionExpression(node));
                children: []
                pos: 11784
                length: 88
              pos: 11391
              length: 485
          children: []
          pos: 11358
          length: 518
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleWhile
              children: []
              pos: 11893
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 11905
                length: 9
              pos: 11880
              length: 463
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.ON_TRUE,
                            computeFallThrough(node.getFirstChild().getNext()));
                children: []
                pos: 12001
                length: 93
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.ON_FALSE,
                            computeFollowNode(node, this));
                children: []
                pos: 12173
                length: 73
              - type: expression_statement
                fields:
                  text: |-
                    connectToPossibleExceptionHandler(
                            node, NodeUtil.getConditionExpression(node));
                children: []
                pos: 12251
                length: 88
              pos: 11916
              length: 427
          children: []
          pos: 11880
          length: 463
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleDo
              children: []
              pos: 12360
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 12369
                length: 9
              pos: 12347
              length: 444
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.ON_TRUE, computeFallThrough(node.getFirstChild()));
                children: []
                pos: 12477
                length: 75
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.ON_FALSE,
                            computeFollowNode(node, this));
                children: []
                pos: 12621
                length: 73
              - type: expression_statement
                fields:
                  text: |-
                    connectToPossibleExceptionHandler(
                            node, NodeUtil.getConditionExpression(node));
                children: []
                pos: 12699
                length: 88
              pos: 12380
              length: 411
          children: []
          pos: 12347
          length: 444
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleFor
              children: []
              pos: 12808
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node forNode
                children: []
                pos: 12818
                length: 12
              pos: 12795
              length: 1800
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: forNode.getChildCount()
                            children: []
                            pos: 12842
                            length: 23
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '4'
                            children: []
                            pos: 12869
                            length: 1
                        children: []
                        pos: 12842
                        length: 28
                    children: []
                    pos: 12841
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Node init = forNode.getFirstChild();
                    children: []
                    pos: 12929
                    length: 36
                  - type: local_variable_declaration
                    fields:
                      text: Node cond = init.getNext();
                    children: []
                    pos: 12972
                    length: 27
                  - type: local_variable_declaration
                    fields:
                      text: Node iter = cond.getNext();
                    children: []
                    pos: 13006
                    length: 27
                  - type: local_variable_declaration
                    fields:
                      text: Node body = iter.getNext();
                    children: []
                    pos: 13040
                    length: 27
                  - type: expression_statement
                    fields:
                      text: createEdge(init, Branch.UNCOND, forNode);
                    children: []
                    pos: 13204
                    length: 41
                  - type: expression_statement
                    fields:
                      text: createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body));
                    children: []
                    pos: 13327
                    length: 62
                  - type: expression_statement
                    fields:
                      text: |-
                        createEdge(forNode, Branch.ON_FALSE,
                                  computeFollowNode(forNode, this));
                    children: []
                    pos: 13434
                    length: 81
                  - type: expression_statement
                    fields:
                      text: createEdge(iter, Branch.UNCOND, forNode);
                    children: []
                    pos: 13766
                    length: 41
                  - type: expression_statement
                    fields:
                      text: connectToPossibleExceptionHandler(init, init);
                    children: []
                    pos: 13814
                    length: 46
                  - type: expression_statement
                    fields:
                      text: connectToPossibleExceptionHandler(forNode, cond);
                    children: []
                    pos: 13867
                    length: 49
                  - type: expression_statement
                    fields:
                      text: connectToPossibleExceptionHandler(iter, iter);
                    children: []
                    pos: 13923
                    length: 46
                  pos: 12872
                  length: 1103
                pos: 12838
                length: 1753
              pos: 12832
              length: 1763
          children: []
          pos: 12795
          length: 1800
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleSwitch
              children: []
              pos: 14612
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 14625
                length: 9
              pos: 14599
              length: 732
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node next = getNextSiblingOfType(
                            node.getFirstChild().getNext(), Token.CASE, Token.EMPTY);
                children: []
                pos: 14758
                length: 99
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: next
                            children: []
                            pos: 14866
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 14874
                            length: 4
                        children: []
                        pos: 14866
                        length: 12
                    children: []
                    pos: 14865
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.UNCOND, next);
                    children: []
                    pos: 14922
                    length: 38
                  pos: 14880
                  length: 86
                pos: 14862
                length: 398
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node.getFirstChild());
                children: []
                pos: 15265
                length: 62
              pos: 14636
              length: 695
          children: []
          pos: 14599
          length: 732
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleCase
              children: []
              pos: 15348
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 15359
                length: 9
              pos: 15335
              length: 982
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.ON_TRUE,
                            node.getFirstChild().getNext());
                children: []
                pos: 15457
                length: 73
              - type: local_variable_declaration
                fields:
                  text: Node next = getNextSiblingOfType(node.getNext(), Token.CASE);
                children: []
                pos: 15589
                length: 61
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: next
                            children: []
                            pos: 15659
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 15667
                            length: 4
                        children: []
                        pos: 15659
                        length: 12
                    children: []
                    pos: 15658
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: Preconditions.checkState(next.isCase());
                    children: []
                    pos: 15697
                    length: 40
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.ON_FALSE, next);
                    children: []
                    pos: 15744
                    length: 40
                  pos: 15673
                  length: 117
                pos: 15655
                length: 591
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node.getFirstChild());
                children: []
                pos: 16251
                length: 62
              pos: 15370
              length: 947
          children: []
          pos: 15335
          length: 982
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleDefault
              children: []
              pos: 16334
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 16348
                length: 9
              pos: 16321
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, node.getFirstChild());
                children: []
                pos: 16440
                length: 54
              pos: 16359
              length: 139
          children: []
          pos: 16321
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleWith
              children: []
              pos: 16515
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 16526
                length: 9
              pos: 16502
              length: 240
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, node.getLastChild());
                children: []
                pos: 16618
                length: 53
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node.getFirstChild());
                children: []
                pos: 16676
                length: 62
              pos: 16537
              length: 205
          children: []
          pos: 16502
          length: 240
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleStmtList
              children: []
              pos: 16759
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 16774
                length: 9
              pos: 16746
              length: 1213
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node parent = node.getParent();
                children: []
                pos: 16791
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: and
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: node.isBlock()
                                        children: []
                                        pos: 16905
                                        length: 14
                                      right:
                                        type: not_equals
                                        fields:
                                          left:
                                            type: identifier
                                            fields:
                                              text: parent
                                            children: []
                                            pos: 16923
                                            length: 6
                                          right:
                                            type: null_literal
                                            fields: {}
                                            children: []
                                            pos: 16933
                                            length: 4
                                        children: []
                                        pos: 16923
                                        length: 14
                                    children: []
                                    pos: 16905
                                    length: 32
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: parent.isTry()
                                    children: []
                                    pos: 16949
                                    length: 14
                                children: []
                                pos: 16905
                                length: 58
                              right:
                                type: equals
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: NodeUtil.getCatchBlock(parent)
                                    children: []
                                    pos: 16975
                                    length: 30
                                  right:
                                    type: identifier
                                    fields:
                                      text: node
                                    children: []
                                    pos: 17009
                                    length: 4
                                children: []
                                pos: 16975
                                length: 38
                            children: []
                            pos: 16905
                            length: 108
                          right:
                            type: unary_expression
                            fields:
                              text: "!NodeUtil.hasCatchHandler(node)"
                            children: []
                            pos: 17025
                            length: 31
                        children: []
                        pos: 16905
                        length: 151
                    children: []
                    pos: 16904
                    length: 153
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 17066
                    length: 7
                  pos: 17058
                  length: 21
                pos: 16901
                length: 178
              - type: local_variable_declaration
                fields:
                  text: Node child = node.getFirstChild();
                children: []
                pos: 17156
                length: 34
              - type: while_statement
                fields:
                  text: |-
                    while (child != null && child.isFunction()) {
                          child = child.getNext();
                        }
                children: []
                pos: 17310
                length: 82
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: child
                            children: []
                            pos: 17402
                            length: 5
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 17411
                            length: 4
                        children: []
                        pos: 17402
                        length: 13
                    children: []
                    pos: 17401
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.UNCOND, computeFallThrough(child));
                    children: []
                    pos: 17425
                    length: 59
                  pos: 17417
                  length: 73
                pos: 17398
                length: 175
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parent
                            children: []
                            pos: 17607
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 17617
                            length: 4
                        children: []
                        pos: 17607
                        length: 14
                    children: []
                    pos: 17606
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: switch_expression
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: parent.getType()
                            children: []
                            pos: 17639
                            length: 16
                        children: []
                        pos: 17638
                        length: 18
                      body:
                        type: switch_block
                        fields:
                          text: |-
                            {
                                    case Token.DEFAULT_CASE:
                                    case Token.CASE:
                                    case Token.TRY:
                                      break;
                                    default:
                                      if (node.isBlock() && node.isSyntheticBlock()) {
                                        createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));
                                      }
                                      break;
                                  }
                        children: []
                        pos: 17657
                        length: 292
                    children: []
                    pos: 17631
                    length: 318
                  pos: 17623
                  length: 332
                pos: 17603
                length: 352
              pos: 16785
              length: 1174
          children: []
          pos: 16746
          length: 1213
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleFunction
              children: []
              pos: 17976
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 17991
                length: 9
              pos: 17963
              length: 370
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(node.getChildCount() >= 3);
                children: []
                pos: 18079
                length: 52
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.UNCOND,
                            computeFallThrough(node.getFirstChild().getNext().getNext()));
                children: []
                pos: 18136
                length: 102
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(exceptionHandler.peek() == node);
                children: []
                pos: 18243
                length: 58
              - type: expression_statement
                fields:
                  text: exceptionHandler.pop();
                children: []
                pos: 18306
                length: 23
              pos: 18002
              length: 331
          children: []
          pos: 17963
          length: 370
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleExpr
              children: []
              pos: 18350
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18361
                length: 9
              pos: 18337
              length: 159
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, computeFollowNode(node, this));
                children: []
                pos: 18378
                length: 63
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node);
                children: []
                pos: 18446
                length: 46
              pos: 18372
              length: 124
          children: []
          pos: 18337
          length: 159
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleThrow
              children: []
              pos: 18513
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18525
                length: 9
              pos: 18500
              length: 92
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node);
                children: []
                pos: 18542
                length: 46
              pos: 18536
              length: 56
          children: []
          pos: 18500
          length: 92
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleTry
              children: []
              pos: 18609
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18619
                length: 9
              pos: 18596
              length: 98
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, node.getFirstChild());
                children: []
                pos: 18636
                length: 54
              pos: 18630
              length: 64
          children: []
          pos: 18596
          length: 98
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleCatch
              children: []
              pos: 18711
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18723
                length: 9
              pos: 18698
              length: 99
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, node.getLastChild());
                children: []
                pos: 18740
                length: 53
              pos: 18734
              length: 63
          children: []
          pos: 18698
          length: 99
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleBreak
              children: []
              pos: 18814
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18826
                length: 9
              pos: 18801
              length: 1829
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String label = null;
                children: []
                pos: 18843
                length: 20
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: node.hasChildren()
                        children: []
                        pos: 18912
                        length: 18
                    children: []
                    pos: 18911
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: label = node.getFirstChild().getString();
                    children: []
                    pos: 18940
                    length: 41
                  pos: 18932
                  length: 55
                pos: 18908
                length: 79
              - type: local_variable_declaration
                fields:
                  text: Node cur;
                children: []
                pos: 18992
                length: 9
              - type: local_variable_declaration
                fields:
                  text: Node previous = null;
                children: []
                pos: 19006
                length: 21
              - type: local_variable_declaration
                fields:
                  text: Node lastJump;
                children: []
                pos: 19032
                length: 14
              - type: local_variable_declaration
                fields:
                  text: Node parent = node.getParent();
                children: []
                pos: 19051
                length: 31
              - type: for_statement
                fields:
                  text: |-
                    for (cur = node, lastJump = node;
                            !isBreakTarget(cur, label);
                            cur = parent, parent = parent.getParent()) {
                          if (cur.isTry() && NodeUtil.hasFinally(cur)
                              && cur.getLastChild() != previous) {
                            if (lastJump == node) {
                              createEdge(lastJump, Branch.UNCOND, computeFallThrough(
                                  cur.getLastChild()));
                            } else {
                              finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));
                            }
                            lastJump = cur;
                          }
                          if (parent == null) {
                            if (compiler.isIdeMode()) {
                              // In IDE mode, we expect that the data flow graph may
                              // not be well-formed.
                              return;
                            } else {
                              throw new IllegalStateException("Cannot find break target.");
                            }
                          }
                          previous = cur;
                        }
                children: []
                pos: 19641
                length: 803
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lastJump
                            children: []
                            pos: 20453
                            length: 8
                          right:
                            type: identifier
                            fields:
                              text: node
                            children: []
                            pos: 20465
                            length: 4
                        children: []
                        pos: 20453
                        length: 16
                    children: []
                    pos: 20452
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur,
                        this));
                    children: []
                    pos: 20479
                    length: 66
                  pos: 20471
                  length: 80
                pos: 20449
                length: 177
              pos: 18837
              length: 1793
          children: []
          pos: 18801
          length: 1829
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleContinue
              children: []
              pos: 20647
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 20662
                length: 9
              pos: 20634
              length: 1138
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String label = null;
                children: []
                pos: 20679
                length: 20
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: node.hasChildren()
                        children: []
                        pos: 20708
                        length: 18
                    children: []
                    pos: 20707
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: label = node.getFirstChild().getString();
                    children: []
                    pos: 20736
                    length: 41
                  pos: 20728
                  length: 55
                pos: 20704
                length: 79
              - type: local_variable_declaration
                fields:
                  text: Node cur;
                children: []
                pos: 20788
                length: 9
              - type: local_variable_declaration
                fields:
                  text: Node previous = null;
                children: []
                pos: 20802
                length: 21
              - type: local_variable_declaration
                fields:
                  text: Node lastJump;
                children: []
                pos: 20828
                length: 14
              - type: local_variable_declaration
                fields:
                  text: Node parent = node.getParent();
                children: []
                pos: 20912
                length: 31
              - type: for_statement
                fields:
                  text: |-
                    for (cur = node, lastJump = node;
                            !isContinueTarget(cur, parent, label);
                            cur = parent, parent = parent.getParent()) {
                          if (cur.isTry() && NodeUtil.hasFinally(cur)
                              && cur.getLastChild() != previous) {
                            if (lastJump == node) {
                              createEdge(lastJump, Branch.UNCOND, cur.getLastChild());
                            } else {
                              finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));
                            }
                            lastJump = cur;
                          }
                          Preconditions.checkState(parent != null, "Cannot find continue target.");
                          previous = cur;
                        }
                children: []
                pos: 20948
                length: 572
              - type: local_variable_declaration
                fields:
                  text: Node iter = cur;
                children: []
                pos: 21525
                length: 16
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: cur.getChildCount()
                            children: []
                            pos: 21550
                            length: 19
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '4'
                            children: []
                            pos: 21573
                            length: 1
                        children: []
                        pos: 21550
                        length: 24
                    children: []
                    pos: 21549
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: iter = cur.getFirstChild().getNext().getNext();
                    children: []
                    pos: 21584
                    length: 47
                  pos: 21576
                  length: 61
                pos: 21546
                length: 91
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lastJump
                            children: []
                            pos: 21647
                            length: 8
                          right:
                            type: identifier
                            fields:
                              text: node
                            children: []
                            pos: 21659
                            length: 4
                        children: []
                        pos: 21647
                        length: 16
                    children: []
                    pos: 21646
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.UNCOND, iter);
                    children: []
                    pos: 21673
                    length: 38
                  pos: 21665
                  length: 52
                pos: 21643
                length: 125
              pos: 20673
              length: 1099
          children: []
          pos: 20634
          length: 1138
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleReturn
              children: []
              pos: 21789
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 21802
                length: 9
              pos: 21776
              length: 797
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node lastJump = null;
                children: []
                pos: 21819
                length: 21
              - type: for_statement
                fields:
                  text: |-
                    for (Iterator<Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
                          Node curHandler = iter.next();
                          if (curHandler.isFunction()) {
                            break;
                          }
                          if (NodeUtil.hasFinally(curHandler)) {
                            if (lastJump == null) {
                              createEdge(node, Branch.UNCOND, curHandler.getLastChild());
                            } else {
                              finallyMap.put(lastJump,
                                  computeFallThrough(curHandler.getLastChild()));
                            }
                            lastJump = curHandler;
                          }
                        }
                children: []
                pos: 21845
                length: 487
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: node.hasChildren()
                        children: []
                        pos: 22342
                        length: 18
                    children: []
                    pos: 22341
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: connectToPossibleExceptionHandler(node, node.getFirstChild());
                    children: []
                    pos: 22370
                    length: 62
                  pos: 22362
                  length: 76
                pos: 22338
                length: 100
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lastJump
                            children: []
                            pos: 22448
                            length: 8
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 22460
                            length: 4
                        children: []
                        pos: 22448
                        length: 16
                    children: []
                    pos: 22447
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.UNCOND, null);
                    children: []
                    pos: 22474
                    length: 38
                  pos: 22466
                  length: 52
                pos: 22444
                length: 125
              pos: 21813
              length: 760
          children: []
          pos: 21776
          length: 797
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleStmt
              children: []
              pos: 22590
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 22601
                length: 9
              pos: 22577
              length: 200
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, computeFollowNode(node, this));
                children: []
                pos: 22659
                length: 63
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node);
                children: []
                pos: 22727
                length: 46
              pos: 22612
              length: 165
          children: []
          pos: 22577
          length: 200
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFollowNode
              children: []
              pos: 22793
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 22811
                length: 9
              pos: 22781
              length: 118
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return computeFollowNode(node, node, cfa);
                children: []
                pos: 22853
                length: 42
              pos: 22847
              length: 52
          children: []
          pos: 22781
          length: 118
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFollowNode
              children: []
              pos: 22915
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 22933
                length: 9
              pos: 22903
              length: 94
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return computeFollowNode(node, node, null);
                children: []
                pos: 22950
                length: 43
              pos: 22944
              length: 53
          children: []
          pos: 22903
          length: 94
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFollowNode
              children: []
              pos: 23475
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node fromNode
                children: []
                pos: 23500
                length: 13
              pos: 23455
              length: 3646
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node parent = node.getParent();
                children: []
                pos: 24198
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: parent
                                    children: []
                                    pos: 24238
                                    length: 6
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 24248
                                    length: 4
                                children: []
                                pos: 24238
                                length: 14
                              right:
                                type: method_invocation
                                fields:
                                  text: parent.isFunction()
                                children: []
                                pos: 24256
                                length: 19
                            children: []
                            pos: 24238
                            length: 37
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: not_equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: cfa
                                        children: []
                                        pos: 24288
                                        length: 3
                                      right:
                                        type: null_literal
                                        fields: {}
                                        children: []
                                        pos: 24295
                                        length: 4
                                    children: []
                                    pos: 24288
                                    length: 11
                                  right:
                                    type: equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: node
                                        children: []
                                        pos: 24303
                                        length: 4
                                      right:
                                        type: field_access
                                        fields:
                                          text: cfa.root
                                        children: []
                                        pos: 24311
                                        length: 8
                                    children: []
                                    pos: 24303
                                    length: 16
                                children: []
                                pos: 24288
                                length: 31
                            children: []
                            pos: 24287
                            length: 33
                        children: []
                        pos: 24238
                        length: 82
                    children: []
                    pos: 24237
                    length: 84
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return null;
                    children: []
                    pos: 24330
                    length: 12
                  pos: 24322
                  length: 26
                pos: 24234
                length: 114
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: parent.getType()
                        children: []
                        pos: 24410
                        length: 16
                    children: []
                    pos: 24409
                    length: 18
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              // The follow() of any of the path from IF would be what follows IF.
                              case Token.IF:
                                return computeFollowNode(fromNode, parent, cfa);
                              case Token.CASE:
                              case Token.DEFAULT_CASE:
                                // After the body of a CASE, the control goes to the body of the next
                                // case, without having to go to the case condition.
                                if (parent.getNext() != null) {
                                  if (parent.getNext().isCase()) {
                                    return parent.getNext().getFirstChild().getNext();
                                  } else if (parent.getNext().isDefaultCase()) {
                                    return parent.getNext().getFirstChild();
                                  } else {
                                    Preconditions.checkState(false, "Not reachable");
                                  }
                                } else {
                                  return computeFollowNode(fromNode, parent, cfa);
                                }
                                break;
                              case Token.FOR:
                                if (NodeUtil.isForIn(parent)) {
                                  return parent;
                                } else {
                                  return parent.getFirstChild().getNext().getNext();
                                }
                              case Token.WHILE:
                              case Token.DO:
                                return parent;
                              case Token.TRY:
                                // If we are coming out of the TRY block...
                                if (parent.getFirstChild() == node) {
                                  if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
                                    return computeFallThrough(parent.getLastChild());
                                  } else { // and have no FINALLY.
                                    return computeFollowNode(fromNode, parent, cfa);
                                  }
                                // CATCH block.
                                } else if (NodeUtil.getCatchBlock(parent) == node){
                                  if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
                                    return computeFallThrough(node.getNext());
                                  } else {
                                    return computeFollowNode(fromNode, parent, cfa);
                                  }
                                // If we are coming out of the FINALLY block...
                                } else if (parent.getLastChild() == node){
                                  if (cfa != null) {
                                    for (Node finallyNode : cfa.finallyMap.get(parent)) {
                                      cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
                                    }
                                  }
                                  return computeFollowNode(fromNode, parent, cfa);
                                }
                            }
                    children: []
                    pos: 24428
                    length: 2083
                children: []
                pos: 24402
                length: 2109
              - type: local_variable_declaration
                fields:
                  text: Node nextSibling = node.getNext();
                children: []
                pos: 26648
                length: 34
              - type: while_statement
                fields:
                  text: |-
                    while (nextSibling != null && nextSibling.isFunction()) {
                          nextSibling = nextSibling.getNext();
                        }
                children: []
                pos: 26764
                length: 106
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: nextSibling
                            children: []
                            pos: 26880
                            length: 11
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 26895
                            length: 4
                        children: []
                        pos: 26880
                        length: 19
                    children: []
                    pos: 26879
                    length: 21
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return computeFallThrough(nextSibling);
                    children: []
                    pos: 26909
                    length: 39
                  pos: 26901
                  length: 53
                pos: 26876
                length: 221
              pos: 23551
              length: 3550
          children: []
          pos: 23455
          length: 3646
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFallThrough
              children: []
              pos: 27303
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 27322
                length: 6
              pos: 27291
              length: 429
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 27344
                        length: 11
                    children: []
                    pos: 27343
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.DO:
                                return computeFallThrough(n.getFirstChild());
                              case Token.FOR:
                                if (NodeUtil.isForIn(n)) {
                                  return n.getFirstChild().getNext();
                                }
                                return computeFallThrough(n.getFirstChild());
                              case Token.LABEL:
                                return computeFallThrough(n.getLastChild());
                              default:
                                return n;
                            }
                    children: []
                    pos: 27357
                    length: 359
                children: []
                pos: 27336
                length: 380
              pos: 27330
              length: 390
          children: []
          pos: 27291
          length: 429
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createEdge
              children: []
              pos: 27870
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node fromNode
                children: []
                pos: 27881
                length: 13
              pos: 27857
              length: 206
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: cfg.createNode(fromNode);
                children: []
                pos: 27953
                length: 25
              - type: expression_statement
                fields:
                  text: cfg.createNode(toNode);
                children: []
                pos: 27983
                length: 23
              - type: expression_statement
                fields:
                  text: cfg.connectIfNotFound(fromNode, branch, toNode);
                children: []
                pos: 28011
                length: 48
              pos: 27947
              length: 116
          children: []
          pos: 27857
          length: 206
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: connectToPossibleExceptionHandler
              children: []
              pos: 28298
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node cfgNode
                children: []
                pos: 28332
                length: 12
              pos: 28285
              length: 962
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: mayThrowException(target)
                            children: []
                            pos: 28369
                            length: 25
                          right:
                            type: unary_expression
                            fields:
                              text: "!exceptionHandler.isEmpty()"
                            children: []
                            pos: 28398
                            length: 27
                        children: []
                        pos: 28369
                        length: 56
                    children: []
                    pos: 28368
                    length: 58
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Node lastJump = cfgNode;
                    children: []
                    pos: 28435
                    length: 24
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Node handler : exceptionHandler) {
                                if (handler.isFunction()) {
                                  return;
                                }
                                Preconditions.checkState(handler.isTry());
                                Node catchBlock = NodeUtil.getCatchBlock(handler);

                                if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.
                                  if (lastJump == cfgNode) {
                                    createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());
                                  } else {
                                    finallyMap.put(lastJump, handler.getLastChild());
                                  }
                                } else { // Has a catch.
                                  if (lastJump == cfgNode) {
                                    createEdge(cfgNode, Branch.ON_EX, catchBlock);
                                    return;
                                  } else {
                                    finallyMap.put(lastJump, catchBlock);
                                  }
                                }
                                lastJump = handler;
                              }
                    children: []
                    pos: 28466
                    length: 771
                  pos: 28427
                  length: 816
                pos: 28365
                length: 878
              pos: 28359
              length: 888
          children: []
          pos: 28285
          length: 962
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getNextSiblingOfType
              children: []
              pos: 29355
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node first
                children: []
                pos: 29376
                length: 10
              pos: 29335
              length: 255
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node c = first; c != null; c = c.getNext()) {
                          for (int type : types) {
                            if (c.getType() == type) {
                              return c;
                            }
                          }
                        }
                children: []
                pos: 29409
                length: 160
              - type: return_statement
                fields:
                  text: return null;
                children: []
                pos: 29574
                length: 12
              pos: 29403
              length: 187
          children: []
          pos: 29335
          length: 255
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isBreakTarget
              children: []
              pos: 29756
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node target
                children: []
                pos: 29770
                length: 11
              pos: 29734
              length: 167
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return isBreakStructure(target, label != null) &&
                          matchLabel(target.getParent(), label);
                children: []
                pos: 29803
                length: 94
              pos: 29797
              length: 104
          children: []
          pos: 29734
          length: 167
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isContinueTarget
              children: []
              pos: 30074
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node target
                children: []
                pos: 30098
                length: 11
              pos: 30051
              length: 161
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isContinueStructure(target) && matchLabel(parent, label);
                children: []
                pos: 30144
                length: 64
              pos: 30138
              length: 74
          children: []
          pos: 30051
          length: 161
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: matchLabel
              children: []
              pos: 30371
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node target
                children: []
                pos: 30382
                length: 11
              pos: 30348
              length: 297
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: label
                            children: []
                            pos: 30419
                            length: 5
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 30428
                            length: 4
                        children: []
                        pos: 30419
                        length: 13
                    children: []
                    pos: 30418
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return true;
                    children: []
                    pos: 30442
                    length: 12
                  pos: 30434
                  length: 26
                pos: 30415
                length: 45
              - type: while_statement
                fields:
                  text: |-
                    while (target.isLabel()) {
                          if (target.getFirstChild().getString().equals(label)) {
                            return true;
                          }
                          target = target.getParent();
                        }
                children: []
                pos: 30465
                length: 158
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 30628
                length: 13
              pos: 30409
              length: 236
          children: []
          pos: 30348
          length: 297
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mayThrowException
              children: []
              pos: 30740
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 30758
                length: 6
              pos: 30718
              length: 574
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 30780
                        length: 11
                    children: []
                    pos: 30779
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.CALL:
                              case Token.GETPROP:
                              case Token.GETELEM:
                              case Token.THROW:
                              case Token.NEW:
                              case Token.ASSIGN:
                              case Token.INC:
                              case Token.DEC:
                              case Token.INSTANCEOF:
                                return true;
                              case Token.FUNCTION:
                                return false;
                            }
                    children: []
                    pos: 30793
                    length: 296
                children: []
                pos: 30772
                length: 317
              - type: for_statement
                fields:
                  text: |-
                    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {
                            return true;
                          }
                        }
                children: []
                pos: 31094
                length: 176
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 31275
                length: 13
              pos: 30766
              length: 526
          children: []
          pos: 30718
          length: 574
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isBreakStructure
              children: []
              pos: 31399
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 31416
                length: 6
              pos: 31384
              length: 336
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 31455
                        length: 11
                    children: []
                    pos: 31454
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.FOR:
                              case Token.DO:
                              case Token.WHILE:
                              case Token.SWITCH:
                                return true;
                              case Token.BLOCK:
                              case Token.IF:
                              case Token.TRY:
                                return labeled;
                              default:
                                return false;
                            }
                    children: []
                    pos: 31468
                    length: 248
                children: []
                pos: 31447
                length: 269
              pos: 31441
              length: 279
          children: []
          pos: 31384
          length: 336
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isContinueStructure
              children: []
              pos: 31828
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 31848
                length: 6
              pos: 31813
              length: 206
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 31870
                        length: 11
                    children: []
                    pos: 31869
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.FOR:
                              case Token.DO:
                              case Token.WHILE:
                                return true;
                              default:
                                return false;
                            }
                    children: []
                    pos: 31883
                    length: 132
                children: []
                pos: 31862
                length: 153
              pos: 31856
              length: 163
          children: []
          pos: 31813
          length: 206
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getExceptionHandler
              children: []
              pos: 32234
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 32254
                length: 6
              pos: 32222
              length: 288
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node cur = n;
                            !cur.isScript() && !cur.isFunction();
                            cur = cur.getParent()) {
                          Node catchNode = getCatchHandlerForBlock(cur);
                          if (catchNode != null) {
                            return catchNode;
                          }
                        }
                children: []
                pos: 32268
                length: 221
              - type: return_statement
                fields:
                  text: return null;
                children: []
                pos: 32494
                length: 12
              pos: 32262
              length: 248
          children: []
          pos: 32222
          length: 288
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getCatchHandlerForBlock
              children: []
              pos: 32661
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node block
                children: []
                pos: 32685
                length: 10
              pos: 32649
              length: 358
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: block.isBlock()
                                children: []
                                pos: 32707
                                length: 15
                              right:
                                type: method_invocation
                                fields:
                                  text: block.getParent().isTry()
                                children: []
                                pos: 32734
                                length: 25
                            children: []
                            pos: 32707
                            length: 52
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: block.getParent().getFirstChild()
                                children: []
                                pos: 32771
                                length: 33
                              right:
                                type: identifier
                                fields:
                                  text: block
                                children: []
                                pos: 32808
                                length: 5
                            children: []
                            pos: 32771
                            length: 42
                        children: []
                        pos: 32707
                        length: 106
                    children: []
                    pos: 32706
                    length: 108
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (Node s = block.getNext(); s != null; s = s.getNext()) {
                                if (NodeUtil.hasCatchHandler(s)) {
                                  return s.getFirstChild();
                                }
                              }
                    children: []
                    pos: 32823
                    length: 157
                  pos: 32815
                  length: 171
                pos: 32703
                length: 283
              - type: return_statement
                fields:
                  text: return null;
                children: []
                pos: 32991
                length: 12
              pos: 32697
              length: 310
          children: []
          pos: 32649
          length: 358
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: AstControlFlowGraph
              children: []
              pos: 33159
              length: 19
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final Map<DiGraphNode<Node, Branch>, Integer> priorities;
                children: []
                pos: 33216
                length: 65
              - type: constructor_declaration
                fields:
                  text: |-
                    private AstControlFlowGraph(Node entry,
                            Map<DiGraphNode<Node, Branch>, Integer> priorities,
                            boolean edgeAnnotations) {
                          super(entry,
                              true /* node annotations */, edgeAnnotations);
                          this.priorities = priorities;
                        }
                children: []
                pos: 33502
                length: 252
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getOptionalNodeComparator
                    children: []
                    pos: 34053
                    length: 25
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: boolean isForward
                      children: []
                      pos: 34088
                      length: 17
                    pos: 33760
                    length: 928
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: isForward
                              children: []
                              pos: 34119
                              length: 9
                          children: []
                          pos: 34118
                          length: 11
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: |-
                              return new Comparator<DiGraphNode<Node, Branch>>() {
                                        @Override
                                        public int compare(
                                            DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {
                                          return getPosition(n1) - getPosition(n2);
                                        }
                                      };
                          children: []
                          pos: 34140
                          length: 255
                        pos: 34130
                        length: 273
                      pos: 34115
                      length: 567
                    pos: 34107
                    length: 581
                children: []
                pos: 33760
                length: 928
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getPosition
                    children: []
                    pos: 34852
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: DiGraphNode<Node, Branch> n
                      children: []
                      pos: 34864
                      length: 27
                    pos: 34840
                    length: 171
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Integer priority = priorities.get(n);
                      children: []
                      pos: 34901
                      length: 37
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkNotNull(priority);
                      children: []
                      pos: 34945
                      length: 37
                    - type: return_statement
                      fields:
                        text: return priority;
                      children: []
                      pos: 34989
                      length: 16
                    pos: 34893
                    length: 118
                children: []
                pos: 34840
                length: 171
              pos: 33138
              length: 1877
          children: []
          pos: 33138
          length: 1877
        pos: 1356
        length: 33661
    children: []
    pos: 1356
    length: 33661
  pos: 0
  length: 35018
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: ControlFlowAnalysis
        children: []
        pos: 1368
        length: 19
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 2004
          length: 40
        - type: field_declaration
          fields:
            text: private ControlFlowGraph<Node> cfg;
          children: []
          pos: 2048
          length: 35
        - type: field_declaration
          fields:
            text: private Map<Node, Integer> astPosition;
          children: []
          pos: 2087
          length: 39
        - type: field_declaration
          fields:
            text: private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;
          children: []
          pos: 2187
          length: 63
        - type: field_declaration
          fields:
            text: |-
              private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =
                    new Comparator<DiGraphNode<Node, Branch>>() {
                  @Override
                  public int compare(
                      DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {
                    return astPosition.get(a.getValue()) - astPosition.get(b.getValue());
                  }
                };
          children: []
          pos: 2450
          length: 317
        - type: field_declaration
          fields:
            text: private int astPositionCounter;
          children: []
          pos: 2771
          length: 31
        - type: field_declaration
          fields:
            text: private int priorityCounter;
          children: []
          pos: 2805
          length: 28
        - type: field_declaration
          fields:
            text: private final boolean shouldTraverseFunctions;
          children: []
          pos: 2837
          length: 46
        - type: field_declaration
          fields:
            text: private final boolean edgeAnnotations;
          children: []
          pos: 2886
          length: 38
        - type: field_declaration
          fields:
            text: private Node root;
          children: []
          pos: 3115
          length: 18
        - type: field_declaration
          fields:
            text: private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();
          children: []
          pos: 3380
          length: 68
        - type: field_declaration
          fields:
            text: private final Multimap<Node, Node> finallyMap = HashMultimap.create();
          children: []
          pos: 4076
          length: 70
        - type: constructor_declaration
          fields:
            text: |-
              ControlFlowAnalysis(AbstractCompiler compiler,
                    boolean shouldTraverseFunctions, boolean edgeAnnotations) {
                  this.compiler = compiler;
                  this.shouldTraverseFunctions = shouldTraverseFunctions;
                  this.edgeAnnotations = edgeAnnotations;
                }
          children: []
          pos: 4444
          length: 250
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getCfg
              children: []
              pos: 4721
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4698
              length: 53
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return cfg;
                children: []
                pos: 4736
                length: 11
              pos: 4730
              length: 21
          children: []
          pos: 4698
          length: 53
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 4779
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 4787
                length: 12
              pos: 4755
              length: 1736
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: this.root = root;
                children: []
                pos: 4818
                length: 17
              - type: expression_statement
                fields:
                  text: astPositionCounter = 0;
                children: []
                pos: 4840
                length: 23
              - type: expression_statement
                fields:
                  text: astPosition = Maps.newHashMap();
                children: []
                pos: 4868
                length: 32
              - type: expression_statement
                fields:
                  text: nodePriorities = Maps.newHashMap();
                children: []
                pos: 4905
                length: 35
              - type: expression_statement
                fields:
                  text: |-
                    cfg = new AstControlFlowGraph(computeFallThrough(root), nodePriorities,
                                                      edgeAnnotations);
                children: []
                pos: 4945
                length: 123
              - type: expression_statement
                fields:
                  text: NodeTraversal.traverse(compiler, root, this);
                children: []
                pos: 5073
                length: 45
              - type: expression_statement
                fields:
                  text: astPosition.put(null, ++astPositionCounter);
                children: []
                pos: 5123
                length: 44
              - type: expression_statement
                fields:
                  text: priorityCounter = 0;
                children: []
                pos: 5297
                length: 20
              - type: local_variable_declaration
                fields:
                  text: DiGraphNode<Node, Branch> entry = cfg.getEntry();
                children: []
                pos: 5322
                length: 49
              - type: expression_statement
                fields:
                  text: prioritizeFromEntryNode(entry);
                children: []
                pos: 5376
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: shouldTraverseFunctions
                        children: []
                        pos: 5417
                        length: 23
                    children: []
                    pos: 5416
                    length: 25
                children:
                - type: block
                  fields: {}
                  children:
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {
                                Node value = candidate.getValue();
                                if (value != null && value.isFunction()) {
                                  Preconditions.checkState(
                                      !nodePriorities.containsKey(candidate) || candidate == entry);
                                  prioritizeFromEntryNode(candidate);
                                }
                              }
                    children: []
                    pos: 5547
                    length: 344
                  pos: 5442
                  length: 455
                pos: 5413
                length: 484
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {
                          if (!nodePriorities.containsKey(candidate)) {
                            nodePriorities.put(candidate, ++priorityCounter);
                          }
                        }
                children: []
                pos: 6166
                length: 197
              - type: expression_statement
                fields:
                  text: nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);
                children: []
                pos: 6424
                length: 63
              pos: 4812
              length: 1679
          children: []
          pos: 4755
          length: 1736
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: prioritizeFromEntryNode
              children: []
              pos: 6616
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DiGraphNode<Node, Branch> entry
                children: []
                pos: 6640
                length: 31
              pos: 6603
              length: 667
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    PriorityQueue<DiGraphNode<Node, Branch>> worklist =
                            new PriorityQueue<DiGraphNode<Node, Branch>>(10, priorityComparator);
                children: []
                pos: 6679
                length: 129
              - type: expression_statement
                fields:
                  text: worklist.add(entry);
                children: []
                pos: 6813
                length: 20
              - type: while_statement
                fields:
                  text: |-
                    while (!worklist.isEmpty()) {
                          DiGraphNode<Node, Branch> current = worklist.remove();
                          if (nodePriorities.containsKey(current)) {
                            continue;
                          }

                          nodePriorities.put(current, ++priorityCounter);

                          List<DiGraphNode<Node, Branch>> successors =
                              cfg.getDirectedSuccNodes(current);
                          for (DiGraphNode<Node, Branch> candidate : successors) {
                            worklist.add(candidate);
                          }
                        }
                children: []
                pos: 6839
                length: 427
              pos: 6673
              length: 597
          children: []
          pos: 6603
          length: 667
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shouldTraverse
              children: []
              pos: 7301
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal nodeTraversal
                children: []
                pos: 7323
                length: 27
              pos: 7274
              length: 2754
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: astPosition.put(n, astPositionCounter++);
                children: []
                pos: 7379
                length: 41
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 7434
                        length: 11
                    children: []
                    pos: 7433
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.FUNCTION:
                                if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) {
                                  exceptionHandler.push(n);
                                  return true;
                                }
                                return false;
                              case Token.TRY:
                                exceptionHandler.push(n);
                                return true;
                            }
                    children: []
                    pos: 7447
                    length: 275
                children: []
                pos: 7426
                length: 296
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parent
                            children: []
                            pos: 8501
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 8511
                            length: 4
                        children: []
                        pos: 8501
                        length: 14
                    children: []
                    pos: 8500
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: switch_expression
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: parent.getType()
                            children: []
                            pos: 8533
                            length: 16
                        children: []
                        pos: 8532
                        length: 18
                      body:
                        type: switch_block
                        fields:
                          text: |-
                            {
                                    case Token.FOR:
                                      // Only traverse the body of the for loop.
                                      return n == parent.getLastChild();

                                    // Skip the conditions.
                                    case Token.IF:
                                    case Token.WHILE:
                                    case Token.WITH:
                                      return n != parent.getFirstChild();
                                    case Token.DO:
                                      return n != parent.getFirstChild().getNext();
                                    // Only traverse the body of the cases
                                    case Token.SWITCH:
                                    case Token.CASE:
                                    case Token.CATCH:
                                    case Token.LABEL:
                                      return n != parent.getFirstChild();
                                    case Token.FUNCTION:
                                      return n == parent.getFirstChild().getNext().getNext();
                                    case Token.CONTINUE:
                                    case Token.BREAK:
                                    case Token.EXPR_RESULT:
                                    case Token.VAR:
                                    case Token.RETURN:
                                    case Token.THROW:
                                      return false;
                                    case Token.TRY:
                                      /* Just before we are about to visit the second child of the TRY node,
                                       * we know that we will be visiting either the CATCH or the FINALLY.
                                       * In other words, we know that the post order traversal of the TRY
                                       * block has been finished, no more exceptions can be caught by the
                                       * handler at this TRY block and should be taken out of the stack.
                                       */
                                      if (n == parent.getFirstChild().getNext()) {
                                        Preconditions.checkState(exceptionHandler.peek() == parent);
                                        exceptionHandler.pop();
                                      }
                                  }
                        children: []
                        pos: 8551
                        length: 1450
                    children: []
                    pos: 8525
                    length: 1476
                  pos: 8517
                  length: 1490
                pos: 8497
                length: 1510
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 10012
                length: 12
              pos: 7373
              length: 2655
          children: []
          pos: 7274
          length: 2754
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 10056
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 10062
                length: 15
              pos: 10032
              length: 1322
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 10114
                        length: 11
                    children: []
                    pos: 10113
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.IF:
                                handleIf(n);
                                return;
                              case Token.WHILE:
                                handleWhile(n);
                                return;
                              case Token.DO:
                                handleDo(n);
                                return;
                              case Token.FOR:
                                handleFor(n);
                                return;
                              case Token.SWITCH:
                                handleSwitch(n);
                                return;
                              case Token.CASE:
                                handleCase(n);
                                return;
                              case Token.DEFAULT_CASE:
                                handleDefault(n);
                                return;
                              case Token.BLOCK:
                              case Token.SCRIPT:
                                handleStmtList(n);
                                return;
                              case Token.FUNCTION:
                                handleFunction(n);
                                return;
                              case Token.EXPR_RESULT:
                                handleExpr(n);
                                return;
                              case Token.THROW:
                                handleThrow(n);
                                return;
                              case Token.TRY:
                                handleTry(n);
                                return;
                              case Token.CATCH:
                                handleCatch(n);
                                return;
                              case Token.BREAK:
                                handleBreak(n);
                                return;
                              case Token.CONTINUE:
                                handleContinue(n);
                                return;
                              case Token.RETURN:
                                handleReturn(n);
                                return;
                              case Token.WITH:
                                handleWith(n);
                                return;
                              case Token.LABEL:
                                return;
                              default:
                                handleStmt(n);
                                return;
                            }
                    children: []
                    pos: 10127
                    length: 1223
                children: []
                pos: 10106
                length: 1244
              pos: 10100
              length: 1254
          children: []
          pos: 10032
          length: 1322
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleIf
              children: []
              pos: 11371
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 11380
                length: 9
              pos: 11358
              length: 518
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node thenBlock = node.getFirstChild().getNext();
                children: []
                pos: 11397
                length: 48
              - type: local_variable_declaration
                fields:
                  text: Node elseBlock = thenBlock.getNext();
                children: []
                pos: 11450
                length: 37
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));
                children: []
                pos: 11492
                length: 64
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: elseBlock
                            children: []
                            pos: 11566
                            length: 9
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 11579
                            length: 4
                        children: []
                        pos: 11566
                        length: 17
                    children: []
                    pos: 11565
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: |-
                        createEdge(node, Branch.ON_FALSE,
                                  computeFollowNode(node, this));
                    children: []
                    pos: 11593
                    length: 75
                  pos: 11585
                  length: 109
                pos: 11562
                length: 217
              - type: expression_statement
                fields:
                  text: |-
                    connectToPossibleExceptionHandler(
                            node, NodeUtil.getConditionExpression(node));
                children: []
                pos: 11784
                length: 88
              pos: 11391
              length: 485
          children: []
          pos: 11358
          length: 518
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleWhile
              children: []
              pos: 11893
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 11905
                length: 9
              pos: 11880
              length: 463
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.ON_TRUE,
                            computeFallThrough(node.getFirstChild().getNext()));
                children: []
                pos: 12001
                length: 93
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.ON_FALSE,
                            computeFollowNode(node, this));
                children: []
                pos: 12173
                length: 73
              - type: expression_statement
                fields:
                  text: |-
                    connectToPossibleExceptionHandler(
                            node, NodeUtil.getConditionExpression(node));
                children: []
                pos: 12251
                length: 88
              pos: 11916
              length: 427
          children: []
          pos: 11880
          length: 463
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleDo
              children: []
              pos: 12360
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 12369
                length: 9
              pos: 12347
              length: 444
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.ON_TRUE, computeFallThrough(node.getFirstChild()));
                children: []
                pos: 12477
                length: 75
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.ON_FALSE,
                            computeFollowNode(node, this));
                children: []
                pos: 12621
                length: 73
              - type: expression_statement
                fields:
                  text: |-
                    connectToPossibleExceptionHandler(
                            node, NodeUtil.getConditionExpression(node));
                children: []
                pos: 12699
                length: 88
              pos: 12380
              length: 411
          children: []
          pos: 12347
          length: 444
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleFor
              children: []
              pos: 12808
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node forNode
                children: []
                pos: 12818
                length: 12
              pos: 12795
              length: 1800
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: forNode.getChildCount()
                            children: []
                            pos: 12842
                            length: 23
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '4'
                            children: []
                            pos: 12869
                            length: 1
                        children: []
                        pos: 12842
                        length: 28
                    children: []
                    pos: 12841
                    length: 30
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Node init = forNode.getFirstChild();
                    children: []
                    pos: 12929
                    length: 36
                  - type: local_variable_declaration
                    fields:
                      text: Node cond = init.getNext();
                    children: []
                    pos: 12972
                    length: 27
                  - type: local_variable_declaration
                    fields:
                      text: Node iter = cond.getNext();
                    children: []
                    pos: 13006
                    length: 27
                  - type: local_variable_declaration
                    fields:
                      text: Node body = iter.getNext();
                    children: []
                    pos: 13040
                    length: 27
                  - type: expression_statement
                    fields:
                      text: createEdge(init, Branch.UNCOND, forNode);
                    children: []
                    pos: 13204
                    length: 41
                  - type: expression_statement
                    fields:
                      text: createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body));
                    children: []
                    pos: 13327
                    length: 62
                  - type: expression_statement
                    fields:
                      text: |-
                        createEdge(forNode, Branch.ON_FALSE,
                                  computeFollowNode(forNode, this));
                    children: []
                    pos: 13434
                    length: 81
                  - type: expression_statement
                    fields:
                      text: createEdge(iter, Branch.UNCOND, forNode);
                    children: []
                    pos: 13766
                    length: 41
                  - type: expression_statement
                    fields:
                      text: connectToPossibleExceptionHandler(init, init);
                    children: []
                    pos: 13814
                    length: 46
                  - type: expression_statement
                    fields:
                      text: connectToPossibleExceptionHandler(forNode, cond);
                    children: []
                    pos: 13867
                    length: 49
                  - type: expression_statement
                    fields:
                      text: connectToPossibleExceptionHandler(iter, iter);
                    children: []
                    pos: 13923
                    length: 46
                  pos: 12872
                  length: 1103
                pos: 12838
                length: 1753
              pos: 12832
              length: 1763
          children: []
          pos: 12795
          length: 1800
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleSwitch
              children: []
              pos: 14612
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 14625
                length: 9
              pos: 14599
              length: 732
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    Node next = getNextSiblingOfType(
                            node.getFirstChild().getNext(), Token.CASE, Token.EMPTY);
                children: []
                pos: 14758
                length: 99
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: next
                            children: []
                            pos: 14866
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 14874
                            length: 4
                        children: []
                        pos: 14866
                        length: 12
                    children: []
                    pos: 14865
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.UNCOND, next);
                    children: []
                    pos: 14922
                    length: 38
                  pos: 14880
                  length: 86
                pos: 14862
                length: 398
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node.getFirstChild());
                children: []
                pos: 15265
                length: 62
              pos: 14636
              length: 695
          children: []
          pos: 14599
          length: 732
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleCase
              children: []
              pos: 15348
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 15359
                length: 9
              pos: 15335
              length: 982
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.ON_TRUE,
                            node.getFirstChild().getNext());
                children: []
                pos: 15457
                length: 73
              - type: local_variable_declaration
                fields:
                  text: Node next = getNextSiblingOfType(node.getNext(), Token.CASE);
                children: []
                pos: 15589
                length: 61
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: next
                            children: []
                            pos: 15659
                            length: 4
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 15667
                            length: 4
                        children: []
                        pos: 15659
                        length: 12
                    children: []
                    pos: 15658
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: Preconditions.checkState(next.isCase());
                    children: []
                    pos: 15697
                    length: 40
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.ON_FALSE, next);
                    children: []
                    pos: 15744
                    length: 40
                  pos: 15673
                  length: 117
                pos: 15655
                length: 591
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node.getFirstChild());
                children: []
                pos: 16251
                length: 62
              pos: 15370
              length: 947
          children: []
          pos: 15335
          length: 982
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleDefault
              children: []
              pos: 16334
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 16348
                length: 9
              pos: 16321
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, node.getFirstChild());
                children: []
                pos: 16440
                length: 54
              pos: 16359
              length: 139
          children: []
          pos: 16321
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleWith
              children: []
              pos: 16515
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 16526
                length: 9
              pos: 16502
              length: 240
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, node.getLastChild());
                children: []
                pos: 16618
                length: 53
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node.getFirstChild());
                children: []
                pos: 16676
                length: 62
              pos: 16537
              length: 205
          children: []
          pos: 16502
          length: 240
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleStmtList
              children: []
              pos: 16759
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 16774
                length: 9
              pos: 16746
              length: 1213
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node parent = node.getParent();
                children: []
                pos: 16791
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: and
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: node.isBlock()
                                        children: []
                                        pos: 16905
                                        length: 14
                                      right:
                                        type: not_equals
                                        fields:
                                          left:
                                            type: identifier
                                            fields:
                                              text: parent
                                            children: []
                                            pos: 16923
                                            length: 6
                                          right:
                                            type: null_literal
                                            fields: {}
                                            children: []
                                            pos: 16933
                                            length: 4
                                        children: []
                                        pos: 16923
                                        length: 14
                                    children: []
                                    pos: 16905
                                    length: 32
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: parent.isTry()
                                    children: []
                                    pos: 16949
                                    length: 14
                                children: []
                                pos: 16905
                                length: 58
                              right:
                                type: equals
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: NodeUtil.getCatchBlock(parent)
                                    children: []
                                    pos: 16975
                                    length: 30
                                  right:
                                    type: identifier
                                    fields:
                                      text: node
                                    children: []
                                    pos: 17009
                                    length: 4
                                children: []
                                pos: 16975
                                length: 38
                            children: []
                            pos: 16905
                            length: 108
                          right:
                            type: unary_expression
                            fields:
                              text: "!NodeUtil.hasCatchHandler(node)"
                            children: []
                            pos: 17025
                            length: 31
                        children: []
                        pos: 16905
                        length: 151
                    children: []
                    pos: 16904
                    length: 153
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 17066
                    length: 7
                  pos: 17058
                  length: 21
                pos: 16901
                length: 178
              - type: local_variable_declaration
                fields:
                  text: Node child = node.getFirstChild();
                children: []
                pos: 17156
                length: 34
              - type: while_statement
                fields:
                  text: |-
                    while (child != null && child.isFunction()) {
                          child = child.getNext();
                        }
                children: []
                pos: 17310
                length: 82
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: child
                            children: []
                            pos: 17402
                            length: 5
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 17411
                            length: 4
                        children: []
                        pos: 17402
                        length: 13
                    children: []
                    pos: 17401
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.UNCOND, computeFallThrough(child));
                    children: []
                    pos: 17425
                    length: 59
                  pos: 17417
                  length: 73
                pos: 17398
                length: 175
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parent
                            children: []
                            pos: 17607
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 17617
                            length: 4
                        children: []
                        pos: 17607
                        length: 14
                    children: []
                    pos: 17606
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: switch_expression
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: method_invocation
                            fields:
                              text: parent.getType()
                            children: []
                            pos: 17639
                            length: 16
                        children: []
                        pos: 17638
                        length: 18
                      body:
                        type: switch_block
                        fields:
                          text: |-
                            {
                                    case Token.DEFAULT_CASE:
                                    case Token.CASE:
                                    case Token.TRY:
                                      break;
                                    default:
                                      if (node.isBlock() && node.isSyntheticBlock()) {
                                        createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));
                                      }
                                      break;
                                  }
                        children: []
                        pos: 17657
                        length: 292
                    children: []
                    pos: 17631
                    length: 318
                  pos: 17623
                  length: 332
                pos: 17603
                length: 352
              pos: 16785
              length: 1174
          children: []
          pos: 16746
          length: 1213
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleFunction
              children: []
              pos: 17976
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 17991
                length: 9
              pos: 17963
              length: 370
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(node.getChildCount() >= 3);
                children: []
                pos: 18079
                length: 52
              - type: expression_statement
                fields:
                  text: |-
                    createEdge(node, Branch.UNCOND,
                            computeFallThrough(node.getFirstChild().getNext().getNext()));
                children: []
                pos: 18136
                length: 102
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(exceptionHandler.peek() == node);
                children: []
                pos: 18243
                length: 58
              - type: expression_statement
                fields:
                  text: exceptionHandler.pop();
                children: []
                pos: 18306
                length: 23
              pos: 18002
              length: 331
          children: []
          pos: 17963
          length: 370
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleExpr
              children: []
              pos: 18350
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18361
                length: 9
              pos: 18337
              length: 159
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, computeFollowNode(node, this));
                children: []
                pos: 18378
                length: 63
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node);
                children: []
                pos: 18446
                length: 46
              pos: 18372
              length: 124
          children: []
          pos: 18337
          length: 159
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleThrow
              children: []
              pos: 18513
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18525
                length: 9
              pos: 18500
              length: 92
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node);
                children: []
                pos: 18542
                length: 46
              pos: 18536
              length: 56
          children: []
          pos: 18500
          length: 92
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleTry
              children: []
              pos: 18609
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18619
                length: 9
              pos: 18596
              length: 98
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, node.getFirstChild());
                children: []
                pos: 18636
                length: 54
              pos: 18630
              length: 64
          children: []
          pos: 18596
          length: 98
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleCatch
              children: []
              pos: 18711
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18723
                length: 9
              pos: 18698
              length: 99
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, node.getLastChild());
                children: []
                pos: 18740
                length: 53
              pos: 18734
              length: 63
          children: []
          pos: 18698
          length: 99
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleBreak
              children: []
              pos: 18814
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 18826
                length: 9
              pos: 18801
              length: 1829
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String label = null;
                children: []
                pos: 18843
                length: 20
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: node.hasChildren()
                        children: []
                        pos: 18912
                        length: 18
                    children: []
                    pos: 18911
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: label = node.getFirstChild().getString();
                    children: []
                    pos: 18940
                    length: 41
                  pos: 18932
                  length: 55
                pos: 18908
                length: 79
              - type: local_variable_declaration
                fields:
                  text: Node cur;
                children: []
                pos: 18992
                length: 9
              - type: local_variable_declaration
                fields:
                  text: Node previous = null;
                children: []
                pos: 19006
                length: 21
              - type: local_variable_declaration
                fields:
                  text: Node lastJump;
                children: []
                pos: 19032
                length: 14
              - type: local_variable_declaration
                fields:
                  text: Node parent = node.getParent();
                children: []
                pos: 19051
                length: 31
              - type: for_statement
                fields:
                  text: |-
                    for (cur = node, lastJump = node;
                            !isBreakTarget(cur, label);
                            cur = parent, parent = parent.getParent()) {
                          if (cur.isTry() && NodeUtil.hasFinally(cur)
                              && cur.getLastChild() != previous) {
                            if (lastJump == node) {
                              createEdge(lastJump, Branch.UNCOND, computeFallThrough(
                                  cur.getLastChild()));
                            } else {
                              finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));
                            }
                            lastJump = cur;
                          }
                          if (parent == null) {
                            if (compiler.isIdeMode()) {
                              // In IDE mode, we expect that the data flow graph may
                              // not be well-formed.
                              return;
                            } else {
                              throw new IllegalStateException("Cannot find break target.");
                            }
                          }
                          previous = cur;
                        }
                children: []
                pos: 19641
                length: 803
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lastJump
                            children: []
                            pos: 20453
                            length: 8
                          right:
                            type: identifier
                            fields:
                              text: node
                            children: []
                            pos: 20465
                            length: 4
                        children: []
                        pos: 20453
                        length: 16
                    children: []
                    pos: 20452
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur,
                        this));
                    children: []
                    pos: 20479
                    length: 66
                  pos: 20471
                  length: 80
                pos: 20449
                length: 177
              pos: 18837
              length: 1793
          children: []
          pos: 18801
          length: 1829
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleContinue
              children: []
              pos: 20647
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 20662
                length: 9
              pos: 20634
              length: 1138
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String label = null;
                children: []
                pos: 20679
                length: 20
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: node.hasChildren()
                        children: []
                        pos: 20708
                        length: 18
                    children: []
                    pos: 20707
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: label = node.getFirstChild().getString();
                    children: []
                    pos: 20736
                    length: 41
                  pos: 20728
                  length: 55
                pos: 20704
                length: 79
              - type: local_variable_declaration
                fields:
                  text: Node cur;
                children: []
                pos: 20788
                length: 9
              - type: local_variable_declaration
                fields:
                  text: Node previous = null;
                children: []
                pos: 20802
                length: 21
              - type: local_variable_declaration
                fields:
                  text: Node lastJump;
                children: []
                pos: 20828
                length: 14
              - type: local_variable_declaration
                fields:
                  text: Node parent = node.getParent();
                children: []
                pos: 20912
                length: 31
              - type: for_statement
                fields:
                  text: |-
                    for (cur = node, lastJump = node;
                            !isContinueTarget(cur, parent, label);
                            cur = parent, parent = parent.getParent()) {
                          if (cur.isTry() && NodeUtil.hasFinally(cur)
                              && cur.getLastChild() != previous) {
                            if (lastJump == node) {
                              createEdge(lastJump, Branch.UNCOND, cur.getLastChild());
                            } else {
                              finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));
                            }
                            lastJump = cur;
                          }
                          Preconditions.checkState(parent != null, "Cannot find continue target.");
                          previous = cur;
                        }
                children: []
                pos: 20948
                length: 572
              - type: local_variable_declaration
                fields:
                  text: Node iter = cur;
                children: []
                pos: 21525
                length: 16
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: cur.getChildCount()
                            children: []
                            pos: 21550
                            length: 19
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '4'
                            children: []
                            pos: 21573
                            length: 1
                        children: []
                        pos: 21550
                        length: 24
                    children: []
                    pos: 21549
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: iter = cur.getFirstChild().getNext().getNext();
                    children: []
                    pos: 21584
                    length: 47
                  pos: 21576
                  length: 61
                pos: 21546
                length: 91
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lastJump
                            children: []
                            pos: 21647
                            length: 8
                          right:
                            type: identifier
                            fields:
                              text: node
                            children: []
                            pos: 21659
                            length: 4
                        children: []
                        pos: 21647
                        length: 16
                    children: []
                    pos: 21646
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.UNCOND, iter);
                    children: []
                    pos: 21673
                    length: 38
                  pos: 21665
                  length: 52
                pos: 21643
                length: 125
              pos: 20673
              length: 1099
          children: []
          pos: 20634
          length: 1138
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleReturn
              children: []
              pos: 21789
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 21802
                length: 9
              pos: 21776
              length: 797
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node lastJump = null;
                children: []
                pos: 21819
                length: 21
              - type: for_statement
                fields:
                  text: |-
                    for (Iterator<Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
                          Node curHandler = iter.next();
                          if (curHandler.isFunction()) {
                            break;
                          }
                          if (NodeUtil.hasFinally(curHandler)) {
                            if (lastJump == null) {
                              createEdge(node, Branch.UNCOND, curHandler.getLastChild());
                            } else {
                              finallyMap.put(lastJump,
                                  computeFallThrough(curHandler.getLastChild()));
                            }
                            lastJump = curHandler;
                          }
                        }
                children: []
                pos: 21845
                length: 487
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: node.hasChildren()
                        children: []
                        pos: 22342
                        length: 18
                    children: []
                    pos: 22341
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: connectToPossibleExceptionHandler(node, node.getFirstChild());
                    children: []
                    pos: 22370
                    length: 62
                  pos: 22362
                  length: 76
                pos: 22338
                length: 100
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lastJump
                            children: []
                            pos: 22448
                            length: 8
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 22460
                            length: 4
                        children: []
                        pos: 22448
                        length: 16
                    children: []
                    pos: 22447
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: createEdge(node, Branch.UNCOND, null);
                    children: []
                    pos: 22474
                    length: 38
                  pos: 22466
                  length: 52
                pos: 22444
                length: 125
              pos: 21813
              length: 760
          children: []
          pos: 21776
          length: 797
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: handleStmt
              children: []
              pos: 22590
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 22601
                length: 9
              pos: 22577
              length: 200
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: createEdge(node, Branch.UNCOND, computeFollowNode(node, this));
                children: []
                pos: 22659
                length: 63
              - type: expression_statement
                fields:
                  text: connectToPossibleExceptionHandler(node, node);
                children: []
                pos: 22727
                length: 46
              pos: 22612
              length: 165
          children: []
          pos: 22577
          length: 200
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFollowNode
              children: []
              pos: 22793
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 22811
                length: 9
              pos: 22781
              length: 118
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return computeFollowNode(node, node, cfa);
                children: []
                pos: 22853
                length: 42
              pos: 22847
              length: 52
          children: []
          pos: 22781
          length: 118
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFollowNode
              children: []
              pos: 22915
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 22933
                length: 9
              pos: 22903
              length: 94
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return computeFollowNode(node, node, null);
                children: []
                pos: 22950
                length: 43
              pos: 22944
              length: 53
          children: []
          pos: 22903
          length: 94
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFollowNode
              children: []
              pos: 23475
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node fromNode
                children: []
                pos: 23500
                length: 13
              pos: 23455
              length: 3647
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node parent = node.getParent();
                children: []
                pos: 24198
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: parent
                                    children: []
                                    pos: 24238
                                    length: 6
                                  right:
                                    type: null_literal
                                    fields: {}
                                    children: []
                                    pos: 24248
                                    length: 4
                                children: []
                                pos: 24238
                                length: 14
                              right:
                                type: method_invocation
                                fields:
                                  text: parent.isFunction()
                                children: []
                                pos: 24256
                                length: 19
                            children: []
                            pos: 24238
                            length: 37
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: not_equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: cfa
                                        children: []
                                        pos: 24288
                                        length: 3
                                      right:
                                        type: null_literal
                                        fields: {}
                                        children: []
                                        pos: 24295
                                        length: 4
                                    children: []
                                    pos: 24288
                                    length: 11
                                  right:
                                    type: equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: node
                                        children: []
                                        pos: 24303
                                        length: 4
                                      right:
                                        type: field_access
                                        fields:
                                          text: cfa.root
                                        children: []
                                        pos: 24311
                                        length: 8
                                    children: []
                                    pos: 24303
                                    length: 16
                                children: []
                                pos: 24288
                                length: 31
                            children: []
                            pos: 24287
                            length: 33
                        children: []
                        pos: 24238
                        length: 82
                    children: []
                    pos: 24237
                    length: 84
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return null;
                    children: []
                    pos: 24330
                    length: 12
                  pos: 24322
                  length: 26
                pos: 24234
                length: 114
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: parent.getType()
                        children: []
                        pos: 24410
                        length: 16
                    children: []
                    pos: 24409
                    length: 18
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              // The follow() of any of the path from IF would be what follows IF.
                              case Token.IF:
                                return computeFollowNode(fromNode, parent, cfa);
                              case Token.CASE:
                              case Token.DEFAULT_CASE:
                                // After the body of a CASE, the control goes to the body of the next
                                // case, without having to go to the case condition.
                                if (parent.getNext() != null) {
                                  if (parent.getNext().isCase()) {
                                    return parent.getNext().getFirstChild().getNext();
                                  } else if (parent.getNext().isDefaultCase()) {
                                    return parent.getNext().getFirstChild();
                                  } else {
                                    Preconditions.checkState(false, "Not reachable");
                                  }
                                } else {
                                  return computeFollowNode(fromNode, parent, cfa);
                                }
                                break;
                              case Token.FOR:
                                if (NodeUtil.isForIn(parent)) {
                                  return parent;
                                } else {
                                  return parent.getFirstChild().getNext().getNext();
                                }
                              case Token.WHILE:
                              case Token.DO:
                                return parent;
                              case Token.TRY:
                                // If we are coming out of the TRY block...
                                if (parent.getFirstChild() == node) {
                                  if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
                                    return computeFallThrough(parent.getLastChild());
                                  } else { // and have no FINALLY.
                                    return computeFollowNode(fromNode, parent, cfa);
                                  }
                                // CATCH block.
                                } else if (NodeUtil.getCatchBlock(parent) == node){
                                  if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
                                    return computeFallThrough(node.getNext());
                                  } else {
                                    return computeFollowNode(fromNode, parent, cfa);
                                  }
                                // If we are coming out of the FINALLY block...
                                } else if (parent.getLastChild() == node){
                                  if (cfa != null) {
                                    for (Node finallyNode : cfa.finallyMap.get(parent)) {
                                      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
                                    }
                                  }
                                  return computeFollowNode(fromNode, parent, cfa);
                                }
                            }
                    children: []
                    pos: 24428
                    length: 2084
                children: []
                pos: 24402
                length: 2110
              - type: local_variable_declaration
                fields:
                  text: Node nextSibling = node.getNext();
                children: []
                pos: 26649
                length: 34
              - type: while_statement
                fields:
                  text: |-
                    while (nextSibling != null && nextSibling.isFunction()) {
                          nextSibling = nextSibling.getNext();
                        }
                children: []
                pos: 26765
                length: 106
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: nextSibling
                            children: []
                            pos: 26881
                            length: 11
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 26896
                            length: 4
                        children: []
                        pos: 26881
                        length: 19
                    children: []
                    pos: 26880
                    length: 21
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return computeFallThrough(nextSibling);
                    children: []
                    pos: 26910
                    length: 39
                  pos: 26902
                  length: 53
                pos: 26877
                length: 221
              pos: 23551
              length: 3551
          children: []
          pos: 23455
          length: 3647
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFallThrough
              children: []
              pos: 27304
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 27323
                length: 6
              pos: 27292
              length: 429
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 27345
                        length: 11
                    children: []
                    pos: 27344
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.DO:
                                return computeFallThrough(n.getFirstChild());
                              case Token.FOR:
                                if (NodeUtil.isForIn(n)) {
                                  return n.getFirstChild().getNext();
                                }
                                return computeFallThrough(n.getFirstChild());
                              case Token.LABEL:
                                return computeFallThrough(n.getLastChild());
                              default:
                                return n;
                            }
                    children: []
                    pos: 27358
                    length: 359
                children: []
                pos: 27337
                length: 380
              pos: 27331
              length: 390
          children: []
          pos: 27292
          length: 429
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createEdge
              children: []
              pos: 27871
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node fromNode
                children: []
                pos: 27882
                length: 13
              pos: 27858
              length: 206
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: cfg.createNode(fromNode);
                children: []
                pos: 27954
                length: 25
              - type: expression_statement
                fields:
                  text: cfg.createNode(toNode);
                children: []
                pos: 27984
                length: 23
              - type: expression_statement
                fields:
                  text: cfg.connectIfNotFound(fromNode, branch, toNode);
                children: []
                pos: 28012
                length: 48
              pos: 27948
              length: 116
          children: []
          pos: 27858
          length: 206
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: connectToPossibleExceptionHandler
              children: []
              pos: 28299
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node cfgNode
                children: []
                pos: 28333
                length: 12
              pos: 28286
              length: 962
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: mayThrowException(target)
                            children: []
                            pos: 28370
                            length: 25
                          right:
                            type: unary_expression
                            fields:
                              text: "!exceptionHandler.isEmpty()"
                            children: []
                            pos: 28399
                            length: 27
                        children: []
                        pos: 28370
                        length: 56
                    children: []
                    pos: 28369
                    length: 58
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Node lastJump = cfgNode;
                    children: []
                    pos: 28436
                    length: 24
                  - type: enhanced_for_statement
                    fields:
                      text: |-
                        for (Node handler : exceptionHandler) {
                                if (handler.isFunction()) {
                                  return;
                                }
                                Preconditions.checkState(handler.isTry());
                                Node catchBlock = NodeUtil.getCatchBlock(handler);

                                if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.
                                  if (lastJump == cfgNode) {
                                    createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());
                                  } else {
                                    finallyMap.put(lastJump, handler.getLastChild());
                                  }
                                } else { // Has a catch.
                                  if (lastJump == cfgNode) {
                                    createEdge(cfgNode, Branch.ON_EX, catchBlock);
                                    return;
                                  } else {
                                    finallyMap.put(lastJump, catchBlock);
                                  }
                                }
                                lastJump = handler;
                              }
                    children: []
                    pos: 28467
                    length: 771
                  pos: 28428
                  length: 816
                pos: 28366
                length: 878
              pos: 28360
              length: 888
          children: []
          pos: 28286
          length: 962
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getNextSiblingOfType
              children: []
              pos: 29356
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node first
                children: []
                pos: 29377
                length: 10
              pos: 29336
              length: 255
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node c = first; c != null; c = c.getNext()) {
                          for (int type : types) {
                            if (c.getType() == type) {
                              return c;
                            }
                          }
                        }
                children: []
                pos: 29410
                length: 160
              - type: return_statement
                fields:
                  text: return null;
                children: []
                pos: 29575
                length: 12
              pos: 29404
              length: 187
          children: []
          pos: 29336
          length: 255
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isBreakTarget
              children: []
              pos: 29757
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node target
                children: []
                pos: 29771
                length: 11
              pos: 29735
              length: 167
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return isBreakStructure(target, label != null) &&
                          matchLabel(target.getParent(), label);
                children: []
                pos: 29804
                length: 94
              pos: 29798
              length: 104
          children: []
          pos: 29735
          length: 167
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isContinueTarget
              children: []
              pos: 30075
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node target
                children: []
                pos: 30099
                length: 11
              pos: 30052
              length: 161
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isContinueStructure(target) && matchLabel(parent, label);
                children: []
                pos: 30145
                length: 64
              pos: 30139
              length: 74
          children: []
          pos: 30052
          length: 161
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: matchLabel
              children: []
              pos: 30372
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node target
                children: []
                pos: 30383
                length: 11
              pos: 30349
              length: 297
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: label
                            children: []
                            pos: 30420
                            length: 5
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 30429
                            length: 4
                        children: []
                        pos: 30420
                        length: 13
                    children: []
                    pos: 30419
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return true;
                    children: []
                    pos: 30443
                    length: 12
                  pos: 30435
                  length: 26
                pos: 30416
                length: 45
              - type: while_statement
                fields:
                  text: |-
                    while (target.isLabel()) {
                          if (target.getFirstChild().getString().equals(label)) {
                            return true;
                          }
                          target = target.getParent();
                        }
                children: []
                pos: 30466
                length: 158
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 30629
                length: 13
              pos: 30410
              length: 236
          children: []
          pos: 30349
          length: 297
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mayThrowException
              children: []
              pos: 30741
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 30759
                length: 6
              pos: 30719
              length: 574
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 30781
                        length: 11
                    children: []
                    pos: 30780
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.CALL:
                              case Token.GETPROP:
                              case Token.GETELEM:
                              case Token.THROW:
                              case Token.NEW:
                              case Token.ASSIGN:
                              case Token.INC:
                              case Token.DEC:
                              case Token.INSTANCEOF:
                                return true;
                              case Token.FUNCTION:
                                return false;
                            }
                    children: []
                    pos: 30794
                    length: 296
                children: []
                pos: 30773
                length: 317
              - type: for_statement
                fields:
                  text: |-
                    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {
                            return true;
                          }
                        }
                children: []
                pos: 31095
                length: 176
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 31276
                length: 13
              pos: 30767
              length: 526
          children: []
          pos: 30719
          length: 574
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isBreakStructure
              children: []
              pos: 31400
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 31417
                length: 6
              pos: 31385
              length: 336
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 31456
                        length: 11
                    children: []
                    pos: 31455
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.FOR:
                              case Token.DO:
                              case Token.WHILE:
                              case Token.SWITCH:
                                return true;
                              case Token.BLOCK:
                              case Token.IF:
                              case Token.TRY:
                                return labeled;
                              default:
                                return false;
                            }
                    children: []
                    pos: 31469
                    length: 248
                children: []
                pos: 31448
                length: 269
              pos: 31442
              length: 279
          children: []
          pos: 31385
          length: 336
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isContinueStructure
              children: []
              pos: 31829
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 31849
                length: 6
              pos: 31814
              length: 206
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 31871
                        length: 11
                    children: []
                    pos: 31870
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.FOR:
                              case Token.DO:
                              case Token.WHILE:
                                return true;
                              default:
                                return false;
                            }
                    children: []
                    pos: 31884
                    length: 132
                children: []
                pos: 31863
                length: 153
              pos: 31857
              length: 163
          children: []
          pos: 31814
          length: 206
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getExceptionHandler
              children: []
              pos: 32235
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 32255
                length: 6
              pos: 32223
              length: 288
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node cur = n;
                            !cur.isScript() && !cur.isFunction();
                            cur = cur.getParent()) {
                          Node catchNode = getCatchHandlerForBlock(cur);
                          if (catchNode != null) {
                            return catchNode;
                          }
                        }
                children: []
                pos: 32269
                length: 221
              - type: return_statement
                fields:
                  text: return null;
                children: []
                pos: 32495
                length: 12
              pos: 32263
              length: 248
          children: []
          pos: 32223
          length: 288
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getCatchHandlerForBlock
              children: []
              pos: 32662
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node block
                children: []
                pos: 32686
                length: 10
              pos: 32650
              length: 358
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: block.isBlock()
                                children: []
                                pos: 32708
                                length: 15
                              right:
                                type: method_invocation
                                fields:
                                  text: block.getParent().isTry()
                                children: []
                                pos: 32735
                                length: 25
                            children: []
                            pos: 32708
                            length: 52
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: block.getParent().getFirstChild()
                                children: []
                                pos: 32772
                                length: 33
                              right:
                                type: identifier
                                fields:
                                  text: block
                                children: []
                                pos: 32809
                                length: 5
                            children: []
                            pos: 32772
                            length: 42
                        children: []
                        pos: 32708
                        length: 106
                    children: []
                    pos: 32707
                    length: 108
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (Node s = block.getNext(); s != null; s = s.getNext()) {
                                if (NodeUtil.hasCatchHandler(s)) {
                                  return s.getFirstChild();
                                }
                              }
                    children: []
                    pos: 32824
                    length: 157
                  pos: 32816
                  length: 171
                pos: 32704
                length: 283
              - type: return_statement
                fields:
                  text: return null;
                children: []
                pos: 32992
                length: 12
              pos: 32698
              length: 310
          children: []
          pos: 32650
          length: 358
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: AstControlFlowGraph
              children: []
              pos: 33160
              length: 19
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final Map<DiGraphNode<Node, Branch>, Integer> priorities;
                children: []
                pos: 33217
                length: 65
              - type: constructor_declaration
                fields:
                  text: |-
                    private AstControlFlowGraph(Node entry,
                            Map<DiGraphNode<Node, Branch>, Integer> priorities,
                            boolean edgeAnnotations) {
                          super(entry,
                              true /* node annotations */, edgeAnnotations);
                          this.priorities = priorities;
                        }
                children: []
                pos: 33503
                length: 252
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getOptionalNodeComparator
                    children: []
                    pos: 34054
                    length: 25
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: boolean isForward
                      children: []
                      pos: 34089
                      length: 17
                    pos: 33761
                    length: 928
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: isForward
                              children: []
                              pos: 34120
                              length: 9
                          children: []
                          pos: 34119
                          length: 11
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: |-
                              return new Comparator<DiGraphNode<Node, Branch>>() {
                                        @Override
                                        public int compare(
                                            DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {
                                          return getPosition(n1) - getPosition(n2);
                                        }
                                      };
                          children: []
                          pos: 34141
                          length: 255
                        pos: 34131
                        length: 273
                      pos: 34116
                      length: 567
                    pos: 34108
                    length: 581
                children: []
                pos: 33761
                length: 928
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getPosition
                    children: []
                    pos: 34853
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: DiGraphNode<Node, Branch> n
                      children: []
                      pos: 34865
                      length: 27
                    pos: 34841
                    length: 171
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Integer priority = priorities.get(n);
                      children: []
                      pos: 34902
                      length: 37
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkNotNull(priority);
                      children: []
                      pos: 34946
                      length: 37
                    - type: return_statement
                      fields:
                        text: return priority;
                      children: []
                      pos: 34990
                      length: 16
                    pos: 34894
                    length: 118
                children: []
                pos: 34841
                length: 171
              pos: 33139
              length: 1877
          children: []
          pos: 33139
          length: 1877
        pos: 1356
        length: 33662
    children: []
    pos: 1356
    length: 33662
  pos: 0
  length: 35019
text_diff: |
  --- before
  +++ after
  @@ -764,7 +764,7 @@
           } else if (parent.getLastChild() == node){
             if (cfa != null) {
               for (Node finallyNode : cfa.finallyMap.get(parent)) {
  -              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
  +              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
               }
             }
             return computeFollowNode(fromNode, parent, cfa);
tree_diff: |+
  New cluster:
  UPDATE from {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      } to {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      }
  ------------
  ===
  update-node
  ---
  switch_block: {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      } [24428,26511]
  replace {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      } by {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      }

...
