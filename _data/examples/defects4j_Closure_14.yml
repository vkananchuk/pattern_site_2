---
language: java
text_diff: |
  --- before
  +++ after
  @@ -764,7 +764,7 @@
           } else if (parent.getLastChild() == node){
             if (cfa != null) {
               for (Node finallyNode : cfa.finallyMap.get(parent)) {
  -              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
  +              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
               }
             }
             return computeFollowNode(fromNode, parent, cfa);
tree_diff: |+
  New cluster:
  UPDATE from {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      } to {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      }
  ------------
  ===
  update-node
  ---
  switch_block: {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      } [24428,26511]
  replace {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      } by {
        // The follow() of any of the path from IF would be what follows IF.
        case Token.IF:
          return computeFollowNode(fromNode, parent, cfa);
        case Token.CASE:
        case Token.DEFAULT_CASE:
          // After the body of a CASE, the control goes to the body of the next
          // case, without having to go to the case condition.
          if (parent.getNext() != null) {
            if (parent.getNext().isCase()) {
              return parent.getNext().getFirstChild().getNext();
            } else if (parent.getNext().isDefaultCase()) {
              return parent.getNext().getFirstChild();
            } else {
              Preconditions.checkState(false, "Not reachable");
            }
          } else {
            return computeFollowNode(fromNode, parent, cfa);
          }
          break;
        case Token.FOR:
          if (NodeUtil.isForIn(parent)) {
            return parent;
          } else {
            return parent.getFirstChild().getNext().getNext();
          }
        case Token.WHILE:
        case Token.DO:
          return parent;
        case Token.TRY:
          // If we are coming out of the TRY block...
          if (parent.getFirstChild() == node) {
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(parent.getLastChild());
            } else { // and have no FINALLY.
              return computeFollowNode(fromNode, parent, cfa);
            }
          // CATCH block.
          } else if (NodeUtil.getCatchBlock(parent) == node){
            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
              return computeFallThrough(node.getNext());
            } else {
              return computeFollowNode(fromNode, parent, cfa);
            }
          // If we are coming out of the FINALLY block...
          } else if (parent.getLastChild() == node){
            if (cfa != null) {
              for (Node finallyNode : cfa.finallyMap.get(parent)) {
                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
              }
            }
            return computeFollowNode(fromNode, parent, cfa);
          }
      }

...
