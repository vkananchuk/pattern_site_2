---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: LiveVariablesAnalysis
        children: []
        pos: 1957
        length: 21
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final String ARGUMENT_ARRAY_ALIAS = "arguments";
          children: []
          pos: 2062
          length: 62
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: LiveVariableJoinOp
              children: []
              pos: 2149
              length: 18
            body:
              type: class_body
              fields: {}
              children:
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: apply
                    children: []
                    pos: 2260
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: List<LiveVariableLattice> in
                      children: []
                      pos: 2266
                      length: 28
                    pos: 2219
                    length: 274
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: LiveVariableLattice result = new LiveVariableLattice(in.get(0));
                      children: []
                      pos: 2304
                      length: 64
                    - type: for_statement
                      fields:
                        text: |-
                          for (int i = 1; i < in.size(); i++) {
                                  result.liveSet.or(in.get(i).liveSet);
                                }
                      children: []
                      pos: 2375
                      length: 91
                    - type: return_statement
                      fields:
                        text: return result;
                      children: []
                      pos: 2473
                      length: 14
                    pos: 2296
                    length: 197
                children: []
                pos: 2219
                length: 274
              pos: 2128
              length: 369
          children: []
          pos: 2128
          length: 369
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: LiveVariableLattice
              children: []
              pos: 2736
              length: 19
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final BitSet liveSet;
                children: []
                pos: 2788
                length: 29
              - type: constructor_declaration
                fields:
                  text: |-
                    private LiveVariableLattice(int numVars) {
                          this.liveSet = new BitSet(numVars);
                        }
                children: []
                pos: 2892
                length: 90
              - type: constructor_declaration
                fields:
                  text: |-
                    private LiveVariableLattice(LiveVariableLattice other) {
                          Preconditions.checkNotNull(other);
                          this.liveSet = (BitSet) other.liveSet.clone();
                        }
                children: []
                pos: 2988
                length: 156
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: equals
                    children: []
                    pos: 3179
                    length: 6
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Object other
                      children: []
                      pos: 3186
                      length: 12
                    pos: 3150
                    length: 223
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkNotNull(other);
                      children: []
                      pos: 3208
                      length: 34
                    - type: return_statement
                      fields:
                        text: |-
                          return (other instanceof LiveVariableLattice) &&
                                    this.liveSet.equals(((LiveVariableLattice) other).liveSet);
                      children: []
                      pos: 3249
                      length: 118
                    pos: 3200
                    length: 173
                children: []
                pos: 3150
                length: 223
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isLive
                    children: []
                    pos: 3394
                    length: 6
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var v
                      children: []
                      pos: 3401
                      length: 5
                    pos: 3379
                    length: 108
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkNotNull(v);
                      children: []
                      pos: 3416
                      length: 30
                    - type: return_statement
                      fields:
                        text: return liveSet.get(v.index);
                      children: []
                      pos: 3453
                      length: 28
                    pos: 3408
                    length: 79
                children: []
                pos: 3379
                length: 108
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isLive
                    children: []
                    pos: 3508
                    length: 6
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: int index
                      children: []
                      pos: 3515
                      length: 9
                    pos: 3493
                    length: 73
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return liveSet.get(index);
                      children: []
                      pos: 3534
                      length: 26
                    pos: 3526
                    length: 40
                children: []
                pos: 3493
                length: 73
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: toString
                    children: []
                    pos: 3600
                    length: 8
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 3572
                    length: 79
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return liveSet.toString();
                      children: []
                      pos: 3619
                      length: 26
                    pos: 3611
                    length: 40
                children: []
                pos: 3572
                length: 79
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: hashCode
                    children: []
                    pos: 3682
                    length: 8
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 3657
                    length: 76
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return liveSet.hashCode();
                      children: []
                      pos: 3701
                      length: 26
                    pos: 3693
                    length: 40
                children: []
                pos: 3657
                length: 76
              pos: 2723
              length: 1014
          children: []
          pos: 2723
          length: 1014
        - type: field_declaration
          fields:
            text: private final Scope jsScope;
          children: []
          pos: 3795
          length: 28
        - type: field_declaration
          fields:
            text: private final Set<Var> escaped;
          children: []
          pos: 3826
          length: 31
        - type: constructor_declaration
          fields:
            text: |-
              LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope,
                    AbstractCompiler compiler) {
                  super(cfg, new LiveVariableJoinOp());
                  this.jsScope = jsScope;
                  this.escaped = Sets.newHashSet();
                  computeEscaped(jsScope, escaped, compiler);
                }
          children: []
          pos: 3861
          length: 259
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getEscapedLocals
              children: []
              pos: 4140
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4124
              length: 60
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return escaped;
                children: []
                pos: 4165
                length: 15
              pos: 4159
              length: 25
          children: []
          pos: 4124
          length: 60
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getVarIndex
              children: []
              pos: 4199
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String var
                children: []
                pos: 4211
                length: 10
              pos: 4188
              length: 78
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return jsScope.getVar(var).index;
                children: []
                pos: 4229
                length: 33
              pos: 4223
              length: 43
          children: []
          pos: 4188
          length: 78
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isForward
              children: []
              pos: 4290
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4270
              length: 55
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 4308
                length: 13
              pos: 4302
              length: 23
          children: []
          pos: 4270
          length: 55
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createEntryLattice
              children: []
              pos: 4361
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4329
              length: 117
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new LiveVariableLattice(jsScope.getVarCount());
                children: []
                pos: 4388
                length: 54
              pos: 4382
              length: 64
          children: []
          pos: 4329
          length: 117
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createInitialEstimateLattice
              children: []
              pos: 4482
              length: 28
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4450
              length: 127
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new LiveVariableLattice(jsScope.getVarCount());
                children: []
                pos: 4519
                length: 54
              pos: 4513
              length: 64
          children: []
          pos: 4450
          length: 127
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flowThrough
              children: []
              pos: 4613
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 4625
                length: 9
              pos: 4581
              length: 761
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: final BitSet gen = new BitSet(input.liveSet.size());
                children: []
                pos: 4669
                length: 52
              - type: local_variable_declaration
                fields:
                  text: final BitSet kill = new BitSet(input.liveSet.size());
                children: []
                pos: 4726
                length: 53
              - type: local_variable_declaration
                fields:
                  text: boolean conditional = false;
                children: []
                pos: 4861
                length: 28
              - type: local_variable_declaration
                fields:
                  text: List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node);
                children: []
                pos: 4894
                length: 70
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (DiGraphEdge<Node, Branch> edge : edgeList) {
                          if (Branch.ON_EX.equals(edge.getValue())) {
                            conditional = true;
                          }
                        }
                children: []
                pos: 4969
                length: 141
              - type: expression_statement
                fields:
                  text: computeGenKill(node, gen, kill, conditional);
                children: []
                pos: 5115
                length: 45
              - type: local_variable_declaration
                fields:
                  text: LiveVariableLattice result = new LiveVariableLattice(input);
                children: []
                pos: 5165
                length: 60
              - type: expression_statement
                fields:
                  text: result.liveSet.andNot(kill);
                children: []
                pos: 5263
                length: 28
              - type: expression_statement
                fields:
                  text: result.liveSet.or(gen);
                children: []
                pos: 5296
                length: 23
              - type: return_statement
                fields:
                  text: return result;
                children: []
                pos: 5324
                length: 14
              pos: 4663
              length: 679
          children: []
          pos: 4581
          length: 761
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeGenKill
              children: []
              pos: 5843
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 5858
                length: 6
              pos: 5830
              length: 2692
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 5933
                        length: 11
                    children: []
                    pos: 5932
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.SCRIPT:
                              case Token.BLOCK:
                              case Token.FUNCTION:
                                return;

                              case Token.WHILE:
                              case Token.DO:
                              case Token.IF:
                                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
                                    conditional);
                                return;

                              case Token.FOR:
                                if (!NodeUtil.isForIn(n)) {
                                  computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
                                      conditional);
                                } else {
                                  // for(x in y) {...}
                                  Node lhs = n.getFirstChild();
                                  Node rhs = lhs.getNext();
                                  if (NodeUtil.isVar(lhs)) {
                                    // for(var x in y) {...}
                                    lhs = lhs.getLastChild();
                                  }
                                  if (NodeUtil.isName(lhs)) {
                                    addToSetIfLocal(lhs, kill);
                                    addToSetIfLocal(lhs, gen);
                                  } else {
                                    computeGenKill(lhs, gen, kill, conditional);
                                  }
                                  computeGenKill(rhs, gen, kill, conditional);
                                }
                                return;

                              case Token.VAR:
                                for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                                  if (c.hasChildren()) {
                                    computeGenKill(c.getFirstChild(), gen, kill, conditional);
                                    if (!conditional) {
                                      addToSetIfLocal(c, kill);
                                    }
                                  }
                                }
                                return;

                              case Token.AND:
                              case Token.OR:
                                computeGenKill(n.getFirstChild(), gen, kill, conditional);
                                // May short circuit.
                                computeGenKill(n.getLastChild(), gen, kill, true);
                                return;

                              case Token.HOOK:
                                computeGenKill(n.getFirstChild(), gen, kill, conditional);
                                // Assume both sides are conditional.
                                computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
                                computeGenKill(n.getLastChild(), gen, kill, true);
                                return;

                              case Token.NAME:
                                if (isArgumentsName(n)) {
                                  markAllParametersEscaped();
                                } else {
                                  addToSetIfLocal(n, gen);
                                }
                                return;

                              default:
                                if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
                                  Node lhs = n.getFirstChild();
                                  if (!conditional) {
                                    addToSetIfLocal(lhs, kill);
                                  }
                                  if (!NodeUtil.isAssign(n)) {
                                    // assignments such as a += 1 reads a.
                                    addToSetIfLocal(lhs, gen);
                                  }
                                  computeGenKill(lhs.getNext(), gen, kill, conditional);
                                } else {
                                  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                                    computeGenKill(c, gen, kill, conditional);
                                  }
                                }
                                return;
                            }
                    children: []
                    pos: 5946
                    length: 2572
                children: []
                pos: 5925
                length: 2593
              pos: 5918
              length: 2604
          children: []
          pos: 5830
          length: 2692
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: addToSetIfLocal
              children: []
              pos: 8539
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 8555
                length: 9
              pos: 8526
              length: 312
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(NodeUtil.isName(node));
                children: []
                pos: 8584
                length: 48
              - type: local_variable_declaration
                fields:
                  text: String name = node.getString();
                children: []
                pos: 8637
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!jsScope.isDeclared(name, false)"
                        children: []
                        pos: 8677
                        length: 32
                    children: []
                    pos: 8676
                    length: 34
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 8719
                    length: 7
                  pos: 8711
                  length: 21
                pos: 8673
                length: 59
              - type: local_variable_declaration
                fields:
                  text: Var var = jsScope.getVar(name);
                children: []
                pos: 8737
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!escaped.contains(var)"
                        children: []
                        pos: 8777
                        length: 22
                    children: []
                    pos: 8776
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: set.set(var.index);
                    children: []
                    pos: 8809
                    length: 19
                  pos: 8801
                  length: 33
                pos: 8773
                length: 61
              pos: 8578
              length: 260
          children: []
          pos: 8526
          length: 312
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: markAllParametersEscaped
              children: []
              pos: 8971
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8966
              length: 233
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node lp = jsScope.getRootNode().getFirstChild().getNext();
                children: []
                pos: 9004
                length: 58
              - type: for_statement
                fields:
                  text: |-
                    for(Node arg = lp.getFirstChild(); arg != null; arg = arg.getNext()) {
                          escaped.add(jsScope.getVar(arg.getString()));
                        }
                children: []
                pos: 9067
                length: 128
              pos: 8998
              length: 201
          children: []
          pos: 8966
          length: 233
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isArgumentsName
              children: []
              pos: 9219
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 9235
                length: 6
              pos: 9203
              length: 254
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: n.getType()
                                    children: []
                                    pos: 9253
                                    length: 11
                                  right:
                                    type: field_access
                                    fields:
                                      text: Token.NAME
                                    children: []
                                    pos: 9268
                                    length: 10
                                children: []
                                pos: 9253
                                length: 25
                              right:
                                type: unary_expression
                                fields:
                                  text: "!n.getString().equals(ARGUMENT_ARRAY_ALIAS)"
                                children: []
                                pos: 9290
                                length: 43
                            children: []
                            pos: 9253
                            length: 80
                          right:
                            type: method_invocation
                            fields:
                              text: jsScope.isDeclared(ARGUMENT_ARRAY_ALIAS, false)
                            children: []
                            pos: 9345
                            length: 47
                        children: []
                        pos: 9253
                        length: 139
                    children: []
                    pos: 9252
                    length: 141
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 9402
                    length: 13
                  pos: 9394
                  length: 27
                pos: 9249
                length: 204
              pos: 9243
              length: 214
          children: []
          pos: 9203
          length: 254
        pos: 1951
        length: 7508
    children: []
    pos: 1951
    length: 7508
  pos: 0
  length: 9460
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: LiveVariablesAnalysis
        children: []
        pos: 1957
        length: 21
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final String ARGUMENT_ARRAY_ALIAS = "arguments";
          children: []
          pos: 2062
          length: 62
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: LiveVariableJoinOp
              children: []
              pos: 2149
              length: 18
            body:
              type: class_body
              fields: {}
              children:
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: apply
                    children: []
                    pos: 2260
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: List<LiveVariableLattice> in
                      children: []
                      pos: 2266
                      length: 28
                    pos: 2219
                    length: 274
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: LiveVariableLattice result = new LiveVariableLattice(in.get(0));
                      children: []
                      pos: 2304
                      length: 64
                    - type: for_statement
                      fields:
                        text: |-
                          for (int i = 1; i < in.size(); i++) {
                                  result.liveSet.or(in.get(i).liveSet);
                                }
                      children: []
                      pos: 2375
                      length: 91
                    - type: return_statement
                      fields:
                        text: return result;
                      children: []
                      pos: 2473
                      length: 14
                    pos: 2296
                    length: 197
                children: []
                pos: 2219
                length: 274
              pos: 2128
              length: 369
          children: []
          pos: 2128
          length: 369
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: LiveVariableLattice
              children: []
              pos: 2736
              length: 19
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final BitSet liveSet;
                children: []
                pos: 2788
                length: 29
              - type: constructor_declaration
                fields:
                  text: |-
                    private LiveVariableLattice(int numVars) {
                          this.liveSet = new BitSet(numVars);
                        }
                children: []
                pos: 2892
                length: 90
              - type: constructor_declaration
                fields:
                  text: |-
                    private LiveVariableLattice(LiveVariableLattice other) {
                          Preconditions.checkNotNull(other);
                          this.liveSet = (BitSet) other.liveSet.clone();
                        }
                children: []
                pos: 2988
                length: 156
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: equals
                    children: []
                    pos: 3179
                    length: 6
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Object other
                      children: []
                      pos: 3186
                      length: 12
                    pos: 3150
                    length: 223
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkNotNull(other);
                      children: []
                      pos: 3208
                      length: 34
                    - type: return_statement
                      fields:
                        text: |-
                          return (other instanceof LiveVariableLattice) &&
                                    this.liveSet.equals(((LiveVariableLattice) other).liveSet);
                      children: []
                      pos: 3249
                      length: 118
                    pos: 3200
                    length: 173
                children: []
                pos: 3150
                length: 223
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isLive
                    children: []
                    pos: 3394
                    length: 6
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var v
                      children: []
                      pos: 3401
                      length: 5
                    pos: 3379
                    length: 108
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkNotNull(v);
                      children: []
                      pos: 3416
                      length: 30
                    - type: return_statement
                      fields:
                        text: return liveSet.get(v.index);
                      children: []
                      pos: 3453
                      length: 28
                    pos: 3408
                    length: 79
                children: []
                pos: 3379
                length: 108
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isLive
                    children: []
                    pos: 3508
                    length: 6
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: int index
                      children: []
                      pos: 3515
                      length: 9
                    pos: 3493
                    length: 73
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return liveSet.get(index);
                      children: []
                      pos: 3534
                      length: 26
                    pos: 3526
                    length: 40
                children: []
                pos: 3493
                length: 73
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: toString
                    children: []
                    pos: 3600
                    length: 8
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 3572
                    length: 79
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return liveSet.toString();
                      children: []
                      pos: 3619
                      length: 26
                    pos: 3611
                    length: 40
                children: []
                pos: 3572
                length: 79
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: hashCode
                    children: []
                    pos: 3682
                    length: 8
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 3657
                    length: 76
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return liveSet.hashCode();
                      children: []
                      pos: 3701
                      length: 26
                    pos: 3693
                    length: 40
                children: []
                pos: 3657
                length: 76
              pos: 2723
              length: 1014
          children: []
          pos: 2723
          length: 1014
        - type: field_declaration
          fields:
            text: private final Scope jsScope;
          children: []
          pos: 3795
          length: 28
        - type: field_declaration
          fields:
            text: private final Set<Var> escaped;
          children: []
          pos: 3826
          length: 31
        - type: constructor_declaration
          fields:
            text: |-
              LiveVariablesAnalysis(ControlFlowGraph<Node> cfg, Scope jsScope,
                    AbstractCompiler compiler) {
                  super(cfg, new LiveVariableJoinOp());
                  this.jsScope = jsScope;
                  this.escaped = Sets.newHashSet();
                  computeEscaped(jsScope, escaped, compiler);
                }
          children: []
          pos: 3861
          length: 259
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getEscapedLocals
              children: []
              pos: 4140
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4124
              length: 60
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return escaped;
                children: []
                pos: 4165
                length: 15
              pos: 4159
              length: 25
          children: []
          pos: 4124
          length: 60
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getVarIndex
              children: []
              pos: 4199
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String var
                children: []
                pos: 4211
                length: 10
              pos: 4188
              length: 78
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return jsScope.getVar(var).index;
                children: []
                pos: 4229
                length: 33
              pos: 4223
              length: 43
          children: []
          pos: 4188
          length: 78
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isForward
              children: []
              pos: 4290
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4270
              length: 55
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 4308
                length: 13
              pos: 4302
              length: 23
          children: []
          pos: 4270
          length: 55
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createEntryLattice
              children: []
              pos: 4361
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4329
              length: 117
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new LiveVariableLattice(jsScope.getVarCount());
                children: []
                pos: 4388
                length: 54
              pos: 4382
              length: 64
          children: []
          pos: 4329
          length: 117
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createInitialEstimateLattice
              children: []
              pos: 4482
              length: 28
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4450
              length: 127
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new LiveVariableLattice(jsScope.getVarCount());
                children: []
                pos: 4519
                length: 54
              pos: 4513
              length: 64
          children: []
          pos: 4450
          length: 127
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flowThrough
              children: []
              pos: 4613
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 4625
                length: 9
              pos: 4581
              length: 761
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: final BitSet gen = new BitSet(input.liveSet.size());
                children: []
                pos: 4669
                length: 52
              - type: local_variable_declaration
                fields:
                  text: final BitSet kill = new BitSet(input.liveSet.size());
                children: []
                pos: 4726
                length: 53
              - type: local_variable_declaration
                fields:
                  text: boolean conditional = false;
                children: []
                pos: 4861
                length: 28
              - type: local_variable_declaration
                fields:
                  text: List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node);
                children: []
                pos: 4894
                length: 70
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (DiGraphEdge<Node, Branch> edge : edgeList) {
                          if (Branch.ON_EX.equals(edge.getValue())) {
                            conditional = true;
                          }
                        }
                children: []
                pos: 4969
                length: 141
              - type: expression_statement
                fields:
                  text: computeGenKill(node, gen, kill, conditional);
                children: []
                pos: 5115
                length: 45
              - type: local_variable_declaration
                fields:
                  text: LiveVariableLattice result = new LiveVariableLattice(input);
                children: []
                pos: 5165
                length: 60
              - type: expression_statement
                fields:
                  text: result.liveSet.andNot(kill);
                children: []
                pos: 5263
                length: 28
              - type: expression_statement
                fields:
                  text: result.liveSet.or(gen);
                children: []
                pos: 5296
                length: 23
              - type: return_statement
                fields:
                  text: return result;
                children: []
                pos: 5324
                length: 14
              pos: 4663
              length: 679
          children: []
          pos: 4581
          length: 761
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeGenKill
              children: []
              pos: 5843
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 5858
                length: 6
              pos: 5830
              length: 2566
            body:
              type: block
              fields: {}
              children:
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 5933
                        length: 11
                    children: []
                    pos: 5932
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.SCRIPT:
                              case Token.BLOCK:
                              case Token.FUNCTION:
                                return;

                              case Token.WHILE:
                              case Token.DO:
                              case Token.IF:
                                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
                                    conditional);
                                return;

                              case Token.FOR:
                                if (!NodeUtil.isForIn(n)) {
                                  computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
                                      conditional);
                                } else {
                                  // for(x in y) {...}
                                  Node lhs = n.getFirstChild();
                                  Node rhs = lhs.getNext();
                                  if (NodeUtil.isVar(lhs)) {
                                    // for(var x in y) {...}
                                    lhs = lhs.getLastChild();
                                  }
                                    addToSetIfLocal(lhs, kill);
                                    addToSetIfLocal(lhs, gen);
                                  computeGenKill(rhs, gen, kill, conditional);
                                }
                                return;

                              case Token.VAR:
                                for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                                  if (c.hasChildren()) {
                                    computeGenKill(c.getFirstChild(), gen, kill, conditional);
                                    if (!conditional) {
                                      addToSetIfLocal(c, kill);
                                    }
                                  }
                                }
                                return;

                              case Token.AND:
                              case Token.OR:
                                computeGenKill(n.getFirstChild(), gen, kill, conditional);
                                // May short circuit.
                                computeGenKill(n.getLastChild(), gen, kill, true);
                                return;

                              case Token.HOOK:
                                computeGenKill(n.getFirstChild(), gen, kill, conditional);
                                // Assume both sides are conditional.
                                computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
                                computeGenKill(n.getLastChild(), gen, kill, true);
                                return;

                              case Token.NAME:
                                if (isArgumentsName(n)) {
                                  markAllParametersEscaped();
                                } else {
                                  addToSetIfLocal(n, gen);
                                }
                                return;

                              default:
                                if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
                                  Node lhs = n.getFirstChild();
                                  if (!conditional) {
                                    addToSetIfLocal(lhs, kill);
                                  }
                                  if (!NodeUtil.isAssign(n)) {
                                    // assignments such as a += 1 reads a.
                                    addToSetIfLocal(lhs, gen);
                                  }
                                  computeGenKill(lhs.getNext(), gen, kill, conditional);
                                } else {
                                  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                                    computeGenKill(c, gen, kill, conditional);
                                  }
                                }
                                return;
                            }
                    children: []
                    pos: 5946
                    length: 2446
                children: []
                pos: 5925
                length: 2467
              pos: 5918
              length: 2478
          children: []
          pos: 5830
          length: 2566
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: addToSetIfLocal
              children: []
              pos: 8413
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node node
                children: []
                pos: 8429
                length: 9
              pos: 8400
              length: 312
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(NodeUtil.isName(node));
                children: []
                pos: 8458
                length: 48
              - type: local_variable_declaration
                fields:
                  text: String name = node.getString();
                children: []
                pos: 8511
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!jsScope.isDeclared(name, false)"
                        children: []
                        pos: 8551
                        length: 32
                    children: []
                    pos: 8550
                    length: 34
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 8593
                    length: 7
                  pos: 8585
                  length: 21
                pos: 8547
                length: 59
              - type: local_variable_declaration
                fields:
                  text: Var var = jsScope.getVar(name);
                children: []
                pos: 8611
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!escaped.contains(var)"
                        children: []
                        pos: 8651
                        length: 22
                    children: []
                    pos: 8650
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: set.set(var.index);
                    children: []
                    pos: 8683
                    length: 19
                  pos: 8675
                  length: 33
                pos: 8647
                length: 61
              pos: 8452
              length: 260
          children: []
          pos: 8400
          length: 312
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: markAllParametersEscaped
              children: []
              pos: 8845
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8840
              length: 233
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node lp = jsScope.getRootNode().getFirstChild().getNext();
                children: []
                pos: 8878
                length: 58
              - type: for_statement
                fields:
                  text: |-
                    for(Node arg = lp.getFirstChild(); arg != null; arg = arg.getNext()) {
                          escaped.add(jsScope.getVar(arg.getString()));
                        }
                children: []
                pos: 8941
                length: 128
              pos: 8872
              length: 201
          children: []
          pos: 8840
          length: 233
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isArgumentsName
              children: []
              pos: 9093
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 9109
                length: 6
              pos: 9077
              length: 254
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: not_equals
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: n.getType()
                                    children: []
                                    pos: 9127
                                    length: 11
                                  right:
                                    type: field_access
                                    fields:
                                      text: Token.NAME
                                    children: []
                                    pos: 9142
                                    length: 10
                                children: []
                                pos: 9127
                                length: 25
                              right:
                                type: unary_expression
                                fields:
                                  text: "!n.getString().equals(ARGUMENT_ARRAY_ALIAS)"
                                children: []
                                pos: 9164
                                length: 43
                            children: []
                            pos: 9127
                            length: 80
                          right:
                            type: method_invocation
                            fields:
                              text: jsScope.isDeclared(ARGUMENT_ARRAY_ALIAS, false)
                            children: []
                            pos: 9219
                            length: 47
                        children: []
                        pos: 9127
                        length: 139
                    children: []
                    pos: 9126
                    length: 141
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 9276
                    length: 13
                  pos: 9268
                  length: 27
                pos: 9123
                length: 204
              pos: 9117
              length: 214
          children: []
          pos: 9077
          length: 254
        pos: 1951
        length: 7382
    children: []
    pos: 1951
    length: 7382
  pos: 0
  length: 9334
text_diff: |
  --- before
  +++ after
  @@ -203,12 +203,8 @@
               // for(var x in y) {...}
               lhs = lhs.getLastChild();
             }
  -          if (NodeUtil.isName(lhs)) {
               addToSetIfLocal(lhs, kill);
               addToSetIfLocal(lhs, gen);
  -          } else {
  -            computeGenKill(lhs, gen, kill, conditional);
  -          }
             computeGenKill(rhs, gen, kill, conditional);
           }
           return;
tree_diff: |+
  New cluster:
  UPDATE from {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.FUNCTION:
          return;

        case Token.WHILE:
        case Token.DO:
        case Token.IF:
          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
              conditional);
          return;

        case Token.FOR:
          if (!NodeUtil.isForIn(n)) {
            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
                conditional);
          } else {
            // for(x in y) {...}
            Node lhs = n.getFirstChild();
            Node rhs = lhs.getNext();
            if (NodeUtil.isVar(lhs)) {
              // for(var x in y) {...}
              lhs = lhs.getLastChild();
            }
            if (NodeUtil.isName(lhs)) {
              addToSetIfLocal(lhs, kill);
              addToSetIfLocal(lhs, gen);
            } else {
              computeGenKill(lhs, gen, kill, conditional);
            }
            computeGenKill(rhs, gen, kill, conditional);
          }
          return;

        case Token.VAR:
          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.hasChildren()) {
              computeGenKill(c.getFirstChild(), gen, kill, conditional);
              if (!conditional) {
                addToSetIfLocal(c, kill);
              }
            }
          }
          return;

        case Token.AND:
        case Token.OR:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // May short circuit.
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.HOOK:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // Assume both sides are conditional.
          computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.NAME:
          if (isArgumentsName(n)) {
            markAllParametersEscaped();
          } else {
            addToSetIfLocal(n, gen);
          }
          return;

        default:
          if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
            Node lhs = n.getFirstChild();
            if (!conditional) {
              addToSetIfLocal(lhs, kill);
            }
            if (!NodeUtil.isAssign(n)) {
              // assignments such as a += 1 reads a.
              addToSetIfLocal(lhs, gen);
            }
            computeGenKill(lhs.getNext(), gen, kill, conditional);
          } else {
            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
              computeGenKill(c, gen, kill, conditional);
            }
          }
          return;
      } to {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.FUNCTION:
          return;

        case Token.WHILE:
        case Token.DO:
        case Token.IF:
          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
              conditional);
          return;

        case Token.FOR:
          if (!NodeUtil.isForIn(n)) {
            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
                conditional);
          } else {
            // for(x in y) {...}
            Node lhs = n.getFirstChild();
            Node rhs = lhs.getNext();
            if (NodeUtil.isVar(lhs)) {
              // for(var x in y) {...}
              lhs = lhs.getLastChild();
            }
              addToSetIfLocal(lhs, kill);
              addToSetIfLocal(lhs, gen);
            computeGenKill(rhs, gen, kill, conditional);
          }
          return;

        case Token.VAR:
          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.hasChildren()) {
              computeGenKill(c.getFirstChild(), gen, kill, conditional);
              if (!conditional) {
                addToSetIfLocal(c, kill);
              }
            }
          }
          return;

        case Token.AND:
        case Token.OR:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // May short circuit.
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.HOOK:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // Assume both sides are conditional.
          computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.NAME:
          if (isArgumentsName(n)) {
            markAllParametersEscaped();
          } else {
            addToSetIfLocal(n, gen);
          }
          return;

        default:
          if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
            Node lhs = n.getFirstChild();
            if (!conditional) {
              addToSetIfLocal(lhs, kill);
            }
            if (!NodeUtil.isAssign(n)) {
              // assignments such as a += 1 reads a.
              addToSetIfLocal(lhs, gen);
            }
            computeGenKill(lhs.getNext(), gen, kill, conditional);
          } else {
            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
              computeGenKill(c, gen, kill, conditional);
            }
          }
          return;
      }
  ------------
  ===
  update-node
  ---
  switch_block: {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.FUNCTION:
          return;

        case Token.WHILE:
        case Token.DO:
        case Token.IF:
          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
              conditional);
          return;

        case Token.FOR:
          if (!NodeUtil.isForIn(n)) {
            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
                conditional);
          } else {
            // for(x in y) {...}
            Node lhs = n.getFirstChild();
            Node rhs = lhs.getNext();
            if (NodeUtil.isVar(lhs)) {
              // for(var x in y) {...}
              lhs = lhs.getLastChild();
            }
            if (NodeUtil.isName(lhs)) {
              addToSetIfLocal(lhs, kill);
              addToSetIfLocal(lhs, gen);
            } else {
              computeGenKill(lhs, gen, kill, conditional);
            }
            computeGenKill(rhs, gen, kill, conditional);
          }
          return;

        case Token.VAR:
          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.hasChildren()) {
              computeGenKill(c.getFirstChild(), gen, kill, conditional);
              if (!conditional) {
                addToSetIfLocal(c, kill);
              }
            }
          }
          return;

        case Token.AND:
        case Token.OR:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // May short circuit.
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.HOOK:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // Assume both sides are conditional.
          computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.NAME:
          if (isArgumentsName(n)) {
            markAllParametersEscaped();
          } else {
            addToSetIfLocal(n, gen);
          }
          return;

        default:
          if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
            Node lhs = n.getFirstChild();
            if (!conditional) {
              addToSetIfLocal(lhs, kill);
            }
            if (!NodeUtil.isAssign(n)) {
              // assignments such as a += 1 reads a.
              addToSetIfLocal(lhs, gen);
            }
            computeGenKill(lhs.getNext(), gen, kill, conditional);
          } else {
            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
              computeGenKill(c, gen, kill, conditional);
            }
          }
          return;
      } [5946,8518]
  replace {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.FUNCTION:
          return;

        case Token.WHILE:
        case Token.DO:
        case Token.IF:
          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
              conditional);
          return;

        case Token.FOR:
          if (!NodeUtil.isForIn(n)) {
            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
                conditional);
          } else {
            // for(x in y) {...}
            Node lhs = n.getFirstChild();
            Node rhs = lhs.getNext();
            if (NodeUtil.isVar(lhs)) {
              // for(var x in y) {...}
              lhs = lhs.getLastChild();
            }
            if (NodeUtil.isName(lhs)) {
              addToSetIfLocal(lhs, kill);
              addToSetIfLocal(lhs, gen);
            } else {
              computeGenKill(lhs, gen, kill, conditional);
            }
            computeGenKill(rhs, gen, kill, conditional);
          }
          return;

        case Token.VAR:
          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.hasChildren()) {
              computeGenKill(c.getFirstChild(), gen, kill, conditional);
              if (!conditional) {
                addToSetIfLocal(c, kill);
              }
            }
          }
          return;

        case Token.AND:
        case Token.OR:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // May short circuit.
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.HOOK:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // Assume both sides are conditional.
          computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.NAME:
          if (isArgumentsName(n)) {
            markAllParametersEscaped();
          } else {
            addToSetIfLocal(n, gen);
          }
          return;

        default:
          if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
            Node lhs = n.getFirstChild();
            if (!conditional) {
              addToSetIfLocal(lhs, kill);
            }
            if (!NodeUtil.isAssign(n)) {
              // assignments such as a += 1 reads a.
              addToSetIfLocal(lhs, gen);
            }
            computeGenKill(lhs.getNext(), gen, kill, conditional);
          } else {
            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
              computeGenKill(c, gen, kill, conditional);
            }
          }
          return;
      } by {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.FUNCTION:
          return;

        case Token.WHILE:
        case Token.DO:
        case Token.IF:
          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
              conditional);
          return;

        case Token.FOR:
          if (!NodeUtil.isForIn(n)) {
            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
                conditional);
          } else {
            // for(x in y) {...}
            Node lhs = n.getFirstChild();
            Node rhs = lhs.getNext();
            if (NodeUtil.isVar(lhs)) {
              // for(var x in y) {...}
              lhs = lhs.getLastChild();
            }
              addToSetIfLocal(lhs, kill);
              addToSetIfLocal(lhs, gen);
            computeGenKill(rhs, gen, kill, conditional);
          }
          return;

        case Token.VAR:
          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.hasChildren()) {
              computeGenKill(c.getFirstChild(), gen, kill, conditional);
              if (!conditional) {
                addToSetIfLocal(c, kill);
              }
            }
          }
          return;

        case Token.AND:
        case Token.OR:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // May short circuit.
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.HOOK:
          computeGenKill(n.getFirstChild(), gen, kill, conditional);
          // Assume both sides are conditional.
          computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
          computeGenKill(n.getLastChild(), gen, kill, true);
          return;

        case Token.NAME:
          if (isArgumentsName(n)) {
            markAllParametersEscaped();
          } else {
            addToSetIfLocal(n, gen);
          }
          return;

        default:
          if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
            Node lhs = n.getFirstChild();
            if (!conditional) {
              addToSetIfLocal(lhs, kill);
            }
            if (!NodeUtil.isAssign(n)) {
              // assignments such as a += 1 reads a.
              addToSetIfLocal(lhs, gen);
            }
            computeGenKill(lhs.getNext(), gen, kill, conditional);
          } else {
            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
              computeGenKill(c, gen, kill, conditional);
            }
          }
          return;
      }

...
