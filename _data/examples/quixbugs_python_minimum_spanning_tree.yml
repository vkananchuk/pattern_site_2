---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: minimum_spanning_tree
        children: []
        pos: 4
        length: 21
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: weight_by_edge
          children: []
          pos: 26
          length: 14
        pos: 0
        length: 472
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: group_by_node = {}
          children: []
          pos: 47
          length: 18
        - type: expression_statement
          fields:
            text: mst_edges = set()
          children: []
          pos: 70
          length: 17
        - type: for_statement
          fields:
            text: |-
              for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
                      u, v = edge
                      if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
                          mst_edges.add(edge)
                          group_by_node[u].update(group_by_node[v])
                          for node in group_by_node[v]:
                              group_by_node[node].update(group_by_node[u])
          children: []
          pos: 93
          length: 357
        - type: return_statement
          fields:
            text: return mst_edges
          children: []
          pos: 456
          length: 16
        pos: 47
        length: 425
    children: []
    pos: 0
    length: 472
  pos: 0
  length: 473
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: minimum_spanning_tree
        children: []
        pos: 4
        length: 21
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: weight_by_edge
          children: []
          pos: 26
          length: 14
        pos: 0
        length: 466
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: group_by_node = {}
          children: []
          pos: 47
          length: 18
        - type: expression_statement
          fields:
            text: mst_edges = set()
          children: []
          pos: 70
          length: 17
        - type: for_statement
          fields:
            text: |-
              for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
                      u, v = edge
                      if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
                          mst_edges.add(edge)
                          group_by_node[u].update(group_by_node[v])
                          for node in group_by_node[v]:
                              group_by_node[node] = group_by_node[u]
          children: []
          pos: 93
          length: 351
        - type: return_statement
          fields:
            text: return mst_edges
          children: []
          pos: 450
          length: 16
        pos: 47
        length: 419
    children: []
    pos: 0
    length: 466
  pos: 0
  length: 468
text_diff: "--- before\n+++ after\n@@ -8,6 +8,7 @@\n             mst_edges.add(edge)\n
  \            group_by_node[u].update(group_by_node[v])\n             for node in
  group_by_node[v]:\n-                group_by_node[node].update(group_by_node[u])\n+
  \               group_by_node[node] = group_by_node[u]\n \n     return mst_edges\n+\n"
tree_diff: |+
  New cluster:
  UPDATE from for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node].update(group_by_node[u]) to for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node] = group_by_node[u]
  ------------
  ===
  update-node
  ---
  for_statement: for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node].update(group_by_node[u]) [93,450]
  replace for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node].update(group_by_node[u]) by for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node] = group_by_node[u]

...
