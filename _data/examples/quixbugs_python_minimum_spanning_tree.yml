---
language: python
text_diff: "--- before\n+++ after\n@@ -9,34 +9,7 @@\n             mst_edges.add(edge)\n
  \            group_by_node[u].update(group_by_node[v])\n             for node in
  group_by_node[v]:\n-                group_by_node[node].update(group_by_node[u])\n+
  \               group_by_node[node] = group_by_node[u]\n \n     return mst_edges\n
  \n-\n-\n-\n-\"\"\"\n-Minimum Spanning Tree\n-\n-\n-Kruskal's algorithm implementation.\n-\n-Input:\n-
  \   weight_by_edge: A dict of the form {(u, v): weight} for every undirected graph
  edge {u, v}\n-\n-Precondition:\n-    The input graph is connected\n-\n-Output:\n-
  \   A set of edges that connects all the vertices of the input graph and has the
  least possible total weight.\n-\n-Example:\n-    >>> minimum_spanning_tree({\n-
  \   ...     (1, 2): 10,\n-    ...     (2, 3): 15,\n-    ...     (3, 4): 10,\n-    ...
  \    (1, 4): 10\n-    ... })\n-    {(1, 2), (3, 4), (1, 4)}\n-\"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node].update(group_by_node[u]) to for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node] = group_by_node[u]
  ------------
  ===
  update-node
  ---
  for_statement: for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node].update(group_by_node[u]) [94,451]
  replace for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node].update(group_by_node[u]) by for edge in sorted(weight_by_edge, key=weight_by_edge.__getitem__):
          u, v = edge
          if group_by_node.setdefault(u, {u}) != group_by_node.setdefault(v, {v}):
              mst_edges.add(edge)
              group_by_node[u].update(group_by_node[v])
              for node in group_by_node[v]:
                  group_by_node[node] = group_by_node[u]

  New cluster:
  ===
  delete-node
  ---
  expression_statement: """
  Minimum Spanning Tree


  Kruskal's algorithm implementation.

  Input:
      weight_by_edge: A dict of the form {(u, v): weight} for every undirected graph edge {u, v}

  Precondition:
      The input graph is connected

  Output:
      A set of edges that connects all the vertices of the input graph and has the least possible total weight.

  Example:
      >>> minimum_spanning_tree({
      ...     (1, 2): 10,
      ...     (2, 3): 15,
      ...     (3, 4): 10,
      ...     (1, 4): 10
      ... })
      {(1, 2), (3, 4), (1, 4)}
  """ [478,992]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: """
  Minimum Spanning Tree


  Kruskal's algorithm implementation.

  Input:
      weight_by_edge: A dict of the form {(u, v): weight} for every undirected graph edge {u, v}

  Precondition:
      The input graph is connected

  Output:
      A set of edges that connects all the vertices of the input graph and has the least possible total weight.

  Example:
      >>> minimum_spanning_tree({
      ...     (1, 2): 10,
      ...     (2, 3): 15,
      ...     (3, 4): 10,
      ...     (1, 4): 10
      ... })
      {(1, 2), (3, 4), (1, 4)}
  """ [478,992]
  ===

...
