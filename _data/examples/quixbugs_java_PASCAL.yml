---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: PASCAL
        children: []
        pos: 191
        length: 6
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pascal
              children: []
              pos: 248
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 255
                length: 5
              pos: 204
              length: 853
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
                children: []
                pos: 272
                length: 73
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> init = new ArrayList<Integer>();
                children: []
                pos: 354
                length: 51
              - type: expression_statement
                fields:
                  text: init.add(1);
                children: []
                pos: 414
                length: 12
              - type: expression_statement
                fields:
                  text: rows.add(init);
                children: []
                pos: 435
                length: 15
              - type: for_statement
                fields:
                  text: |-
                    for (int r=1; r<n; r++) {
                                ArrayList<Integer> row = new ArrayList<Integer>();
                                for (int c=0; c<r; c++) {
                                    int upleft, upright;
                                    if (c > 0) {
                                        upleft = rows.get(r-1).get(c-1);
                                    } else {
                                        upleft = 0;
                                    }
                                    if (c < r) {
                                        upright = rows.get(r-1).get(c);
                                    } else {
                                        upright = 0;
                                    }
                                    row.add(upleft+upright);
                                }
                                rows.add(row);
                            }
                children: []
                pos: 460
                length: 569
              - type: return_statement
                fields:
                  text: return rows;
                children: []
                pos: 1039
                length: 12
              pos: 262
              length: 795
          children: []
          pos: 204
          length: 853
        pos: 178
        length: 881
    children: []
    pos: 178
    length: 881
  pos: 0
  length: 1060
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: PASCAL
        children: []
        pos: 199
        length: 6
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pascal
              children: []
              pos: 256
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 263
                length: 5
              pos: 212
              length: 855
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
                children: []
                pos: 280
                length: 73
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> init = new ArrayList<Integer>();
                children: []
                pos: 362
                length: 51
              - type: expression_statement
                fields:
                  text: init.add(1);
                children: []
                pos: 422
                length: 12
              - type: expression_statement
                fields:
                  text: rows.add(init);
                children: []
                pos: 443
                length: 15
              - type: for_statement
                fields:
                  text: |-
                    for (int r=1; r<n; r++) {
                                ArrayList<Integer> row = new ArrayList<Integer>();
                                for (int c=0; c<r+1; c++) {
                                    int upleft, upright;
                                    if (c > 0) {
                                        upleft = rows.get(r-1).get(c-1);
                                    } else {
                                        upleft = 0;
                                    }
                                    if (c < r) {
                                        upright = rows.get(r-1).get(c);
                                    } else {
                                        upright = 0;
                                    }
                                    row.add(upleft+upright);
                                }
                                rows.add(row);
                            }
                children: []
                pos: 468
                length: 571
              - type: return_statement
                fields:
                  text: return rows;
                children: []
                pos: 1049
                length: 12
              pos: 270
              length: 797
          children: []
          pos: 212
          length: 855
        pos: 186
        length: 883
    children: []
    pos: 186
    length: 883
  pos: 0
  length: 1070
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n /*\n@@ -19,7 +19,7 @@\n \n         for
  (int r=1; r<n; r++) {\n             ArrayList<Integer> row = new ArrayList<Integer>();\n-
  \           for (int c=0; c<r; c++) {\n+            for (int c=0; c<r+1; c++) {\n
  \                int upleft, upright;\n                 if (c > 0) {\n                     upleft
  = rows.get(r-1).get(c-1);\n"
tree_diff: |+
  New cluster:
  UPDATE from for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
          } to for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r+1; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
          } [460,1029]
  replace for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
          } by for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r+1; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
          }

...
