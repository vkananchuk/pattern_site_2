---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: BUCKETSORT
        children: []
        pos: 191
        length: 10
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: bucketsort
              children: []
              pos: 241
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Integer> arr
                children: []
                pos: 252
                length: 22
              pos: 208
              length: 529
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));
                children: []
                pos: 293
                length: 77
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer x : arr) {
                                counts.set(x,counts.get(x)+1);
                            }
                children: []
                pos: 379
                length: 76
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);
                children: []
                pos: 465
                length: 60
              - type: local_variable_declaration
                fields:
                  text: int i = 0;
                children: []
                pos: 534
                length: 10
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer count : arr) { // arr is counts in fixed version
                                sorted_arr.addAll(Collections.nCopies(count, i));
                                i++;
                            }
                children: []
                pos: 553
                length: 150
              - type: return_statement
                fields:
                  text: return sorted_arr;
                children: []
                pos: 713
                length: 18
              pos: 283
              length: 454
          children: []
          pos: 208
          length: 529
        pos: 178
        length: 561
    children: []
    pos: 178
    length: 561
  pos: 0
  length: 740
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: BUCKETSORT
        children: []
        pos: 199
        length: 10
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: bucketsort
              children: []
              pos: 249
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Integer> arr
                children: []
                pos: 260
                length: 22
              pos: 216
              length: 498
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));
                children: []
                pos: 301
                length: 77
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer x : arr) {
                                counts.set(x,counts.get(x)+1);
                            }
                children: []
                pos: 387
                length: 76
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);
                children: []
                pos: 473
                length: 60
              - type: local_variable_declaration
                fields:
                  text: int i = 0;
                children: []
                pos: 542
                length: 10
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer count : counts) {
                                sorted_arr.addAll(Collections.nCopies(count, i));
                                i++;
                            }
                children: []
                pos: 561
                length: 119
              - type: return_statement
                fields:
                  text: return sorted_arr;
                children: []
                pos: 690
                length: 18
              pos: 291
              length: 423
          children: []
          pos: 216
          length: 498
        pos: 186
        length: 530
    children: []
    pos: 186
    length: 530
  pos: 0
  length: 717
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n /*\n@@ -19,7 +19,7 @@\n \n         ArrayList<Integer>
  sorted_arr = new ArrayList<Integer>(100);\n         int i = 0;\n-        for (Integer
  count : arr) { // arr is counts in fixed version\n+        for (Integer count :
  counts) {\n             sorted_arr.addAll(Collections.nCopies(count, i));\n             i++;\n
  \        }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (Integer count : arr) { // arr is counts in fixed version
              sorted_arr.addAll(Collections.nCopies(count, i));
              i++;
          } to for (Integer count : counts) {
              sorted_arr.addAll(Collections.nCopies(count, i));
              i++;
          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Integer count : arr) { // arr is counts in fixed version
              sorted_arr.addAll(Collections.nCopies(count, i));
              i++;
          } [553,703]
  replace for (Integer count : arr) { // arr is counts in fixed version
              sorted_arr.addAll(Collections.nCopies(count, i));
              i++;
          } by for (Integer count : counts) {
              sorted_arr.addAll(Collections.nCopies(count, i));
              i++;
          }

...
