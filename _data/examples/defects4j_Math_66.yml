---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: BrentOptimizer
        children: []
        pos: 1522
        length: 14
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
          children: []
          pos: 1622
          length: 70
        - type: constructor_declaration
          fields:
            text: |-
              public BrentOptimizer() {
                      setMaxEvaluations(1000);
                      setMaximalIterationCount(100);
                      setAbsoluteAccuracy(1e-11);
                      setRelativeAccuracy(1e-9);
                  }
          children: []
          pos: 1741
          length: 174
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: doOptimize
              children: []
              pos: 2022
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 2005
              length: 304
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return localMin(getGoalType() == GoalType.MINIMIZE,
                                            getMin(), getStartValue(), getMax(),
                                            getRelativeAccuracy(), getAbsoluteAccuracy());
                children: []
                pos: 2120
                length: 183
              pos: 2110
              length: 199
          children: []
          pos: 2005
          length: 304
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: localMin
              children: []
              pos: 3541
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: boolean isMinim
                children: []
                pos: 3550
                length: 15
              pos: 3526
              length: 4542
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: eps
                            children: []
                            pos: 3768
                            length: 3
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 3775
                            length: 1
                        children: []
                        pos: 3768
                        length: 8
                    children: []
                    pos: 3767
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: throw new NotStrictlyPositiveException(eps);
                    children: []
                    pos: 3792
                    length: 44
                  pos: 3778
                  length: 68
                pos: 3764
                length: 82
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: t
                            children: []
                            pos: 3859
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 3864
                            length: 1
                        children: []
                        pos: 3859
                        length: 6
                    children: []
                    pos: 3858
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: throw new NotStrictlyPositiveException(t);
                    children: []
                    pos: 3881
                    length: 42
                  pos: 3867
                  length: 66
                pos: 3855
                length: 78
              - type: local_variable_declaration
                fields:
                  text: double a, b;
                children: []
                pos: 3942
                length: 12
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lo
                            children: []
                            pos: 3967
                            length: 2
                          right:
                            type: identifier
                            fields:
                              text: hi
                            children: []
                            pos: 3972
                            length: 2
                        children: []
                        pos: 3967
                        length: 7
                    children: []
                    pos: 3966
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: a = lo;
                    children: []
                    pos: 3990
                    length: 7
                  - type: expression_statement
                    fields:
                      text: b = hi;
                    children: []
                    pos: 4010
                    length: 7
                  pos: 3976
                  length: 51
                pos: 3963
                length: 121
              - type: local_variable_declaration
                fields:
                  text: double x = mid;
                children: []
                pos: 4094
                length: 15
              - type: local_variable_declaration
                fields:
                  text: double v = x;
                children: []
                pos: 4118
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double w = x;
                children: []
                pos: 4140
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double d = 0;
                children: []
                pos: 4162
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double e = 0;
                children: []
                pos: 4184
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double fx = computeObjectiveValue(x);
                children: []
                pos: 4206
                length: 37
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!isMinim"
                        children: []
                        pos: 4256
                        length: 8
                    children: []
                    pos: 4255
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: fx = -fx;
                    children: []
                    pos: 4280
                    length: 9
                  pos: 4266
                  length: 33
                pos: 4252
                length: 47
              - type: local_variable_declaration
                fields:
                  text: double fv = fx;
                children: []
                pos: 4308
                length: 15
              - type: local_variable_declaration
                fields:
                  text: double fw = fx;
                children: []
                pos: 4332
                length: 15
              - type: while_statement
                fields:
                  text: |-
                    while (true) {
                                double m = 0.5 * (a + b);
                                final double tol1 = eps * Math.abs(x) + t;
                                final double tol2 = 2 * tol1;

                                // Check stopping criterion.
                                if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
                                    double p = 0;
                                    double q = 0;
                                    double r = 0;
                                    double u = 0;

                                    if (Math.abs(e) > tol1) { // Fit parabola.
                                        r = (x - w) * (fx - fv);
                                        q = (x - v) * (fx - fw);
                                        p = (x - v) * q - (x - w) * r;
                                        q = 2 * (q - r);

                                        if (q > 0) {
                                            p = -p;
                                        } else {
                                            q = -q;
                                        }

                                        r = e;
                                        e = d;

                                        if (p > q * (a - x)
                                            && p < q * (b - x)
                                            && Math.abs(p) < Math.abs(0.5 * q * r)) {
                                            // Parabolic interpolation step.
                                            d = p / q;
                                            u = x + d;

                                            // f must not be evaluated too close to a or b.
                                            if (u - a < tol2
                                                || b - u < tol2) {
                                                if (x <= m) {
                                                    d = tol1;
                                                } else {
                                                    d = -tol1;
                                                }
                                            }
                                        } else {
                                            // Golden section step.
                                            if (x < m) {
                                                e = b - x;
                                            } else {
                                                e = a - x;
                                            }
                                            d = GOLDEN_SECTION * e;
                                        }
                                    } else {
                                        // Golden section step.
                                        if (x < m) {
                                            e = b - x;
                                        } else {
                                            e = a - x;
                                        }
                                        d = GOLDEN_SECTION * e;
                                    }

                                    // Update by at least "tol1".
                                    if (Math.abs(d) < tol1) {
                                        if (d >= 0) {
                                            u = x + tol1;
                                        } else {
                                            u = x - tol1;
                                        }
                                    } else {
                                        u = x + d;
                                    }

                                    double fu = computeObjectiveValue(u);
                                    if (!isMinim) {
                                        fu = -fu;
                                    }

                                    // Update a, b, v, w and x.
                                    if (fu <= fx) {
                                        if (u < x) {
                                            b = x;
                                        } else {
                                            a = x;
                                        }
                                        v = w;
                                        fv = fw;
                                        w = x;
                                        fw = fx;
                                        x = u;
                                        fx = fu;
                                    } else {
                                        if (u < x) {
                                            a = u;
                                        } else {
                                            b = u;
                                        }
                                        if (fu <= fw
                                            || w == x) {
                                            v = w;
                                            fv = fw;
                                            w = u;
                                            fw = fu;
                                        } else if (fu <= fv
                                                   || v == x
                                                   || v == w) {
                                            v = u;
                                            fv = fu;
                                        }
                                    }
                                } else { // termination
                                    setFunctionValue(isMinim ? fx : -fx);
                                    return x;
                                }
                                incrementIterationsCounter();
                            }
                children: []
                pos: 4357
                length: 3705
              pos: 3754
              length: 4314
          children: []
          pos: 3526
          length: 4542
        pos: 1509
        length: 6561
    children: []
    pos: 1509
    length: 6561
  pos: 0
  length: 8071
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: BrentOptimizer
        children: []
        pos: 1522
        length: 14
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
          children: []
          pos: 1622
          length: 70
        - type: constructor_declaration
          fields:
            text: |-
              public BrentOptimizer() {
                      setMaxEvaluations(Integer.MAX_VALUE);
                      setMaximalIterationCount(100);
                      setAbsoluteAccuracy(1E-10);
                      setRelativeAccuracy(1.0e-14);
                  }
          children: []
          pos: 1741
          length: 190
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: doOptimize
              children: []
              pos: 2038
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 2021
              length: 163
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new UnsupportedOperationException();
                children: []
                pos: 2136
                length: 42
              pos: 2126
              length: 58
          children: []
          pos: 2021
          length: 163
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: optimize
              children: []
              pos: 2203
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final UnivariateRealFunction f
                children: []
                pos: 2212
                length: 30
              pos: 2189
              length: 428
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: clearResult();
                children: []
                pos: 2407
                length: 14
              - type: return_statement
                fields:
                  text: |-
                    return localMin(getGoalType() == GoalType.MINIMIZE,
                                            f, goalType, min, startValue, max,
                                            getRelativeAccuracy(), getAbsoluteAccuracy());
                children: []
                pos: 2430
                length: 181
              pos: 2397
              length: 220
          children: []
          pos: 2189
          length: 428
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: optimize
              children: []
              pos: 2636
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final UnivariateRealFunction f
                children: []
                pos: 2645
                length: 30
              pos: 2622
              length: 274
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return optimize(f, goalType, min, max, min + GOLDEN_SECTION
                    * (max - min));
                children: []
                pos: 2815
                length: 75
              pos: 2805
              length: 91
          children: []
          pos: 2622
          length: 274
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: localMin
              children: []
              pos: 4128
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: boolean isMinim
                children: []
                pos: 4137
                length: 15
              pos: 4113
              length: 4818
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: eps
                            children: []
                            pos: 4456
                            length: 3
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 4463
                            length: 1
                        children: []
                        pos: 4456
                        length: 8
                    children: []
                    pos: 4455
                    length: 10
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: throw new NotStrictlyPositiveException(eps);
                    children: []
                    pos: 4480
                    length: 44
                  pos: 4466
                  length: 68
                pos: 4452
                length: 82
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: t
                            children: []
                            pos: 4547
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 4552
                            length: 1
                        children: []
                        pos: 4547
                        length: 6
                    children: []
                    pos: 4546
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: throw new NotStrictlyPositiveException(t);
                    children: []
                    pos: 4569
                    length: 42
                  pos: 4555
                  length: 66
                pos: 4543
                length: 78
              - type: local_variable_declaration
                fields:
                  text: double a, b;
                children: []
                pos: 4630
                length: 12
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: lo
                            children: []
                            pos: 4655
                            length: 2
                          right:
                            type: identifier
                            fields:
                              text: hi
                            children: []
                            pos: 4660
                            length: 2
                        children: []
                        pos: 4655
                        length: 7
                    children: []
                    pos: 4654
                    length: 9
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: a = lo;
                    children: []
                    pos: 4678
                    length: 7
                  - type: expression_statement
                    fields:
                      text: b = hi;
                    children: []
                    pos: 4698
                    length: 7
                  pos: 4664
                  length: 51
                pos: 4651
                length: 121
              - type: local_variable_declaration
                fields:
                  text: double x = mid;
                children: []
                pos: 4782
                length: 15
              - type: local_variable_declaration
                fields:
                  text: double v = x;
                children: []
                pos: 4806
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double w = x;
                children: []
                pos: 4828
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double d = 0;
                children: []
                pos: 4850
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double e = 0;
                children: []
                pos: 4872
                length: 13
              - type: local_variable_declaration
                fields:
                  text: double fx = computeObjectiveValue(f, x);
                children: []
                pos: 4894
                length: 40
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: goalType
                            children: []
                            pos: 4947
                            length: 8
                          right:
                            type: field_access
                            fields:
                              text: GoalType.MAXIMIZE
                            children: []
                            pos: 4959
                            length: 17
                        children: []
                        pos: 4947
                        length: 29
                    children: []
                    pos: 4946
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: fx = -fx;
                    children: []
                    pos: 4992
                    length: 9
                  pos: 4978
                  length: 33
                pos: 4943
                length: 68
              - type: local_variable_declaration
                fields:
                  text: double fv = fx;
                children: []
                pos: 5020
                length: 15
              - type: local_variable_declaration
                fields:
                  text: double fw = fx;
                children: []
                pos: 5044
                length: 15
              - type: local_variable_declaration
                fields:
                  text: int count = 0;
                children: []
                pos: 5069
                length: 14
              - type: while_statement
                fields:
                  text: |-
                    while (count < maximalIterationCount) {
                                double m = 0.5 * (a + b);
                                final double tol1 = eps * Math.abs(x) + t;
                                final double tol2 = 2 * tol1;

                                // Check stopping criterion.
                                if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
                                    double p = 0;
                                    double q = 0;
                                    double r = 0;
                                    double u = 0;

                                    if (Math.abs(e) > tol1) { // Fit parabola.
                                        r = (x - w) * (fx - fv);
                                        q = (x - v) * (fx - fw);
                                        p = (x - v) * q - (x - w) * r;
                                        q = 2 * (q - r);

                                        if (q > 0) {
                                            p = -p;
                                        } else {
                                            q = -q;
                                        }

                                        r = e;
                                        e = d;

                                        if (p > q * (a - x)
                                            && p < q * (b - x)
                                            && Math.abs(p) < Math.abs(0.5 * q * r)) {
                                            // Parabolic interpolation step.
                                            d = p / q;
                                            u = x + d;

                                            // f must not be evaluated too close to a or b.
                                            if (u - a < tol2
                                                || b - u < tol2) {
                                                if (x <= m) {
                                                    d = tol1;
                                                } else {
                                                    d = -tol1;
                                                }
                                            }
                                        } else {
                                            // Golden section step.
                                            if (x < m) {
                                                e = b - x;
                                            } else {
                                                e = a - x;
                                            }
                                            d = GOLDEN_SECTION * e;
                                        }
                                    } else {
                                        // Golden section step.
                                        if (x < m) {
                                            e = b - x;
                                        } else {
                                            e = a - x;
                                        }
                                        d = GOLDEN_SECTION * e;
                                    }

                                    // Update by at least "tol1".
                                    if (Math.abs(d) < tol1) {
                                        if (d >= 0) {
                                            u = x + tol1;
                                        } else {
                                            u = x - tol1;
                                        }
                                    } else {
                                        u = x + d;
                                    }

                                    double fu = computeObjectiveValue(f, u);
                                    if (goalType == GoalType.MAXIMIZE) {
                                        fu = -fu;
                                    }

                                    // Update a, b, v, w and x.
                                    if (fu <= fx) {
                                        if (u < x) {
                                            b = x;
                                        } else {
                                            a = x;
                                        }
                                        v = w;
                                        fv = fw;
                                        w = x;
                                        fw = fx;
                                        x = u;
                                        fx = fu;
                                    } else {
                                        if (u < x) {
                                            a = u;
                                        } else {
                                            b = u;
                                        }
                                        if (fu <= fw
                                            || w == x) {
                                            v = w;
                                            fv = fw;
                                            w = u;
                                            fw = fu;
                                        } else if (fu <= fv
                                                   || v == x
                                                   || v == w) {
                                            v = u;
                                            fv = fu;
                                        }
                                    }
                                } else { // termination
                                    setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
                                    return x;
                                }
                                ++count;
                            }
                children: []
                pos: 5092
                length: 3760
              - type: throw_statement
                fields:
                  text: throw new MaxIterationsExceededException(maximalIterationCount);
                children: []
                pos: 8861
                length: 64
              pos: 4442
              length: 4489
          children: []
          pos: 4113
          length: 4818
        pos: 1509
        length: 7424
    children: []
    pos: 1509
    length: 7424
  pos: 0
  length: 8934
text_diff: "--- before\n+++ after\n@@ -41,10 +41,10 @@\n      * Construct a solver.\n
  \     */\n     public BrentOptimizer() {\n-        setMaxEvaluations(1000);\n+        setMaxEvaluations(Integer.MAX_VALUE);\n
  \        setMaximalIterationCount(100);\n-        setAbsoluteAccuracy(1e-11);\n-
  \       setRelativeAccuracy(1e-9);\n+        setAbsoluteAccuracy(1E-10);\n+        setRelativeAccuracy(1.0e-14);\n
  \    }\n \n     /**\n@@ -54,10 +54,17 @@\n      */\n     protected double doOptimize()\n
  \        throws MaxIterationsExceededException, FunctionEvaluationException {\n+
  \       throw new UnsupportedOperationException();\n+    }\n+    public double optimize(final
  UnivariateRealFunction f, final GoalType goalType, final double min, final double
  max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException
  {\n+        clearResult();\n         return localMin(getGoalType() == GoalType.MINIMIZE,\n-
  \                       getMin(), getStartValue(), getMax(),\n+                        f,
  goalType, min, startValue, max,\n                         getRelativeAccuracy(),
  getAbsoluteAccuracy());\n     }\n+    public double optimize(final UnivariateRealFunction
  f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException,
  FunctionEvaluationException {\n+        return optimize(f, goalType, min, max, min
  + GOLDEN_SECTION * (max - min));\n+    }\n \n     /**\n      * Find the minimum
  of the function within the interval {@code (lo, hi)}.\n@@ -84,6 +91,8 @@\n      *
  the function.\n      */\n     private double localMin(boolean isMinim,\n+                            UnivariateRealFunction
  f,\n+                            GoalType goalType,\n                             double
  lo, double mid, double hi,\n                             double eps, double t)\n
  \        throws MaxIterationsExceededException, FunctionEvaluationException {\n@@
  -107,14 +116,15 @@\n         double w = x;\n         double d = 0;\n         double
  e = 0;\n-        double fx = computeObjectiveValue(x);\n-        if (!isMinim) {\n+
  \       double fx = computeObjectiveValue(f, x);\n+        if (goalType == GoalType.MAXIMIZE)
  {\n             fx = -fx;\n         }\n         double fv = fx;\n         double
  fw = fx;\n \n-        while (true) {\n+        int count = 0;\n+        while (count
  < maximalIterationCount) {\n             double m = 0.5 * (a + b);\n             final
  double tol1 = eps * Math.abs(x) + t;\n             final double tol2 = 2 * tol1;\n@@
  -187,8 +197,8 @@\n                     u = x + d;\n                 }\n \n-                double
  fu = computeObjectiveValue(u);\n-                if (!isMinim) {\n+                double
  fu = computeObjectiveValue(f, u);\n+                if (goalType == GoalType.MAXIMIZE)
  {\n                     fu = -fu;\n                 }\n \n@@ -225,10 +235,11 @@\n
  \                    }\n                 }\n             } else { // termination\n-
  \               setFunctionValue(isMinim ? fx : -fx);\n+                setResult(x,
  (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);\n                 return x;\n
  \            }\n-            incrementIterationsCounter();\n+            ++count;\n
  \        }\n+        throw new MaxIterationsExceededException(maximalIterationCount);\n
  \    }\n }\n"
tree_diff: |+
  New cluster:
  UPDATE from public BrentOptimizer() {
          setMaxEvaluations(1000);
          setMaximalIterationCount(100);
          setAbsoluteAccuracy(1e-11);
          setRelativeAccuracy(1e-9);
      } to public BrentOptimizer() {
          setMaxEvaluations(Integer.MAX_VALUE);
          setMaximalIterationCount(100);
          setAbsoluteAccuracy(1E-10);
          setRelativeAccuracy(1.0e-14);
      }
  ------------
  ===
  update-node
  ---
  constructor_declaration: public BrentOptimizer() {
          setMaxEvaluations(1000);
          setMaximalIterationCount(100);
          setAbsoluteAccuracy(1e-11);
          setRelativeAccuracy(1e-9);
      } [1741,1915]
  replace public BrentOptimizer() {
          setMaxEvaluations(1000);
          setMaximalIterationCount(100);
          setAbsoluteAccuracy(1e-11);
          setRelativeAccuracy(1e-9);
      } by public BrentOptimizer() {
          setMaxEvaluations(Integer.MAX_VALUE);
          setMaximalIterationCount(100);
          setAbsoluteAccuracy(1E-10);
          setRelativeAccuracy(1.0e-14);
      }

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  method_declaration [2021,2184]
      identifier: doOptimize [2038,2048]
      method_parameters [2021,2184]
      block [2126,2184]
          throw_statement: throw new UnsupportedOperationException(); [2136,2178]
  to
  class_body [1509,8070]
  at 2

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  method_declaration [2189,2617]
      identifier: optimize [2203,2211]
      method_parameters [2189,2617]
          formal_parameter: final UnivariateRealFunction f [2212,2242]
      block [2397,2617]
          expression_statement: clearResult(); [2407,2421]
          return_statement: return localMin(getGoalType() == GoalType.MINIMIZE,
                          f, goalType, min, startValue, max,
                          getRelativeAccuracy(), getAbsoluteAccuracy()); [2430,2611]
  to
  class_body [1509,8070]
  at 3

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  method_declaration [2622,2896]
      identifier: optimize [2636,2644]
      method_parameters [2622,2896]
          formal_parameter: final UnivariateRealFunction f [2645,2675]
      block [2805,2896]
          return_statement: return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min)); [2815,2890]
  to
  class_body [1509,8070]
  at 4

  New cluster:
  UPDATE from double fx = computeObjectiveValue(x); to double fx = computeObjectiveValue(f, x);
  ------------
  ===
  update-node
  ---
  local_variable_declaration: double fx = computeObjectiveValue(x); [4206,4243]
  replace double fx = computeObjectiveValue(x); by double fx = computeObjectiveValue(f, x);

  New cluster:
  ===
  insert-node
  ---
  local_variable_declaration: int count = 0; [5069,5083]
  to
  block [3754,8068]
  at 13
  ------------
  ===
  insert-node
  ---
  local_variable_declaration: int count = 0; [5069,5083]
  to
  block [3754,8068]
  at 13

  New cluster:
  UPDATE from while (true) {
              double m = 0.5 * (a + b);
              final double tol1 = eps * Math.abs(x) + t;
              final double tol2 = 2 * tol1;

              // Check stopping criterion.
              if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (Math.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x)
                          && p < q * (b - x)
                          && Math.abs(p) < Math.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2
                              || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (Math.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw
                          || w == x) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv
                                 || v == x
                                 || v == w) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // termination
                  setFunctionValue(isMinim ? fx : -fx);
                  return x;
              }
              incrementIterationsCounter();
          } to while (count < maximalIterationCount) {
              double m = 0.5 * (a + b);
              final double tol1 = eps * Math.abs(x) + t;
              final double tol2 = 2 * tol1;

              // Check stopping criterion.
              if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (Math.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x)
                          && p < q * (b - x)
                          && Math.abs(p) < Math.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2
                              || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (Math.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(f, u);
                  if (goalType == GoalType.MAXIMIZE) {
                      fu = -fu;
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw
                          || w == x) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv
                                 || v == x
                                 || v == w) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // termination
                  setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
                  return x;
              }
              ++count;
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (true) {
              double m = 0.5 * (a + b);
              final double tol1 = eps * Math.abs(x) + t;
              final double tol2 = 2 * tol1;

              // Check stopping criterion.
              if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (Math.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x)
                          && p < q * (b - x)
                          && Math.abs(p) < Math.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2
                              || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (Math.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw
                          || w == x) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv
                                 || v == x
                                 || v == w) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // termination
                  setFunctionValue(isMinim ? fx : -fx);
                  return x;
              }
              incrementIterationsCounter();
          } [4357,8062]
  replace while (true) {
              double m = 0.5 * (a + b);
              final double tol1 = eps * Math.abs(x) + t;
              final double tol2 = 2 * tol1;

              // Check stopping criterion.
              if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (Math.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x)
                          && p < q * (b - x)
                          && Math.abs(p) < Math.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2
                              || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (Math.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw
                          || w == x) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv
                                 || v == x
                                 || v == w) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // termination
                  setFunctionValue(isMinim ? fx : -fx);
                  return x;
              }
              incrementIterationsCounter();
          } by while (count < maximalIterationCount) {
              double m = 0.5 * (a + b);
              final double tol1 = eps * Math.abs(x) + t;
              final double tol2 = 2 * tol1;

              // Check stopping criterion.
              if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (Math.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x)
                          && p < q * (b - x)
                          && Math.abs(p) < Math.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2
                              || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (Math.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(f, u);
                  if (goalType == GoalType.MAXIMIZE) {
                      fu = -fu;
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw
                          || w == x) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv
                                 || v == x
                                 || v == w) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // termination
                  setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
                  return x;
              }
              ++count;
          }

  New cluster:
  ===
  insert-node
  ---
  throw_statement: throw new MaxIterationsExceededException(maximalIterationCount); [8861,8925]
  to
  block [3754,8068]
  at 15
  ------------
  ===
  insert-node
  ---
  throw_statement: throw new MaxIterationsExceededException(maximalIterationCount); [8861,8925]
  to
  block [3754,8068]
  at 15

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  equals [4947,4976]
      identifier: goalType [4947,4955]
      field_access: GoalType.MAXIMIZE [4959,4976]
  to
  parenthesized_expression [4255,4265]
  at 0

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  method_declaration [2005,2309]
      identifier: doOptimize [2022,2032]
      method_parameters [2005,2309]
      block [2110,2309]
          return_statement: return localMin(getGoalType() == GoalType.MINIMIZE,
                          getMin(), getStartValue(), getMax(),
                          getRelativeAccuracy(), getAbsoluteAccuracy()); [2120,2303]

  New cluster:
  ===
  delete-node
  ---
  unary_expression: !isMinim [4256,4264]
  ===
  ------------
  ===
  delete-node
  ---
  unary_expression: !isMinim [4256,4264]
  ===

...
