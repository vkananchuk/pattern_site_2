---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: find_first_in_sorted
        children: []
        pos: 4
        length: 20
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: arr
          children: []
          pos: 25
          length: 3
        pos: 0
        length: 303
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: lo = 0
          children: []
          pos: 38
          length: 6
        - type: expression_statement
          fields:
            text: hi = len(arr)
          children: []
          pos: 49
          length: 13
        - type: while_statement
          fields:
            text: |-
              while lo <= hi:
                      mid = (lo + hi) // 2

                      if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
                          return mid

                      elif x <= arr[mid]:
                          hi = mid

                      else:
                          lo = mid + 1
          children: []
          pos: 68
          length: 220
        - type: return_statement
          fields:
            text: return -1
          children: []
          pos: 294
          length: 9
        pos: 38
        length: 265
    children: []
    pos: 0
    length: 303
  pos: 0
  length: 304
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: find_first_in_sorted
        children: []
        pos: 4
        length: 20
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: arr
          children: []
          pos: 25
          length: 3
        pos: 0
        length: 302
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: lo = 0
          children: []
          pos: 38
          length: 6
        - type: expression_statement
          fields:
            text: hi = len(arr)
          children: []
          pos: 49
          length: 13
        - type: while_statement
          fields:
            text: |-
              while lo < hi:
                      mid = (lo + hi) // 2

                      if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
                          return mid

                      elif x <= arr[mid]:
                          hi = mid

                      else:
                          lo = mid + 1
          children: []
          pos: 68
          length: 219
        - type: return_statement
          fields:
            text: return -1
          children: []
          pos: 293
          length: 9
        pos: 38
        length: 264
    children: []
    pos: 0
    length: 302
  pos: 0
  length: 303
text_diff: "--- before\n+++ after\n@@ -2,7 +2,7 @@\n     lo = 0\n     hi = len(arr)\n
  \n-    while lo <= hi:\n+    while lo < hi:\n         mid = (lo + hi) // 2\n \n
  \        if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n"
tree_diff: |+
  New cluster:
  UPDATE from while lo <= hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1 to while lo < hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1
  ------------
  ===
  update-node
  ---
  while_statement: while lo <= hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1 [68,288]
  replace while lo <= hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1 by while lo < hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1

...
