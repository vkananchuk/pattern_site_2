---
language: python
text_diff: "--- before\n+++ after\n@@ -1,8 +1,9 @@\n+\n def find_first_in_sorted(arr,
  x):\n     lo = 0\n     hi = len(arr)\n \n-    while lo <= hi:\n+    while lo < hi:\n
  \        mid = (lo + hi) // 2\n \n         if x == arr[mid] and (mid == 0 or x !=
  arr[mid - 1]):\n@@ -16,20 +17,41 @@\n \n     return -1\n \n-\n \"\"\"\n-Fancy Binary
  Search\n-fancy-binsearch\n+def find_first_in_sorted(arr, x):\n+    lo = 0\n+    hi
  = len(arr)\n+\n+    while lo <= hi - 1:\n+        mid = (lo + hi) // 2\n+\n+        if
  x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n+            return mid\n+\n+
  \       elif x <= arr[mid]:\n+            hi = mid\n+\n+        else:\n+            lo
  = mid + 1\n \n+    return -1\n+\n+def find_first_in_sorted(arr, x):\n+    lo = 0\n+
  \   hi = len(arr)\n+\n+    while lo + 1 <= hi:\n+        mid = (lo + hi) // 2\n+\n+
  \       if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):\n+            return
  mid\n+\n+        elif x <= arr[mid]:\n+            hi = mid\n \n-Input:\n-    arr:
  A sorted list of ints\n-    x: A value to find\n+        else:\n+            lo
  = mid + 1\n \n-Output:\n-    The lowest index i such that arr[i] == x, or -1 if
  x not in arr\n+    return -1\n \n-Example:\n-    >>> find_first_in_sorted([3, 4,
  5, 5, 5, 5, 6], 5)\n-    2\n \"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from """
  Fancy Binary Search
  fancy-binsearch


  Input:
      arr: A sorted list of ints
      x: A value to find

  Output:
      The lowest index i such that arr[i] == x, or -1 if x not in arr

  Example:
      >>> find_first_in_sorted([3, 4, 5, 5, 5, 5, 6], 5)
      2
  """ to """
  def find_first_in_sorted(arr, x):
      lo = 0
      hi = len(arr)

      while lo <= hi - 1:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1

      return -1

  def find_first_in_sorted(arr, x):
      lo = 0
      hi = len(arr)

      while lo + 1 <= hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1

      return -1

  """
  ------------
  ===
  update-node
  ---
  expression_statement: """
  Fancy Binary Search
  fancy-binsearch


  Input:
      arr: A sorted list of ints
      x: A value to find

  Output:
      The lowest index i such that arr[i] == x, or -1 if x not in arr

  Example:
      >>> find_first_in_sorted([3, 4, 5, 5, 5, 5, 6], 5)
      2
  """ [306,560]
  replace """
  Fancy Binary Search
  fancy-binsearch


  Input:
      arr: A sorted list of ints
      x: A value to find

  Output:
      The lowest index i such that arr[i] == x, or -1 if x not in arr

  Example:
      >>> find_first_in_sorted([3, 4, 5, 5, 5, 5, 6], 5)
      2
  """ by """
  def find_first_in_sorted(arr, x):
      lo = 0
      hi = len(arr)

      while lo <= hi - 1:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1

      return -1

  def find_first_in_sorted(arr, x):
      lo = 0
      hi = len(arr)

      while lo + 1 <= hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1

      return -1

  """

  New cluster:
  UPDATE from while lo <= hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1 to while lo < hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1
  ------------
  ===
  update-node
  ---
  while_statement: while lo <= hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1 [68,288]
  replace while lo <= hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1 by while lo < hi:
          mid = (lo + hi) // 2

          if x == arr[mid] and (mid == 0 or x != arr[mid - 1]):
              return mid

          elif x <= arr[mid]:
              hi = mid

          else:
              lo = mid + 1

...
