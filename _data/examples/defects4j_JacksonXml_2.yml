---
language: java
text_diff: "--- before\n+++ after\n@@ -59,7 +59,6 @@\n      *\n      * @since 2.8\n
  \     */\n-    protected boolean _mixedText;\n \n     /**\n      * Index of the
  next attribute of the current START_ELEMENT\n@@ -322,24 +321,15 @@\n             }\n
  \            // otherwise need to find START/END_ELEMENT or text\n             String
  text = _collectUntilTag();\n-            final boolean startElementNext = _xmlReader.getEventType()
  == XMLStreamReader.START_ELEMENT;\n             // If we have no/all-whitespace
  text followed by START_ELEMENT, ignore text\n-            if (startElementNext)
  {\n-                if (text == null || _allWs(text)) {\n-                    _mixedText
  = false;\n+            if (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT)
  {\n                     return _initStartElement();\n-                }\n-                _mixedText
  = true;\n-                _textValue = text;\n-                return (_currentState
  = XML_TEXT);\n             }\n             // For END_ELEMENT we will return text,
  if any\n             if (text != null) {\n-                _mixedText = false;\n
  \                _textValue = text;\n                 return (_currentState = XML_TEXT);\n
  \            }\n-            _mixedText = false;\n             return _handleEndElement();\n
  \n         case XML_ATTRIBUTE_NAME:\n@@ -347,10 +337,6 @@\n             return (_currentState
  = XML_ATTRIBUTE_VALUE);\n         case XML_TEXT:\n             // mixed text with
  other elements\n-            if (_mixedText){\n-                _mixedText = false;\n-
  \               return _initStartElement();\n-            }\n             // text
  followed by END_ELEMENT\n             return _handleEndElement();\n         case
  XML_END:\n@@ -517,18 +503,6 @@\n     }\n \n \n-    protected boolean _allWs(String
  str)\n-    {\n-        final int len = (str == null) ? 0 : str.length();\n-        if
  (len > 0) {\n-            for (int i = 0; i < len; ++i) {\n-                if (str.charAt(i)
  > ' ') {\n-                    return false;\n-                }\n-            }\n-
  \       }\n-        return true;\n-    }\n     \n     // for DEBUGGING\n     @Override\n"
tree_diff: |+
  New cluster:
  UPDATE from {
          case XML_ATTRIBUTE_VALUE:
              ++_nextAttributeIndex;
              // fall through
          case XML_START_ELEMENT: // attributes to return?
              if (_nextAttributeIndex < _attributeCount) {
                  _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);
                  _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);
                  _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);
                  return (_currentState = XML_ATTRIBUTE_NAME);
              }
              // otherwise need to find START/END_ELEMENT or text
              String text = _collectUntilTag();
              final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;
              // If we have no/all-whitespace text followed by START_ELEMENT, ignore text
              if (startElementNext) {
                  if (text == null || _allWs(text)) {
                      _mixedText = false;
                      return _initStartElement();
                  }
                  _mixedText = true;
                  _textValue = text;
                  return (_currentState = XML_TEXT);
              }
              // For END_ELEMENT we will return text, if any
              if (text != null) {
                  _mixedText = false;
                  _textValue = text;
                  return (_currentState = XML_TEXT);
              }
              _mixedText = false;
              return _handleEndElement();

          case XML_ATTRIBUTE_NAME:
              // if we just returned name, will need to just send value next
              return (_currentState = XML_ATTRIBUTE_VALUE);
          case XML_TEXT:
              // mixed text with other elements
              if (_mixedText){
                  _mixedText = false;
                  return _initStartElement();
              }
              // text followed by END_ELEMENT
              return _handleEndElement();
          case XML_END:
              return XML_END;
  //            throw new IllegalStateException("No more XML tokens available (end of input)");
          } to {
          case XML_ATTRIBUTE_VALUE:
              ++_nextAttributeIndex;
              // fall through
          case XML_START_ELEMENT: // attributes to return?
              if (_nextAttributeIndex < _attributeCount) {
                  _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);
                  _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);
                  _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);
                  return (_currentState = XML_ATTRIBUTE_NAME);
              }
              // otherwise need to find START/END_ELEMENT or text
              String text = _collectUntilTag();
              // If we have no/all-whitespace text followed by START_ELEMENT, ignore text
              if (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {
                      return _initStartElement();
              }
              // For END_ELEMENT we will return text, if any
              if (text != null) {
                  _textValue = text;
                  return (_currentState = XML_TEXT);
              }
              return _handleEndElement();

          case XML_ATTRIBUTE_NAME:
              // if we just returned name, will need to just send value next
              return (_currentState = XML_ATTRIBUTE_VALUE);
          case XML_TEXT:
              // mixed text with other elements
              // text followed by END_ELEMENT
              return _handleEndElement();
          case XML_END:
              return XML_END;
  //            throw new IllegalStateException("No more XML tokens available (end of input)");
          }
  ------------
  ===
  update-node
  ---
  switch_block: {
          case XML_ATTRIBUTE_VALUE:
              ++_nextAttributeIndex;
              // fall through
          case XML_START_ELEMENT: // attributes to return?
              if (_nextAttributeIndex < _attributeCount) {
                  _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);
                  _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);
                  _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);
                  return (_currentState = XML_ATTRIBUTE_NAME);
              }
              // otherwise need to find START/END_ELEMENT or text
              String text = _collectUntilTag();
              final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;
              // If we have no/all-whitespace text followed by START_ELEMENT, ignore text
              if (startElementNext) {
                  if (text == null || _allWs(text)) {
                      _mixedText = false;
                      return _initStartElement();
                  }
                  _mixedText = true;
                  _textValue = text;
                  return (_currentState = XML_TEXT);
              }
              // For END_ELEMENT we will return text, if any
              if (text != null) {
                  _mixedText = false;
                  _textValue = text;
                  return (_currentState = XML_TEXT);
              }
              _mixedText = false;
              return _handleEndElement();

          case XML_ATTRIBUTE_NAME:
              // if we just returned name, will need to just send value next
              return (_currentState = XML_ATTRIBUTE_VALUE);
          case XML_TEXT:
              // mixed text with other elements
              if (_mixedText){
                  _mixedText = false;
                  return _initStartElement();
              }
              // text followed by END_ELEMENT
              return _handleEndElement();
          case XML_END:
              return XML_END;
  //            throw new IllegalStateException("No more XML tokens available (end of input)");
          } [10547,12613]
  replace {
          case XML_ATTRIBUTE_VALUE:
              ++_nextAttributeIndex;
              // fall through
          case XML_START_ELEMENT: // attributes to return?
              if (_nextAttributeIndex < _attributeCount) {
                  _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);
                  _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);
                  _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);
                  return (_currentState = XML_ATTRIBUTE_NAME);
              }
              // otherwise need to find START/END_ELEMENT or text
              String text = _collectUntilTag();
              final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;
              // If we have no/all-whitespace text followed by START_ELEMENT, ignore text
              if (startElementNext) {
                  if (text == null || _allWs(text)) {
                      _mixedText = false;
                      return _initStartElement();
                  }
                  _mixedText = true;
                  _textValue = text;
                  return (_currentState = XML_TEXT);
              }
              // For END_ELEMENT we will return text, if any
              if (text != null) {
                  _mixedText = false;
                  _textValue = text;
                  return (_currentState = XML_TEXT);
              }
              _mixedText = false;
              return _handleEndElement();

          case XML_ATTRIBUTE_NAME:
              // if we just returned name, will need to just send value next
              return (_currentState = XML_ATTRIBUTE_VALUE);
          case XML_TEXT:
              // mixed text with other elements
              if (_mixedText){
                  _mixedText = false;
                  return _initStartElement();
              }
              // text followed by END_ELEMENT
              return _handleEndElement();
          case XML_END:
              return XML_END;
  //            throw new IllegalStateException("No more XML tokens available (end of input)");
          } by {
          case XML_ATTRIBUTE_VALUE:
              ++_nextAttributeIndex;
              // fall through
          case XML_START_ELEMENT: // attributes to return?
              if (_nextAttributeIndex < _attributeCount) {
                  _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);
                  _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);
                  _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);
                  return (_currentState = XML_ATTRIBUTE_NAME);
              }
              // otherwise need to find START/END_ELEMENT or text
              String text = _collectUntilTag();
              // If we have no/all-whitespace text followed by START_ELEMENT, ignore text
              if (_xmlReader.getEventType() == XMLStreamReader.START_ELEMENT) {
                      return _initStartElement();
              }
              // For END_ELEMENT we will return text, if any
              if (text != null) {
                  _textValue = text;
                  return (_currentState = XML_TEXT);
              }
              return _handleEndElement();

          case XML_ATTRIBUTE_NAME:
              // if we just returned name, will need to just send value next
              return (_currentState = XML_ATTRIBUTE_VALUE);
          case XML_TEXT:
              // mixed text with other elements
              // text followed by END_ELEMENT
              return _handleEndElement();
          case XML_END:
              return XML_END;
  //            throw new IllegalStateException("No more XML tokens available (end of input)");
          }

  New cluster:
  ===
  delete-node
  ---
  field_declaration: protected boolean _mixedText; [1885,1914]
  ===
  ------------
  ===
  delete-node
  ---
  field_declaration: protected boolean _mixedText; [1885,1914]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  method_declaration [18921,19234]
      identifier: _allWs [18939,18945]
      method_parameters [18921,19234]
          formal_parameter: String str [18946,18956]
      block [18962,19234]
          local_variable_declaration: final int len = (str == null) ? 0 : str.length(); [18972,19021]
          if_statement [19030,19207]
              parenthesized_expression [19033,19042]
                  greater_than [19034,19041]
                      identifier: len [19034,19037]
                      decimal_integer_literal: 0 [19040,19041]
              block [19043,19207]
                  for_statement: for (int i = 0; i < len; ++i) {
                  if (str.charAt(i) > ' ') {
                      return false;
                  }
              } [19057,19197]
          return_statement: return true; [19216,19228]

...
