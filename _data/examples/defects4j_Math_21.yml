---
language: java
text_diff: "--- before\n+++ after\n@@ -66,6 +66,7 @@\n         final double[][] c
  = matrix.getData();\n         final double[][] b = new double[order][order];\n \n+
  \       int[] swap  = new int[order];\n         int[] index = new int[order];\n
  \        for (int i = 0; i < order; ++i) {\n             index[i] = i;\n@@ -75,24
  +76,21 @@\n         for (boolean loop = true; loop;) {\n \n             // find
  maximal diagonal element\n-            int swapR = r;\n+            swap[r] = r;\n
  \            for (int i = r + 1; i < order; ++i) {\n                 int ii  = index[i];\n-
  \               int isr = index[swapR];\n-                if (c[ii][ii] > c[isr][isr])
  {\n-                    swapR = i;\n+                int isi = index[swap[i]];\n+
  \               if (c[ii][ii] > c[isi][isi]) {\n+                    swap[r] = i;\n
  \                }\n             }\n \n \n             // swap elements\n-            if
  (swapR != r) {\n-                final int tmpIndex    = index[r];\n-                index[r]
  \             = index[swapR];\n-                index[swapR]          = tmpIndex;\n-
  \               final double[] tmpRow = b[r];\n-                b[r]                  =
  b[swapR];\n-                b[swapR]              = tmpRow;\n+            if (swap[r]
  != r) {\n+                int tmp = index[r];\n+                index[r] = index[swap[r]];\n+
  \               index[swap[r]] = tmp;\n             }\n \n             // check
  diagonal element\n@@ -123,12 +121,11 @@\n                 final double sqrt = FastMath.sqrt(c[ir][ir]);\n
  \                b[r][r] = sqrt;\n                 final double inverse  = 1 / sqrt;\n-
  \               final double inverse2 = 1 / c[ir][ir];\n                 for (int
  i = r + 1; i < order; ++i) {\n                     final int ii = index[i];\n                     final
  double e = inverse * c[ii][ir];\n                     b[i][r] = e;\n-                    c[ii][ii]
  -= c[ii][ir] * c[ii][ir] * inverse2;\n+                    c[ii][ii] -= e * e;\n
  \                    for (int j = r + 1; j < i; ++j) {\n                         final
  int ij = index[j];\n                         final double f = c[ii][ij] - e * b[j][r];\n"
tree_diff: |+
  New cluster:
  UPDATE from public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
          throws NonPositiveDefiniteMatrixException {

          final int order = matrix.getRowDimension();
          final double[][] c = matrix.getData();
          final double[][] b = new double[order][order];

          int[] index = new int[order];
          for (int i = 0; i < order; ++i) {
              index[i] = i;
          }

          int r = 0;
          for (boolean loop = true; loop;) {

              // find maximal diagonal element
              int swapR = r;
              for (int i = r + 1; i < order; ++i) {
                  int ii  = index[i];
                  int isr = index[swapR];
                  if (c[ii][ii] > c[isr][isr]) {
                      swapR = i;
                  }
              }


              // swap elements
              if (swapR != r) {
                  final int tmpIndex    = index[r];
                  index[r]              = index[swapR];
                  index[swapR]          = tmpIndex;
                  final double[] tmpRow = b[r];
                  b[r]                  = b[swapR];
                  b[swapR]              = tmpRow;
              }

              // check diagonal element
              int ir = index[r];
              if (c[ir][ir] < small) {

                  if (r == 0) {
                      throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                  }

                  // check remaining diagonal elements
                  for (int i = r; i < order; ++i) {
                      if (c[index[i]][index[i]] < -small) {
                          // there is at least one sufficiently negative diagonal element,
                          // the symmetric positive semidefinite matrix is wrong
                          throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                      }
                  }

                  // all remaining diagonal elements are close to zero, we consider we have
                  // found the rank of the symmetric positive semidefinite matrix
                  ++r;
                  loop = false;

              } else {

                  // transform the matrix
                  final double sqrt = FastMath.sqrt(c[ir][ir]);
                  b[r][r] = sqrt;
                  final double inverse  = 1 / sqrt;
                  final double inverse2 = 1 / c[ir][ir];
                  for (int i = r + 1; i < order; ++i) {
                      final int ii = index[i];
                      final double e = inverse * c[ii][ir];
                      b[i][r] = e;
                      c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;
                      for (int j = r + 1; j < i; ++j) {
                          final int ij = index[j];
                          final double f = c[ii][ij] - e * b[j][r];
                          c[ii][ij] = f;
                          c[ij][ii] = f;
                      }
                  }

                  // prepare next iteration
                  loop = ++r < order;
              }
          }

          // build the root matrix
          rank = r;
          root = MatrixUtils.createRealMatrix(order, r);
          for (int i = 0; i < order; ++i) {
              for (int j = 0; j < r; ++j) {
                  root.setEntry(index[i], j, b[i][j]);
              }
          }

      } to public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
          throws NonPositiveDefiniteMatrixException {

          final int order = matrix.getRowDimension();
          final double[][] c = matrix.getData();
          final double[][] b = new double[order][order];

          int[] swap  = new int[order];
          int[] index = new int[order];
          for (int i = 0; i < order; ++i) {
              index[i] = i;
          }

          int r = 0;
          for (boolean loop = true; loop;) {

              // find maximal diagonal element
              swap[r] = r;
              for (int i = r + 1; i < order; ++i) {
                  int ii  = index[i];
                  int isi = index[swap[i]];
                  if (c[ii][ii] > c[isi][isi]) {
                      swap[r] = i;
                  }
              }


              // swap elements
              if (swap[r] != r) {
                  int tmp = index[r];
                  index[r] = index[swap[r]];
                  index[swap[r]] = tmp;
              }

              // check diagonal element
              int ir = index[r];
              if (c[ir][ir] < small) {

                  if (r == 0) {
                      throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                  }

                  // check remaining diagonal elements
                  for (int i = r; i < order; ++i) {
                      if (c[index[i]][index[i]] < -small) {
                          // there is at least one sufficiently negative diagonal element,
                          // the symmetric positive semidefinite matrix is wrong
                          throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                      }
                  }

                  // all remaining diagonal elements are close to zero, we consider we have
                  // found the rank of the symmetric positive semidefinite matrix
                  ++r;
                  loop = false;

              } else {

                  // transform the matrix
                  final double sqrt = FastMath.sqrt(c[ir][ir]);
                  b[r][r] = sqrt;
                  final double inverse  = 1 / sqrt;
                  for (int i = r + 1; i < order; ++i) {
                      final int ii = index[i];
                      final double e = inverse * c[ii][ir];
                      b[i][r] = e;
                      c[ii][ii] -= e * e;
                      for (int j = r + 1; j < i; ++j) {
                          final int ij = index[j];
                          final double f = c[ii][ij] - e * b[j][r];
                          c[ii][ij] = f;
                          c[ij][ii] = f;
                      }
                  }

                  // prepare next iteration
                  loop = ++r < order;
              }
          }

          // build the root matrix
          rank = r;
          root = MatrixUtils.createRealMatrix(order, r);
          for (int i = 0; i < order; ++i) {
              for (int j = 0; j < r; ++j) {
                  root.setEntry(index[i], j, b[i][j]);
              }
          }

      }
  ------------
  ===
  update-node
  ---
  constructor_declaration: public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
          throws NonPositiveDefiniteMatrixException {

          final int order = matrix.getRowDimension();
          final double[][] c = matrix.getData();
          final double[][] b = new double[order][order];

          int[] index = new int[order];
          for (int i = 0; i < order; ++i) {
              index[i] = i;
          }

          int r = 0;
          for (boolean loop = true; loop;) {

              // find maximal diagonal element
              int swapR = r;
              for (int i = r + 1; i < order; ++i) {
                  int ii  = index[i];
                  int isr = index[swapR];
                  if (c[ii][ii] > c[isr][isr]) {
                      swapR = i;
                  }
              }


              // swap elements
              if (swapR != r) {
                  final int tmpIndex    = index[r];
                  index[r]              = index[swapR];
                  index[swapR]          = tmpIndex;
                  final double[] tmpRow = b[r];
                  b[r]                  = b[swapR];
                  b[swapR]              = tmpRow;
              }

              // check diagonal element
              int ir = index[r];
              if (c[ir][ir] < small) {

                  if (r == 0) {
                      throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                  }

                  // check remaining diagonal elements
                  for (int i = r; i < order; ++i) {
                      if (c[index[i]][index[i]] < -small) {
                          // there is at least one sufficiently negative diagonal element,
                          // the symmetric positive semidefinite matrix is wrong
                          throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                      }
                  }

                  // all remaining diagonal elements are close to zero, we consider we have
                  // found the rank of the symmetric positive semidefinite matrix
                  ++r;
                  loop = false;

              } else {

                  // transform the matrix
                  final double sqrt = FastMath.sqrt(c[ir][ir]);
                  b[r][r] = sqrt;
                  final double inverse  = 1 / sqrt;
                  final double inverse2 = 1 / c[ir][ir];
                  for (int i = r + 1; i < order; ++i) {
                      final int ii = index[i];
                      final double e = inverse * c[ii][ir];
                      b[i][r] = e;
                      c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;
                      for (int j = r + 1; j < i; ++j) {
                          final int ij = index[j];
                          final double f = c[ii][ij] - e * b[j][r];
                          c[ii][ij] = f;
                          c[ij][ii] = f;
                      }
                  }

                  // prepare next iteration
                  loop = ++r < order;
              }
          }

          // build the root matrix
          rank = r;
          root = MatrixUtils.createRealMatrix(order, r);
          for (int i = 0; i < order; ++i) {
              for (int j = 0; j < r; ++j) {
                  root.setEntry(index[i], j, b[i][j]);
              }
          }

      } [2935,6199]
  replace public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
          throws NonPositiveDefiniteMatrixException {

          final int order = matrix.getRowDimension();
          final double[][] c = matrix.getData();
          final double[][] b = new double[order][order];

          int[] index = new int[order];
          for (int i = 0; i < order; ++i) {
              index[i] = i;
          }

          int r = 0;
          for (boolean loop = true; loop;) {

              // find maximal diagonal element
              int swapR = r;
              for (int i = r + 1; i < order; ++i) {
                  int ii  = index[i];
                  int isr = index[swapR];
                  if (c[ii][ii] > c[isr][isr]) {
                      swapR = i;
                  }
              }


              // swap elements
              if (swapR != r) {
                  final int tmpIndex    = index[r];
                  index[r]              = index[swapR];
                  index[swapR]          = tmpIndex;
                  final double[] tmpRow = b[r];
                  b[r]                  = b[swapR];
                  b[swapR]              = tmpRow;
              }

              // check diagonal element
              int ir = index[r];
              if (c[ir][ir] < small) {

                  if (r == 0) {
                      throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                  }

                  // check remaining diagonal elements
                  for (int i = r; i < order; ++i) {
                      if (c[index[i]][index[i]] < -small) {
                          // there is at least one sufficiently negative diagonal element,
                          // the symmetric positive semidefinite matrix is wrong
                          throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                      }
                  }

                  // all remaining diagonal elements are close to zero, we consider we have
                  // found the rank of the symmetric positive semidefinite matrix
                  ++r;
                  loop = false;

              } else {

                  // transform the matrix
                  final double sqrt = FastMath.sqrt(c[ir][ir]);
                  b[r][r] = sqrt;
                  final double inverse  = 1 / sqrt;
                  final double inverse2 = 1 / c[ir][ir];
                  for (int i = r + 1; i < order; ++i) {
                      final int ii = index[i];
                      final double e = inverse * c[ii][ir];
                      b[i][r] = e;
                      c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;
                      for (int j = r + 1; j < i; ++j) {
                          final int ij = index[j];
                          final double f = c[ii][ij] - e * b[j][r];
                          c[ii][ij] = f;
                          c[ij][ii] = f;
                      }
                  }

                  // prepare next iteration
                  loop = ++r < order;
              }
          }

          // build the root matrix
          rank = r;
          root = MatrixUtils.createRealMatrix(order, r);
          for (int i = 0; i < order; ++i) {
              for (int j = 0; j < r; ++j) {
                  root.setEntry(index[i], j, b[i][j]);
              }
          }

      } by public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
          throws NonPositiveDefiniteMatrixException {

          final int order = matrix.getRowDimension();
          final double[][] c = matrix.getData();
          final double[][] b = new double[order][order];

          int[] swap  = new int[order];
          int[] index = new int[order];
          for (int i = 0; i < order; ++i) {
              index[i] = i;
          }

          int r = 0;
          for (boolean loop = true; loop;) {

              // find maximal diagonal element
              swap[r] = r;
              for (int i = r + 1; i < order; ++i) {
                  int ii  = index[i];
                  int isi = index[swap[i]];
                  if (c[ii][ii] > c[isi][isi]) {
                      swap[r] = i;
                  }
              }


              // swap elements
              if (swap[r] != r) {
                  int tmp = index[r];
                  index[r] = index[swap[r]];
                  index[swap[r]] = tmp;
              }

              // check diagonal element
              int ir = index[r];
              if (c[ir][ir] < small) {

                  if (r == 0) {
                      throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                  }

                  // check remaining diagonal elements
                  for (int i = r; i < order; ++i) {
                      if (c[index[i]][index[i]] < -small) {
                          // there is at least one sufficiently negative diagonal element,
                          // the symmetric positive semidefinite matrix is wrong
                          throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                      }
                  }

                  // all remaining diagonal elements are close to zero, we consider we have
                  // found the rank of the symmetric positive semidefinite matrix
                  ++r;
                  loop = false;

              } else {

                  // transform the matrix
                  final double sqrt = FastMath.sqrt(c[ir][ir]);
                  b[r][r] = sqrt;
                  final double inverse  = 1 / sqrt;
                  for (int i = r + 1; i < order; ++i) {
                      final int ii = index[i];
                      final double e = inverse * c[ii][ir];
                      b[i][r] = e;
                      c[ii][ii] -= e * e;
                      for (int j = r + 1; j < i; ++j) {
                          final int ij = index[j];
                          final double f = c[ii][ij] - e * b[j][r];
                          c[ii][ij] = f;
                          c[ij][ii] = f;
                      }
                  }

                  // prepare next iteration
                  loop = ++r < order;
              }
          }

          // build the root matrix
          rank = r;
          root = MatrixUtils.createRealMatrix(order, r);
          for (int i = 0; i < order; ++i) {
              for (int j = 0; j < r; ++j) {
                  root.setEntry(index[i], j, b[i][j]);
              }
          }

      }

...
