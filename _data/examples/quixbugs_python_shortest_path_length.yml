---
language: python
text_diff: |
  --- before
  +++ after
  @@ -19,7 +19,7 @@
               insert_or_update(unvisited_nodes,
                   (min(
                       get(unvisited_nodes, nextnode) or float('inf'),
  -                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
  +                    distance + length_by_edge[node, nextnode]
                   ),
                   nextnode)
               )
tree_diff: |+
  New cluster:
  UPDATE from while len(unvisited_nodes) > 0:
          distance, node = heappop(unvisited_nodes)
          if node is goalnode:
              return distance

          visited_nodes.add(node)

          for nextnode in node.successors:
              if nextnode in visited_nodes:
                  continue

              insert_or_update(unvisited_nodes,
                  (min(
                      get(unvisited_nodes, nextnode) or float('inf'),
                      get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                  ),
                  nextnode)
              ) to while len(unvisited_nodes) > 0:
          distance, node = heappop(unvisited_nodes)
          if node is goalnode:
              return distance

          visited_nodes.add(node)

          for nextnode in node.successors:
              if nextnode in visited_nodes:
                  continue

              insert_or_update(unvisited_nodes,
                  (min(
                      get(unvisited_nodes, nextnode) or float('inf'),
                      distance + length_by_edge[node, nextnode]
                  ),
                  nextnode)
              )
  ------------
  ===
  update-node
  ---
  while_statement: while len(unvisited_nodes) > 0:
          distance, node = heappop(unvisited_nodes)
          if node is goalnode:
              return distance

          visited_nodes.add(node)

          for nextnode in node.successors:
              if nextnode in visited_nodes:
                  continue

              insert_or_update(unvisited_nodes,
                  (min(
                      get(unvisited_nodes, nextnode) or float('inf'),
                      get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                  ),
                  nextnode)
              ) [230,790]
  replace while len(unvisited_nodes) > 0:
          distance, node = heappop(unvisited_nodes)
          if node is goalnode:
              return distance

          visited_nodes.add(node)

          for nextnode in node.successors:
              if nextnode in visited_nodes:
                  continue

              insert_or_update(unvisited_nodes,
                  (min(
                      get(unvisited_nodes, nextnode) or float('inf'),
                      get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                  ),
                  nextnode)
              ) by while len(unvisited_nodes) > 0:
          distance, node = heappop(unvisited_nodes)
          if node is goalnode:
              return distance

          visited_nodes.add(node)

          for nextnode in node.successors:
              if nextnode in visited_nodes:
                  continue

              insert_or_update(unvisited_nodes,
                  (min(
                      get(unvisited_nodes, nextnode) or float('inf'),
                      distance + length_by_edge[node, nextnode]
                  ),
                  nextnode)
              )

...
