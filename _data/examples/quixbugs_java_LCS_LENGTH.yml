---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: LCS_LENGTH
        children: []
        pos: 190
        length: 10
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: lcs_length
              children: []
              pos: 229
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String s
                children: []
                pos: 240
                length: 8
              pos: 207
              length: 1743
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();
                children: []
                pos: 365
                length: 84
              - type: for_statement
                fields:
                  text: |-
                    for (int i=0; i < s.length(); i++) {
                                Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();
                                dp.put(i, initialize);
                                for (int j=0; j < t.length(); j++) {
                                    Map<Integer,Integer> internal_map = dp.get(i);
                                    internal_map.put(j,0);
                                    dp.put(i, internal_map);
                                }
                            }
                children: []
                pos: 506
                length: 365
              - type: for_statement
                fields:
                  text: |-
                    for (int i=0; i < s.length(); i++) {
                                for (int j=0; j < t.length(); j++) {
                                    if (s.charAt(i) == t.charAt(j)) {

                                        if (dp.containsKey(i-1)) {
                                            Map<Integer, Integer> internal_map = dp.get(i);
                                            int insert_value = dp.get(i-1).get(j) + 1;
                                            internal_map.put(j, insert_value);
                                            dp.put(i,internal_map);
                                        } else {
                                            Map<Integer, Integer> internal_map = dp.get(i);
                                            internal_map.put(j,1);
                                            dp.put(i,internal_map);
                                        }
                                    }
                                }
                            }
                children: []
                pos: 912
                length: 689
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!dp.isEmpty()"
                        children: []
                        pos: 1615
                        length: 13
                    children: []
                    pos: 1614
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: List<Integer> ret_list = new ArrayList<Integer>();
                    children: []
                    pos: 1644
                    length: 50
                  - type: for_statement
                    fields:
                      text: |-
                        for (int i=0; i<s.length(); i++) {
                                        ret_list.add(!dp.get(i).isEmpty() ? Collections.max(dp.get(i).values()) : 0);
                                    }
                    children: []
                    pos: 1707
                    length: 142
                  - type: return_statement
                    fields:
                      text: return Collections.max(ret_list);
                    children: []
                    pos: 1862
                    length: 33
                  pos: 1630
                  length: 275
                pos: 1611
                length: 333
              pos: 260
              length: 1690
          children: []
          pos: 207
          length: 1743
        pos: 177
        length: 1775
    children: []
    pos: 177
    length: 1775
  pos: 0
  length: 1953
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: LCS_LENGTH
        children: []
        pos: 199
        length: 10
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: lcs_length
              children: []
              pos: 238
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String s
                children: []
                pos: 249
                length: 8
              pos: 216
              length: 1823
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();
                children: []
                pos: 374
                length: 84
              - type: for_statement
                fields:
                  text: |-
                    for (int i=0; i < s.length(); i++) {
                                Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();
                                dp.put(i, initialize);
                                for (int j=0; j < t.length(); j++) {
                                    Map<Integer,Integer> internal_map = dp.get(i);
                                    internal_map.put(j,0);
                                    dp.put(i, internal_map);
                                }
                            }
                children: []
                pos: 515
                length: 365
              - type: for_statement
                fields:
                  text: "for (int i=0; i < s.length(); i++) {\n            for (int
                    j=0; j < t.length(); j++) {\n                if (s.charAt(i) ==
                    t.charAt(j)) {\n\n                //\tdp.get(i-1).containsKey(j-1)\n
                    \                   if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1))
                    {\n                        Map<Integer, Integer> internal_map
                    = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j-1)
                    + 1;\n                        internal_map.put(j, insert_value);\n
                    \                       dp.put(i,internal_map);\n                    }
                    else {\n                        Map<Integer, Integer> internal_map
                    = dp.get(i);\n                        internal_map.put(j,1);\n
                    \                       dp.put(i,internal_map);\n                    }\n
                    \               }\n            }\n        }"
                children: []
                pos: 921
                length: 769
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!dp.isEmpty()"
                        children: []
                        pos: 1704
                        length: 13
                    children: []
                    pos: 1703
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: List<Integer> ret_list = new ArrayList<Integer>();
                    children: []
                    pos: 1733
                    length: 50
                  - type: for_statement
                    fields:
                      text: |-
                        for (int i=0; i<s.length(); i++) {
                                        ret_list.add(!dp.get(i).isEmpty() ? Collections.max(dp.get(i).values()) : 0);
                                    }
                    children: []
                    pos: 1796
                    length: 142
                  - type: return_statement
                    fields:
                      text: return Collections.max(ret_list);
                    children: []
                    pos: 1951
                    length: 33
                  pos: 1719
                  length: 275
                pos: 1700
                length: 333
              pos: 269
              length: 1770
          children: []
          pos: 216
          length: 1823
        pos: 186
        length: 1855
    children: []
    pos: 186
    length: 1855
  pos: 0
  length: 2042
text_diff: "--- before\n+++ after\n@@ -1,5 +1,6 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n+\n /*\n  * To change this template,
  choose Tools | Templates\n  * and open the template in the editor.\n@@ -32,9 +33,10
  @@\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i)
  == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n+                //\tdp.get(i-1).containsKey(j-1)\n+
  \                   if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1)) {\n                         Map<Integer,
  Integer> internal_map = dp.get(i);\n-                        int insert_value =
  dp.get(i-1).get(j) + 1;\n+                        int insert_value = dp.get(i-1).get(j-1)
  + 1;\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n
  \                    } else {\n"
tree_diff: "New cluster:\nUPDATE from for (int i=0; i < s.length(); i++) {\n            for
  (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j))
  {\n\n                    if (dp.containsKey(i-1)) {\n                        Map<Integer,
  Integer> internal_map = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j)
  + 1;\n                        internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        } to for (int i=0;
  i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if
  (s.charAt(i) == t.charAt(j)) {\n\n                //\tdp.get(i-1).containsKey(j-1)\n
  \                   if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1)) {\n                        Map<Integer,
  Integer> internal_map = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j-1)
  + 1;\n                        internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        }\n------------\n===\nupdate-node\n---\nfor_statement:
  for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length();
  j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n                    if
  (dp.containsKey(i-1)) {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j) + 1;\n
  \                       internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        } [912,1601]\nreplace
  for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length();
  j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n                    if
  (dp.containsKey(i-1)) {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j) + 1;\n
  \                       internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        } by for (int i=0;
  i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if
  (s.charAt(i) == t.charAt(j)) {\n\n                //\tdp.get(i-1).containsKey(j-1)\n
  \                   if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1)) {\n                        Map<Integer,
  Integer> internal_map = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j-1)
  + 1;\n                        internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        }\n\n"
