---
language: java
text_diff: "--- before\n+++ after\n@@ -1,5 +1,6 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n+\n /*\n  * To change this template,
  choose Tools | Templates\n  * and open the template in the editor.\n@@ -32,9 +33,10
  @@\n             for (int j=0; j < t.length(); j++) {\n                 if (s.charAt(i)
  == t.charAt(j)) {\n \n-                    if (dp.containsKey(i-1)) {\n+                //\tdp.get(i-1).containsKey(j-1)\n+
  \                   if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1)) {\n                         Map<Integer,
  Integer> internal_map = dp.get(i);\n-                        int insert_value =
  dp.get(i-1).get(j) + 1;\n+                        int insert_value = dp.get(i-1).get(j-1)
  + 1;\n                         internal_map.put(j, insert_value);\n                         dp.put(i,internal_map);\n
  \                    } else {\n"
tree_diff: "New cluster:\nUPDATE from for (int i=0; i < s.length(); i++) {\n            for
  (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j))
  {\n\n                    if (dp.containsKey(i-1)) {\n                        Map<Integer,
  Integer> internal_map = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j)
  + 1;\n                        internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        } to for (int i=0;
  i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if
  (s.charAt(i) == t.charAt(j)) {\n\n                //\tdp.get(i-1).containsKey(j-1)\n
  \                   if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1)) {\n                        Map<Integer,
  Integer> internal_map = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j-1)
  + 1;\n                        internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        }\n------------\n===\nupdate-node\n---\nfor_statement:
  for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length();
  j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n                    if
  (dp.containsKey(i-1)) {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j) + 1;\n
  \                       internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        } [912,1601]\nreplace
  for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length();
  j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n                    if
  (dp.containsKey(i-1)) {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j) + 1;\n
  \                       internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        } by for (int i=0;
  i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if
  (s.charAt(i) == t.charAt(j)) {\n\n                //\tdp.get(i-1).containsKey(j-1)\n
  \                   if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1)) {\n                        Map<Integer,
  Integer> internal_map = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j-1)
  + 1;\n                        internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n
  \                   } else {\n                        Map<Integer, Integer> internal_map
  = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n
  \                   }\n                }\n            }\n        }\n\n"
