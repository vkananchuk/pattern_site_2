---
language: java
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n /*\n@@ -16,7 +16,7 @@\n         int
  lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+        while
  (lo < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n
  \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n"
tree_diff: |+
  New cluster:
  UPDATE from while (lo <= hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          } to while (lo < hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (lo <= hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          } [336,662]
  replace while (lo <= hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          } by while (lo < hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          }

...
