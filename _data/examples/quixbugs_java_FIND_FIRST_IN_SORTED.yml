---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: FIND_FIRST_IN_SORTED
        children: []
        pos: 191
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: find_first_in_sorted
              children: []
              pos: 237
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int[] arr
                children: []
                pos: 258
                length: 9
              pos: 219
              length: 469
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int lo = 0;
                children: []
                pos: 286
                length: 11
              - type: local_variable_declaration
                fields:
                  text: int hi = arr.length;
                children: []
                pos: 306
                length: 20
              - type: while_statement
                fields:
                  text: |-
                    while (lo <= hi) {
                                int mid = (lo + hi) / 2; // check if this is floor division

                                if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                                    return mid;
                                } else if (x <= arr[mid]) {
                                    hi = mid;
                                } else {
                                    lo = mid + 1;
                                }
                            }
                children: []
                pos: 336
                length: 326
              - type: return_statement
                fields:
                  text: return -1;
                children: []
                pos: 672
                length: 10
              pos: 276
              length: 412
          children: []
          pos: 219
          length: 469
        pos: 178
        length: 513
    children: []
    pos: 178
    length: 513
  pos: 0
  length: 692
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: FIND_FIRST_IN_SORTED
        children: []
        pos: 199
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: find_first_in_sorted
              children: []
              pos: 245
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int[] arr
                children: []
                pos: 266
                length: 9
              pos: 227
              length: 468
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int lo = 0;
                children: []
                pos: 294
                length: 11
              - type: local_variable_declaration
                fields:
                  text: int hi = arr.length;
                children: []
                pos: 314
                length: 20
              - type: while_statement
                fields:
                  text: |-
                    while (lo < hi) {
                                int mid = (lo + hi) / 2; // check if this is floor division

                                if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                                    return mid;
                                } else if (x <= arr[mid]) {
                                    hi = mid;
                                } else {
                                    lo = mid + 1;
                                }
                            }
                children: []
                pos: 344
                length: 325
              - type: return_statement
                fields:
                  text: return -1;
                children: []
                pos: 679
                length: 10
              pos: 284
              length: 411
          children: []
          pos: 227
          length: 468
        pos: 186
        length: 512
    children: []
    pos: 186
    length: 512
  pos: 0
  length: 699
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n /*\n@@ -16,7 +16,7 @@\n         int
  lo = 0;\n         int hi = arr.length;\n \n-        while (lo <= hi) {\n+        while
  (lo < hi) {\n             int mid = (lo + hi) / 2; // check if this is floor division\n
  \n             if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n"
tree_diff: |+
  New cluster:
  UPDATE from while (lo <= hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          } to while (lo < hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (lo <= hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          } [336,662]
  replace while (lo <= hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          } by while (lo < hi) {
              int mid = (lo + hi) / 2; // check if this is floor division

              if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {
                  return mid;
              } else if (x <= arr[mid]) {
                  hi = mid;
              } else {
                  lo = mid + 1;
              }
          }

...
