---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: next_palindrome
        children: []
        pos: 4
        length: 15
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: digit_list
          children: []
          pos: 20
          length: 10
        pos: 0
        length: 532
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: high_mid = len(digit_list) // 2
          children: []
          pos: 37
          length: 31
        - type: expression_statement
          fields:
            text: low_mid = (len(digit_list) - 1) // 2
          children: []
          pos: 73
          length: 36
        - type: while_statement
          fields:
            text: |-
              while high_mid < len(digit_list) and low_mid >= 0:
                      if digit_list[high_mid] == 9:
                          digit_list[high_mid] = 0
                          digit_list[low_mid] = 0
                          high_mid += 1
                          low_mid -= 1
                      else:
                          digit_list[high_mid] += 1
                          if low_mid != high_mid:
                              digit_list[low_mid] += 1
                          return digit_list
          children: []
          pos: 114
          length: 371
        - type: return_statement
          fields:
            text: return [1] + (len(digit_list)) * [0] + [1]
          children: []
          pos: 490
          length: 42
        pos: 37
        length: 495
    children: []
    pos: 0
    length: 532
  pos: 0
  length: 533
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: next_palindrome
        children: []
        pos: 4
        length: 15
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: digit_list
          children: []
          pos: 20
          length: 10
        pos: 0
        length: 536
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: high_mid = len(digit_list) // 2
          children: []
          pos: 37
          length: 31
        - type: expression_statement
          fields:
            text: low_mid = (len(digit_list) - 1) // 2
          children: []
          pos: 73
          length: 36
        - type: while_statement
          fields:
            text: |-
              while high_mid < len(digit_list) and low_mid >= 0:
                      if digit_list[high_mid] == 9:
                          digit_list[high_mid] = 0
                          digit_list[low_mid] = 0
                          high_mid += 1
                          low_mid -= 1
                      else:
                          digit_list[high_mid] += 1
                          if low_mid != high_mid:
                              digit_list[low_mid] += 1
                          return digit_list
          children: []
          pos: 114
          length: 371
        - type: return_statement
          fields:
            text: return [1] + (len(digit_list) - 1) * [0] + [1]
          children: []
          pos: 490
          length: 46
        pos: 37
        length: 499
    children: []
    pos: 0
    length: 536
  pos: 0
  length: 537
text_diff: |
  --- before
  +++ after
  @@ -12,4 +12,4 @@
               if low_mid != high_mid:
                   digit_list[low_mid] += 1
               return digit_list
  -    return [1] + (len(digit_list)) * [0] + [1]
  +    return [1] + (len(digit_list) - 1) * [0] + [1]
tree_diff: |+
  New cluster:
  UPDATE from return [1] + (len(digit_list)) * [0] + [1] to return [1] + (len(digit_list) - 1) * [0] + [1]
  ------------
  ===
  update-node
  ---
  return_statement: return [1] + (len(digit_list)) * [0] + [1] [490,532]
  replace return [1] + (len(digit_list)) * [0] + [1] by return [1] + (len(digit_list) - 1) * [0] + [1]

...
