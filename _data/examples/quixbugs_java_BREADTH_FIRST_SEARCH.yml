---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: BREADTH_FIRST_SEARCH
        children: []
        pos: 220
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static Set<Node> nodesvisited = new HashSet<>();
          children: []
          pos: 248
          length: 55
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: breadth_first_search
              children: []
              pos: 331
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node startnode
                children: []
                pos: 352
                length: 14
              pos: 309
              length: 862
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Deque<Node> queue = new ArrayDeque<>();
                children: []
                pos: 393
                length: 39
              - type: expression_statement
                fields:
                  text: queue.addLast(startnode);
                children: []
                pos: 441
                length: 25
              - type: expression_statement
                fields:
                  text: nodesvisited.add(startnode);
                children: []
                pos: 476
                length: 28
              - type: while_statement
                fields:
                  text: |-
                    while (true) {
                                Node node = queue.removeFirst();

                                if (node == goalnode) {
                                    return true;
                                } else {
                                    for (Node successor_node : node.getSuccessors()) {
                                        if (!nodesvisited.contains(successor_node)) {
                                            queue.addFirst(successor_node);
                                            nodesvisited.add(successor_node);
                                        }
                                    }
                                }
                            }
                children: []
                pos: 514
                length: 457
              pos: 383
              length: 788
          children: []
          pos: 309
          length: 862
        pos: 207
        length: 967
    children: []
    pos: 207
    length: 967
  pos: 0
  length: 1174
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: BREADTH_FIRST_SEARCH
        children: []
        pos: 256
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static Set<Node> nodesvisited = new HashSet<>();
          children: []
          pos: 284
          length: 55
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: breadth_first_search
              children: []
              pos: 367
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node startnode
                children: []
                pos: 388
                length: 14
              pos: 345
              length: 872
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Deque<Node> queue = new ArrayDeque<>();
                children: []
                pos: 429
                length: 39
              - type: expression_statement
                fields:
                  text: queue.addLast(startnode);
                children: []
                pos: 477
                length: 25
              - type: expression_statement
                fields:
                  text: nodesvisited.add(startnode);
                children: []
                pos: 512
                length: 28
              - type: while_statement
                fields:
                  text: |-
                    while (!queue.isEmpty()) {
                                Node node = queue.removeFirst();

                                if (node == goalnode) {
                                    return true;
                                } else {
                                    for (Node successor_node : node.getSuccessors()) {
                                        if (!nodesvisited.contains(successor_node)) {
                                            queue.addFirst(successor_node);
                                            nodesvisited.add(successor_node);
                                        }
                                    }
                                }
                            }
                children: []
                pos: 550
                length: 469
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 1198
                length: 13
              pos: 419
              length: 798
          children: []
          pos: 345
          length: 872
        pos: 243
        length: 977
    children: []
    pos: 243
    length: 977
  pos: 0
  length: 1220
text_diff: "--- before\n+++ after\n@@ -1,7 +1,9 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n import java.util.ArrayDeque;\n \n+import
  java_programs.Node;\n+\n /*\n  * To change this template, choose Tools | Templates\n
  \ * and open the template in the editor.\n@@ -21,7 +23,7 @@\n \n         nodesvisited.add(startnode);\n
  \n-        while (true) {\n+        while (!queue.isEmpty()) {\n             Node
  node = queue.removeFirst();\n \n             if (node == goalnode) {\n@@ -39,7 +41,7
  @@\n          * The buggy program always drops into while(true) loop and will not
  return false\n          * Removed below line to fix compilation error\n          */\n-
  \       // return false;\n+         return false;\n     }\n \n }\n\\ No newline
  at end of file\n"
tree_diff: |+
  New cluster:
  UPDATE from while (true) {
              Node node = queue.removeFirst();

              if (node == goalnode) {
                  return true;
              } else {
                  for (Node successor_node : node.getSuccessors()) {
                      if (!nodesvisited.contains(successor_node)) {
                          queue.addFirst(successor_node);
                          nodesvisited.add(successor_node);
                      }
                  }
              }
          } to while (!queue.isEmpty()) {
              Node node = queue.removeFirst();

              if (node == goalnode) {
                  return true;
              } else {
                  for (Node successor_node : node.getSuccessors()) {
                      if (!nodesvisited.contains(successor_node)) {
                          queue.addFirst(successor_node);
                          nodesvisited.add(successor_node);
                      }
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (true) {
              Node node = queue.removeFirst();

              if (node == goalnode) {
                  return true;
              } else {
                  for (Node successor_node : node.getSuccessors()) {
                      if (!nodesvisited.contains(successor_node)) {
                          queue.addFirst(successor_node);
                          nodesvisited.add(successor_node);
                      }
                  }
              }
          } [514,971]
  replace while (true) {
              Node node = queue.removeFirst();

              if (node == goalnode) {
                  return true;
              } else {
                  for (Node successor_node : node.getSuccessors()) {
                      if (!nodesvisited.contains(successor_node)) {
                          queue.addFirst(successor_node);
                          nodesvisited.add(successor_node);
                      }
                  }
              }
          } by while (!queue.isEmpty()) {
              Node node = queue.removeFirst();

              if (node == goalnode) {
                  return true;
              } else {
                  for (Node successor_node : node.getSuccessors()) {
                      if (!nodesvisited.contains(successor_node)) {
                          queue.addFirst(successor_node);
                          nodesvisited.add(successor_node);
                      }
                  }
              }
          }

  New cluster:
  ===
  insert-node
  ---
  return_statement: return false; [1198,1211]
  to
  block [383,1171]
  at 4
  ------------
  ===
  insert-node
  ---
  return_statement: return false; [1198,1211]
  to
  block [383,1171]
  at 4

...
