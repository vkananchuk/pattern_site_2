---
language: java
text_diff: "--- before\n+++ after\n@@ -343,10 +343,8 @@\n                 final double[]
  eventY = interpolator.getInterpolatedState().clone();\n \n                 // advance
  all event states to current time\n-                for (final EventState state :
  eventsStates) {\n-                    state.stepAccepted(eventT, eventY);\n-                    isLastStep
  = isLastStep || state.stop();\n-                }\n+                currentEvent.stepAccepted(eventT,
  eventY);\n+                isLastStep = currentEvent.stop();\n \n                 //
  handle the first part of the step, up to the event\n                 for (final
  StepHandler handler : stepHandlers) {\n@@ -356,19 +354,22 @@\n                 if
  (isLastStep) {\n                     // the event asked to stop integration\n                     System.arraycopy(eventY,
  0, y, 0, y.length);\n+                    for (final EventState remaining : occuringEvents)
  {\n+                        remaining.stepAccepted(eventT, eventY);\n+                    }\n
  \                    return eventT;\n                 }\n \n-                boolean
  needReset = false;\n-                for (final EventState state : eventsStates)
  {\n-                    needReset =  needReset || state.reset(eventT, eventY);\n-
  \               }\n+                boolean needReset = currentEvent.reset(eventT,
  eventY);\n                 if (needReset) {\n                     // some event
  handler has triggered changes that\n                     // invalidate the derivatives,
  we need to recompute them\n                     System.arraycopy(eventY, 0, y, 0,
  y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred
  = true;\n+                    for (final EventState remaining : occuringEvents)
  {\n+                        remaining.stepAccepted(eventT, eventY);\n+                    }\n
  \                    return eventT;\n                 }\n \n"
tree_diff: |+
  New cluster:
  UPDATE from while (!occuringEvents.isEmpty()) {

                  // handle the chronologically first event
                  final Iterator<EventState> iterator = occuringEvents.iterator();
                  final EventState currentEvent = iterator.next();
                  iterator.remove();

                  // restrict the interpolator to the first part of the step, up to the event
                  final double eventT = currentEvent.getEventTime();
                  interpolator.setSoftPreviousTime(previousT);
                  interpolator.setSoftCurrentTime(eventT);

                  // get state at event time
                  interpolator.setInterpolatedTime(eventT);
                  final double[] eventY = interpolator.getInterpolatedState().clone();

                  // advance all event states to current time
                  for (final EventState state : eventsStates) {
                      state.stepAccepted(eventT, eventY);
                      isLastStep = isLastStep || state.stop();
                  }

                  // handle the first part of the step, up to the event
                  for (final StepHandler handler : stepHandlers) {
                      handler.handleStep(interpolator, isLastStep);
                  }

                  if (isLastStep) {
                      // the event asked to stop integration
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      return eventT;
                  }

                  boolean needReset = false;
                  for (final EventState state : eventsStates) {
                      needReset =  needReset || state.reset(eventT, eventY);
                  }
                  if (needReset) {
                      // some event handler has triggered changes that
                      // invalidate the derivatives, we need to recompute them
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      computeDerivatives(eventT, y, yDot);
                      resetOccurred = true;
                      return eventT;
                  }

                  // prepare handling of the remaining part of the step
                  previousT = eventT;
                  interpolator.setSoftPreviousTime(eventT);
                  interpolator.setSoftCurrentTime(currentT);

                  // check if the same event occurs again in the remaining part of the step
                  if (currentEvent.evaluateStep(interpolator)) {
                      // the event occurs during the current step
                      occuringEvents.add(currentEvent);
                  }

              } to while (!occuringEvents.isEmpty()) {

                  // handle the chronologically first event
                  final Iterator<EventState> iterator = occuringEvents.iterator();
                  final EventState currentEvent = iterator.next();
                  iterator.remove();

                  // restrict the interpolator to the first part of the step, up to the event
                  final double eventT = currentEvent.getEventTime();
                  interpolator.setSoftPreviousTime(previousT);
                  interpolator.setSoftCurrentTime(eventT);

                  // get state at event time
                  interpolator.setInterpolatedTime(eventT);
                  final double[] eventY = interpolator.getInterpolatedState().clone();

                  // advance all event states to current time
                  currentEvent.stepAccepted(eventT, eventY);
                  isLastStep = currentEvent.stop();

                  // handle the first part of the step, up to the event
                  for (final StepHandler handler : stepHandlers) {
                      handler.handleStep(interpolator, isLastStep);
                  }

                  if (isLastStep) {
                      // the event asked to stop integration
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      for (final EventState remaining : occuringEvents) {
                          remaining.stepAccepted(eventT, eventY);
                      }
                      return eventT;
                  }

                  boolean needReset = currentEvent.reset(eventT, eventY);
                  if (needReset) {
                      // some event handler has triggered changes that
                      // invalidate the derivatives, we need to recompute them
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      computeDerivatives(eventT, y, yDot);
                      resetOccurred = true;
                      for (final EventState remaining : occuringEvents) {
                          remaining.stepAccepted(eventT, eventY);
                      }
                      return eventT;
                  }

                  // prepare handling of the remaining part of the step
                  previousT = eventT;
                  interpolator.setSoftPreviousTime(eventT);
                  interpolator.setSoftCurrentTime(currentT);

                  // check if the same event occurs again in the remaining part of the step
                  if (currentEvent.evaluateStep(interpolator)) {
                      // the event occurs during the current step
                      occuringEvents.add(currentEvent);
                  }

              }
  ------------
  ===
  update-node
  ---
  while_statement: while (!occuringEvents.isEmpty()) {

                  // handle the chronologically first event
                  final Iterator<EventState> iterator = occuringEvents.iterator();
                  final EventState currentEvent = iterator.next();
                  iterator.remove();

                  // restrict the interpolator to the first part of the step, up to the event
                  final double eventT = currentEvent.getEventTime();
                  interpolator.setSoftPreviousTime(previousT);
                  interpolator.setSoftCurrentTime(eventT);

                  // get state at event time
                  interpolator.setInterpolatedTime(eventT);
                  final double[] eventY = interpolator.getInterpolatedState().clone();

                  // advance all event states to current time
                  for (final EventState state : eventsStates) {
                      state.stepAccepted(eventT, eventY);
                      isLastStep = isLastStep || state.stop();
                  }

                  // handle the first part of the step, up to the event
                  for (final StepHandler handler : stepHandlers) {
                      handler.handleStep(interpolator, isLastStep);
                  }

                  if (isLastStep) {
                      // the event asked to stop integration
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      return eventT;
                  }

                  boolean needReset = false;
                  for (final EventState state : eventsStates) {
                      needReset =  needReset || state.reset(eventT, eventY);
                  }
                  if (needReset) {
                      // some event handler has triggered changes that
                      // invalidate the derivatives, we need to recompute them
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      computeDerivatives(eventT, y, yDot);
                      resetOccurred = true;
                      return eventT;
                  }

                  // prepare handling of the remaining part of the step
                  previousT = eventT;
                  interpolator.setSoftPreviousTime(eventT);
                  interpolator.setSoftCurrentTime(currentT);

                  // check if the same event occurs again in the remaining part of the step
                  if (currentEvent.evaluateStep(interpolator)) {
                      // the event occurs during the current step
                      occuringEvents.add(currentEvent);
                  }

              } [12840,15394]
  replace while (!occuringEvents.isEmpty()) {

                  // handle the chronologically first event
                  final Iterator<EventState> iterator = occuringEvents.iterator();
                  final EventState currentEvent = iterator.next();
                  iterator.remove();

                  // restrict the interpolator to the first part of the step, up to the event
                  final double eventT = currentEvent.getEventTime();
                  interpolator.setSoftPreviousTime(previousT);
                  interpolator.setSoftCurrentTime(eventT);

                  // get state at event time
                  interpolator.setInterpolatedTime(eventT);
                  final double[] eventY = interpolator.getInterpolatedState().clone();

                  // advance all event states to current time
                  for (final EventState state : eventsStates) {
                      state.stepAccepted(eventT, eventY);
                      isLastStep = isLastStep || state.stop();
                  }

                  // handle the first part of the step, up to the event
                  for (final StepHandler handler : stepHandlers) {
                      handler.handleStep(interpolator, isLastStep);
                  }

                  if (isLastStep) {
                      // the event asked to stop integration
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      return eventT;
                  }

                  boolean needReset = false;
                  for (final EventState state : eventsStates) {
                      needReset =  needReset || state.reset(eventT, eventY);
                  }
                  if (needReset) {
                      // some event handler has triggered changes that
                      // invalidate the derivatives, we need to recompute them
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      computeDerivatives(eventT, y, yDot);
                      resetOccurred = true;
                      return eventT;
                  }

                  // prepare handling of the remaining part of the step
                  previousT = eventT;
                  interpolator.setSoftPreviousTime(eventT);
                  interpolator.setSoftCurrentTime(currentT);

                  // check if the same event occurs again in the remaining part of the step
                  if (currentEvent.evaluateStep(interpolator)) {
                      // the event occurs during the current step
                      occuringEvents.add(currentEvent);
                  }

              } by while (!occuringEvents.isEmpty()) {

                  // handle the chronologically first event
                  final Iterator<EventState> iterator = occuringEvents.iterator();
                  final EventState currentEvent = iterator.next();
                  iterator.remove();

                  // restrict the interpolator to the first part of the step, up to the event
                  final double eventT = currentEvent.getEventTime();
                  interpolator.setSoftPreviousTime(previousT);
                  interpolator.setSoftCurrentTime(eventT);

                  // get state at event time
                  interpolator.setInterpolatedTime(eventT);
                  final double[] eventY = interpolator.getInterpolatedState().clone();

                  // advance all event states to current time
                  currentEvent.stepAccepted(eventT, eventY);
                  isLastStep = currentEvent.stop();

                  // handle the first part of the step, up to the event
                  for (final StepHandler handler : stepHandlers) {
                      handler.handleStep(interpolator, isLastStep);
                  }

                  if (isLastStep) {
                      // the event asked to stop integration
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      for (final EventState remaining : occuringEvents) {
                          remaining.stepAccepted(eventT, eventY);
                      }
                      return eventT;
                  }

                  boolean needReset = currentEvent.reset(eventT, eventY);
                  if (needReset) {
                      // some event handler has triggered changes that
                      // invalidate the derivatives, we need to recompute them
                      System.arraycopy(eventY, 0, y, 0, y.length);
                      computeDerivatives(eventT, y, yDot);
                      resetOccurred = true;
                      for (final EventState remaining : occuringEvents) {
                          remaining.stepAccepted(eventT, eventY);
                      }
                      return eventT;
                  }

                  // prepare handling of the remaining part of the step
                  previousT = eventT;
                  interpolator.setSoftPreviousTime(eventT);
                  interpolator.setSoftCurrentTime(currentT);

                  // check if the same event occurs again in the remaining part of the step
                  if (currentEvent.evaluateStep(interpolator)) {
                      // the event occurs during the current step
                      occuringEvents.add(currentEvent);
                  }

              }

...
