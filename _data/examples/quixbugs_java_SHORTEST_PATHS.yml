---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SHORTEST_PATHS
        children: []
        pos: 116
        length: 14
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: final static int INF = 99999;
          children: []
          pos: 258
          length: 29
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shortest_paths
              children: []
              pos: 329
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String source
                children: []
                pos: 344
                length: 13
              pos: 294
              length: 862
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<String,Integer> weight_by_node = new HashMap<String,Integer>();
                children: []
                pos: 411
                length: 67
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (List<String> edge : weight_by_edge.keySet()) {
                                    weight_by_node.put(edge.get(1), INF);
                                    weight_by_node.put(edge.get(0), INF);
                            }
                children: []
                pos: 487
                length: 169
              - type: expression_statement
                fields:
                  text: weight_by_node.put(source, 0);
                children: []
                pos: 666
                length: 30
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < weight_by_node.size(); i++) {
                                for (List<String> edge : weight_by_edge.keySet()) {
                                    int update_weight = Math.min(
                                            weight_by_node.get(edge.get(0))
                                                    + weight_by_edge.get(edge),
                                            weight_by_node.get(edge.get(1)));
                                    weight_by_edge.put(edge, update_weight);
                                }
                            }
                children: []
                pos: 705
                length: 414
              - type: return_statement
                fields:
                  text: return weight_by_node;
                children: []
                pos: 1128
                length: 22
              pos: 401
              length: 755
          children: []
          pos: 294
          length: 862
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shortest_paths
              children: []
              pos: 1315
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node source
                children: []
                pos: 1330
                length: 11
              pos: 1280
              length: 861
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<String,Integer> weight_by_node = new HashMap<String,Integer>();
                children: []
                pos: 1388
                length: 67
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (WeightedEdge edge : weight_by_edge) {
                                    weight_by_node.put(edge.node1.toString(), INF);
                                    weight_by_node.put(edge.node2.toString(), INF);
                            }
                children: []
                pos: 1464
                length: 180
              - type: expression_statement
                fields:
                  text: weight_by_node.put(source.getValue(), 0);
                children: []
                pos: 1654
                length: 41
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < weight_by_node.size(); i++) {
                                for (WeightedEdge edge : weight_by_edge) {
                                    int update_weight = Math.min(
                                            weight_by_node.get(edge.node1.toString())
                                                    + edge.weight,
                                            weight_by_node.get(edge.node2.toString()));
                                    edge.weight = update_weight;
                                }
                            }
                children: []
                pos: 1704
                length: 400
              - type: return_statement
                fields:
                  text: return weight_by_node;
                children: []
                pos: 2113
                length: 22
              pos: 1378
              length: 763
          children: []
          pos: 1280
          length: 861
        pos: 103
        length: 2040
    children: []
    pos: 103
    length: 2040
  pos: 0
  length: 2144
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SHORTEST_PATHS
        children: []
        pos: 188
        length: 14
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: final static int INF = 99999;
          children: []
          pos: 330
          length: 29
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shortest_paths
              children: []
              pos: 401
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String source
                children: []
                pos: 416
                length: 13
              pos: 366
              length: 870
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<String,Integer> weight_by_node = new HashMap<String,Integer>();
                children: []
                pos: 483
                length: 67
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (List<String> edge : weight_by_edge.keySet()) {
                                    weight_by_node.put(edge.get(1), INF);
                                    weight_by_node.put(edge.get(0), INF);
                            }
                children: []
                pos: 559
                length: 169
              - type: expression_statement
                fields:
                  text: weight_by_node.put(source, 0);
                children: []
                pos: 738
                length: 30
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < weight_by_node.size(); i++) {
                                for (List<String> edge : weight_by_edge.keySet()) {
                                    int update_weight = Math.min(
                                            weight_by_node.get(edge.get(0))
                                                    + weight_by_edge.get(edge),
                                            weight_by_node.get(edge.get(1)));

                                    weight_by_node.put(edge.get(1), update_weight);
                                }
                            }
                children: []
                pos: 777
                length: 422
              - type: return_statement
                fields:
                  text: return weight_by_node;
                children: []
                pos: 1208
                length: 22
              pos: 473
              length: 763
          children: []
          pos: 366
          length: 870
        pos: 175
        length: 1064
    children: []
    pos: 175
    length: 1064
  pos: 0
  length: 1240
text_diff: "--- before\n+++ after\n@@ -1,5 +1,9 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n+\n+import java_programs.Node;\n+import
  java_programs.WeightedEdge;\n+\n import java.lang.Math.*;\n \n /**\n@@ -27,37 +31,11
  @@\n                         weight_by_node.get(edge.get(0))\n                                 +
  weight_by_edge.get(edge),\n                         weight_by_node.get(edge.get(1)));\n-
  \               weight_by_edge.put(edge, update_weight);\n-            }\n-        }\n-
  \       return weight_by_node;\n-    }\n-\n \n-    /**\n-     * Rewrite shortest_paths
  method\n-     * @param node\n-     * @param weight_by_edge\n-     * @return\n-     */\n-\n-
  \   public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge>
  weight_by_edge) {\n-        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n-
  \       for (WeightedEdge edge : weight_by_edge) {\n-                weight_by_node.put(edge.node1.toString(),
  INF);\n-                weight_by_node.put(edge.node2.toString(), INF);\n-        }\n-\n-
  \       weight_by_node.put(source.getValue(), 0);\n-        for (int i = 0; i <
  weight_by_node.size(); i++) {\n-            for (WeightedEdge edge : weight_by_edge)
  {\n-                int update_weight = Math.min(\n-                        weight_by_node.get(edge.node1.toString())\n-
  \                               + edge.weight,\n-                        weight_by_node.get(edge.node2.toString()));\n-
  \               edge.weight = update_weight;\n+                weight_by_node.put(edge.get(1),
  update_weight);\n             }\n         }\n         return weight_by_node;\n     }\n+\n
  }\n"
tree_diff: |+
  New cluster:
  ===
  insert-node
  ---
  method_declaration [366,1236]
  to
  class_body [103,2143]
  at 1
  ------------
  ===
  insert-node
  ---
  method_declaration [366,1236]
  to
  class_body [103,2143]
  at 1
  ===
  insert-node
  ---
  identifier: shortest_paths [401,415]
  to
  method_declaration [366,1236]
  at 0

  New cluster:
  MOVE from method_declaration [366,1236]
  ------------
  ===
  move-tree
  ---
  method_parameters [294,1156]
      formal_parameter: String source [344,357]
  to
  method_declaration [366,1236]
  at 1

  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  block [473,1236]
      local_variable_declaration: Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); [483,550]
      enhanced_for_statement: for (List<String> edge : weight_by_edge.keySet()) {
                  weight_by_node.put(edge.get(1), INF);
                  weight_by_node.put(edge.get(0), INF);
          } [559,728]
      expression_statement: weight_by_node.put(source, 0); [738,768]
      for_statement: for (int i = 0; i < weight_by_node.size(); i++) {
              for (List<String> edge : weight_by_edge.keySet()) {
                  int update_weight = Math.min(
                          weight_by_node.get(edge.get(0))
                                  + weight_by_edge.get(edge),
                          weight_by_node.get(edge.get(1)));

                  weight_by_node.put(edge.get(1), update_weight);
              }
          } [777,1199]
      return_statement: return weight_by_node; [1208,1230]
  to
  method_declaration [366,1236]
  at 2

  New cluster:
  ===
  delete-node
  ---
  method_declaration [294,1156]
  ===
  ------------
  ===
  delete-node
  ---
  method_declaration [294,1156]
  ===
  ===
  delete-node
  ---
  identifier: shortest_paths [329,343]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  block [401,1156]
      local_variable_declaration: Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); [411,478]
      enhanced_for_statement: for (List<String> edge : weight_by_edge.keySet()) {
                  weight_by_node.put(edge.get(1), INF);
                  weight_by_node.put(edge.get(0), INF);
          } [487,656]
      expression_statement: weight_by_node.put(source, 0); [666,696]
      for_statement: for (int i = 0; i < weight_by_node.size(); i++) {
              for (List<String> edge : weight_by_edge.keySet()) {
                  int update_weight = Math.min(
                          weight_by_node.get(edge.get(0))
                                  + weight_by_edge.get(edge),
                          weight_by_node.get(edge.get(1)));
                  weight_by_edge.put(edge, update_weight);
              }
          } [705,1119]
      return_statement: return weight_by_node; [1128,1150]

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  method_declaration [1280,2141]
      identifier: shortest_paths [1315,1329]
      method_parameters [1280,2141]
          formal_parameter: Node source [1330,1341]
      block [1378,2141]
          local_variable_declaration: Map<String,Integer> weight_by_node = new HashMap<String,Integer>(); [1388,1455]
          enhanced_for_statement: for (WeightedEdge edge : weight_by_edge) {
                  weight_by_node.put(edge.node1.toString(), INF);
                  weight_by_node.put(edge.node2.toString(), INF);
          } [1464,1644]
          expression_statement: weight_by_node.put(source.getValue(), 0); [1654,1695]
          for_statement: for (int i = 0; i < weight_by_node.size(); i++) {
              for (WeightedEdge edge : weight_by_edge) {
                  int update_weight = Math.min(
                          weight_by_node.get(edge.node1.toString())
                                  + edge.weight,
                          weight_by_node.get(edge.node2.toString()));
                  edge.weight = update_weight;
              }
          } [1704,2104]
          return_statement: return weight_by_node; [2113,2135]

...
