---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: knapsack
        children: []
        pos: 4
        length: 8
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: capacity
          children: []
          pos: 13
          length: 8
        pos: 0
        length: 460
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: memo = defaultdict(int)
          children: []
          pos: 75
          length: 23
        - type: for_statement
          fields:
            text: |-
              for i in range(1, len(items) + 1):
                      weight, value = items[i - 1]

                      for j in range(1, capacity + 1):
                          memo[i, j] = memo[i - 1, j]

                          if weight < j:
                              memo[i, j] = max(
                                  memo[i, j],
                                  value + memo[i - 1, j - weight]
                              )
          children: []
          pos: 104
          length: 317
        - type: return_statement
          fields:
            text: return memo[len(items), capacity]
          children: []
          pos: 427
          length: 33
        pos: 35
        length: 425
    children: []
    pos: 0
    length: 460
  pos: 0
  length: 461
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: knapsack
        children: []
        pos: 4
        length: 8
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: capacity
          children: []
          pos: 13
          length: 8
        pos: 0
        length: 461
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: memo = defaultdict(int)
          children: []
          pos: 75
          length: 23
        - type: for_statement
          fields:
            text: |-
              for i in range(1, len(items) + 1):
                      weight, value = items[i - 1]

                      for j in range(1, capacity + 1):
                          memo[i, j] = memo[i - 1, j]

                          if weight <= j:
                              memo[i, j] = max(
                                  memo[i, j],
                                  value + memo[i - 1, j - weight]
                              )
          children: []
          pos: 104
          length: 318
        - type: return_statement
          fields:
            text: return memo[len(items), capacity]
          children: []
          pos: 428
          length: 33
        pos: 35
        length: 426
    children: []
    pos: 0
    length: 461
  pos: 0
  length: 463
text_diff: "--- before\n+++ after\n@@ -8,10 +8,11 @@\n         for j in range(1, capacity
  + 1):\n             memo[i, j] = memo[i - 1, j]\n \n-            if weight < j:\n+
  \           if weight <= j:\n                 memo[i, j] = max(\n                     memo[i,
  j],\n                     value + memo[i - 1, j - weight]\n                 )\n
  \n     return memo[len(items), capacity]\n+\n"
tree_diff: |+
  New cluster:
  UPDATE from for i in range(1, len(items) + 1):
          weight, value = items[i - 1]

          for j in range(1, capacity + 1):
              memo[i, j] = memo[i - 1, j]

              if weight < j:
                  memo[i, j] = max(
                      memo[i, j],
                      value + memo[i - 1, j - weight]
                  ) to for i in range(1, len(items) + 1):
          weight, value = items[i - 1]

          for j in range(1, capacity + 1):
              memo[i, j] = memo[i - 1, j]

              if weight <= j:
                  memo[i, j] = max(
                      memo[i, j],
                      value + memo[i - 1, j - weight]
                  )
  ------------
  ===
  update-node
  ---
  for_statement: for i in range(1, len(items) + 1):
          weight, value = items[i - 1]

          for j in range(1, capacity + 1):
              memo[i, j] = memo[i - 1, j]

              if weight < j:
                  memo[i, j] = max(
                      memo[i, j],
                      value + memo[i - 1, j - weight]
                  ) [104,421]
  replace for i in range(1, len(items) + 1):
          weight, value = items[i - 1]

          for j in range(1, capacity + 1):
              memo[i, j] = memo[i - 1, j]

              if weight < j:
                  memo[i, j] = max(
                      memo[i, j],
                      value + memo[i - 1, j - weight]
                  ) by for i in range(1, len(items) + 1):
          weight, value = items[i - 1]

          for j in range(1, capacity + 1):
              memo[i, j] = memo[i - 1, j]

              if weight <= j:
                  memo[i, j] = max(
                      memo[i, j],
                      value + memo[i - 1, j - weight]
                  )

...
