---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Base32
        children: []
        pos: 1624
        length: 6
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final int BITS_PER_ENCODED_BYTE = 5;
          children: []
          pos: 1857
          length: 51
        - type: field_declaration
          fields:
            text: private static final int BYTES_PER_ENCODED_BLOCK = 8;
          children: []
          pos: 1913
          length: 53
        - type: field_declaration
          fields:
            text: private static final int BYTES_PER_UNENCODED_BLOCK = 5;
          children: []
          pos: 1971
          length: 55
        - type: field_declaration
          fields:
            text: private static final byte[] CHUNK_SEPARATOR = {'\r', '\n'};
          children: []
          pos: 2187
          length: 59
        - type: field_declaration
          fields:
            text: |-
              private static final byte[] DECODE_TABLE = {
                       //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f
                          -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, // 30-3f 2-7
                          -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, // 40-4f A-O
                          15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,                     // 50-5a P-Z
                  };
          children: []
          pos: 2580
          length: 648
        - type: field_declaration
          fields:
            text: |-
              private static final byte[] ENCODE_TABLE = {
                          'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                          'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                          '2', '3', '4', '5', '6', '7',
                  };
          children: []
          pos: 3423
          length: 247
        - type: field_declaration
          fields:
            text: |-
              private static final byte[] HEX_DECODE_TABLE = {
                       //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f
                           0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7
                          -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O
                          25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V
                  };
          children: []
          pos: 4012
          length: 652
        - type: field_declaration
          fields:
            text: |-
              private static final byte[] HEX_ENCODE_TABLE = {
                          '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                          'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                          'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
                  };
          children: []
          pos: 4863
          length: 251
        - type: field_declaration
          fields:
            text: private static final int MASK_5BITS = 0x1f;
          children: []
          pos: 5192
          length: 43
        - type: field_declaration
          fields:
            text: private final int decodeSize;
          children: []
          pos: 5908
          length: 29
        - type: field_declaration
          fields:
            text: private final byte[] decodeTable;
          children: []
          pos: 5987
          length: 33
        - type: field_declaration
          fields:
            text: private final int encodeSize;
          children: []
          pos: 6245
          length: 29
        - type: field_declaration
          fields:
            text: private final byte[] encodeTable;
          children: []
          pos: 6324
          length: 33
        - type: field_declaration
          fields:
            text: private final byte[] lineSeparator;
          children: []
          pos: 6471
          length: 35
        - type: constructor_declaration
          fields:
            text: |-
              public Base32() {
                      this(false);
                  }
          children: []
          pos: 6677
          length: 44
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final byte pad) {
                      this(false, pad);
                  }
          children: []
          pos: 6930
          length: 63
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final boolean useHex) {
                      this(0, null, useHex, PAD_DEFAULT);
                  }
          children: []
          pos: 7223
          length: 87
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final boolean useHex, final byte pad) {
                      this(0, null, useHex, pad);
                  }
          children: []
          pos: 7585
          length: 95
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final int lineLength) {
                      this(lineLength, CHUNK_SEPARATOR);
                  }
          children: []
          pos: 8173
          length: 86
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final int lineLength, final byte[] lineSeparator) {
                      this(lineLength, lineSeparator, false, PAD_DEFAULT);
                  }
          children: []
          pos: 9141
          length: 132
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex) {
                      this(lineLength, lineSeparator, useHex, PAD_DEFAULT);
                  }
          children: []
          pos: 10355
          length: 155
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) {
                      super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength,
                              lineSeparator == null ? 0 : lineSeparator.length, pad);
                      if (useHex) {
                          this.encodeTable = HEX_ENCODE_TABLE;
                          this.decodeTable = HEX_DECODE_TABLE;
                      } else {
                          this.encodeTable = ENCODE_TABLE;
                          this.decodeTable = DECODE_TABLE;
                      }
                      if (lineLength > 0) {
                          if (lineSeparator == null) {
                              throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null");
                          }
                          // Must be done after initializing the tables
                          if (containsAlphabetOrPad(lineSeparator)) {
                              final String sep = StringUtils.newStringUtf8(lineSeparator);
                              throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]");
                          }
                          this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
                          this.lineSeparator = new byte[lineSeparator.length];
                          System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                      } else {
                          this.encodeSize = BYTES_PER_ENCODED_BLOCK;
                          this.lineSeparator = null;
                      }
                      this.decodeSize = this.encodeSize - 1;

                      if (isInAlphabet(pad) || isWhiteSpace(pad)) {
                          throw new IllegalArgumentException("pad must not be in alphabet or whitespace");
                      }
                  }
          children: []
          pos: 11637
          length: 1583
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: decode
              children: []
              pos: 14348
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final byte[] in
                children: []
                pos: 14355
                length: 15
              pos: 14329
              length: 4455
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: field_access
                        fields:
                          text: context.eof
                        children: []
                        pos: 14497
                        length: 11
                    children: []
                    pos: 14496
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 14524
                    length: 7
                  pos: 14510
                  length: 31
                pos: 14493
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: inAvail
                            children: []
                            pos: 14554
                            length: 7
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 14564
                            length: 1
                        children: []
                        pos: 14554
                        length: 11
                    children: []
                    pos: 14553
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: context.eof = true;
                    children: []
                    pos: 14581
                    length: 19
                  pos: 14567
                  length: 43
                pos: 14550
                length: 60
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < inAvail; i++) {
                                final byte b = in[inPos++];
                                if (b == pad) {
                                    // We're done.
                                    context.eof = true;
                                    break;
                                } else {
                                    final byte[] buffer = ensureBufferSize(decodeSize, context);
                                    if (b >= 0 && b < this.decodeTable.length) {
                                        final int result = this.decodeTable[b];
                                        if (result >= 0) {
                                            context.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
                                            // collect decoded bytes
                                            context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;
                                            if (context.modulus == 0) { // we can output the 5 bytes
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);
                                            }
                                        }
                                    }
                                }
                            }
                children: []
                pos: 14619
                length: 1376
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: context.eof
                            children: []
                            pos: 16237
                            length: 11
                          right:
                            type: greater_or_equals
                            fields:
                              left:
                                type: field_access
                                fields:
                                  text: context.modulus
                                children: []
                                pos: 16252
                                length: 15
                              right:
                                type: decimal_integer_literal
                                fields:
                                  text: '2'
                                children: []
                                pos: 16271
                                length: 1
                            children: []
                            pos: 16252
                            length: 20
                        children: []
                        pos: 16237
                        length: 35
                    children: []
                    pos: 16236
                    length: 37
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: final byte[] buffer = ensureBufferSize(decodeSize, context);
                    children: []
                    pos: 16321
                    length: 60
                  - type: switch_expression
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: field_access
                            fields:
                              text: context.modulus
                            children: []
                            pos: 16475
                            length: 15
                        children: []
                        pos: 16474
                        length: 17
                      body:
                        type: switch_block
                        fields:
                          text: |-
                            {
                                            case 2 : // 10 bits, drop 2 and output one byte
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);
                                                break;
                                            case 3 : // 15 bits, drop 7 and output 1 byte
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);
                                                break;
                                            case 4 : // 20 bits = 2*8 + 4
                                                context.lbitWorkArea = context.lbitWorkArea >> 4; // drop 4 bits
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
                                                break;
                                            case 5 : // 25bits = 3*8 + 1
                                                context.lbitWorkArea = context.lbitWorkArea >> 1;
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
                                                break;
                                            case 6 : // 30bits = 3*8 + 6
                                                context.lbitWorkArea = context.lbitWorkArea >> 6;
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
                                                break;
                                            case 7 : // 35 = 4*8 +3
                                                context.lbitWorkArea = context.lbitWorkArea >> 3;
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
                                                break;
                                            default:
                                                // modulus can be 0-7, and we excluded 0,1 already
                                                throw new IllegalStateException("Impossible modulus "+context.modulus);
                                        }
                        children: []
                        pos: 16492
                        length: 2276
                    children: []
                    pos: 16467
                    length: 2301
                  pos: 16274
                  length: 2504
                pos: 16233
                length: 2545
              pos: 14425
              length: 4359
          children: []
          pos: 14329
          length: 4455
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: encode
              children: []
              pos: 19433
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final byte[] in
                children: []
                pos: 19440
                length: 15
              pos: 19414
              length: 6262
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: field_access
                        fields:
                          text: context.eof
                        children: []
                        pos: 19582
                        length: 11
                    children: []
                    pos: 19581
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 19609
                    length: 7
                  pos: 19595
                  length: 31
                pos: 19578
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: inAvail
                            children: []
                            pos: 19741
                            length: 7
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 19751
                            length: 1
                        children: []
                        pos: 19741
                        length: 11
                    children: []
                    pos: 19740
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: context.eof = true;
                    children: []
                    pos: 19768
                    length: 19
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: equals
                                fields:
                                  left:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 19804
                                    length: 1
                                  right:
                                    type: field_access
                                    fields:
                                      text: context.modulus
                                    children: []
                                    pos: 19809
                                    length: 15
                                children: []
                                pos: 19804
                                length: 20
                              right:
                                type: equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: lineLength
                                    children: []
                                    pos: 19828
                                    length: 10
                                  right:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 19842
                                    length: 1
                                children: []
                                pos: 19828
                                length: 15
                            children: []
                            pos: 19804
                            length: 39
                        children: []
                        pos: 19803
                        length: 41
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 19863
                        length: 7
                      pos: 19845
                      length: 89
                    pos: 19800
                    length: 134
                  - type: local_variable_declaration
                    fields:
                      text: final byte[] buffer = ensureBufferSize(encodeSize, context);
                    children: []
                    pos: 19947
                    length: 60
                  - type: local_variable_declaration
                    fields:
                      text: final int savedPos = context.pos;
                    children: []
                    pos: 20020
                    length: 33
                  - type: switch_expression
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: field_access
                            fields:
                              text: context.modulus
                            children: []
                            pos: 20074
                            length: 15
                        children: []
                        pos: 20073
                        length: 17
                      body:
                        type: switch_block
                        fields:
                          text: |-
                            { // % 5
                                            case 0 :
                                                break;
                                            case 1 : // Only 1 octet; take top 5 bits then remainder
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS]; // 5-3=2
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                break;
                                            case 2 : // 2 octets = 16 bits to use
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS]; // 16-3*5 = 1
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS]; // 5-1 = 4
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                break;
                                            case 3 : // 3 octets = 24 bits to use
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS]; // 24-1*5 = 19
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS]; // 24-2*5 = 14
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS]; // 24-3*5 = 9
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS]; // 24-4*5 = 4
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS]; // 5-4 = 1
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                break;
                                            case 4 : // 4 octets = 32 bits to use
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS]; // 32-1*5 = 27
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS]; // 32-2*5 = 22
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS]; // 32-3*5 = 17
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS]; // 32-4*5 = 12
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS]; // 32-5*5 =  7
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS]; // 32-6*5 =  2
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3
                                                buffer[context.pos++] = pad;
                                                break;
                                            default:
                                                throw new IllegalStateException("Impossible modulus "+context.modulus);
                                        }
                        children: []
                        pos: 20091
                        length: 3354
                    children: []
                    pos: 20066
                    length: 3379
                  - type: expression_statement
                    fields:
                      text: context.currentLinePos += context.pos - savedPos;
                    children: []
                    pos: 23458
                    length: 49
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: greater_than
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: lineLength
                                    children: []
                                    pos: 23646
                                    length: 10
                                  right:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 23659
                                    length: 1
                                children: []
                                pos: 23646
                                length: 14
                              right:
                                type: greater_than
                                fields:
                                  left:
                                    type: field_access
                                    fields:
                                      text: context.currentLinePos
                                    children: []
                                    pos: 23664
                                    length: 22
                                  right:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 23689
                                    length: 1
                                children: []
                                pos: 23664
                                length: 26
                            children: []
                            pos: 23646
                            length: 44
                        children: []
                        pos: 23645
                        length: 46
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: System.arraycopy(lineSeparator, 0, buffer, context.pos,
                            lineSeparator.length);
                        children: []
                        pos: 23744
                        length: 78
                      - type: expression_statement
                        fields:
                          text: context.pos += lineSeparator.length;
                        children: []
                        pos: 23839
                        length: 36
                      pos: 23691
                      length: 198
                    pos: 23642
                    length: 247
                  pos: 19754
                  length: 4145
                pos: 19737
                length: 5933
              pos: 19510
              length: 6166
          children: []
          pos: 19414
          length: 6262
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isInAlphabet
              children: []
              pos: 25969
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final byte octet
                children: []
                pos: 25982
                length: 16
              pos: 25940
              length: 152
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return octet >= 0 && octet < decodeTable.length && decodeTable[octet]
                    != -1;
                children: []
                pos: 26010
                length: 76
              pos: 26000
              length: 92
          children: []
          pos: 25940
          length: 152
        pos: 1611
        length: 24483
    children: []
    pos: 1611
    length: 24483
  pos: 0
  length: 26095
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Base32
        children: []
        pos: 1624
        length: 6
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final int BITS_PER_ENCODED_BYTE = 5;
          children: []
          pos: 1857
          length: 51
        - type: field_declaration
          fields:
            text: private static final int BYTES_PER_ENCODED_BLOCK = 8;
          children: []
          pos: 1913
          length: 53
        - type: field_declaration
          fields:
            text: private static final int BYTES_PER_UNENCODED_BLOCK = 5;
          children: []
          pos: 1971
          length: 55
        - type: field_declaration
          fields:
            text: private static final byte[] CHUNK_SEPARATOR = {'\r', '\n'};
          children: []
          pos: 2187
          length: 59
        - type: field_declaration
          fields:
            text: |-
              private static final byte[] DECODE_TABLE = {
                       //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f
                          -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, // 30-3f 2-7
                          -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, // 40-4f A-O
                          15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,                     // 50-5a P-Z
                  };
          children: []
          pos: 2580
          length: 648
        - type: field_declaration
          fields:
            text: |-
              private static final byte[] ENCODE_TABLE = {
                          'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                          'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                          '2', '3', '4', '5', '6', '7',
                  };
          children: []
          pos: 3423
          length: 247
        - type: field_declaration
          fields:
            text: |-
              private static final byte[] HEX_DECODE_TABLE = {
                       //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
                          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f
                           0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7
                          -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O
                          25, 26, 27, 28, 29, 30, 31, 32,
                  };
          children: []
          pos: 4012
          length: 607
        - type: field_declaration
          fields:
            text: |-
              private static final byte[] HEX_ENCODE_TABLE = {
                          '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                          'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                          'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
                  };
          children: []
          pos: 4818
          length: 251
        - type: field_declaration
          fields:
            text: private static final int MASK_5BITS = 0x1f;
          children: []
          pos: 5147
          length: 43
        - type: field_declaration
          fields:
            text: private final int decodeSize;
          children: []
          pos: 5863
          length: 29
        - type: field_declaration
          fields:
            text: private final byte[] decodeTable;
          children: []
          pos: 5942
          length: 33
        - type: field_declaration
          fields:
            text: private final int encodeSize;
          children: []
          pos: 6200
          length: 29
        - type: field_declaration
          fields:
            text: private final byte[] encodeTable;
          children: []
          pos: 6279
          length: 33
        - type: field_declaration
          fields:
            text: private final byte[] lineSeparator;
          children: []
          pos: 6426
          length: 35
        - type: constructor_declaration
          fields:
            text: |-
              public Base32() {
                      this(false);
                  }
          children: []
          pos: 6632
          length: 44
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final byte pad) {
                      this(false, pad);
                  }
          children: []
          pos: 6885
          length: 63
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final boolean useHex) {
                      this(0, null, useHex, PAD_DEFAULT);
                  }
          children: []
          pos: 7178
          length: 87
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final boolean useHex, final byte pad) {
                      this(0, null, useHex, pad);
                  }
          children: []
          pos: 7540
          length: 95
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final int lineLength) {
                      this(lineLength, CHUNK_SEPARATOR);
                  }
          children: []
          pos: 8128
          length: 86
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final int lineLength, final byte[] lineSeparator) {
                      this(lineLength, lineSeparator, false, PAD_DEFAULT);
                  }
          children: []
          pos: 9096
          length: 132
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex) {
                      this(lineLength, lineSeparator, useHex, PAD_DEFAULT);
                  }
          children: []
          pos: 10310
          length: 155
        - type: constructor_declaration
          fields:
            text: |-
              public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) {
                      super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength,
                              lineSeparator == null ? 0 : lineSeparator.length, pad);
                      if (useHex) {
                          this.encodeTable = HEX_ENCODE_TABLE;
                          this.decodeTable = HEX_DECODE_TABLE;
                      } else {
                          this.encodeTable = ENCODE_TABLE;
                          this.decodeTable = DECODE_TABLE;
                      }
                      if (lineLength > 0) {
                          if (lineSeparator == null) {
                              throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null");
                          }
                          // Must be done after initializing the tables
                          if (containsAlphabetOrPad(lineSeparator)) {
                              final String sep = StringUtils.newStringUtf8(lineSeparator);
                              throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]");
                          }
                          this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
                          this.lineSeparator = new byte[lineSeparator.length];
                          System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                      } else {
                          this.encodeSize = BYTES_PER_ENCODED_BLOCK;
                          this.lineSeparator = null;
                      }
                      this.decodeSize = this.encodeSize - 1;

                      if (isInAlphabet(pad) || isWhiteSpace(pad)) {
                          throw new IllegalArgumentException("pad must not be in alphabet or whitespace");
                      }
                  }
          children: []
          pos: 11592
          length: 1583
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: decode
              children: []
              pos: 14303
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final byte[] in
                children: []
                pos: 14310
                length: 15
              pos: 14284
              length: 4455
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: field_access
                        fields:
                          text: context.eof
                        children: []
                        pos: 14452
                        length: 11
                    children: []
                    pos: 14451
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 14479
                    length: 7
                  pos: 14465
                  length: 31
                pos: 14448
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: inAvail
                            children: []
                            pos: 14509
                            length: 7
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 14519
                            length: 1
                        children: []
                        pos: 14509
                        length: 11
                    children: []
                    pos: 14508
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: context.eof = true;
                    children: []
                    pos: 14536
                    length: 19
                  pos: 14522
                  length: 43
                pos: 14505
                length: 60
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < inAvail; i++) {
                                final byte b = in[inPos++];
                                if (b == pad) {
                                    // We're done.
                                    context.eof = true;
                                    break;
                                } else {
                                    final byte[] buffer = ensureBufferSize(decodeSize, context);
                                    if (b >= 0 && b < this.decodeTable.length) {
                                        final int result = this.decodeTable[b];
                                        if (result >= 0) {
                                            context.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
                                            // collect decoded bytes
                                            context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;
                                            if (context.modulus == 0) { // we can output the 5 bytes
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);
                                            }
                                        }
                                    }
                                }
                            }
                children: []
                pos: 14574
                length: 1376
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: context.eof
                            children: []
                            pos: 16192
                            length: 11
                          right:
                            type: greater_or_equals
                            fields:
                              left:
                                type: field_access
                                fields:
                                  text: context.modulus
                                children: []
                                pos: 16207
                                length: 15
                              right:
                                type: decimal_integer_literal
                                fields:
                                  text: '2'
                                children: []
                                pos: 16226
                                length: 1
                            children: []
                            pos: 16207
                            length: 20
                        children: []
                        pos: 16192
                        length: 35
                    children: []
                    pos: 16191
                    length: 37
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: final byte[] buffer = ensureBufferSize(decodeSize, context);
                    children: []
                    pos: 16276
                    length: 60
                  - type: switch_expression
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: field_access
                            fields:
                              text: context.modulus
                            children: []
                            pos: 16430
                            length: 15
                        children: []
                        pos: 16429
                        length: 17
                      body:
                        type: switch_block
                        fields:
                          text: |-
                            {
                                            case 2 : // 10 bits, drop 2 and output one byte
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);
                                                break;
                                            case 3 : // 15 bits, drop 7 and output 1 byte
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);
                                                break;
                                            case 4 : // 20 bits = 2*8 + 4
                                                context.lbitWorkArea = context.lbitWorkArea >> 4; // drop 4 bits
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
                                                break;
                                            case 5 : // 25bits = 3*8 + 1
                                                context.lbitWorkArea = context.lbitWorkArea >> 1;
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
                                                break;
                                            case 6 : // 30bits = 3*8 + 6
                                                context.lbitWorkArea = context.lbitWorkArea >> 6;
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
                                                break;
                                            case 7 : // 35 = 4*8 +3
                                                context.lbitWorkArea = context.lbitWorkArea >> 3;
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
                                                buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
                                                break;
                                            default:
                                                // modulus can be 0-7, and we excluded 0,1 already
                                                throw new IllegalStateException("Impossible modulus "+context.modulus);
                                        }
                        children: []
                        pos: 16447
                        length: 2276
                    children: []
                    pos: 16422
                    length: 2301
                  pos: 16229
                  length: 2504
                pos: 16188
                length: 2545
              pos: 14380
              length: 4359
          children: []
          pos: 14284
          length: 4455
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: encode
              children: []
              pos: 19388
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final byte[] in
                children: []
                pos: 19395
                length: 15
              pos: 19369
              length: 6262
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: field_access
                        fields:
                          text: context.eof
                        children: []
                        pos: 19537
                        length: 11
                    children: []
                    pos: 19536
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 19564
                    length: 7
                  pos: 19550
                  length: 31
                pos: 19533
                length: 48
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: inAvail
                            children: []
                            pos: 19696
                            length: 7
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 19706
                            length: 1
                        children: []
                        pos: 19696
                        length: 11
                    children: []
                    pos: 19695
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: context.eof = true;
                    children: []
                    pos: 19723
                    length: 19
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: equals
                                fields:
                                  left:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 19759
                                    length: 1
                                  right:
                                    type: field_access
                                    fields:
                                      text: context.modulus
                                    children: []
                                    pos: 19764
                                    length: 15
                                children: []
                                pos: 19759
                                length: 20
                              right:
                                type: equals
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: lineLength
                                    children: []
                                    pos: 19783
                                    length: 10
                                  right:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 19797
                                    length: 1
                                children: []
                                pos: 19783
                                length: 15
                            children: []
                            pos: 19759
                            length: 39
                        children: []
                        pos: 19758
                        length: 41
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return;
                        children: []
                        pos: 19818
                        length: 7
                      pos: 19800
                      length: 89
                    pos: 19755
                    length: 134
                  - type: local_variable_declaration
                    fields:
                      text: final byte[] buffer = ensureBufferSize(encodeSize, context);
                    children: []
                    pos: 19902
                    length: 60
                  - type: local_variable_declaration
                    fields:
                      text: final int savedPos = context.pos;
                    children: []
                    pos: 19975
                    length: 33
                  - type: switch_expression
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: field_access
                            fields:
                              text: context.modulus
                            children: []
                            pos: 20029
                            length: 15
                        children: []
                        pos: 20028
                        length: 17
                      body:
                        type: switch_block
                        fields:
                          text: |-
                            { // % 5
                                            case 0 :
                                                break;
                                            case 1 : // Only 1 octet; take top 5 bits then remainder
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS]; // 5-3=2
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                break;
                                            case 2 : // 2 octets = 16 bits to use
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS]; // 16-3*5 = 1
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS]; // 5-1 = 4
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                break;
                                            case 3 : // 3 octets = 24 bits to use
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS]; // 24-1*5 = 19
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS]; // 24-2*5 = 14
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS]; // 24-3*5 = 9
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS]; // 24-4*5 = 4
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS]; // 5-4 = 1
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                buffer[context.pos++] = pad;
                                                break;
                                            case 4 : // 4 octets = 32 bits to use
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS]; // 32-1*5 = 27
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS]; // 32-2*5 = 22
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS]; // 32-3*5 = 17
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS]; // 32-4*5 = 12
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS]; // 32-5*5 =  7
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS]; // 32-6*5 =  2
                                                buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3
                                                buffer[context.pos++] = pad;
                                                break;
                                            default:
                                                throw new IllegalStateException("Impossible modulus "+context.modulus);
                                        }
                        children: []
                        pos: 20046
                        length: 3354
                    children: []
                    pos: 20021
                    length: 3379
                  - type: expression_statement
                    fields:
                      text: context.currentLinePos += context.pos - savedPos;
                    children: []
                    pos: 23413
                    length: 49
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: and
                            fields:
                              left:
                                type: greater_than
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: lineLength
                                    children: []
                                    pos: 23601
                                    length: 10
                                  right:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 23614
                                    length: 1
                                children: []
                                pos: 23601
                                length: 14
                              right:
                                type: greater_than
                                fields:
                                  left:
                                    type: field_access
                                    fields:
                                      text: context.currentLinePos
                                    children: []
                                    pos: 23619
                                    length: 22
                                  right:
                                    type: decimal_integer_literal
                                    fields:
                                      text: '0'
                                    children: []
                                    pos: 23644
                                    length: 1
                                children: []
                                pos: 23619
                                length: 26
                            children: []
                            pos: 23601
                            length: 44
                        children: []
                        pos: 23600
                        length: 46
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: expression_statement
                        fields:
                          text: System.arraycopy(lineSeparator, 0, buffer, context.pos,
                            lineSeparator.length);
                        children: []
                        pos: 23699
                        length: 78
                      - type: expression_statement
                        fields:
                          text: context.pos += lineSeparator.length;
                        children: []
                        pos: 23794
                        length: 36
                      pos: 23646
                      length: 198
                    pos: 23597
                    length: 247
                  pos: 19709
                  length: 4145
                pos: 19692
                length: 5933
              pos: 19465
              length: 6166
          children: []
          pos: 19369
          length: 6262
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isInAlphabet
              children: []
              pos: 25924
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final byte octet
                children: []
                pos: 25937
                length: 16
              pos: 25895
              length: 152
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return octet >= 0 && octet < decodeTable.length && decodeTable[octet]
                    != -1;
                children: []
                pos: 25965
                length: 76
              pos: 25955
              length: 92
          children: []
          pos: 25895
          length: 152
        pos: 1611
        length: 24438
    children: []
    pos: 1611
    length: 24438
  pos: 0
  length: 26050
text_diff: "--- before\n+++ after\n@@ -96,7 +96,7 @@\n             -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f\n              0,  1,  2,
  \ 3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7\n             -1,
  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O\n-            25,
  26, 27, 28, 29, 30, 31,                                     // 50-57 P-V\n+            25,
  26, 27, 28, 29, 30, 31, 32,\n     };\n \n     /**\n"
tree_diff: |+
  New cluster:
  UPDATE from private static final byte[] HEX_DECODE_TABLE = {
           //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f
               0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7
              -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O
              25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V
      }; to private static final byte[] HEX_DECODE_TABLE = {
           //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f
               0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7
              -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O
              25, 26, 27, 28, 29, 30, 31, 32,
      };
  ------------
  ===
  update-node
  ---
  field_declaration: private static final byte[] HEX_DECODE_TABLE = {
           //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f
               0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7
              -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O
              25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V
      }; [4012,4664]
  replace private static final byte[] HEX_DECODE_TABLE = {
           //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f
               0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7
              -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O
              25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V
      }; by private static final byte[] HEX_DECODE_TABLE = {
           //  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f
               0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7
              -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O
              25, 26, 27, 28, 29, 30, 31, 32,
      };

...
