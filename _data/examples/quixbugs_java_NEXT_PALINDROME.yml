---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: NEXT_PALINDROME
        children: []
        pos: 215
        length: 15
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: next_palindrome
              children: []
              pos: 258
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int[] digit_list
                children: []
                pos: 274
                length: 16
              pos: 237
              length: 915
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int high_mid = Math.floorDiv(digit_list.length, 2);
                children: []
                pos: 302
                length: 51
              - type: local_variable_declaration
                fields:
                  text: int low_mid = Math.floorDiv(digit_list.length - 1, 2);
                children: []
                pos: 362
                length: 54
              - type: while_statement
                fields:
                  text: |-
                    while (high_mid < digit_list.length && low_mid >= 0) {
                                if (digit_list[high_mid] == 9) {
                                    digit_list[high_mid] = 0;
                                    digit_list[low_mid] = 0;
                                    high_mid += 1;
                                    low_mid -= 1;
                                } else {
                                    digit_list[high_mid] += 1;
                                    if (low_mid != high_mid) {
                                        digit_list[low_mid] += 1;
                                    }
                                    return Arrays.toString(digit_list);
                                }
                            }
                children: []
                pos: 426
                length: 490
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> otherwise = new ArrayList<Integer>();
                children: []
                pos: 926
                length: 56
              - type: expression_statement
                fields:
                  text: otherwise.add(1);
                children: []
                pos: 991
                length: 17
              - type: expression_statement
                fields:
                  text: otherwise.addAll(Collections.nCopies(digit_list.length, 0));
                children: []
                pos: 1017
                length: 60
              - type: expression_statement
                fields:
                  text: otherwise.add(1);
                children: []
                pos: 1086
                length: 17
              - type: return_statement
                fields:
                  text: return String.valueOf(otherwise);
                children: []
                pos: 1113
                length: 33
              pos: 292
              length: 860
          children: []
          pos: 237
          length: 915
        pos: 202
        length: 952
    children: []
    pos: 202
    length: 952
  pos: 0
  length: 1155
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: NEXT_PALINDROME
        children: []
        pos: 223
        length: 15
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: next_palindrome
              children: []
              pos: 266
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int[] digit_list
                children: []
                pos: 282
                length: 16
              pos: 245
              length: 917
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int high_mid = Math.floorDiv(digit_list.length, 2);
                children: []
                pos: 310
                length: 51
              - type: local_variable_declaration
                fields:
                  text: int low_mid = Math.floorDiv(digit_list.length - 1, 2);
                children: []
                pos: 370
                length: 54
              - type: while_statement
                fields:
                  text: |-
                    while (high_mid < digit_list.length && low_mid >= 0) {
                                if (digit_list[high_mid] == 9) {
                                    digit_list[high_mid] = 0;
                                    digit_list[low_mid] = 0;
                                    high_mid += 1;
                                    low_mid -= 1;
                                } else {
                                    digit_list[high_mid] += 1;
                                    if (low_mid != high_mid) {
                                        digit_list[low_mid] += 1;
                                    }
                                    return Arrays.toString(digit_list);
                                }
                            }
                children: []
                pos: 434
                length: 490
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> otherwise = new ArrayList<Integer>();
                children: []
                pos: 934
                length: 56
              - type: expression_statement
                fields:
                  text: otherwise.add(1);
                children: []
                pos: 999
                length: 17
              - type: expression_statement
                fields:
                  text: otherwise.addAll(Collections.nCopies(digit_list.length-1,
                    0));
                children: []
                pos: 1025
                length: 62
              - type: expression_statement
                fields:
                  text: otherwise.add(1);
                children: []
                pos: 1096
                length: 17
              - type: return_statement
                fields:
                  text: return String.valueOf(otherwise);
                children: []
                pos: 1123
                length: 33
              pos: 300
              length: 862
          children: []
          pos: 245
          length: 917
        pos: 210
        length: 954
    children: []
    pos: 210
    length: 954
  pos: 0
  length: 1165
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n import java.lang.Math.*;\n /*\n@@
  -32,7 +32,7 @@\n \n         ArrayList<Integer> otherwise = new ArrayList<Integer>();\n
  \        otherwise.add(1);\n-        otherwise.addAll(Collections.nCopies(digit_list.length,
  0));\n+        otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));\n
  \        otherwise.add(1);\n \n         return String.valueOf(otherwise);\n"
tree_diff: |+
  New cluster:
  UPDATE from otherwise.addAll(Collections.nCopies(digit_list.length, 0)); to otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));
  ------------
  ===
  update-node
  ---
  expression_statement: otherwise.addAll(Collections.nCopies(digit_list.length, 0)); [1017,1077]
  replace otherwise.addAll(Collections.nCopies(digit_list.length, 0)); by otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));

...
