---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: kheapsort
        children: []
        pos: 4
        length: 9
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: arr
          children: []
          pos: 14
          length: 3
        pos: 0
        length: 194
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: heap = arr[:k]
          children: []
          pos: 45
          length: 14
        - type: expression_statement
          fields:
            text: heapq.heapify(heap)
          children: []
          pos: 64
          length: 19
        - type: for_statement
          fields:
            text: |-
              for x in arr:
                      yield heapq.heappushpop(heap, x)
          children: []
          pos: 89
          length: 54
        - type: while_statement
          fields:
            text: |-
              while heap:
                      yield heapq.heappop(heap)
          children: []
          pos: 149
          length: 45
        pos: 27
        length: 167
    children: []
    pos: 0
    length: 194
  pos: 0
  length: 195
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: kheapsort
        children: []
        pos: 4
        length: 9
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: arr
          children: []
          pos: 14
          length: 3
        pos: 0
        length: 198
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: heap = arr[:k]
          children: []
          pos: 45
          length: 14
        - type: expression_statement
          fields:
            text: heapq.heapify(heap)
          children: []
          pos: 64
          length: 19
        - type: for_statement
          fields:
            text: |-
              for x in arr[k:]:
                      yield heapq.heappushpop(heap, x)
          children: []
          pos: 89
          length: 58
        - type: while_statement
          fields:
            text: |-
              while heap:
                      yield heapq.heappop(heap)
          children: []
          pos: 153
          length: 45
        pos: 27
        length: 171
    children: []
    pos: 0
    length: 198
  pos: 0
  length: 200
text_diff: "--- before\n+++ after\n@@ -4,8 +4,9 @@\n     heap = arr[:k]\n     heapq.heapify(heap)\n
  \n-    for x in arr:\n+    for x in arr[k:]:\n         yield heapq.heappushpop(heap,
  x)\n \n     while heap:\n         yield heapq.heappop(heap)\n+\n"
tree_diff: |+
  New cluster:
  UPDATE from for x in arr:
          yield heapq.heappushpop(heap, x) to for x in arr[k:]:
          yield heapq.heappushpop(heap, x)
  ------------
  ===
  update-node
  ---
  for_statement: for x in arr:
          yield heapq.heappushpop(heap, x) [89,143]
  replace for x in arr:
          yield heapq.heappushpop(heap, x) by for x in arr[k:]:
          yield heapq.heappushpop(heap, x)

...
