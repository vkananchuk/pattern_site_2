---
language: java
text_diff: "--- before\n+++ after\n@@ -85,7 +85,7 @@\n             return containsMatch((Iterator)
  left, right);\n         }\n         if (right instanceof Iterator) {\n-            return
  containsMatch(left, (Iterator) right);\n+            return containsMatch((Iterator)
  right, left);\n         }\n         double ld = InfoSetUtil.doubleValue(left);\n
  \        if (Double.isNaN(ld)) {\n@@ -135,15 +135,6 @@\n      * @param value to
  look for\n      * @return whether a match was found\n      */\n-    private boolean
  containsMatch(Object value, Iterator it) {\n-        while (it.hasNext()) {\n-            Object
  element = it.next();\n-            if (compute(value, element)) {\n-                return
  true;\n-            }\n-        }\n-        return false;\n-    }\n \n     /**\n
  \     * Learn whether there is an intersection between two Iterators.\n"
tree_diff: |+
  New cluster:
  UPDATE from return containsMatch(left, (Iterator) right); to return containsMatch((Iterator) right, left);
  ------------
  ===
  update-node
  ---
  return_statement: return containsMatch(left, (Iterator) right); [2992,3037]
  replace return containsMatch(left, (Iterator) right); by return containsMatch((Iterator) right, left);

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  method_declaration [4402,4655]
      identifier: containsMatch [4418,4431]
      method_parameters [4402,4655]
          formal_parameter: Object value [4432,4444]
      block [4459,4655]
          while_statement: while (it.hasNext()) {
              Object element = it.next();
              if (compute(value, element)) {
                  return true;
              }
          } [4469,4627]
          return_statement: return false; [4636,4649]

...
