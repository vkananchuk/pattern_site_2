---
language: python
text_diff: "--- before\n+++ after\n@@ -15,34 +15,10 @@\n         else:\n             while
  opstack and precedence[token] <= precedence[opstack[-1]]:\n                 rpntokens.append(opstack.pop())\n+
  \           opstack.append(token)\n \n     while opstack:\n         rpntokens.append(opstack.pop())\n
  \n     return rpntokens\n \n-\n-\"\"\"\n-Infix to RPN Conversion\n-shunting-yard\n-\n-\n-Uses
  Dijkstra's shunting-yard algorithm to transform infix notation into equivalent Reverse
  Polish Notation.\n-\n-Input:\n-    tokens: A list of tokens in infix notation\n-\n-Precondition:\n-
  \   all(isinstance(token, int) or token in '+-*/' for token in tokens)\n-\n-Output:\n-
  \   The input tokens reordered into Reverse Polish Notation\n-\n-Examples:\n-    >>>
  shunting_yard([10, '-', 5, '-', 2])\n-    [10, 5, '-', 2, '-']\n-    >>> shunting_yard([34,
  '-', 12, '/', 5])\n-    [34, 12, 5, '/' ,'-']\n-    >>> shunting_yard([4, '+', 9,
  '*', 9, '-', 10, '+', 13])\n-    [4, 9, 9, '*', '+', 10, '-', 13, '+']\n-\"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from for token in tokens:
          if isinstance(token, int):
              rpntokens.append(token)
          else:
              while opstack and precedence[token] <= precedence[opstack[-1]]:
                  rpntokens.append(opstack.pop()) to for token in tokens:
          if isinstance(token, int):
              rpntokens.append(token)
          else:
              while opstack and precedence[token] <= precedence[opstack[-1]]:
                  rpntokens.append(opstack.pop())
              opstack.append(token)
  ------------
  ===
  update-node
  ---
  for_statement: for token in tokens:
          if isinstance(token, int):
              rpntokens.append(token)
          else:
              while opstack and precedence[token] <= precedence[opstack[-1]]:
                  rpntokens.append(opstack.pop()) [157,386]
  replace for token in tokens:
          if isinstance(token, int):
              rpntokens.append(token)
          else:
              while opstack and precedence[token] <= precedence[opstack[-1]]:
                  rpntokens.append(opstack.pop()) by for token in tokens:
          if isinstance(token, int):
              rpntokens.append(token)
          else:
              while opstack and precedence[token] <= precedence[opstack[-1]]:
                  rpntokens.append(opstack.pop())
              opstack.append(token)

  New cluster:
  ===
  delete-node
  ---
  expression_statement: """
  Infix to RPN Conversion
  shunting-yard


  Uses Dijkstra's shunting-yard algorithm to transform infix notation into equivalent Reverse Polish Notation.

  Input:
      tokens: A list of tokens in infix notation

  Precondition:
      all(isinstance(token, int) or token in '+-*/' for token in tokens)

  Output:
      The input tokens reordered into Reverse Polish Notation

  Examples:
      >>> shunting_yard([10, '-', 5, '-', 2])
      [10, 5, '-', 2, '-']
      >>> shunting_yard([34, '-', 12, '/', 5])
      [34, 12, 5, '/' ,'-']
      >>> shunting_yard([4, '+', 9, '*', 9, '-', 10, '+', 13])
      [4, 9, 9, '*', '+', 10, '-', 13, '+']
  """ [471,1091]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: """
  Infix to RPN Conversion
  shunting-yard


  Uses Dijkstra's shunting-yard algorithm to transform infix notation into equivalent Reverse Polish Notation.

  Input:
      tokens: A list of tokens in infix notation

  Precondition:
      all(isinstance(token, int) or token in '+-*/' for token in tokens)

  Output:
      The input tokens reordered into Reverse Polish Notation

  Examples:
      >>> shunting_yard([10, '-', 5, '-', 2])
      [10, 5, '-', 2, '-']
      >>> shunting_yard([34, '-', 12, '/', 5])
      [34, 12, 5, '/' ,'-']
      >>> shunting_yard([4, '+', 9, '*', 9, '-', 10, '+', 13])
      [4, 9, 9, '*', '+', 10, '-', 13, '+']
  """ [471,1091]
  ===

...
