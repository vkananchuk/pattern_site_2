---
language: java
text_diff: "--- before\n+++ after\n@@ -1406,13 +1406,10 @@\n     Node parameter =
  null;\n     Node argument = null;\n     while (arguments.hasNext() &&\n-           (parameters.hasNext()
  ||\n-            parameter != null && parameter.isVarArgs())) {\n+           parameters.hasNext())
  {\n       // If there are no parameters left in the list, then the while loop\n
  \      // above implies that this must be a var_args function.\n-      if (parameters.hasNext())
  {\n         parameter = parameters.next();\n-      }\n       argument = arguments.next();\n
  \      ordinal++;\n \n"
tree_diff: |+
  New cluster:
  UPDATE from while (arguments.hasNext() &&
             (parameters.hasNext() ||
              parameter != null && parameter.isVarArgs())) {
        // If there are no parameters left in the list, then the while loop
        // above implies that this must be a var_args function.
        if (parameters.hasNext()) {
          parameter = parameters.next();
        }
        argument = arguments.next();
        ordinal++;

        validator.expectArgumentMatchesParameter(t, argument,
            getJSType(argument), getJSType(parameter), call, ordinal);
      } to while (arguments.hasNext() &&
             parameters.hasNext()) {
        // If there are no parameters left in the list, then the while loop
        // above implies that this must be a var_args function.
          parameter = parameters.next();
        argument = arguments.next();
        ordinal++;

        validator.expectArgumentMatchesParameter(t, argument,
            getJSType(argument), getJSType(parameter), call, ordinal);
      }
  ------------
  ===
  update-node
  ---
  while_statement: while (arguments.hasNext() &&
             (parameters.hasNext() ||
              parameter != null && parameter.isVarArgs())) {
        // If there are no parameters left in the list, then the while loop
        // above implies that this must be a var_args function.
        if (parameters.hasNext()) {
          parameter = parameters.next();
        }
        argument = arguments.next();
        ordinal++;

        validator.expectArgumentMatchesParameter(t, argument,
            getJSType(argument), getJSType(parameter), call, ordinal);
      } [48298,48827]
  replace while (arguments.hasNext() &&
             (parameters.hasNext() ||
              parameter != null && parameter.isVarArgs())) {
        // If there are no parameters left in the list, then the while loop
        // above implies that this must be a var_args function.
        if (parameters.hasNext()) {
          parameter = parameters.next();
        }
        argument = arguments.next();
        ordinal++;

        validator.expectArgumentMatchesParameter(t, argument,
            getJSType(argument), getJSType(parameter), call, ordinal);
      } by while (arguments.hasNext() &&
             parameters.hasNext()) {
        // If there are no parameters left in the list, then the while loop
        // above implies that this must be a var_args function.
          parameter = parameters.next();
        argument = arguments.next();
        ordinal++;

        validator.expectArgumentMatchesParameter(t, argument,
            getJSType(argument), getJSType(parameter), call, ordinal);
      }

...
