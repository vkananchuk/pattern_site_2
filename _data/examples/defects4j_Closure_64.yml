---
language: java
text_diff: "--- before\n+++ after\n@@ -1429,7 +1429,7 @@\n \n         // if LanguageMode
  is ECMASCRIPT5_STRICT, only print 'use strict'\n         // for the first input
  file\n-        String code = toSource(root, sourceMap, inputSeqNum == 0);\n+        String
  code = toSource(root, sourceMap);\n         if (!code.isEmpty()) {\n           cb.append(code);\n
  \n@@ -1458,19 +1458,19 @@\n   @Override\n   String toSource(Node n) {\n     initCompilerOptionsIfTesting();\n-
  \   return toSource(n, null, true);\n+    return toSource(n, null);\n   }\n \n   /**\n
  \   * Generates JavaScript source code for an AST.\n    */\n-  private String toSource(Node
  n, SourceMap sourceMap, boolean firstOutput) {\n+  private String toSource(Node
  n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n
  \    builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n
  \    builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-
  \   builder.setTagAsStrict(firstOutput &&\n+    builder.setTagAsStrict(\n         options.getLanguageOut()
  == LanguageMode.ECMASCRIPT5_STRICT);\n     builder.setLineLengthThreshold(options.lineLengthThreshold);\n
  \n"
tree_diff: |+
  New cluster:
  UPDATE from runInCompilerThread(new Callable<Void>() {
        public Void call() throws Exception {
          if (options.printInputDelimiter) {
            if ((cb.getLength() > 0) && !cb.endsWith("\n")) {
              cb.append("\n");  // Make sure that the label starts on a new line
            }
            Preconditions.checkState(root.getType() == Token.SCRIPT);

            String delimiter = options.inputDelimiter;

            String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);
            Preconditions.checkState(sourceName != null);
            Preconditions.checkState(!sourceName.isEmpty());

            delimiter = delimiter.replaceAll("%name%", sourceName)
              .replaceAll("%num%", String.valueOf(inputSeqNum));

            cb.append(delimiter)
              .append("\n");
          }
          if (root.getJSDocInfo() != null &&
              root.getJSDocInfo().getLicense() != null) {
            cb.append("/*\n")
              .append(root.getJSDocInfo().getLicense())
              .append("*/\n");
          }

          // If there is a valid source map, then indicate to it that the current
          // root node's mappings are offset by the given string builder buffer.
          if (options.sourceMapOutputPath != null) {
            sourceMap.setStartingPosition(
                cb.getLineIndex(), cb.getColumnIndex());
          }

          // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'
          // for the first input file
          String code = toSource(root, sourceMap, inputSeqNum == 0);
          if (!code.isEmpty()) {
            cb.append(code);

            // In order to avoid parse ambiguity when files are concatenated
            // together, all files should end in a semi-colon. Do a quick
            // heuristic check if there's an obvious semi-colon already there.
            int length = code.length();
            char lastChar = code.charAt(length - 1);
            char secondLastChar = length >= 2 ?
                code.charAt(length - 2) : '\0';
            boolean hasSemiColon = lastChar == ';' ||
                (lastChar == '\n' && secondLastChar == ';');
            if (!hasSemiColon) {
              cb.append(";");
            }
          }
          return null;
        }
      }); to runInCompilerThread(new Callable<Void>() {
        public Void call() throws Exception {
          if (options.printInputDelimiter) {
            if ((cb.getLength() > 0) && !cb.endsWith("\n")) {
              cb.append("\n");  // Make sure that the label starts on a new line
            }
            Preconditions.checkState(root.getType() == Token.SCRIPT);

            String delimiter = options.inputDelimiter;

            String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);
            Preconditions.checkState(sourceName != null);
            Preconditions.checkState(!sourceName.isEmpty());

            delimiter = delimiter.replaceAll("%name%", sourceName)
              .replaceAll("%num%", String.valueOf(inputSeqNum));

            cb.append(delimiter)
              .append("\n");
          }
          if (root.getJSDocInfo() != null &&
              root.getJSDocInfo().getLicense() != null) {
            cb.append("/*\n")
              .append(root.getJSDocInfo().getLicense())
              .append("*/\n");
          }

          // If there is a valid source map, then indicate to it that the current
          // root node's mappings are offset by the given string builder buffer.
          if (options.sourceMapOutputPath != null) {
            sourceMap.setStartingPosition(
                cb.getLineIndex(), cb.getColumnIndex());
          }

          // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'
          // for the first input file
          String code = toSource(root, sourceMap);
          if (!code.isEmpty()) {
            cb.append(code);

            // In order to avoid parse ambiguity when files are concatenated
            // together, all files should end in a semi-colon. Do a quick
            // heuristic check if there's an obvious semi-colon already there.
            int length = code.length();
            char lastChar = code.charAt(length - 1);
            char secondLastChar = length >= 2 ?
                code.charAt(length - 2) : '\0';
            boolean hasSemiColon = lastChar == ';' ||
                (lastChar == '\n' && secondLastChar == ';');
            if (!hasSemiColon) {
              cb.append(";");
            }
          }
          return null;
        }
      });
  ------------
  ===
  update-node
  ---
  expression_statement: runInCompilerThread(new Callable<Void>() {
        public Void call() throws Exception {
          if (options.printInputDelimiter) {
            if ((cb.getLength() > 0) && !cb.endsWith("\n")) {
              cb.append("\n");  // Make sure that the label starts on a new line
            }
            Preconditions.checkState(root.getType() == Token.SCRIPT);

            String delimiter = options.inputDelimiter;

            String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);
            Preconditions.checkState(sourceName != null);
            Preconditions.checkState(!sourceName.isEmpty());

            delimiter = delimiter.replaceAll("%name%", sourceName)
              .replaceAll("%num%", String.valueOf(inputSeqNum));

            cb.append(delimiter)
              .append("\n");
          }
          if (root.getJSDocInfo() != null &&
              root.getJSDocInfo().getLicense() != null) {
            cb.append("/*\n")
              .append(root.getJSDocInfo().getLicense())
              .append("*/\n");
          }

          // If there is a valid source map, then indicate to it that the current
          // root node's mappings are offset by the given string builder buffer.
          if (options.sourceMapOutputPath != null) {
            sourceMap.setStartingPosition(
                cb.getLineIndex(), cb.getColumnIndex());
          }

          // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'
          // for the first input file
          String code = toSource(root, sourceMap, inputSeqNum == 0);
          if (!code.isEmpty()) {
            cb.append(code);

            // In order to avoid parse ambiguity when files are concatenated
            // together, all files should end in a semi-colon. Do a quick
            // heuristic check if there's an obvious semi-colon already there.
            int length = code.length();
            char lastChar = code.charAt(length - 1);
            char secondLastChar = length >= 2 ?
                code.charAt(length - 2) : '\0';
            boolean hasSemiColon = lastChar == ';' ||
                (lastChar == '\n' && secondLastChar == ';');
            if (!hasSemiColon) {
              cb.append(";");
            }
          }
          return null;
        }
      }); [41651,43849]
  replace runInCompilerThread(new Callable<Void>() {
        public Void call() throws Exception {
          if (options.printInputDelimiter) {
            if ((cb.getLength() > 0) && !cb.endsWith("\n")) {
              cb.append("\n");  // Make sure that the label starts on a new line
            }
            Preconditions.checkState(root.getType() == Token.SCRIPT);

            String delimiter = options.inputDelimiter;

            String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);
            Preconditions.checkState(sourceName != null);
            Preconditions.checkState(!sourceName.isEmpty());

            delimiter = delimiter.replaceAll("%name%", sourceName)
              .replaceAll("%num%", String.valueOf(inputSeqNum));

            cb.append(delimiter)
              .append("\n");
          }
          if (root.getJSDocInfo() != null &&
              root.getJSDocInfo().getLicense() != null) {
            cb.append("/*\n")
              .append(root.getJSDocInfo().getLicense())
              .append("*/\n");
          }

          // If there is a valid source map, then indicate to it that the current
          // root node's mappings are offset by the given string builder buffer.
          if (options.sourceMapOutputPath != null) {
            sourceMap.setStartingPosition(
                cb.getLineIndex(), cb.getColumnIndex());
          }

          // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'
          // for the first input file
          String code = toSource(root, sourceMap, inputSeqNum == 0);
          if (!code.isEmpty()) {
            cb.append(code);

            // In order to avoid parse ambiguity when files are concatenated
            // together, all files should end in a semi-colon. Do a quick
            // heuristic check if there's an obvious semi-colon already there.
            int length = code.length();
            char lastChar = code.charAt(length - 1);
            char secondLastChar = length >= 2 ?
                code.charAt(length - 2) : '\0';
            boolean hasSemiColon = lastChar == ';' ||
                (lastChar == '\n' && secondLastChar == ';');
            if (!hasSemiColon) {
              cb.append(";");
            }
          }
          return null;
        }
      }); by runInCompilerThread(new Callable<Void>() {
        public Void call() throws Exception {
          if (options.printInputDelimiter) {
            if ((cb.getLength() > 0) && !cb.endsWith("\n")) {
              cb.append("\n");  // Make sure that the label starts on a new line
            }
            Preconditions.checkState(root.getType() == Token.SCRIPT);

            String delimiter = options.inputDelimiter;

            String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);
            Preconditions.checkState(sourceName != null);
            Preconditions.checkState(!sourceName.isEmpty());

            delimiter = delimiter.replaceAll("%name%", sourceName)
              .replaceAll("%num%", String.valueOf(inputSeqNum));

            cb.append(delimiter)
              .append("\n");
          }
          if (root.getJSDocInfo() != null &&
              root.getJSDocInfo().getLicense() != null) {
            cb.append("/*\n")
              .append(root.getJSDocInfo().getLicense())
              .append("*/\n");
          }

          // If there is a valid source map, then indicate to it that the current
          // root node's mappings are offset by the given string builder buffer.
          if (options.sourceMapOutputPath != null) {
            sourceMap.setStartingPosition(
                cb.getLineIndex(), cb.getColumnIndex());
          }

          // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'
          // for the first input file
          String code = toSource(root, sourceMap);
          if (!code.isEmpty()) {
            cb.append(code);

            // In order to avoid parse ambiguity when files are concatenated
            // together, all files should end in a semi-colon. Do a quick
            // heuristic check if there's an obvious semi-colon already there.
            int length = code.length();
            char lastChar = code.charAt(length - 1);
            char secondLastChar = length >= 2 ?
                code.charAt(length - 2) : '\0';
            boolean hasSemiColon = lastChar == ';' ||
                (lastChar == '\n' && secondLastChar == ';');
            if (!hasSemiColon) {
              cb.append(";");
            }
          }
          return null;
        }
      });

  New cluster:
  UPDATE from return toSource(n, null, true); to return toSource(n, null);
  ------------
  ===
  update-node
  ---
  return_statement: return toSource(n, null, true); [44036,44067]
  replace return toSource(n, null, true); by return toSource(n, null);

  New cluster:
  UPDATE from builder.setTagAsStrict(firstOutput &&
          options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT); to builder.setTagAsStrict(
          options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);
  ------------
  ===
  update-node
  ---
  expression_statement: builder.setTagAsStrict(firstOutput &&
          options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT); [44477,44584]
  replace builder.setTagAsStrict(firstOutput &&
          options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT); by builder.setTagAsStrict(
          options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);

...
