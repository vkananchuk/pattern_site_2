---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Rotation
        children: []
        pos: 5196
        length: 8
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0,
              0.0, false);
          children: []
          pos: 5262
          length: 80
        - type: field_declaration
          fields:
            text: private static final long serialVersionUID = -2153622329907944313L;
          children: []
          pos: 5387
          length: 67
        - type: field_declaration
          fields:
            text: private final double q0;
          children: []
          pos: 5504
          length: 24
        - type: field_declaration
          fields:
            text: private final double q1;
          children: []
          pos: 5599
          length: 24
        - type: field_declaration
          fields:
            text: private final double q2;
          children: []
          pos: 5695
          length: 24
        - type: field_declaration
          fields:
            text: private final double q3;
          children: []
          pos: 5790
          length: 24
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(double q0, double q1, double q2, double q3,
                                boolean needsNormalization) {

                  if (needsNormalization) {
                    // normalization preprocessing
                    double inv = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
                    q0 *= inv;
                    q1 *= inv;
                    q2 *= inv;
                    q3 *= inv;
                  }

                  this.q0 = q0;
                  this.q1 = q1;
                  this.q2 = q2;
                  this.q3 = q3;

                }
          children: []
          pos: 6903
          length: 406
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(Vector3D axis, double angle) {

                  double norm = axis.getNorm();
                  if (norm == 0) {
                    throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);
                  }

                  double halfAngle = -0.5 * angle;
                  double coeff = FastMath.sin(halfAngle) / norm;

                  q0 = FastMath.cos (halfAngle);
                  q1 = coeff * axis.getX();
                  q2 = coeff * axis.getY();
                  q3 = coeff * axis.getZ();

                }
          children: []
          pos: 8552
          length: 434
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(double[][] m, double threshold)
                  throws NotARotationMatrixException {

                  // dimension check
                  if ((m.length != 3) || (m[0].length != 3) ||
                      (m[1].length != 3) || (m[2].length != 3)) {
                    throw new NotARotationMatrixException(
                            LocalizedFormats.ROTATION_MATRIX_DIMENSIONS,
                            m.length, m[0].length);
                  }

                  // compute a "close" orthogonal matrix
                  double[][] ort = orthogonalizeMatrix(m, threshold);

                  // check the sign of the determinant
                  double det = ort[0][0] * (ort[1][1] * ort[2][2] - ort[2][1] * ort[1][2]) -
                               ort[1][0] * (ort[0][1] * ort[2][2] - ort[2][1] * ort[0][2]) +
                               ort[2][0] * (ort[0][1] * ort[1][2] - ort[1][1] * ort[0][2]);
                  if (det < 0.0) {
                    throw new NotARotationMatrixException(
                            LocalizedFormats.CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT,
                            det);
                  }

                  // There are different ways to compute the quaternions elements
                  // from the matrix. They all involve computing one element from
                  // the diagonal of the matrix, and computing the three other ones
                  // using a formula involving a division by the first element,
                  // which unfortunately can be zero. Since the norm of the
                  // quaternion is 1, we know at least one element has an absolute
                  // value greater or equal to 0.5, so it is always possible to
                  // select the right formula and avoid division by zero and even
                  // numerical inaccuracy. Checking the elements in turn and using
                  // the first one greater than 0.45 is safe (this leads to a simple
                  // test since qi = 0.45 implies 4 qi^2 - 1 = -0.19)
                  double s = ort[0][0] + ort[1][1] + ort[2][2];
                  if (s > -0.19) {
                    // compute q0 and deduce q1, q2 and q3
                    q0 = 0.5 * FastMath.sqrt(s + 1.0);
                    double inv = 0.25 / q0;
                    q1 = inv * (ort[1][2] - ort[2][1]);
                    q2 = inv * (ort[2][0] - ort[0][2]);
                    q3 = inv * (ort[0][1] - ort[1][0]);
                  } else {
                    s = ort[0][0] - ort[1][1] - ort[2][2];
                    if (s > -0.19) {
                      // compute q1 and deduce q0, q2 and q3
                      q1 = 0.5 * FastMath.sqrt(s + 1.0);
                      double inv = 0.25 / q1;
                      q0 = inv * (ort[1][2] - ort[2][1]);
                      q2 = inv * (ort[0][1] + ort[1][0]);
                      q3 = inv * (ort[0][2] + ort[2][0]);
                    } else {
                      s = ort[1][1] - ort[0][0] - ort[2][2];
                      if (s > -0.19) {
                        // compute q2 and deduce q0, q1 and q3
                        q2 = 0.5 * FastMath.sqrt(s + 1.0);
                        double inv = 0.25 / q2;
                        q0 = inv * (ort[2][0] - ort[0][2]);
                        q1 = inv * (ort[0][1] + ort[1][0]);
                        q3 = inv * (ort[2][1] + ort[1][2]);
                      } else {
                        // compute q3 and deduce q0, q1 and q2
                        s = ort[2][2] - ort[0][0] - ort[1][1];
                        q3 = 0.5 * FastMath.sqrt(s + 1.0);
                        double inv = 0.25 / q3;
                        q0 = inv * (ort[0][1] - ort[1][0]);
                        q1 = inv * (ort[0][2] + ort[2][0]);
                        q2 = inv * (ort[2][1] + ort[1][2]);
                      }
                    }
                  }

                }
          children: []
          pos: 10480
          length: 3010
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {

                // norms computation
                double u1u1 = u1.getNormSq();
                double u2u2 = u2.getNormSq();
                double v1v1 = v1.getNormSq();
                double v2v2 = v2.getNormSq();
                if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
                  throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
                }

                // normalize v1 in order to have (v1'|v1') = (u1|u1)
                v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);

                // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
                double u1u2   = u1.dotProduct(u2);
                double v1v2   = v1.dotProduct(v2);
                double coeffU = u1u2 / u1u1;
                double coeffV = v1v2 / u1u1;
                double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
                double alpha  = coeffU - beta * coeffV;
                v2 = new Vector3D(alpha, v1, beta, v2);

                // preliminary computation
                Vector3D uRef  = u1;
                Vector3D vRef  = v1;
                Vector3D v1Su1 = v1.subtract(u1);
                Vector3D v2Su2 = v2.subtract(u2);
                Vector3D k     = v1Su1.crossProduct(v2Su2);
                Vector3D u3    = u1.crossProduct(u2);
                double c       = k.dotProduct(u3);
                final double inPlaneThreshold = 0.001;
                if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {
                  // the (q1, q2, q3) vector is close to the (u1, u2) plane
                  // we try other vectors
                  Vector3D v3 = Vector3D.crossProduct(v1, v2);
                  Vector3D v3Su3 = v3.subtract(u3);
                  k = v1Su1.crossProduct(v3Su3);
                  Vector3D u2Prime = u1.crossProduct(u3);
                  c = k.dotProduct(u2Prime);

                  if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {
                    // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
                    // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
                    k = v2Su2.crossProduct(v3Su3);;
                    c = k.dotProduct(u2.crossProduct(u3));;

                    if (c <= 0) {
                      // the (q1, q2, q3) vector is aligned with everything
                      // this is really the identity rotation
                      q0 = 1.0;
                      q1 = 0.0;
                      q2 = 0.0;
                      q3 = 0.0;
                      return;
                    }

                    // we will have to use u2 and v2 to compute the scalar part
                    uRef = u2;
                    vRef = v2;

                  }

                }

                // compute the vectorial part
                c = FastMath.sqrt(c);
                double inv = 1.0 / (c + c);
                q1 = inv * k.getX();
                q2 = inv * k.getY();
                q3 = inv * k.getZ();

                // compute the scalar part
                 k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                                  uRef.getZ() * q1 - uRef.getX() * q3,
                                  uRef.getX() * q2 - uRef.getY() * q1);
                q0 = vRef.dotProduct(k) / (2 * k.getNormSq());

                }
          children: []
          pos: 14373
          length: 2600
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(Vector3D u, Vector3D v) {

                  double normProduct = u.getNorm() * v.getNorm();
                  if (normProduct == 0) {
                      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
                  }

                  double dot = u.dotProduct(v);

                  if (dot < ((2.0e-15 - 1.0) * normProduct)) {
                    // special case u = -v: we select a PI angle rotation around
                    // an arbitrary vector orthogonal to u
                    Vector3D w = u.orthogonal();
                    q0 = 0.0;
                    q1 = -w.getX();
                    q2 = -w.getY();
                    q3 = -w.getZ();
                  } else {
                    // general case: (u, v) defines a plane, we select
                    // the shortest possible rotation: axis orthogonal to this plane
                    q0 = FastMath.sqrt(0.5 * (1.0 + dot / normProduct));
                    double coeff = 1.0 / (2.0 * q0 * normProduct);
                    Vector3D q = v.crossProduct(u);
                    q1 = coeff * q.getX();
                    q2 = coeff * q.getY();
                    q3 = coeff * q.getZ();
                  }

                }
          children: []
          pos: 17608
          length: 955
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(RotationOrder order,
                                double alpha1, double alpha2, double alpha3) {
                  Rotation r1 = new Rotation(order.getA1(), alpha1);
                  Rotation r2 = new Rotation(order.getA2(), alpha2);
                  Rotation r3 = new Rotation(order.getA3(), alpha3);
                  Rotation composed = r1.applyTo(r2.applyTo(r3));
                  q0 = composed.q0;
                  q1 = composed.q1;
                  q2 = composed.q2;
                  q3 = composed.q3;
                }
          children: []
          pos: 19604
          length: 410
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: revert
              children: []
              pos: 20314
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20298
              length: 79
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new Rotation(-q0, q1, q2, q3, false);
                children: []
                pos: 20329
                length: 44
              pos: 20323
              length: 54
          children: []
          pos: 20298
          length: 79
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getQ0
              children: []
              pos: 20501
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20487
              length: 42
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return q0;
                children: []
                pos: 20515
                length: 10
              pos: 20509
              length: 20
          children: []
          pos: 20487
          length: 42
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getQ1
              children: []
              pos: 20695
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20681
              length: 42
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return q1;
                children: []
                pos: 20709
                length: 10
              pos: 20703
              length: 20
          children: []
          pos: 20681
          length: 42
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getQ2
              children: []
              pos: 20891
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20877
              length: 42
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return q2;
                children: []
                pos: 20905
                length: 10
              pos: 20899
              length: 20
          children: []
          pos: 20877
          length: 42
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getQ3
              children: []
              pos: 21085
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 21071
              length: 42
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return q3;
                children: []
                pos: 21099
                length: 10
              pos: 21093
              length: 20
          children: []
          pos: 21071
          length: 42
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getAxis
              children: []
              pos: 21269
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 21253
              length: 425
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double squaredSine = q1 * q1 + q2 * q2 + q3 * q3;
                children: []
                pos: 21285
                length: 49
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: squaredSine
                            children: []
                            pos: 21343
                            length: 11
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 21358
                            length: 1
                        children: []
                        pos: 21343
                        length: 16
                    children: []
                    pos: 21342
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return new Vector3D(1, 0, 0);
                    children: []
                    pos: 21369
                    length: 29
                  pos: 21361
                  length: 43
                pos: 21339
                length: 214
              - type: local_variable_declaration
                fields:
                  text: double inverse = -1 / FastMath.sqrt(squaredSine);
                children: []
                pos: 21558
                length: 49
              - type: return_statement
                fields:
                  text: return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);
                children: []
                pos: 21612
                length: 62
              pos: 21279
              length: 399
          children: []
          pos: 21253
          length: 425
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getAngle
              children: []
              pos: 21833
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 21819
              length: 245
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: less_than
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: q0
                                    children: []
                                    pos: 21855
                                    length: 2
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "-0.1"
                                    children: []
                                    pos: 21860
                                    length: 4
                                children: []
                                pos: 21855
                                length: 9
                            children: []
                            pos: 21854
                            length: 11
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: greater_than
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: q0
                                    children: []
                                    pos: 21870
                                    length: 2
                                  right:
                                    type: decimal_floating_point_literal
                                    fields:
                                      text: '0.1'
                                    children: []
                                    pos: 21875
                                    length: 3
                                children: []
                                pos: 21870
                                length: 8
                            children: []
                            pos: 21869
                            length: 10
                        children: []
                        pos: 21854
                        length: 25
                    children: []
                    pos: 21853
                    length: 27
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return 2 * FastMath.asin(FastMath.sqrt(q1 * q1 + q2 *
                        q2 + q3 * q3));
                    children: []
                    pos: 21889
                    length: 69
                  pos: 21881
                  length: 83
                pos: 21850
                length: 176
              - type: return_statement
                fields:
                  text: return 2 * FastMath.acos(q0);
                children: []
                pos: 22031
                length: 29
              pos: 21844
              length: 220
          children: []
          pos: 21819
          length: 245
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getAngles
              children: []
              pos: 23982
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: RotationOrder order
                children: []
                pos: 23992
                length: 19
              pos: 23966
              length: 9003
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: order
                            children: []
                            pos: 24067
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: RotationOrder.XYZ
                            children: []
                            pos: 24076
                            length: 17
                        children: []
                        pos: 24067
                        length: 26
                    children: []
                    pos: 24066
                    length: 28
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Vector3D v1 = applyTo(Vector3D.PLUS_K);
                    children: []
                    pos: 24409
                    length: 39
                  - type: local_variable_declaration
                    fields:
                      text: Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
                    children: []
                    pos: 24455
                    length: 46
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: or
                            fields:
                              left:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: less_than
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: v2.getZ()
                                        children: []
                                        pos: 24514
                                        length: 9
                                      right:
                                        type: unary_expression
                                        fields:
                                          text: "-0.9999999999"
                                        children: []
                                        pos: 24526
                                        length: 13
                                    children: []
                                    pos: 24514
                                    length: 25
                                children: []
                                pos: 24513
                                length: 27
                              right:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: greater_than
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: v2.getZ()
                                        children: []
                                        pos: 24545
                                        length: 9
                                      right:
                                        type: decimal_floating_point_literal
                                        fields:
                                          text: '0.9999999999'
                                        children: []
                                        pos: 24557
                                        length: 12
                                    children: []
                                    pos: 24545
                                    length: 24
                                children: []
                                pos: 24544
                                length: 26
                            children: []
                            pos: 24513
                            length: 57
                        children: []
                        pos: 24512
                        length: 59
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: throw_statement
                        fields:
                          text: throw new CardanEulerSingularityException(true);
                        children: []
                        pos: 24582
                        length: 48
                      pos: 24572
                      length: 66
                    pos: 24508
                    length: 130
                  - type: return_statement
                    fields:
                      text: |-
                        return new double[] {
                                FastMath.atan2(-(v1.getY()), v1.getZ()),
                                FastMath.asin(v2.getZ()),
                                FastMath.atan2(-(v2.getY()), v2.getX())
                              };
                    children: []
                    pos: 24645
                    length: 161
                  pos: 24095
                  length: 718
                pos: 24063
                length: 8901
              pos: 24056
              length: 8913
          children: []
          pos: 23966
          length: 9003
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getMatrix
              children: []
              pos: 33106
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 33088
              length: 833
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double q0q0  = q0 * q0;
                children: []
                pos: 33141
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q0q1  = q0 * q1;
                children: []
                pos: 33169
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q0q2  = q0 * q2;
                children: []
                pos: 33197
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q0q3  = q0 * q3;
                children: []
                pos: 33225
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q1q1  = q1 * q1;
                children: []
                pos: 33253
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q1q2  = q1 * q2;
                children: []
                pos: 33281
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q1q3  = q1 * q3;
                children: []
                pos: 33309
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q2q2  = q2 * q2;
                children: []
                pos: 33337
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q2q3  = q2 * q3;
                children: []
                pos: 33365
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q3q3  = q3 * q3;
                children: []
                pos: 33393
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double[][] m = new double[3][];
                children: []
                pos: 33447
                length: 31
              - type: expression_statement
                fields:
                  text: m[0] = new double[3];
                children: []
                pos: 33483
                length: 21
              - type: expression_statement
                fields:
                  text: m[1] = new double[3];
                children: []
                pos: 33509
                length: 21
              - type: expression_statement
                fields:
                  text: m[2] = new double[3];
                children: []
                pos: 33535
                length: 21
              - type: expression_statement
                fields:
                  text: m [0][0] = 2.0 * (q0q0 + q1q1) - 1.0;
                children: []
                pos: 33562
                length: 37
              - type: expression_statement
                fields:
                  text: m [1][0] = 2.0 * (q1q2 - q0q3);
                children: []
                pos: 33604
                length: 31
              - type: expression_statement
                fields:
                  text: m [2][0] = 2.0 * (q1q3 + q0q2);
                children: []
                pos: 33640
                length: 31
              - type: expression_statement
                fields:
                  text: m [0][1] = 2.0 * (q1q2 + q0q3);
                children: []
                pos: 33677
                length: 31
              - type: expression_statement
                fields:
                  text: m [1][1] = 2.0 * (q0q0 + q2q2) - 1.0;
                children: []
                pos: 33713
                length: 37
              - type: expression_statement
                fields:
                  text: m [2][1] = 2.0 * (q2q3 - q0q1);
                children: []
                pos: 33755
                length: 31
              - type: expression_statement
                fields:
                  text: m [0][2] = 2.0 * (q1q3 - q0q2);
                children: []
                pos: 33792
                length: 31
              - type: expression_statement
                fields:
                  text: m [1][2] = 2.0 * (q2q3 + q0q1);
                children: []
                pos: 33828
                length: 31
              - type: expression_statement
                fields:
                  text: m [2][2] = 2.0 * (q0q0 + q3q3) - 1.0;
                children: []
                pos: 33864
                length: 37
              - type: return_statement
                fields:
                  text: return m;
                children: []
                pos: 33907
                length: 9
              pos: 33118
              length: 803
          children: []
          pos: 33088
          length: 833
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: applyTo
              children: []
              pos: 34097
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Vector3D u
                children: []
                pos: 34105
                length: 10
              pos: 34081
              length: 396
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double x = u.getX();
                children: []
                pos: 34124
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double y = u.getY();
                children: []
                pos: 34149
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double z = u.getZ();
                children: []
                pos: 34174
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double s = q1 * x + q2 * y + q3 * z;
                children: []
                pos: 34200
                length: 36
              - type: return_statement
                fields:
                  text: |-
                    return new Vector3D(2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x,
                                            2 * (q0 * (y * q0 - (q3 * x - q1 * z)) + s * q2) - y,
                                            2 * (q0 * (z * q0 - (q1 * y - q2 * x)) + s * q3) - z);
                children: []
                pos: 34242
                length: 230
              pos: 34117
              length: 360
          children: []
          pos: 34081
          length: 396
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: applyInverseTo
              children: []
              pos: 34690
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Vector3D u
                children: []
                pos: 34705
                length: 10
              pos: 34674
              length: 424
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double x = u.getX();
                children: []
                pos: 34724
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double y = u.getY();
                children: []
                pos: 34749
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double z = u.getZ();
                children: []
                pos: 34774
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double s = q1 * x + q2 * y + q3 * z;
                children: []
                pos: 34800
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double m0 = -q0;
                children: []
                pos: 34841
                length: 16
              - type: return_statement
                fields:
                  text: |-
                    return new Vector3D(2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x,
                                            2 * (m0 * (y * m0 - (q3 * x - q1 * z)) + s * q2) - y,
                                            2 * (m0 * (z * m0 - (q1 * y - q2 * x)) + s * q3) - z);
                children: []
                pos: 34863
                length: 230
              pos: 34717
              length: 381
          children: []
          pos: 34674
          length: 424
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: applyTo
              children: []
              pos: 35610
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Rotation r
                children: []
                pos: 35618
                length: 10
              pos: 35594
              length: 365
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new Rotation(r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),
                                            r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),
                                            r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),
                                            r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),
                                            false);
                children: []
                pos: 35636
                length: 319
              pos: 35630
              length: 329
          children: []
          pos: 35594
          length: 365
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: applyInverseTo
              children: []
              pos: 36548
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Rotation r
                children: []
                pos: 36563
                length: 10
              pos: 36532
              length: 376
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),
                                            -r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),
                                            -r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),
                                            -r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),
                                            false);
                children: []
                pos: 36581
                length: 323
              pos: 36575
              length: 333
          children: []
          pos: 36532
          length: 376
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: orthogonalizeMatrix
              children: []
              pos: 37443
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double[][] m
                children: []
                pos: 37463
                length: 12
              pos: 37424
              length: 3021
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double[] m0 = m[0];
                children: []
                pos: 37540
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double[] m1 = m[1];
                children: []
                pos: 37564
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double[] m2 = m[2];
                children: []
                pos: 37588
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x00 = m0[0];
                children: []
                pos: 37612
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x01 = m0[1];
                children: []
                pos: 37636
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x02 = m0[2];
                children: []
                pos: 37660
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x10 = m1[0];
                children: []
                pos: 37684
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x11 = m1[1];
                children: []
                pos: 37708
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x12 = m1[2];
                children: []
                pos: 37732
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x20 = m2[0];
                children: []
                pos: 37756
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x21 = m2[1];
                children: []
                pos: 37780
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x22 = m2[2];
                children: []
                pos: 37804
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double fn = 0;
                children: []
                pos: 37828
                length: 14
              - type: local_variable_declaration
                fields:
                  text: double fn1;
                children: []
                pos: 37847
                length: 11
              - type: local_variable_declaration
                fields:
                  text: double[][] o = new double[3][3];
                children: []
                pos: 37864
                length: 32
              - type: local_variable_declaration
                fields:
                  text: double[] o0 = o[0];
                children: []
                pos: 37901
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double[] o1 = o[1];
                children: []
                pos: 37925
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double[] o2 = o[2];
                children: []
                pos: 37949
                length: 19
              - type: local_variable_declaration
                fields:
                  text: int i = 0;
                children: []
                pos: 38036
                length: 10
              - type: while_statement
                fields:
                  text: |-
                    while (++i < 11) {

                          // Mt.Xn
                          double mx00 = m0[0] * x00 + m1[0] * x10 + m2[0] * x20;
                          double mx10 = m0[1] * x00 + m1[1] * x10 + m2[1] * x20;
                          double mx20 = m0[2] * x00 + m1[2] * x10 + m2[2] * x20;
                          double mx01 = m0[0] * x01 + m1[0] * x11 + m2[0] * x21;
                          double mx11 = m0[1] * x01 + m1[1] * x11 + m2[1] * x21;
                          double mx21 = m0[2] * x01 + m1[2] * x11 + m2[2] * x21;
                          double mx02 = m0[0] * x02 + m1[0] * x12 + m2[0] * x22;
                          double mx12 = m0[1] * x02 + m1[1] * x12 + m2[1] * x22;
                          double mx22 = m0[2] * x02 + m1[2] * x12 + m2[2] * x22;

                          // Xn+1
                          o0[0] = x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m0[0]);
                          o0[1] = x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m0[1]);
                          o0[2] = x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m0[2]);
                          o1[0] = x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m1[0]);
                          o1[1] = x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m1[1]);
                          o1[2] = x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m1[2]);
                          o2[0] = x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m2[0]);
                          o2[1] = x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m2[1]);
                          o2[2] = x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m2[2]);

                          // correction on each elements
                          double corr00 = o0[0] - m0[0];
                          double corr01 = o0[1] - m0[1];
                          double corr02 = o0[2] - m0[2];
                          double corr10 = o1[0] - m1[0];
                          double corr11 = o1[1] - m1[1];
                          double corr12 = o1[2] - m1[2];
                          double corr20 = o2[0] - m2[0];
                          double corr21 = o2[1] - m2[1];
                          double corr22 = o2[2] - m2[2];

                          // Frobenius norm of the correction
                          fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +
                                corr10 * corr10 + corr11 * corr11 + corr12 * corr12 +
                                corr20 * corr20 + corr21 * corr21 + corr22 * corr22;

                          // convergence test
                          if (FastMath.abs(fn1 - fn) <= threshold) {
                              return o;
                          }

                          // prepare next iteration
                          x00 = o0[0];
                          x01 = o0[1];
                          x02 = o0[2];
                          x10 = o1[0];
                          x11 = o1[1];
                          x12 = o1[2];
                          x20 = o2[0];
                          x21 = o2[1];
                          x22 = o2[2];
                          fn  = fn1;

                        }
                children: []
                pos: 38051
                length: 2207
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotARotationMatrixException(
                                LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,
                                i - 1);
                children: []
                pos: 40322
                length: 119
              pos: 37534
              length: 2911
          children: []
          pos: 37424
          length: 3021
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: distance
              children: []
              pos: 41818
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Rotation r1
                children: []
                pos: 41827
                length: 11
              pos: 41797
              length: 108
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return r1.applyInverseTo(r2).getAngle();
                children: []
                pos: 41861
                length: 40
              pos: 41853
              length: 52
          children: []
          pos: 41797
          length: 108
        pos: 5183
        length: 36725
    children: []
    pos: 5183
    length: 36725
  pos: 0
  length: 41909
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Rotation
        children: []
        pos: 5196
        length: 8
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0,
              0.0, false);
          children: []
          pos: 5262
          length: 80
        - type: field_declaration
          fields:
            text: private static final long serialVersionUID = -2153622329907944313L;
          children: []
          pos: 5387
          length: 67
        - type: field_declaration
          fields:
            text: private final double q0;
          children: []
          pos: 5504
          length: 24
        - type: field_declaration
          fields:
            text: private final double q1;
          children: []
          pos: 5599
          length: 24
        - type: field_declaration
          fields:
            text: private final double q2;
          children: []
          pos: 5695
          length: 24
        - type: field_declaration
          fields:
            text: private final double q3;
          children: []
          pos: 5790
          length: 24
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(double q0, double q1, double q2, double q3,
                                boolean needsNormalization) {

                  if (needsNormalization) {
                    // normalization preprocessing
                    double inv = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
                    q0 *= inv;
                    q1 *= inv;
                    q2 *= inv;
                    q3 *= inv;
                  }

                  this.q0 = q0;
                  this.q1 = q1;
                  this.q2 = q2;
                  this.q3 = q3;

                }
          children: []
          pos: 6903
          length: 406
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(Vector3D axis, double angle) {

                  double norm = axis.getNorm();
                  if (norm == 0) {
                    throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);
                  }

                  double halfAngle = -0.5 * angle;
                  double coeff = FastMath.sin(halfAngle) / norm;

                  q0 = FastMath.cos (halfAngle);
                  q1 = coeff * axis.getX();
                  q2 = coeff * axis.getY();
                  q3 = coeff * axis.getZ();

                }
          children: []
          pos: 8552
          length: 434
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(double[][] m, double threshold)
                  throws NotARotationMatrixException {

                  // dimension check
                  if ((m.length != 3) || (m[0].length != 3) ||
                      (m[1].length != 3) || (m[2].length != 3)) {
                    throw new NotARotationMatrixException(
                            LocalizedFormats.ROTATION_MATRIX_DIMENSIONS,
                            m.length, m[0].length);
                  }

                  // compute a "close" orthogonal matrix
                  double[][] ort = orthogonalizeMatrix(m, threshold);

                  // check the sign of the determinant
                  double det = ort[0][0] * (ort[1][1] * ort[2][2] - ort[2][1] * ort[1][2]) -
                               ort[1][0] * (ort[0][1] * ort[2][2] - ort[2][1] * ort[0][2]) +
                               ort[2][0] * (ort[0][1] * ort[1][2] - ort[1][1] * ort[0][2]);
                  if (det < 0.0) {
                    throw new NotARotationMatrixException(
                            LocalizedFormats.CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT,
                            det);
                  }

                  // There are different ways to compute the quaternions elements
                  // from the matrix. They all involve computing one element from
                  // the diagonal of the matrix, and computing the three other ones
                  // using a formula involving a division by the first element,
                  // which unfortunately can be zero. Since the norm of the
                  // quaternion is 1, we know at least one element has an absolute
                  // value greater or equal to 0.5, so it is always possible to
                  // select the right formula and avoid division by zero and even
                  // numerical inaccuracy. Checking the elements in turn and using
                  // the first one greater than 0.45 is safe (this leads to a simple
                  // test since qi = 0.45 implies 4 qi^2 - 1 = -0.19)
                  double s = ort[0][0] + ort[1][1] + ort[2][2];
                  if (s > -0.19) {
                    // compute q0 and deduce q1, q2 and q3
                    q0 = 0.5 * FastMath.sqrt(s + 1.0);
                    double inv = 0.25 / q0;
                    q1 = inv * (ort[1][2] - ort[2][1]);
                    q2 = inv * (ort[2][0] - ort[0][2]);
                    q3 = inv * (ort[0][1] - ort[1][0]);
                  } else {
                    s = ort[0][0] - ort[1][1] - ort[2][2];
                    if (s > -0.19) {
                      // compute q1 and deduce q0, q2 and q3
                      q1 = 0.5 * FastMath.sqrt(s + 1.0);
                      double inv = 0.25 / q1;
                      q0 = inv * (ort[1][2] - ort[2][1]);
                      q2 = inv * (ort[0][1] + ort[1][0]);
                      q3 = inv * (ort[0][2] + ort[2][0]);
                    } else {
                      s = ort[1][1] - ort[0][0] - ort[2][2];
                      if (s > -0.19) {
                        // compute q2 and deduce q0, q1 and q3
                        q2 = 0.5 * FastMath.sqrt(s + 1.0);
                        double inv = 0.25 / q2;
                        q0 = inv * (ort[2][0] - ort[0][2]);
                        q1 = inv * (ort[0][1] + ort[1][0]);
                        q3 = inv * (ort[2][1] + ort[1][2]);
                      } else {
                        // compute q3 and deduce q0, q1 and q2
                        s = ort[2][2] - ort[0][0] - ort[1][1];
                        q3 = 0.5 * FastMath.sqrt(s + 1.0);
                        double inv = 0.25 / q3;
                        q0 = inv * (ort[0][1] - ort[1][0]);
                        q1 = inv * (ort[0][2] + ort[2][0]);
                        q2 = inv * (ort[2][1] + ort[1][2]);
                      }
                    }
                  }

                }
          children: []
          pos: 10480
          length: 3010
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {

                // norms computation
                double u1u1 = u1.getNormSq();
                double u2u2 = u2.getNormSq();
                double v1v1 = v1.getNormSq();
                double v2v2 = v2.getNormSq();
                if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
                  throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
                }

                // normalize v1 in order to have (v1'|v1') = (u1|u1)
                v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);

                // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
                double u1u2   = u1.dotProduct(u2);
                double v1v2   = v1.dotProduct(v2);
                double coeffU = u1u2 / u1u1;
                double coeffV = v1v2 / u1u1;
                double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
                double alpha  = coeffU - beta * coeffV;
                v2 = new Vector3D(alpha, v1, beta, v2);

                // preliminary computation
                Vector3D uRef  = u1;
                Vector3D vRef  = v1;
                Vector3D v1Su1 = v1.subtract(u1);
                Vector3D v2Su2 = v2.subtract(u2);
                Vector3D k     = v1Su1.crossProduct(v2Su2);
                Vector3D u3    = u1.crossProduct(u2);
                double c       = k.dotProduct(u3);
                if (c == 0) {
                  // the (q1, q2, q3) vector is close to the (u1, u2) plane
                  // we try other vectors
                  Vector3D v3 = Vector3D.crossProduct(v1, v2);
                  Vector3D v3Su3 = v3.subtract(u3);
                  k = v1Su1.crossProduct(v3Su3);
                  Vector3D u2Prime = u1.crossProduct(u3);
                  c = k.dotProduct(u2Prime);

                  if (c == 0) {
                    // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
                    // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
                    k = v2Su2.crossProduct(v3Su3);;
                    c = k.dotProduct(u2.crossProduct(u3));;

                    if (c == 0) {
                      // the (q1, q2, q3) vector is aligned with everything
                      // this is really the identity rotation
                      q0 = 1.0;
                      q1 = 0.0;
                      q2 = 0.0;
                      q3 = 0.0;
                      return;
                    }

                    // we will have to use u2 and v2 to compute the scalar part
                    uRef = u2;
                    vRef = v2;

                  }

                }

                // compute the vectorial part
                c = FastMath.sqrt(c);
                double inv = 1.0 / (c + c);
                q1 = inv * k.getX();
                q2 = inv * k.getY();
                q3 = inv * k.getZ();

                // compute the scalar part
                 k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                                  uRef.getZ() * q1 - uRef.getX() * q3,
                                  uRef.getX() * q2 - uRef.getY() * q1);
                q0 = vRef.dotProduct(k) / (2 * k.getNormSq());

                }
          children: []
          pos: 14373
          length: 2466
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(Vector3D u, Vector3D v) {

                  double normProduct = u.getNorm() * v.getNorm();
                  if (normProduct == 0) {
                      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
                  }

                  double dot = u.dotProduct(v);

                  if (dot < ((2.0e-15 - 1.0) * normProduct)) {
                    // special case u = -v: we select a PI angle rotation around
                    // an arbitrary vector orthogonal to u
                    Vector3D w = u.orthogonal();
                    q0 = 0.0;
                    q1 = -w.getX();
                    q2 = -w.getY();
                    q3 = -w.getZ();
                  } else {
                    // general case: (u, v) defines a plane, we select
                    // the shortest possible rotation: axis orthogonal to this plane
                    q0 = FastMath.sqrt(0.5 * (1.0 + dot / normProduct));
                    double coeff = 1.0 / (2.0 * q0 * normProduct);
                    Vector3D q = v.crossProduct(u);
                    q1 = coeff * q.getX();
                    q2 = coeff * q.getY();
                    q3 = coeff * q.getZ();
                  }

                }
          children: []
          pos: 17474
          length: 955
        - type: constructor_declaration
          fields:
            text: |-
              public Rotation(RotationOrder order,
                                double alpha1, double alpha2, double alpha3) {
                  Rotation r1 = new Rotation(order.getA1(), alpha1);
                  Rotation r2 = new Rotation(order.getA2(), alpha2);
                  Rotation r3 = new Rotation(order.getA3(), alpha3);
                  Rotation composed = r1.applyTo(r2.applyTo(r3));
                  q0 = composed.q0;
                  q1 = composed.q1;
                  q2 = composed.q2;
                  q3 = composed.q3;
                }
          children: []
          pos: 19470
          length: 410
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: revert
              children: []
              pos: 20180
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20164
              length: 79
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new Rotation(-q0, q1, q2, q3, false);
                children: []
                pos: 20195
                length: 44
              pos: 20189
              length: 54
          children: []
          pos: 20164
          length: 79
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getQ0
              children: []
              pos: 20367
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20353
              length: 42
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return q0;
                children: []
                pos: 20381
                length: 10
              pos: 20375
              length: 20
          children: []
          pos: 20353
          length: 42
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getQ1
              children: []
              pos: 20561
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20547
              length: 42
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return q1;
                children: []
                pos: 20575
                length: 10
              pos: 20569
              length: 20
          children: []
          pos: 20547
          length: 42
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getQ2
              children: []
              pos: 20757
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20743
              length: 42
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return q2;
                children: []
                pos: 20771
                length: 10
              pos: 20765
              length: 20
          children: []
          pos: 20743
          length: 42
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getQ3
              children: []
              pos: 20951
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20937
              length: 42
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return q3;
                children: []
                pos: 20965
                length: 10
              pos: 20959
              length: 20
          children: []
          pos: 20937
          length: 42
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getAxis
              children: []
              pos: 21135
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 21119
              length: 425
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double squaredSine = q1 * q1 + q2 * q2 + q3 * q3;
                children: []
                pos: 21151
                length: 49
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: squaredSine
                            children: []
                            pos: 21209
                            length: 11
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 21224
                            length: 1
                        children: []
                        pos: 21209
                        length: 16
                    children: []
                    pos: 21208
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return new Vector3D(1, 0, 0);
                    children: []
                    pos: 21235
                    length: 29
                  pos: 21227
                  length: 43
                pos: 21205
                length: 214
              - type: local_variable_declaration
                fields:
                  text: double inverse = -1 / FastMath.sqrt(squaredSine);
                children: []
                pos: 21424
                length: 49
              - type: return_statement
                fields:
                  text: return new Vector3D(q1 * inverse, q2 * inverse, q3 * inverse);
                children: []
                pos: 21478
                length: 62
              pos: 21145
              length: 399
          children: []
          pos: 21119
          length: 425
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getAngle
              children: []
              pos: 21699
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 21685
              length: 245
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: less_than
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: q0
                                    children: []
                                    pos: 21721
                                    length: 2
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "-0.1"
                                    children: []
                                    pos: 21726
                                    length: 4
                                children: []
                                pos: 21721
                                length: 9
                            children: []
                            pos: 21720
                            length: 11
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: greater_than
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: q0
                                    children: []
                                    pos: 21736
                                    length: 2
                                  right:
                                    type: decimal_floating_point_literal
                                    fields:
                                      text: '0.1'
                                    children: []
                                    pos: 21741
                                    length: 3
                                children: []
                                pos: 21736
                                length: 8
                            children: []
                            pos: 21735
                            length: 10
                        children: []
                        pos: 21720
                        length: 25
                    children: []
                    pos: 21719
                    length: 27
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return 2 * FastMath.asin(FastMath.sqrt(q1 * q1 + q2 *
                        q2 + q3 * q3));
                    children: []
                    pos: 21755
                    length: 69
                  pos: 21747
                  length: 83
                pos: 21716
                length: 176
              - type: return_statement
                fields:
                  text: return 2 * FastMath.acos(q0);
                children: []
                pos: 21897
                length: 29
              pos: 21710
              length: 220
          children: []
          pos: 21685
          length: 245
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getAngles
              children: []
              pos: 23848
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: RotationOrder order
                children: []
                pos: 23858
                length: 19
              pos: 23832
              length: 9003
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: order
                            children: []
                            pos: 23933
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: RotationOrder.XYZ
                            children: []
                            pos: 23942
                            length: 17
                        children: []
                        pos: 23933
                        length: 26
                    children: []
                    pos: 23932
                    length: 28
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Vector3D v1 = applyTo(Vector3D.PLUS_K);
                    children: []
                    pos: 24275
                    length: 39
                  - type: local_variable_declaration
                    fields:
                      text: Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
                    children: []
                    pos: 24321
                    length: 46
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: or
                            fields:
                              left:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: less_than
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: v2.getZ()
                                        children: []
                                        pos: 24380
                                        length: 9
                                      right:
                                        type: unary_expression
                                        fields:
                                          text: "-0.9999999999"
                                        children: []
                                        pos: 24392
                                        length: 13
                                    children: []
                                    pos: 24380
                                    length: 25
                                children: []
                                pos: 24379
                                length: 27
                              right:
                                type: parenthesized_expression
                                fields:
                                  expression:
                                    type: greater_than
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: v2.getZ()
                                        children: []
                                        pos: 24411
                                        length: 9
                                      right:
                                        type: decimal_floating_point_literal
                                        fields:
                                          text: '0.9999999999'
                                        children: []
                                        pos: 24423
                                        length: 12
                                    children: []
                                    pos: 24411
                                    length: 24
                                children: []
                                pos: 24410
                                length: 26
                            children: []
                            pos: 24379
                            length: 57
                        children: []
                        pos: 24378
                        length: 59
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: throw_statement
                        fields:
                          text: throw new CardanEulerSingularityException(true);
                        children: []
                        pos: 24448
                        length: 48
                      pos: 24438
                      length: 66
                    pos: 24374
                    length: 130
                  - type: return_statement
                    fields:
                      text: |-
                        return new double[] {
                                FastMath.atan2(-(v1.getY()), v1.getZ()),
                                FastMath.asin(v2.getZ()),
                                FastMath.atan2(-(v2.getY()), v2.getX())
                              };
                    children: []
                    pos: 24511
                    length: 161
                  pos: 23961
                  length: 718
                pos: 23929
                length: 8901
              pos: 23922
              length: 8913
          children: []
          pos: 23832
          length: 9003
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getMatrix
              children: []
              pos: 32972
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 32954
              length: 833
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double q0q0  = q0 * q0;
                children: []
                pos: 33007
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q0q1  = q0 * q1;
                children: []
                pos: 33035
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q0q2  = q0 * q2;
                children: []
                pos: 33063
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q0q3  = q0 * q3;
                children: []
                pos: 33091
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q1q1  = q1 * q1;
                children: []
                pos: 33119
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q1q2  = q1 * q2;
                children: []
                pos: 33147
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q1q3  = q1 * q3;
                children: []
                pos: 33175
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q2q2  = q2 * q2;
                children: []
                pos: 33203
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q2q3  = q2 * q3;
                children: []
                pos: 33231
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double q3q3  = q3 * q3;
                children: []
                pos: 33259
                length: 23
              - type: local_variable_declaration
                fields:
                  text: double[][] m = new double[3][];
                children: []
                pos: 33313
                length: 31
              - type: expression_statement
                fields:
                  text: m[0] = new double[3];
                children: []
                pos: 33349
                length: 21
              - type: expression_statement
                fields:
                  text: m[1] = new double[3];
                children: []
                pos: 33375
                length: 21
              - type: expression_statement
                fields:
                  text: m[2] = new double[3];
                children: []
                pos: 33401
                length: 21
              - type: expression_statement
                fields:
                  text: m [0][0] = 2.0 * (q0q0 + q1q1) - 1.0;
                children: []
                pos: 33428
                length: 37
              - type: expression_statement
                fields:
                  text: m [1][0] = 2.0 * (q1q2 - q0q3);
                children: []
                pos: 33470
                length: 31
              - type: expression_statement
                fields:
                  text: m [2][0] = 2.0 * (q1q3 + q0q2);
                children: []
                pos: 33506
                length: 31
              - type: expression_statement
                fields:
                  text: m [0][1] = 2.0 * (q1q2 + q0q3);
                children: []
                pos: 33543
                length: 31
              - type: expression_statement
                fields:
                  text: m [1][1] = 2.0 * (q0q0 + q2q2) - 1.0;
                children: []
                pos: 33579
                length: 37
              - type: expression_statement
                fields:
                  text: m [2][1] = 2.0 * (q2q3 - q0q1);
                children: []
                pos: 33621
                length: 31
              - type: expression_statement
                fields:
                  text: m [0][2] = 2.0 * (q1q3 - q0q2);
                children: []
                pos: 33658
                length: 31
              - type: expression_statement
                fields:
                  text: m [1][2] = 2.0 * (q2q3 + q0q1);
                children: []
                pos: 33694
                length: 31
              - type: expression_statement
                fields:
                  text: m [2][2] = 2.0 * (q0q0 + q3q3) - 1.0;
                children: []
                pos: 33730
                length: 37
              - type: return_statement
                fields:
                  text: return m;
                children: []
                pos: 33773
                length: 9
              pos: 32984
              length: 803
          children: []
          pos: 32954
          length: 833
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: applyTo
              children: []
              pos: 33963
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Vector3D u
                children: []
                pos: 33971
                length: 10
              pos: 33947
              length: 396
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double x = u.getX();
                children: []
                pos: 33990
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double y = u.getY();
                children: []
                pos: 34015
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double z = u.getZ();
                children: []
                pos: 34040
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double s = q1 * x + q2 * y + q3 * z;
                children: []
                pos: 34066
                length: 36
              - type: return_statement
                fields:
                  text: |-
                    return new Vector3D(2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x,
                                            2 * (q0 * (y * q0 - (q3 * x - q1 * z)) + s * q2) - y,
                                            2 * (q0 * (z * q0 - (q1 * y - q2 * x)) + s * q3) - z);
                children: []
                pos: 34108
                length: 230
              pos: 33983
              length: 360
          children: []
          pos: 33947
          length: 396
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: applyInverseTo
              children: []
              pos: 34556
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Vector3D u
                children: []
                pos: 34571
                length: 10
              pos: 34540
              length: 424
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double x = u.getX();
                children: []
                pos: 34590
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double y = u.getY();
                children: []
                pos: 34615
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double z = u.getZ();
                children: []
                pos: 34640
                length: 20
              - type: local_variable_declaration
                fields:
                  text: double s = q1 * x + q2 * y + q3 * z;
                children: []
                pos: 34666
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double m0 = -q0;
                children: []
                pos: 34707
                length: 16
              - type: return_statement
                fields:
                  text: |-
                    return new Vector3D(2 * (m0 * (x * m0 - (q2 * z - q3 * y)) + s * q1) - x,
                                            2 * (m0 * (y * m0 - (q3 * x - q1 * z)) + s * q2) - y,
                                            2 * (m0 * (z * m0 - (q1 * y - q2 * x)) + s * q3) - z);
                children: []
                pos: 34729
                length: 230
              pos: 34583
              length: 381
          children: []
          pos: 34540
          length: 424
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: applyTo
              children: []
              pos: 35476
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Rotation r
                children: []
                pos: 35484
                length: 10
              pos: 35460
              length: 365
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new Rotation(r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),
                                            r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),
                                            r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),
                                            r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),
                                            false);
                children: []
                pos: 35502
                length: 319
              pos: 35496
              length: 329
          children: []
          pos: 35460
          length: 365
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: applyInverseTo
              children: []
              pos: 36414
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Rotation r
                children: []
                pos: 36429
                length: 10
              pos: 36398
              length: 376
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),
                                            -r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),
                                            -r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),
                                            -r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),
                                            false);
                children: []
                pos: 36447
                length: 323
              pos: 36441
              length: 333
          children: []
          pos: 36398
          length: 376
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: orthogonalizeMatrix
              children: []
              pos: 37309
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double[][] m
                children: []
                pos: 37329
                length: 12
              pos: 37290
              length: 3021
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: double[] m0 = m[0];
                children: []
                pos: 37406
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double[] m1 = m[1];
                children: []
                pos: 37430
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double[] m2 = m[2];
                children: []
                pos: 37454
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x00 = m0[0];
                children: []
                pos: 37478
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x01 = m0[1];
                children: []
                pos: 37502
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x02 = m0[2];
                children: []
                pos: 37526
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x10 = m1[0];
                children: []
                pos: 37550
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x11 = m1[1];
                children: []
                pos: 37574
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x12 = m1[2];
                children: []
                pos: 37598
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x20 = m2[0];
                children: []
                pos: 37622
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x21 = m2[1];
                children: []
                pos: 37646
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double x22 = m2[2];
                children: []
                pos: 37670
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double fn = 0;
                children: []
                pos: 37694
                length: 14
              - type: local_variable_declaration
                fields:
                  text: double fn1;
                children: []
                pos: 37713
                length: 11
              - type: local_variable_declaration
                fields:
                  text: double[][] o = new double[3][3];
                children: []
                pos: 37730
                length: 32
              - type: local_variable_declaration
                fields:
                  text: double[] o0 = o[0];
                children: []
                pos: 37767
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double[] o1 = o[1];
                children: []
                pos: 37791
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double[] o2 = o[2];
                children: []
                pos: 37815
                length: 19
              - type: local_variable_declaration
                fields:
                  text: int i = 0;
                children: []
                pos: 37902
                length: 10
              - type: while_statement
                fields:
                  text: |-
                    while (++i < 11) {

                          // Mt.Xn
                          double mx00 = m0[0] * x00 + m1[0] * x10 + m2[0] * x20;
                          double mx10 = m0[1] * x00 + m1[1] * x10 + m2[1] * x20;
                          double mx20 = m0[2] * x00 + m1[2] * x10 + m2[2] * x20;
                          double mx01 = m0[0] * x01 + m1[0] * x11 + m2[0] * x21;
                          double mx11 = m0[1] * x01 + m1[1] * x11 + m2[1] * x21;
                          double mx21 = m0[2] * x01 + m1[2] * x11 + m2[2] * x21;
                          double mx02 = m0[0] * x02 + m1[0] * x12 + m2[0] * x22;
                          double mx12 = m0[1] * x02 + m1[1] * x12 + m2[1] * x22;
                          double mx22 = m0[2] * x02 + m1[2] * x12 + m2[2] * x22;

                          // Xn+1
                          o0[0] = x00 - 0.5 * (x00 * mx00 + x01 * mx10 + x02 * mx20 - m0[0]);
                          o0[1] = x01 - 0.5 * (x00 * mx01 + x01 * mx11 + x02 * mx21 - m0[1]);
                          o0[2] = x02 - 0.5 * (x00 * mx02 + x01 * mx12 + x02 * mx22 - m0[2]);
                          o1[0] = x10 - 0.5 * (x10 * mx00 + x11 * mx10 + x12 * mx20 - m1[0]);
                          o1[1] = x11 - 0.5 * (x10 * mx01 + x11 * mx11 + x12 * mx21 - m1[1]);
                          o1[2] = x12 - 0.5 * (x10 * mx02 + x11 * mx12 + x12 * mx22 - m1[2]);
                          o2[0] = x20 - 0.5 * (x20 * mx00 + x21 * mx10 + x22 * mx20 - m2[0]);
                          o2[1] = x21 - 0.5 * (x20 * mx01 + x21 * mx11 + x22 * mx21 - m2[1]);
                          o2[2] = x22 - 0.5 * (x20 * mx02 + x21 * mx12 + x22 * mx22 - m2[2]);

                          // correction on each elements
                          double corr00 = o0[0] - m0[0];
                          double corr01 = o0[1] - m0[1];
                          double corr02 = o0[2] - m0[2];
                          double corr10 = o1[0] - m1[0];
                          double corr11 = o1[1] - m1[1];
                          double corr12 = o1[2] - m1[2];
                          double corr20 = o2[0] - m2[0];
                          double corr21 = o2[1] - m2[1];
                          double corr22 = o2[2] - m2[2];

                          // Frobenius norm of the correction
                          fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +
                                corr10 * corr10 + corr11 * corr11 + corr12 * corr12 +
                                corr20 * corr20 + corr21 * corr21 + corr22 * corr22;

                          // convergence test
                          if (FastMath.abs(fn1 - fn) <= threshold) {
                              return o;
                          }

                          // prepare next iteration
                          x00 = o0[0];
                          x01 = o0[1];
                          x02 = o0[2];
                          x10 = o1[0];
                          x11 = o1[1];
                          x12 = o1[2];
                          x20 = o2[0];
                          x21 = o2[1];
                          x22 = o2[2];
                          fn  = fn1;

                        }
                children: []
                pos: 37917
                length: 2207
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotARotationMatrixException(
                                LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX,
                                i - 1);
                children: []
                pos: 40188
                length: 119
              pos: 37400
              length: 2911
          children: []
          pos: 37290
          length: 3021
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: distance
              children: []
              pos: 41684
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Rotation r1
                children: []
                pos: 41693
                length: 11
              pos: 41663
              length: 108
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return r1.applyInverseTo(r2).getAngle();
                children: []
                pos: 41727
                length: 40
              pos: 41719
              length: 52
          children: []
          pos: 41663
          length: 108
        pos: 5183
        length: 36591
    children: []
    pos: 5183
    length: 36591
  pos: 0
  length: 41775
text_diff: "--- before\n+++ after\n@@ -341,8 +341,7 @@\n   Vector3D k     = v1Su1.crossProduct(v2Su2);\n
  \  Vector3D u3    = u1.crossProduct(u2);\n   double c       = k.dotProduct(u3);\n-
  \ final double inPlaneThreshold = 0.001;\n-  if (c <= inPlaneThreshold * k.getNorm()
  * u3.getNorm()) {\n+  if (c == 0) {\n     // the (q1, q2, q3) vector is close to
  the (u1, u2) plane\n     // we try other vectors\n     Vector3D v3 = Vector3D.crossProduct(v1,
  v2);\n@@ -351,13 +350,13 @@\n     Vector3D u2Prime = u1.crossProduct(u3);\n     c
  = k.dotProduct(u2Prime);\n \n-    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm())
  {\n+    if (c == 0) {\n       // the (q1, q2, q3) vector is also close to the (u1,
  u3) plane,\n       // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n
  \      k = v2Su2.crossProduct(v3Su3);;\n       c = k.dotProduct(u2.crossProduct(u3));;\n
  \n-      if (c <= 0) {\n+      if (c == 0) {\n         // the (q1, q2, q3) vector
  is aligned with everything\n         // this is really the identity rotation\n         q0
  = 1.0;\n"
tree_diff: |+
  New cluster:
  UPDATE from public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {

    // norms computation
    double u1u1 = u1.getNormSq();
    double u2u2 = u2.getNormSq();
    double v1v1 = v1.getNormSq();
    double v2v2 = v2.getNormSq();
    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
    }

    // normalize v1 in order to have (v1'|v1') = (u1|u1)
    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);

    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
    double u1u2   = u1.dotProduct(u2);
    double v1v2   = v1.dotProduct(v2);
    double coeffU = u1u2 / u1u1;
    double coeffV = v1v2 / u1u1;
    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
    double alpha  = coeffU - beta * coeffV;
    v2 = new Vector3D(alpha, v1, beta, v2);

    // preliminary computation
    Vector3D uRef  = u1;
    Vector3D vRef  = v1;
    Vector3D v1Su1 = v1.subtract(u1);
    Vector3D v2Su2 = v2.subtract(u2);
    Vector3D k     = v1Su1.crossProduct(v2Su2);
    Vector3D u3    = u1.crossProduct(u2);
    double c       = k.dotProduct(u3);
    final double inPlaneThreshold = 0.001;
    if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {
      // the (q1, q2, q3) vector is close to the (u1, u2) plane
      // we try other vectors
      Vector3D v3 = Vector3D.crossProduct(v1, v2);
      Vector3D v3Su3 = v3.subtract(u3);
      k = v1Su1.crossProduct(v3Su3);
      Vector3D u2Prime = u1.crossProduct(u3);
      c = k.dotProduct(u2Prime);

      if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {
        // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
        // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
        k = v2Su2.crossProduct(v3Su3);;
        c = k.dotProduct(u2.crossProduct(u3));;

        if (c <= 0) {
          // the (q1, q2, q3) vector is aligned with everything
          // this is really the identity rotation
          q0 = 1.0;
          q1 = 0.0;
          q2 = 0.0;
          q3 = 0.0;
          return;
        }

        // we will have to use u2 and v2 to compute the scalar part
        uRef = u2;
        vRef = v2;

      }

    }

    // compute the vectorial part
    c = FastMath.sqrt(c);
    double inv = 1.0 / (c + c);
    q1 = inv * k.getX();
    q2 = inv * k.getY();
    q3 = inv * k.getZ();

    // compute the scalar part
     k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                      uRef.getZ() * q1 - uRef.getX() * q3,
                      uRef.getX() * q2 - uRef.getY() * q1);
    q0 = vRef.dotProduct(k) / (2 * k.getNormSq());

    } to public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {

    // norms computation
    double u1u1 = u1.getNormSq();
    double u2u2 = u2.getNormSq();
    double v1v1 = v1.getNormSq();
    double v2v2 = v2.getNormSq();
    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
    }

    // normalize v1 in order to have (v1'|v1') = (u1|u1)
    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);

    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
    double u1u2   = u1.dotProduct(u2);
    double v1v2   = v1.dotProduct(v2);
    double coeffU = u1u2 / u1u1;
    double coeffV = v1v2 / u1u1;
    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
    double alpha  = coeffU - beta * coeffV;
    v2 = new Vector3D(alpha, v1, beta, v2);

    // preliminary computation
    Vector3D uRef  = u1;
    Vector3D vRef  = v1;
    Vector3D v1Su1 = v1.subtract(u1);
    Vector3D v2Su2 = v2.subtract(u2);
    Vector3D k     = v1Su1.crossProduct(v2Su2);
    Vector3D u3    = u1.crossProduct(u2);
    double c       = k.dotProduct(u3);
    if (c == 0) {
      // the (q1, q2, q3) vector is close to the (u1, u2) plane
      // we try other vectors
      Vector3D v3 = Vector3D.crossProduct(v1, v2);
      Vector3D v3Su3 = v3.subtract(u3);
      k = v1Su1.crossProduct(v3Su3);
      Vector3D u2Prime = u1.crossProduct(u3);
      c = k.dotProduct(u2Prime);

      if (c == 0) {
        // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
        // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
        k = v2Su2.crossProduct(v3Su3);;
        c = k.dotProduct(u2.crossProduct(u3));;

        if (c == 0) {
          // the (q1, q2, q3) vector is aligned with everything
          // this is really the identity rotation
          q0 = 1.0;
          q1 = 0.0;
          q2 = 0.0;
          q3 = 0.0;
          return;
        }

        // we will have to use u2 and v2 to compute the scalar part
        uRef = u2;
        vRef = v2;

      }

    }

    // compute the vectorial part
    c = FastMath.sqrt(c);
    double inv = 1.0 / (c + c);
    q1 = inv * k.getX();
    q2 = inv * k.getY();
    q3 = inv * k.getZ();

    // compute the scalar part
     k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                      uRef.getZ() * q1 - uRef.getX() * q3,
                      uRef.getX() * q2 - uRef.getY() * q1);
    q0 = vRef.dotProduct(k) / (2 * k.getNormSq());

    }
  ------------
  ===
  update-node
  ---
  constructor_declaration: public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {

    // norms computation
    double u1u1 = u1.getNormSq();
    double u2u2 = u2.getNormSq();
    double v1v1 = v1.getNormSq();
    double v2v2 = v2.getNormSq();
    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
    }

    // normalize v1 in order to have (v1'|v1') = (u1|u1)
    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);

    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
    double u1u2   = u1.dotProduct(u2);
    double v1v2   = v1.dotProduct(v2);
    double coeffU = u1u2 / u1u1;
    double coeffV = v1v2 / u1u1;
    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
    double alpha  = coeffU - beta * coeffV;
    v2 = new Vector3D(alpha, v1, beta, v2);

    // preliminary computation
    Vector3D uRef  = u1;
    Vector3D vRef  = v1;
    Vector3D v1Su1 = v1.subtract(u1);
    Vector3D v2Su2 = v2.subtract(u2);
    Vector3D k     = v1Su1.crossProduct(v2Su2);
    Vector3D u3    = u1.crossProduct(u2);
    double c       = k.dotProduct(u3);
    final double inPlaneThreshold = 0.001;
    if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {
      // the (q1, q2, q3) vector is close to the (u1, u2) plane
      // we try other vectors
      Vector3D v3 = Vector3D.crossProduct(v1, v2);
      Vector3D v3Su3 = v3.subtract(u3);
      k = v1Su1.crossProduct(v3Su3);
      Vector3D u2Prime = u1.crossProduct(u3);
      c = k.dotProduct(u2Prime);

      if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {
        // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
        // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
        k = v2Su2.crossProduct(v3Su3);;
        c = k.dotProduct(u2.crossProduct(u3));;

        if (c <= 0) {
          // the (q1, q2, q3) vector is aligned with everything
          // this is really the identity rotation
          q0 = 1.0;
          q1 = 0.0;
          q2 = 0.0;
          q3 = 0.0;
          return;
        }

        // we will have to use u2 and v2 to compute the scalar part
        uRef = u2;
        vRef = v2;

      }

    }

    // compute the vectorial part
    c = FastMath.sqrt(c);
    double inv = 1.0 / (c + c);
    q1 = inv * k.getX();
    q2 = inv * k.getY();
    q3 = inv * k.getZ();

    // compute the scalar part
     k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                      uRef.getZ() * q1 - uRef.getX() * q3,
                      uRef.getX() * q2 - uRef.getY() * q1);
    q0 = vRef.dotProduct(k) / (2 * k.getNormSq());

    } [14373,16973]
  replace public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {

    // norms computation
    double u1u1 = u1.getNormSq();
    double u2u2 = u2.getNormSq();
    double v1v1 = v1.getNormSq();
    double v2v2 = v2.getNormSq();
    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
    }

    // normalize v1 in order to have (v1'|v1') = (u1|u1)
    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);

    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
    double u1u2   = u1.dotProduct(u2);
    double v1v2   = v1.dotProduct(v2);
    double coeffU = u1u2 / u1u1;
    double coeffV = v1v2 / u1u1;
    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
    double alpha  = coeffU - beta * coeffV;
    v2 = new Vector3D(alpha, v1, beta, v2);

    // preliminary computation
    Vector3D uRef  = u1;
    Vector3D vRef  = v1;
    Vector3D v1Su1 = v1.subtract(u1);
    Vector3D v2Su2 = v2.subtract(u2);
    Vector3D k     = v1Su1.crossProduct(v2Su2);
    Vector3D u3    = u1.crossProduct(u2);
    double c       = k.dotProduct(u3);
    final double inPlaneThreshold = 0.001;
    if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {
      // the (q1, q2, q3) vector is close to the (u1, u2) plane
      // we try other vectors
      Vector3D v3 = Vector3D.crossProduct(v1, v2);
      Vector3D v3Su3 = v3.subtract(u3);
      k = v1Su1.crossProduct(v3Su3);
      Vector3D u2Prime = u1.crossProduct(u3);
      c = k.dotProduct(u2Prime);

      if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {
        // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
        // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
        k = v2Su2.crossProduct(v3Su3);;
        c = k.dotProduct(u2.crossProduct(u3));;

        if (c <= 0) {
          // the (q1, q2, q3) vector is aligned with everything
          // this is really the identity rotation
          q0 = 1.0;
          q1 = 0.0;
          q2 = 0.0;
          q3 = 0.0;
          return;
        }

        // we will have to use u2 and v2 to compute the scalar part
        uRef = u2;
        vRef = v2;

      }

    }

    // compute the vectorial part
    c = FastMath.sqrt(c);
    double inv = 1.0 / (c + c);
    q1 = inv * k.getX();
    q2 = inv * k.getY();
    q3 = inv * k.getZ();

    // compute the scalar part
     k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                      uRef.getZ() * q1 - uRef.getX() * q3,
                      uRef.getX() * q2 - uRef.getY() * q1);
    q0 = vRef.dotProduct(k) / (2 * k.getNormSq());

    } by public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {

    // norms computation
    double u1u1 = u1.getNormSq();
    double u2u2 = u2.getNormSq();
    double v1v1 = v1.getNormSq();
    double v2v2 = v2.getNormSq();
    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
    }

    // normalize v1 in order to have (v1'|v1') = (u1|u1)
    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);

    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
    double u1u2   = u1.dotProduct(u2);
    double v1v2   = v1.dotProduct(v2);
    double coeffU = u1u2 / u1u1;
    double coeffV = v1v2 / u1u1;
    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
    double alpha  = coeffU - beta * coeffV;
    v2 = new Vector3D(alpha, v1, beta, v2);

    // preliminary computation
    Vector3D uRef  = u1;
    Vector3D vRef  = v1;
    Vector3D v1Su1 = v1.subtract(u1);
    Vector3D v2Su2 = v2.subtract(u2);
    Vector3D k     = v1Su1.crossProduct(v2Su2);
    Vector3D u3    = u1.crossProduct(u2);
    double c       = k.dotProduct(u3);
    if (c == 0) {
      // the (q1, q2, q3) vector is close to the (u1, u2) plane
      // we try other vectors
      Vector3D v3 = Vector3D.crossProduct(v1, v2);
      Vector3D v3Su3 = v3.subtract(u3);
      k = v1Su1.crossProduct(v3Su3);
      Vector3D u2Prime = u1.crossProduct(u3);
      c = k.dotProduct(u2Prime);

      if (c == 0) {
        // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
        // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
        k = v2Su2.crossProduct(v3Su3);;
        c = k.dotProduct(u2.crossProduct(u3));;

        if (c == 0) {
          // the (q1, q2, q3) vector is aligned with everything
          // this is really the identity rotation
          q0 = 1.0;
          q1 = 0.0;
          q2 = 0.0;
          q3 = 0.0;
          return;
        }

        // we will have to use u2 and v2 to compute the scalar part
        uRef = u2;
        vRef = v2;

      }

    }

    // compute the vectorial part
    c = FastMath.sqrt(c);
    double inv = 1.0 / (c + c);
    q1 = inv * k.getX();
    q2 = inv * k.getY();
    q3 = inv * k.getZ();

    // compute the scalar part
     k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
                      uRef.getZ() * q1 - uRef.getX() * q3,
                      uRef.getX() * q2 - uRef.getY() * q1);
    q0 = vRef.dotProduct(k) / (2 * k.getNormSq());

    }

...
