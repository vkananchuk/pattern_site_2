---
language: python
text_diff: "--- before\n+++ after\n@@ -1,17 +1,31 @@\n+\n def sieve(max):\n     primes
  = []\n     for n in range(2, max + 1):\n-        if any(n % p > 0 for p in primes):\n+
  \       if all(n % p > 0 for p in primes):\n             primes.append(n)\n     return
  primes\n \n \"\"\"\n-Sieve of Eratosthenes\n-prime-sieve\n+def sieve(max):\n+    primes
  = []\n+    for n in range(2, max + 1):\n+        if not any(n % p == 0 for p in
  primes):\n+            primes.append(n)\n+    return primes\n \n-Input:\n-    max:
  A positive int representing an upper bound.\n+def sieve(max):\n+    primes = []\n+
  \   for n in range(2, max + 1):\n+        if all(n % p for p in primes):\n+            primes.append(n)\n+
  \   return primes\n+\n+def sieve(max):\n+    primes = []\n+    for n in range(2,
  max + 1):\n+        if not any(n % p for p in primes):\n+            primes.append(n)\n+
  \   return primes\n \n-Output:\n-    A list containing all primes up to and including
  max\n \"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from """
  Sieve of Eratosthenes
  prime-sieve

  Input:
      max: A positive int representing an upper bound.

  Output:
      A list containing all primes up to and including max
  """ to """
  def sieve(max):
      primes = []
      for n in range(2, max + 1):
          if not any(n % p == 0 for p in primes):
              primes.append(n)
      return primes

  def sieve(max):
      primes = []
      for n in range(2, max + 1):
          if all(n % p for p in primes):
              primes.append(n)
      return primes

  def sieve(max):
      primes = []
      for n in range(2, max + 1):
          if not any(n % p for p in primes):
              primes.append(n)
      return primes

  """
  ------------
  ===
  update-node
  ---
  expression_statement: """
  Sieve of Eratosthenes
  prime-sieve

  Input:
      max: A positive int representing an upper bound.

  Output:
      A list containing all primes up to and including max
  """ [155,323]
  replace """
  Sieve of Eratosthenes
  prime-sieve

  Input:
      max: A positive int representing an upper bound.

  Output:
      A list containing all primes up to and including max
  """ by """
  def sieve(max):
      primes = []
      for n in range(2, max + 1):
          if not any(n % p == 0 for p in primes):
              primes.append(n)
      return primes

  def sieve(max):
      primes = []
      for n in range(2, max + 1):
          if all(n % p for p in primes):
              primes.append(n)
      return primes

  def sieve(max):
      primes = []
      for n in range(2, max + 1):
          if not any(n % p for p in primes):
              primes.append(n)
      return primes

  """

  New cluster:
  UPDATE from for n in range(2, max + 1):
          if any(n % p > 0 for p in primes):
              primes.append(n) to for n in range(2, max + 1):
          if all(n % p > 0 for p in primes):
              primes.append(n)
  ------------
  ===
  update-node
  ---
  for_statement: for n in range(2, max + 1):
          if any(n % p > 0 for p in primes):
              primes.append(n) [36,135]
  replace for n in range(2, max + 1):
          if any(n % p > 0 for p in primes):
              primes.append(n) by for n in range(2, max + 1):
          if all(n % p > 0 for p in primes):
              primes.append(n)

...
