---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: sieve
        children: []
        pos: 4
        length: 5
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: max
          children: []
          pos: 10
          length: 3
        pos: 0
        length: 153
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: primes = []
          children: []
          pos: 20
          length: 11
        - type: for_statement
          fields:
            text: |-
              for n in range(2, max + 1):
                      if any(n % p > 0 for p in primes):
                          primes.append(n)
          children: []
          pos: 36
          length: 99
        - type: return_statement
          fields:
            text: return primes
          children: []
          pos: 140
          length: 13
        pos: 20
        length: 133
    children: []
    pos: 0
    length: 153
  pos: 0
  length: 154
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: sieve
        children: []
        pos: 4
        length: 5
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: max
          children: []
          pos: 10
          length: 3
        pos: 0
        length: 153
      body:
        type: block
        fields: {}
        children:
        - type: expression_statement
          fields:
            text: primes = []
          children: []
          pos: 20
          length: 11
        - type: for_statement
          fields:
            text: |-
              for n in range(2, max + 1):
                      if all(n % p > 0 for p in primes):
                          primes.append(n)
          children: []
          pos: 36
          length: 99
        - type: return_statement
          fields:
            text: return primes
          children: []
          pos: 140
          length: 13
        pos: 20
        length: 133
    children: []
    pos: 0
    length: 153
  pos: 0
  length: 154
text_diff: |
  --- before
  +++ after
  @@ -1,6 +1,6 @@
   def sieve(max):
       primes = []
       for n in range(2, max + 1):
  -        if any(n % p > 0 for p in primes):
  +        if all(n % p > 0 for p in primes):
               primes.append(n)
       return primes
tree_diff: |+
  New cluster:
  UPDATE from for n in range(2, max + 1):
          if any(n % p > 0 for p in primes):
              primes.append(n) to for n in range(2, max + 1):
          if all(n % p > 0 for p in primes):
              primes.append(n)
  ------------
  ===
  update-node
  ---
  for_statement: for n in range(2, max + 1):
          if any(n % p > 0 for p in primes):
              primes.append(n) [36,135]
  replace for n in range(2, max + 1):
          if any(n % p > 0 for p in primes):
              primes.append(n) by for n in range(2, max + 1):
          if all(n % p > 0 for p in primes):
              primes.append(n)

...
