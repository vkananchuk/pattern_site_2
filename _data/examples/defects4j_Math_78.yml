---
language: java
text_diff: "--- before\n+++ after\n@@ -188,7 +188,6 @@\n                 if (g0Positive
  ^ (gb >= 0)) {\n                     // there is a sign change: an event is expected
  during this step\n \n-                    if (ga * gb > 0) {\n                         //
  this is a corner case:\n                         // - there was an event near ta,\n
  \                        // - there is another event between ta and tb\n@@ -196,17
  +195,7 @@\n                         // this implies that the real sign of ga is
  the same as gb, so we need to slightly\n                         // shift ta to
  make sure ga and gb get opposite signs and the solver won't complain\n                         //
  about bracketing\n-                        final double epsilon = (forward ? 0.25
  : -0.25) * convergence;\n-                        for (int k = 0; (k < 4) && (ga
  * gb > 0); ++k) {\n-                            ta += epsilon;\n-                            interpolator.setInterpolatedTime(ta);\n-
  \                           ga = handler.g(ta, interpolator.getInterpolatedState());\n-
  \                       }\n-                        if (ga * gb > 0) {\n                             //
  this should never happen\n-                            throw MathRuntimeException.createInternalError(null);\n-
  \                       }\n-                    }\n                          \n
  \                    // variation direction, with respect to the integration direction\n
  \                    increasing = gb >= ga;\n"
tree_diff: "New cluster:\nUPDATE from for (int i = 0; i < n; ++i) {\n\n                //
  evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n
  \               final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n
  \               // check events occurrence\n                if (g0Positive ^ (gb
  >= 0)) {\n                    // there is a sign change: an event is expected during
  this step\n\n                    if (ga * gb > 0) {\n                        //
  this is a corner case:\n                        // - there was an event near ta,\n
  \                       // - there is another event between ta and tb\n                        //
  - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n
  \                       // this implies that the real sign of ga is the same as
  gb, so we need to slightly\n                        // shift ta to make sure ga
  and gb get opposite signs and the solver won't complain\n                        //
  about bracketing\n                        final double epsilon = (forward ? 0.25
  : -0.25) * convergence;\n                        for (int k = 0; (k < 4) && (ga
  * gb > 0); ++k) {\n                            ta += epsilon;\n                            interpolator.setInterpolatedTime(ta);\n
  \                           ga = handler.g(ta, interpolator.getInterpolatedState());\n
  \                       }\n                        if (ga * gb > 0) {\n                            //
  this should never happen\n                            throw MathRuntimeException.createInternalError(null);\n
  \                       }\n                    }\n                         \n                    //
  variation direction, with respect to the integration direction\n                    increasing
  = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction()
  {\n                        public double value(final double t) throws FunctionEvaluationException
  {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n
  \                               return handler.g(t, interpolator.getInterpolatedState());\n
  \                           } catch (DerivativeException e) {\n                                throw
  new FunctionEvaluationException(e, t);\n                            } catch (EventException
  e) {\n                                throw new FunctionEvaluationException(e, t);\n
  \                           }\n                        }\n                    };\n
  \                   final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n
  \                   solver.setMaximalIterationCount(maxIterationCount);\n                    final
  double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n
  \                   if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root
  - previousEventTime) <= convergence)) {\n                        // we have either
  found nothing or found (again ?) a past event, we simply ignore it\n                        ta
  = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime)
  ||\n                               (Math.abs(previousEventTime - root) > convergence))
  {\n                        pendingEventTime = root;\n                        if
  (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            //
  we were already waiting for this event which was\n                            //
  found during a previous call for a step that was\n                            //
  rejected, this step must now be accepted since it\n                            //
  properly ends exactly at the event occurrence\n                            return
  false;\n                        }\n                        // either we were not
  waiting for the event or it has\n                        // moved in such a way
  the step cannot be accepted\n                        pendingEvent = true;\n                        return
  true;\n                    }\n\n                } else {\n                    //
  no sign change: there is no event for now\n                    ta = tb;\n                    ga
  = gb;\n                }\n\n            } to for (int i = 0; i < n; ++i) {\n\n                //
  evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n
  \               final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n
  \               // check events occurrence\n                if (g0Positive ^ (gb
  >= 0)) {\n                    // there is a sign change: an event is expected during
  this step\n\n                        // this is a corner case:\n                        //
  - there was an event near ta,\n                        // - there is another event
  between ta and tb\n                        // - when ta was computed, convergence
  was reached on the \"wrong side\" of the interval\n                        // this
  implies that the real sign of ga is the same as gb, so we need to slightly\n                        //
  shift ta to make sure ga and gb get opposite signs and the solver won't complain\n
  \                       // about bracketing\n                            // this
  should never happen\n                         \n                    // variation
  direction, with respect to the integration direction\n                    increasing
  = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction()
  {\n                        public double value(final double t) throws FunctionEvaluationException
  {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n
  \                               return handler.g(t, interpolator.getInterpolatedState());\n
  \                           } catch (DerivativeException e) {\n                                throw
  new FunctionEvaluationException(e, t);\n                            } catch (EventException
  e) {\n                                throw new FunctionEvaluationException(e, t);\n
  \                           }\n                        }\n                    };\n
  \                   final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n
  \                   solver.setMaximalIterationCount(maxIterationCount);\n                    final
  double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n
  \                   if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root
  - previousEventTime) <= convergence)) {\n                        // we have either
  found nothing or found (again ?) a past event, we simply ignore it\n                        ta
  = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime)
  ||\n                               (Math.abs(previousEventTime - root) > convergence))
  {\n                        pendingEventTime = root;\n                        if
  (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            //
  we were already waiting for this event which was\n                            //
  found during a previous call for a step that was\n                            //
  rejected, this step must now be accepted since it\n                            //
  properly ends exactly at the event occurrence\n                            return
  false;\n                        }\n                        // either we were not
  waiting for the event or it has\n                        // moved in such a way
  the step cannot be accepted\n                        pendingEvent = true;\n                        return
  true;\n                    }\n\n                } else {\n                    //
  no sign change: there is no event for now\n                    ta = tb;\n                    ga
  = gb;\n                }\n\n            }\n------------\n===\nupdate-node\n---\nfor_statement:
  for (int i = 0; i < n; ++i) {\n\n                // evaluate handler value at the
  end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n
  \               final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n
  \               // check events occurrence\n                if (g0Positive ^ (gb
  >= 0)) {\n                    // there is a sign change: an event is expected during
  this step\n\n                    if (ga * gb > 0) {\n                        //
  this is a corner case:\n                        // - there was an event near ta,\n
  \                       // - there is another event between ta and tb\n                        //
  - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n
  \                       // this implies that the real sign of ga is the same as
  gb, so we need to slightly\n                        // shift ta to make sure ga
  and gb get opposite signs and the solver won't complain\n                        //
  about bracketing\n                        final double epsilon = (forward ? 0.25
  : -0.25) * convergence;\n                        for (int k = 0; (k < 4) && (ga
  * gb > 0); ++k) {\n                            ta += epsilon;\n                            interpolator.setInterpolatedTime(ta);\n
  \                           ga = handler.g(ta, interpolator.getInterpolatedState());\n
  \                       }\n                        if (ga * gb > 0) {\n                            //
  this should never happen\n                            throw MathRuntimeException.createInternalError(null);\n
  \                       }\n                    }\n                         \n                    //
  variation direction, with respect to the integration direction\n                    increasing
  = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction()
  {\n                        public double value(final double t) throws FunctionEvaluationException
  {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n
  \                               return handler.g(t, interpolator.getInterpolatedState());\n
  \                           } catch (DerivativeException e) {\n                                throw
  new FunctionEvaluationException(e, t);\n                            } catch (EventException
  e) {\n                                throw new FunctionEvaluationException(e, t);\n
  \                           }\n                        }\n                    };\n
  \                   final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n
  \                   solver.setMaximalIterationCount(maxIterationCount);\n                    final
  double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n
  \                   if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root
  - previousEventTime) <= convergence)) {\n                        // we have either
  found nothing or found (again ?) a past event, we simply ignore it\n                        ta
  = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime)
  ||\n                               (Math.abs(previousEventTime - root) > convergence))
  {\n                        pendingEventTime = root;\n                        if
  (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            //
  we were already waiting for this event which was\n                            //
  found during a previous call for a step that was\n                            //
  rejected, this step must now be accepted since it\n                            //
  properly ends exactly at the event occurrence\n                            return
  false;\n                        }\n                        // either we were not
  waiting for the event or it has\n                        // moved in such a way
  the step cannot be accepted\n                        pendingEvent = true;\n                        return
  true;\n                    }\n\n                } else {\n                    //
  no sign change: there is no event for now\n                    ta = tb;\n                    ga
  = gb;\n                }\n\n            } [6852,11111]\nreplace for (int i = 0;
  i < n; ++i) {\n\n                // evaluate handler value at the end of the substep\n
  \               tb += h;\n                interpolator.setInterpolatedTime(tb);\n
  \               final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n
  \               // check events occurrence\n                if (g0Positive ^ (gb
  >= 0)) {\n                    // there is a sign change: an event is expected during
  this step\n\n                    if (ga * gb > 0) {\n                        //
  this is a corner case:\n                        // - there was an event near ta,\n
  \                       // - there is another event between ta and tb\n                        //
  - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n
  \                       // this implies that the real sign of ga is the same as
  gb, so we need to slightly\n                        // shift ta to make sure ga
  and gb get opposite signs and the solver won't complain\n                        //
  about bracketing\n                        final double epsilon = (forward ? 0.25
  : -0.25) * convergence;\n                        for (int k = 0; (k < 4) && (ga
  * gb > 0); ++k) {\n                            ta += epsilon;\n                            interpolator.setInterpolatedTime(ta);\n
  \                           ga = handler.g(ta, interpolator.getInterpolatedState());\n
  \                       }\n                        if (ga * gb > 0) {\n                            //
  this should never happen\n                            throw MathRuntimeException.createInternalError(null);\n
  \                       }\n                    }\n                         \n                    //
  variation direction, with respect to the integration direction\n                    increasing
  = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction()
  {\n                        public double value(final double t) throws FunctionEvaluationException
  {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n
  \                               return handler.g(t, interpolator.getInterpolatedState());\n
  \                           } catch (DerivativeException e) {\n                                throw
  new FunctionEvaluationException(e, t);\n                            } catch (EventException
  e) {\n                                throw new FunctionEvaluationException(e, t);\n
  \                           }\n                        }\n                    };\n
  \                   final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n
  \                   solver.setMaximalIterationCount(maxIterationCount);\n                    final
  double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n
  \                   if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root
  - previousEventTime) <= convergence)) {\n                        // we have either
  found nothing or found (again ?) a past event, we simply ignore it\n                        ta
  = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime)
  ||\n                               (Math.abs(previousEventTime - root) > convergence))
  {\n                        pendingEventTime = root;\n                        if
  (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            //
  we were already waiting for this event which was\n                            //
  found during a previous call for a step that was\n                            //
  rejected, this step must now be accepted since it\n                            //
  properly ends exactly at the event occurrence\n                            return
  false;\n                        }\n                        // either we were not
  waiting for the event or it has\n                        // moved in such a way
  the step cannot be accepted\n                        pendingEvent = true;\n                        return
  true;\n                    }\n\n                } else {\n                    //
  no sign change: there is no event for now\n                    ta = tb;\n                    ga
  = gb;\n                }\n\n            } by for (int i = 0; i < n; ++i) {\n\n                //
  evaluate handler value at the end of the substep\n                tb += h;\n                interpolator.setInterpolatedTime(tb);\n
  \               final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n
  \               // check events occurrence\n                if (g0Positive ^ (gb
  >= 0)) {\n                    // there is a sign change: an event is expected during
  this step\n\n                        // this is a corner case:\n                        //
  - there was an event near ta,\n                        // - there is another event
  between ta and tb\n                        // - when ta was computed, convergence
  was reached on the \"wrong side\" of the interval\n                        // this
  implies that the real sign of ga is the same as gb, so we need to slightly\n                        //
  shift ta to make sure ga and gb get opposite signs and the solver won't complain\n
  \                       // about bracketing\n                            // this
  should never happen\n                         \n                    // variation
  direction, with respect to the integration direction\n                    increasing
  = gb >= ga;\n\n                    final UnivariateRealFunction f = new UnivariateRealFunction()
  {\n                        public double value(final double t) throws FunctionEvaluationException
  {\n                            try {\n                                interpolator.setInterpolatedTime(t);\n
  \                               return handler.g(t, interpolator.getInterpolatedState());\n
  \                           } catch (DerivativeException e) {\n                                throw
  new FunctionEvaluationException(e, t);\n                            } catch (EventException
  e) {\n                                throw new FunctionEvaluationException(e, t);\n
  \                           }\n                        }\n                    };\n
  \                   final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n
  \                   solver.setMaximalIterationCount(maxIterationCount);\n                    final
  double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n
  \                   if ((Math.abs(root - ta) <= convergence) &&\n                         (Math.abs(root
  - previousEventTime) <= convergence)) {\n                        // we have either
  found nothing or found (again ?) a past event, we simply ignore it\n                        ta
  = tb;\n                        ga = gb;\n                    } else if (Double.isNaN(previousEventTime)
  ||\n                               (Math.abs(previousEventTime - root) > convergence))
  {\n                        pendingEventTime = root;\n                        if
  (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            //
  we were already waiting for this event which was\n                            //
  found during a previous call for a step that was\n                            //
  rejected, this step must now be accepted since it\n                            //
  properly ends exactly at the event occurrence\n                            return
  false;\n                        }\n                        // either we were not
  waiting for the event or it has\n                        // moved in such a way
  the step cannot be accepted\n                        pendingEvent = true;\n                        return
  true;\n                    }\n\n                } else {\n                    //
  no sign change: there is no event for now\n                    ta = tb;\n                    ga
  = gb;\n                }\n\n            }\n\n"
