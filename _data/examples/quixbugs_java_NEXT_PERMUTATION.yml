---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: NEXT_PERMUTATION
        children: []
        pos: 224
        length: 16
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: next_permutation
              children: []
              pos: 280
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Integer> perm
                children: []
                pos: 297
                length: 23
              pos: 247
              length: 1144
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (int i=perm.size()-2; i!=-1; i--) {
                                if (perm.get(i) < perm.get(i+1)) {
                                    for (int j=perm.size()-1; j!=i; j--) {
                                        if (perm.get(j) < perm.get(i)) {
                                            ArrayList<Integer> next_perm = perm;
                                            int temp_j = perm.get(j);
                                            int temp_i = perm.get(i);
                                            next_perm.set(i,temp_j);
                                            next_perm.set(j,temp_i);

                                            ArrayList<Integer> reversed = new ArrayList<Integer>(100);
                                            for (int k=next_perm.size()-1; k!=i; k--) {
                                                reversed.add(next_perm.get(k));
                                            }

                                            int q = i + 1;
                                            for (Integer replace : reversed) {
                                                next_perm.set(q, replace);
                                                q++;
                                            }

                                            return next_perm;
                                        }
                                    }
                                }
                            }
                children: []
                pos: 332
                length: 1011
              - type: return_statement
                fields:
                  text: return new ArrayList<Integer>();
                children: []
                pos: 1353
                length: 32
              pos: 322
              length: 1069
          children: []
          pos: 247
          length: 1144
        pos: 211
        length: 1182
    children: []
    pos: 211
    length: 1182
  pos: 0
  length: 1394
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: NEXT_PERMUTATION
        children: []
        pos: 232
        length: 16
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: next_permutation
              children: []
              pos: 288
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Integer> perm
                children: []
                pos: 305
                length: 23
              pos: 255
              length: 1144
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (int i=perm.size()-2; i!=-1; i--) {
                                if (perm.get(i) < perm.get(i+1)) {
                                    for (int j=perm.size()-1; j!=i; j--) {
                                        if (perm.get(j) > perm.get(i)) {
                                            ArrayList<Integer> next_perm = perm;
                                            int temp_j = perm.get(j);
                                            int temp_i = perm.get(i);
                                            next_perm.set(i,temp_j);
                                            next_perm.set(j,temp_i);

                                            ArrayList<Integer> reversed = new ArrayList<Integer>(100);
                                            for (int k=next_perm.size()-1; k!=i; k--) {
                                                reversed.add(next_perm.get(k));
                                            }

                                            int q = i + 1;
                                            for (Integer replace : reversed) {
                                                next_perm.set(q, replace);
                                                q++;
                                            }

                                            return next_perm;
                                        }
                                    }
                                }
                            }
                children: []
                pos: 340
                length: 1011
              - type: return_statement
                fields:
                  text: return new ArrayList<Integer>();
                children: []
                pos: 1361
                length: 32
              pos: 330
              length: 1069
          children: []
          pos: 255
          length: 1144
        pos: 219
        length: 1182
    children: []
    pos: 219
    length: 1182
  pos: 0
  length: 1402
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n //import com.google.guava.Lists;\n
  \n@@ -16,7 +16,7 @@\n         for (int i=perm.size()-2; i!=-1; i--) {\n             if
  (perm.get(i) < perm.get(i+1)) {\n                 for (int j=perm.size()-1; j!=i;
  j--) {\n-                    if (perm.get(j) < perm.get(i)) {\n+                    if
  (perm.get(j) > perm.get(i)) {\n                         ArrayList<Integer> next_perm
  = perm;\n                         int temp_j = perm.get(j);\n                         int
  temp_i = perm.get(i);\n"
tree_diff: |+
  New cluster:
  UPDATE from for (int i=perm.size()-2; i!=-1; i--) {
              if (perm.get(i) < perm.get(i+1)) {
                  for (int j=perm.size()-1; j!=i; j--) {
                      if (perm.get(j) < perm.get(i)) {
                          ArrayList<Integer> next_perm = perm;
                          int temp_j = perm.get(j);
                          int temp_i = perm.get(i);
                          next_perm.set(i,temp_j);
                          next_perm.set(j,temp_i);

                          ArrayList<Integer> reversed = new ArrayList<Integer>(100);
                          for (int k=next_perm.size()-1; k!=i; k--) {
                              reversed.add(next_perm.get(k));
                          }

                          int q = i + 1;
                          for (Integer replace : reversed) {
                              next_perm.set(q, replace);
                              q++;
                          }

                          return next_perm;
                      }
                  }
              }
          } to for (int i=perm.size()-2; i!=-1; i--) {
              if (perm.get(i) < perm.get(i+1)) {
                  for (int j=perm.size()-1; j!=i; j--) {
                      if (perm.get(j) > perm.get(i)) {
                          ArrayList<Integer> next_perm = perm;
                          int temp_j = perm.get(j);
                          int temp_i = perm.get(i);
                          next_perm.set(i,temp_j);
                          next_perm.set(j,temp_i);

                          ArrayList<Integer> reversed = new ArrayList<Integer>(100);
                          for (int k=next_perm.size()-1; k!=i; k--) {
                              reversed.add(next_perm.get(k));
                          }

                          int q = i + 1;
                          for (Integer replace : reversed) {
                              next_perm.set(q, replace);
                              q++;
                          }

                          return next_perm;
                      }
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int i=perm.size()-2; i!=-1; i--) {
              if (perm.get(i) < perm.get(i+1)) {
                  for (int j=perm.size()-1; j!=i; j--) {
                      if (perm.get(j) < perm.get(i)) {
                          ArrayList<Integer> next_perm = perm;
                          int temp_j = perm.get(j);
                          int temp_i = perm.get(i);
                          next_perm.set(i,temp_j);
                          next_perm.set(j,temp_i);

                          ArrayList<Integer> reversed = new ArrayList<Integer>(100);
                          for (int k=next_perm.size()-1; k!=i; k--) {
                              reversed.add(next_perm.get(k));
                          }

                          int q = i + 1;
                          for (Integer replace : reversed) {
                              next_perm.set(q, replace);
                              q++;
                          }

                          return next_perm;
                      }
                  }
              }
          } [332,1343]
  replace for (int i=perm.size()-2; i!=-1; i--) {
              if (perm.get(i) < perm.get(i+1)) {
                  for (int j=perm.size()-1; j!=i; j--) {
                      if (perm.get(j) < perm.get(i)) {
                          ArrayList<Integer> next_perm = perm;
                          int temp_j = perm.get(j);
                          int temp_i = perm.get(i);
                          next_perm.set(i,temp_j);
                          next_perm.set(j,temp_i);

                          ArrayList<Integer> reversed = new ArrayList<Integer>(100);
                          for (int k=next_perm.size()-1; k!=i; k--) {
                              reversed.add(next_perm.get(k));
                          }

                          int q = i + 1;
                          for (Integer replace : reversed) {
                              next_perm.set(q, replace);
                              q++;
                          }

                          return next_perm;
                      }
                  }
              }
          } by for (int i=perm.size()-2; i!=-1; i--) {
              if (perm.get(i) < perm.get(i+1)) {
                  for (int j=perm.size()-1; j!=i; j--) {
                      if (perm.get(j) > perm.get(i)) {
                          ArrayList<Integer> next_perm = perm;
                          int temp_j = perm.get(j);
                          int temp_i = perm.get(i);
                          next_perm.set(i,temp_j);
                          next_perm.set(j,temp_i);

                          ArrayList<Integer> reversed = new ArrayList<Integer>(100);
                          for (int k=next_perm.size()-1; k!=i; k--) {
                              reversed.add(next_perm.get(k));
                          }

                          int q = i + 1;
                          for (Integer replace : reversed) {
                              next_perm.set(q, replace);
                              q++;
                          }

                          return next_perm;
                      }
                  }
              }
          }

...
