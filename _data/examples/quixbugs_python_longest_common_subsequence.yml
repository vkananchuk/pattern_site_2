---
language: python
before_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: longest_common_subsequence
        children: []
        pos: 4
        length: 26
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: a
          children: []
          pos: 31
          length: 1
        pos: 0
        length: 322
      body:
        type: block
        fields: {}
        children:
        - type: if_statement
          fields:
            condition:
              type: or
              fields:
                left:
                  type: not
                  fields:
                    argument:
                      type: identifier
                      fields:
                        text: a
                      children: []
                      pos: 49
                      length: 1
                  children: []
                  pos: 45
                  length: 5
                right:
                  type: not
                  fields:
                    argument:
                      type: identifier
                      fields:
                        text: b
                      children: []
                      pos: 58
                      length: 1
                  children: []
                  pos: 54
                  length: 5
              children: []
              pos: 45
              length: 14
          children:
          - type: block
            fields: {}
            children:
            - type: return_statement
              fields:
                text: return ''
              children: []
              pos: 69
              length: 9
            pos: 69
            length: 9
          - type: elif_clause
            fields:
              condition:
                type: equals
                fields:
                  left:
                    type: subscript
                    fields:
                      value:
                        type: identifier
                        fields:
                          text: a
                        children: []
                        pos: 89
                        length: 1
                      subscript:
                        type: integer
                        fields:
                          text: '0'
                        children: []
                        pos: 91
                        length: 1
                    children: []
                    pos: 89
                    length: 4
                  right:
                    type: subscript
                    fields:
                      value:
                        type: identifier
                        fields:
                          text: b
                        children: []
                        pos: 97
                        length: 1
                      subscript:
                        type: integer
                        fields:
                          text: '0'
                        children: []
                        pos: 99
                        length: 1
                    children: []
                    pos: 97
                    length: 4
                children: []
                pos: 89
                length: 12
              consequence:
                type: block
                fields: {}
                children:
                - type: return_statement
                  fields:
                    text: return a[0] + longest_common_subsequence(a[1:], b)
                  children: []
                  pos: 111
                  length: 50
                pos: 111
                length: 50
            children: []
            pos: 84
            length: 77
          - type: else_clause
            fields:
              body:
                type: block
                fields: {}
                children:
                - type: return_statement
                  fields:
                    text: |-
                      return max(
                                  longest_common_subsequence(a, b[1:]),
                                  longest_common_subsequence(a[1:], b),
                                  key=len
                              )
                  children: []
                  pos: 181
                  length: 141
                pos: 181
                length: 141
            children: []
            pos: 167
            length: 155
          pos: 42
          length: 280
        pos: 42
        length: 280
    children: []
    pos: 0
    length: 322
  pos: 0
  length: 323
after_tree:
  type: child
  fields: {}
  children:
  - type: method_declaration
    fields:
      name:
        type: identifier
        fields:
          text: longest_common_subsequence
        children: []
        pos: 4
        length: 26
      parameters:
        type: method_parameters
        fields: {}
        children:
        - type: identifier
          fields:
            text: a
          children: []
          pos: 31
          length: 1
        pos: 0
        length: 326
      body:
        type: block
        fields: {}
        children:
        - type: if_statement
          fields:
            condition:
              type: or
              fields:
                left:
                  type: not
                  fields:
                    argument:
                      type: identifier
                      fields:
                        text: a
                      children: []
                      pos: 49
                      length: 1
                  children: []
                  pos: 45
                  length: 5
                right:
                  type: not
                  fields:
                    argument:
                      type: identifier
                      fields:
                        text: b
                      children: []
                      pos: 58
                      length: 1
                  children: []
                  pos: 54
                  length: 5
              children: []
              pos: 45
              length: 14
          children:
          - type: block
            fields: {}
            children:
            - type: return_statement
              fields:
                text: return ''
              children: []
              pos: 69
              length: 9
            pos: 69
            length: 9
          - type: elif_clause
            fields:
              condition:
                type: equals
                fields:
                  left:
                    type: subscript
                    fields:
                      value:
                        type: identifier
                        fields:
                          text: a
                        children: []
                        pos: 89
                        length: 1
                      subscript:
                        type: integer
                        fields:
                          text: '0'
                        children: []
                        pos: 91
                        length: 1
                    children: []
                    pos: 89
                    length: 4
                  right:
                    type: subscript
                    fields:
                      value:
                        type: identifier
                        fields:
                          text: b
                        children: []
                        pos: 97
                        length: 1
                      subscript:
                        type: integer
                        fields:
                          text: '0'
                        children: []
                        pos: 99
                        length: 1
                    children: []
                    pos: 97
                    length: 4
                children: []
                pos: 89
                length: 12
              consequence:
                type: block
                fields: {}
                children:
                - type: return_statement
                  fields:
                    text: return a[0] + longest_common_subsequence(a[1:], b[1:])
                  children: []
                  pos: 111
                  length: 54
                pos: 111
                length: 54
            children: []
            pos: 84
            length: 81
          - type: else_clause
            fields:
              body:
                type: block
                fields: {}
                children:
                - type: return_statement
                  fields:
                    text: |-
                      return max(
                                  longest_common_subsequence(a, b[1:]),
                                  longest_common_subsequence(a[1:], b),
                                  key=len
                              )
                  children: []
                  pos: 185
                  length: 141
                pos: 185
                length: 141
            children: []
            pos: 171
            length: 155
          pos: 42
          length: 284
        pos: 42
        length: 284
    children: []
    pos: 0
    length: 326
  pos: 0
  length: 327
text_diff: "--- before\n+++ after\n@@ -3,7 +3,7 @@\n         return ''\n \n     elif
  a[0] == b[0]:\n-        return a[0] + longest_common_subsequence(a[1:], b)\n+        return
  a[0] + longest_common_subsequence(a[1:], b[1:])\n \n     else:\n         return
  max(\n"
tree_diff: |+
  New cluster:
  UPDATE from return a[0] + longest_common_subsequence(a[1:], b) to return a[0] + longest_common_subsequence(a[1:], b[1:])
  ------------
  ===
  update-node
  ---
  return_statement: return a[0] + longest_common_subsequence(a[1:], b) [111,161]
  replace return a[0] + longest_common_subsequence(a[1:], b) by return a[0] + longest_common_subsequence(a[1:], b[1:])

...
