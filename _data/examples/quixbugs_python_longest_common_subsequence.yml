---
language: python
text_diff: "--- before\n+++ after\n@@ -1,9 +1,10 @@\n+\n def longest_common_subsequence(a,
  b):\n     if not a or not b:\n         return ''\n \n     elif a[0] == b[0]:\n-
  \       return a[0] + longest_common_subsequence(a[1:], b)\n+        return a[0]
  + longest_common_subsequence(a[1:], b[1:])\n \n     else:\n         return max(\n@@
  -12,23 +13,3 @@\n             key=len\n         )\n \n-\n-\n-\"\"\"\n-Longest Common
  Subsequence\n-\n-\n-Calculates the longest subsequence common to the two input strings.
  (A subsequence is any sequence of letters in the same order\n-they appear in the
  string, possibly skipping letters in between.)\n-\n-Input:\n-    a: The first string
  to consider.\n-    b: The second string to consider.\n-\n-Output:\n-    The longest
  string which is a subsequence of both strings. (If multiple subsequences of equal
  length exist, either is OK.)\n-\n-Example:\n-    >>> longest_common_subsequence('headache',
  'pentadactyl')\n-    'eadac'\n-\"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from return a[0] + longest_common_subsequence(a[1:], b) to return a[0] + longest_common_subsequence(a[1:], b[1:])
  ------------
  ===
  update-node
  ---
  return_statement: return a[0] + longest_common_subsequence(a[1:], b) [111,161]
  replace return a[0] + longest_common_subsequence(a[1:], b) by return a[0] + longest_common_subsequence(a[1:], b[1:])

  New cluster:
  ===
  delete-node
  ---
  expression_statement: """
  Longest Common Subsequence


  Calculates the longest subsequence common to the two input strings. (A subsequence is any sequence of letters in the same order
  they appear in the string, possibly skipping letters in between.)

  Input:
      a: The first string to consider.
      b: The second string to consider.

  Output:
      The longest string which is a subsequence of both strings. (If multiple subsequences of equal length exist, either is OK.)

  Example:
      >>> longest_common_subsequence('headache', 'pentadactyl')
      'eadac'
  """ [326,859]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: """
  Longest Common Subsequence


  Calculates the longest subsequence common to the two input strings. (A subsequence is any sequence of letters in the same order
  they appear in the string, possibly skipping letters in between.)

  Input:
      a: The first string to consider.
      b: The second string to consider.

  Output:
      The longest string which is a subsequence of both strings. (If multiple subsequences of equal length exist, either is OK.)

  Example:
      >>> longest_common_subsequence('headache', 'pentadactyl')
      'eadac'
  """ [326,859]
  ===

...
