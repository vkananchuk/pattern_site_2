---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: QUICKSORT
        children: []
        pos: 191
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: quicksort
              children: []
              pos: 240
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Integer> arr
                children: []
                pos: 250
                length: 22
              pos: 207
              length: 778
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: arr.isEmpty()
                        children: []
                        pos: 288
                        length: 13
                    children: []
                    pos: 287
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return new ArrayList<Integer>();
                    children: []
                    pos: 317
                    length: 32
                  pos: 303
                  length: 56
                pos: 284
                length: 75
              - type: local_variable_declaration
                fields:
                  text: Integer pivot = arr.get(0);
                children: []
                pos: 369
                length: 27
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> lesser = new ArrayList<Integer>();
                children: []
                pos: 405
                length: 53
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> greater = new ArrayList<Integer>();
                children: []
                pos: 467
                length: 54
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer x : arr.subList(1, arr.size())) {
                                if (x < pivot) {
                                    lesser.add(x);
                                } else if (x > pivot) {
                                    greater.add(x);
                                }
                            }
                children: []
                pos: 531
                length: 198
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> middle = new ArrayList<Integer>();
                children: []
                pos: 738
                length: 53
              - type: expression_statement
                fields:
                  text: middle.add(pivot);
                children: []
                pos: 800
                length: 18
              - type: expression_statement
                fields:
                  text: lesser = quicksort(lesser);
                children: []
                pos: 827
                length: 27
              - type: expression_statement
                fields:
                  text: greater = quicksort(greater);
                children: []
                pos: 863
                length: 29
              - type: expression_statement
                fields:
                  text: middle.addAll(greater);
                children: []
                pos: 901
                length: 23
              - type: expression_statement
                fields:
                  text: lesser.addAll(middle);
                children: []
                pos: 933
                length: 22
              - type: return_statement
                fields:
                  text: return lesser;
                children: []
                pos: 964
                length: 14
              pos: 274
              length: 711
          children: []
          pos: 207
          length: 778
        pos: 178
        length: 809
    children: []
    pos: 178
    length: 809
  pos: 0
  length: 988
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: QUICKSORT
        children: []
        pos: 199
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: quicksort
              children: []
              pos: 248
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Integer> arr
                children: []
                pos: 258
                length: 22
              pos: 215
              length: 779
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: arr.isEmpty()
                        children: []
                        pos: 296
                        length: 13
                    children: []
                    pos: 295
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return new ArrayList<Integer>();
                    children: []
                    pos: 325
                    length: 32
                  pos: 311
                  length: 56
                pos: 292
                length: 75
              - type: local_variable_declaration
                fields:
                  text: Integer pivot = arr.get(0);
                children: []
                pos: 377
                length: 27
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> lesser = new ArrayList<Integer>();
                children: []
                pos: 413
                length: 53
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> greater = new ArrayList<Integer>();
                children: []
                pos: 475
                length: 54
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer x : arr.subList(1, arr.size())) {
                                if (x < pivot) {
                                    lesser.add(x);
                                } else if (x >= pivot) {
                                    greater.add(x);
                                }
                            }
                children: []
                pos: 539
                length: 199
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> middle = new ArrayList<Integer>();
                children: []
                pos: 747
                length: 53
              - type: expression_statement
                fields:
                  text: middle.add(pivot);
                children: []
                pos: 809
                length: 18
              - type: expression_statement
                fields:
                  text: lesser = quicksort(lesser);
                children: []
                pos: 836
                length: 27
              - type: expression_statement
                fields:
                  text: greater = quicksort(greater);
                children: []
                pos: 872
                length: 29
              - type: expression_statement
                fields:
                  text: middle.addAll(greater);
                children: []
                pos: 910
                length: 23
              - type: expression_statement
                fields:
                  text: lesser.addAll(middle);
                children: []
                pos: 942
                length: 22
              - type: return_statement
                fields:
                  text: return lesser;
                children: []
                pos: 973
                length: 14
              pos: 282
              length: 712
          children: []
          pos: 215
          length: 779
        pos: 186
        length: 810
    children: []
    pos: 186
    length: 810
  pos: 0
  length: 997
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n /*\n@@ -23,7 +23,7 @@\n         for
  (Integer x : arr.subList(1, arr.size())) {\n             if (x < pivot) {\n                 lesser.add(x);\n-
  \           } else if (x > pivot) {\n+            } else if (x >= pivot) {\n                 greater.add(x);\n
  \            }\n         }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (Integer x : arr.subList(1, arr.size())) {
              if (x < pivot) {
                  lesser.add(x);
              } else if (x > pivot) {
                  greater.add(x);
              }
          } to for (Integer x : arr.subList(1, arr.size())) {
              if (x < pivot) {
                  lesser.add(x);
              } else if (x >= pivot) {
                  greater.add(x);
              }
          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Integer x : arr.subList(1, arr.size())) {
              if (x < pivot) {
                  lesser.add(x);
              } else if (x > pivot) {
                  greater.add(x);
              }
          } [531,729]
  replace for (Integer x : arr.subList(1, arr.size())) {
              if (x < pivot) {
                  lesser.add(x);
              } else if (x > pivot) {
                  greater.add(x);
              }
          } by for (Integer x : arr.subList(1, arr.size())) {
              if (x < pivot) {
                  lesser.add(x);
              } else if (x >= pivot) {
                  greater.add(x);
              }
          }

...
