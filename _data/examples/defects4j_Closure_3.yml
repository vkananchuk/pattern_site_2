---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: FlowSensitiveInlineVariables
        children: []
        pos: 2434
        length: 28
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 3042
          length: 40
        - type: field_declaration
          fields:
            text: private final Set<Var> inlinedNewDependencies = Sets.newHashSet();
          children: []
          pos: 3085
          length: 66
        - type: field_declaration
          fields:
            text: private ControlFlowGraph<Node> cfg;
          children: []
          pos: 3243
          length: 35
        - type: field_declaration
          fields:
            text: private List<Candidate> candidates;
          children: []
          pos: 3281
          length: 35
        - type: field_declaration
          fields:
            text: private MustBeReachingVariableDef reachingDef;
          children: []
          pos: 3319
          length: 46
        - type: field_declaration
          fields:
            text: private MaybeReachingVariableUse reachingUses;
          children: []
          pos: 3368
          length: 46
        - type: field_declaration
          fields:
            text: |-
              private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
                  new Predicate<Node>() {
                    @Override
                    public boolean apply(Node n) {
                      // When the node is null it means, we reached the implicit return
                      // where the function returns (possibly without an return statement)
                      if (n == null) {
                        return false;
                      }

                      // TODO(user): We only care about calls to functions that
                      // passes one of the dependent variable to a non-side-effect free
                      // function.
                      if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
                        return true;
                      }

                      if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
                        return true;
                      }

                      if (n.isDelProp()) {
                        return true;
                      }

                      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
                          return true;
                        }
                      }
                      return false;
                    }
                };
          children: []
          pos: 3418
          length: 1006
        - type: constructor_declaration
          fields:
            text: |-
              public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
                  this.compiler = compiler;
                }
          children: []
          pos: 4428
          length: 98
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: enterScope
              children: []
              pos: 4554
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 4565
                length: 15
              pos: 4530
              length: 1782
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: t.inGlobalScope()
                        children: []
                        pos: 4593
                        length: 17
                    children: []
                    pos: 4592
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 4620
                    length: 7
                  pos: 4612
                  length: 85
                pos: 4589
                length: 108
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE
                            children: []
                            pos: 4707
                            length: 46
                          right:
                            type: method_invocation
                            fields:
                              text: t.getScope().getVarCount()
                            children: []
                            pos: 4764
                            length: 26
                        children: []
                        pos: 4707
                        length: 83
                    children: []
                    pos: 4706
                    length: 85
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 4800
                    length: 7
                  pos: 4792
                  length: 21
                pos: 4703
                length: 110
              - type: local_variable_declaration
                fields:
                  text: ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler,
                    false, true);
                children: []
                pos: 4867
                length: 73
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(t.getScopeRoot().isFunction());
                children: []
                pos: 4986
                length: 56
              - type: expression_statement
                fields:
                  text: cfa.process(null, t.getScopeRoot().getLastChild());
                children: []
                pos: 5047
                length: 51
              - type: expression_statement
                fields:
                  text: cfg = cfa.getCfg();
                children: []
                pos: 5103
                length: 19
              - type: expression_statement
                fields:
                  text: reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(),
                    compiler);
                children: []
                pos: 5127
                length: 73
              - type: expression_statement
                fields:
                  text: reachingDef.analyze();
                children: []
                pos: 5205
                length: 22
              - type: expression_statement
                fields:
                  text: candidates = Lists.newLinkedList();
                children: []
                pos: 5232
                length: 35
              - type: expression_statement
                fields:
                  text: |-
                    new NodeTraversal(compiler, new GatherCandiates()).traverse(
                            t.getScopeRoot().getLastChild());
                children: []
                pos: 5366
                length: 102
              - type: expression_statement
                fields:
                  text: reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(),
                    compiler);
                children: []
                pos: 5539
                length: 73
              - type: expression_statement
                fields:
                  text: reachingUses.analyze();
                children: []
                pos: 5617
                length: 23
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Candidate c : candidates) {
                          if (c.canInline(t.getScope())) {
                            c.inlineVariable();

                            // If definition c has dependencies, then inlining it may have
                            // introduced new dependencies for our other inlining candidates.
                            //
                            // MustBeReachingVariableDef uses this dependency graph in its
                            // analysis, so some of these candidates may no longer be valid.
                            // We keep track of when the variable dependency graph changed
                            // so that we can back off appropriately.
                            if (!c.defMetadata.depends.isEmpty()) {
                              inlinedNewDependencies.add(t.getScope().getVar(c.varName));
                            }
                          }
                        }
                children: []
                pos: 5645
                length: 663
              pos: 4582
              length: 1730
          children: []
          pos: 4530
          length: 1782
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exitScope
              children: []
              pos: 6340
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 6350
                length: 15
              pos: 6316
              length: 53
            body:
              type: block
              fields: {}
              children: []
              pos: 6367
              length: 2
          children: []
          pos: 6316
          length: 53
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 6397
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 6405
                length: 12
              pos: 6373
              length: 132
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: "(new NodeTraversal(compiler, this)).traverseRoots(externs,
                    root);"
                children: []
                pos: 6436
                length: 65
              pos: 6430
              length: 75
          children: []
          pos: 6373
          length: 132
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 6533
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 6539
                length: 15
              pos: 6509
              length: 380
            body:
              type: block
              fields: {}
              children: []
              pos: 6577
              length: 312
          children: []
          pos: 6509
          length: 380
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: GatherCandiates
              children: []
              pos: 7269
              length: 15
            body:
              type: class_body
              fields: {}
              children:
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: visit
                    children: []
                    pos: 7349
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 7355
                      length: 15
                    pos: 7323
                    length: 1697
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode(n);
                      children: []
                      pos: 7401
                      length: 66
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: graphNode
                                  children: []
                                  pos: 7478
                                  length: 9
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 7491
                                  length: 4
                              children: []
                              pos: 7478
                              length: 17
                          children: []
                          pos: 7477
                          length: 19
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return;
                          children: []
                          pos: 7534
                          length: 7
                        pos: 7497
                        length: 52
                      pos: 7474
                      length: 75
                    - type: local_variable_declaration
                      fields:
                        text: FlowState<MustDef> state = graphNode.getAnnotation();
                      children: []
                      pos: 7556
                      length: 53
                    - type: local_variable_declaration
                      fields:
                        text: final MustDef defs = state.getIn();
                      children: []
                      pos: 7616
                      length: 35
                    - type: local_variable_declaration
                      fields:
                        text: final Node cfgNode = n;
                      children: []
                      pos: 7658
                      length: 23
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                    new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    if (n.isName()) {

                                      // n.getParent() isn't null. This just the case where n is the root
                                      // node that gatherCb started at.
                                      if (parent == null) {
                                        return;
                                      }

                                      // Make sure that the name node is purely a read.
                                      if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)
                                          || parent.isVar() || parent.isInc() || parent.isDec() ||
                                          parent.isParamList() || parent.isCatch()) {
                                        return;
                                      }

                                      String name = n.getString();
                                      if (compiler.getCodingConvention().isExported(name)) {
                                        return;
                                      }

                                      Definition def = reachingDef.getDef(name, cfgNode);
                                      // TODO(nicksantos): We need to add some notion of @const outer
                                      // scope vars. We can inline those just fine.
                                      if (def != null &&
                                          !reachingDef.dependsOnOuterScopeVars(def)) {
                                        candidates.add(new Candidate(name, def, n, cfgNode));
                                      }
                                    }
                                  }
                                };
                      children: []
                      pos: 7688
                      length: 1266
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, cfgNode, gatherCb);
                      children: []
                      pos: 8962
                      length: 52
                    pos: 7393
                    length: 1627
                children: []
                pos: 7323
                length: 1697
              pos: 7255
              length: 1769
          children: []
          pos: 7255
          length: 1769
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: Candidate
              children: []
              pos: 9132
              length: 9
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final String varName;
                children: []
                pos: 9178
                length: 29
              - type: field_declaration
                fields:
                  text: private Node def;
                children: []
                pos: 9253
                length: 17
              - type: field_declaration
                fields:
                  text: private final Definition defMetadata;
                children: []
                pos: 9275
                length: 37
              - type: field_declaration
                fields:
                  text: private final Node use;
                children: []
                pos: 9351
                length: 23
              - type: field_declaration
                fields:
                  text: private final Node useCfgNode;
                children: []
                pos: 9379
                length: 30
              - type: field_declaration
                fields:
                  text: private int numUseWithinUseCfgNode;
                children: []
                pos: 9517
                length: 35
              - type: constructor_declaration
                fields:
                  text: |-
                    Candidate(String varName, Definition defMetadata,
                            Node use, Node useCfgNode) {
                          Preconditions.checkArgument(use.isName());
                          this.varName = varName;
                          this.defMetadata = defMetadata;
                          this.use = use;
                          this.useCfgNode = useCfgNode;
                        }
                children: []
                pos: 9558
                length: 267
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getDefCfgNode
                    children: []
                    pos: 9844
                    length: 13
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 9831
                    length: 67
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return defMetadata.node;
                      children: []
                      pos: 9868
                      length: 24
                    pos: 9860
                    length: 38
                children: []
                pos: 9831
                length: 67
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: canInline
                    children: []
                    pos: 9920
                    length: 9
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: final Scope scope
                      children: []
                      pos: 9930
                      length: 17
                    pos: 9904
                    length: 4969
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: getDefCfgNode().isFunction()
                              children: []
                              pos: 9997
                              length: 28
                          children: []
                          pos: 9996
                          length: 30
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10037
                          length: 13
                        pos: 10027
                        length: 31
                      pos: 9993
                      length: 65
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Var dependency : defMetadata.depends) {
                                  if (inlinedNewDependencies.contains(dependency)) {
                                    return false;
                                  }
                                }
                      children: []
                      pos: 10255
                      length: 145
                    - type: expression_statement
                      fields:
                        text: getDefinition(getDefCfgNode(), null);
                      children: []
                      pos: 10408
                      length: 37
                    - type: expression_statement
                      fields:
                        text: getNumUseInUseCfgNode(useCfgNode, null);
                      children: []
                      pos: 10452
                      length: 40
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: def
                                  children: []
                                  pos: 10539
                                  length: 3
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 10546
                                  length: 4
                              children: []
                              pos: 10539
                              length: 11
                          children: []
                          pos: 10538
                          length: 13
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10562
                          length: 13
                        pos: 10552
                        length: 31
                      pos: 10535
                      length: 48
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: def.isAssign()
                                  children: []
                                  pos: 10711
                                  length: 14
                                right:
                                  type: unary_expression
                                  fields:
                                    text: "!NodeUtil.isExprAssign(def.getParent())"
                                  children: []
                                  pos: 10729
                                  length: 39
                              children: []
                              pos: 10711
                              length: 57
                          children: []
                          pos: 10710
                          length: 59
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10780
                          length: 13
                        pos: 10770
                        length: 31
                      pos: 10707
                      length: 94
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: checkRightOf(def, getDefCfgNode(), SIDE_EFFECT_PREDICATE)
                              children: []
                              pos: 10943
                              length: 57
                          children: []
                          pos: 10942
                          length: 59
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 11012
                          length: 13
                        pos: 11002
                        length: 31
                      pos: 10939
                      length: 94
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)
                              children: []
                              pos: 11213
                              length: 51
                          children: []
                          pos: 11212
                          length: 53
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 11276
                          length: 13
                        pos: 11266
                        length: 31
                      pos: 11209
                      length: 88
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: NodeUtil.mayHaveSideEffects(def.getLastChild(),
                                  compiler)
                              children: []
                              pos: 11497
                              length: 57
                          children: []
                          pos: 11496
                          length: 59
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 11566
                          length: 13
                        pos: 11556
                        length: 31
                      pos: 11493
                      length: 94
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: numUseWithinUseCfgNode
                                  children: []
                                  pos: 11881
                                  length: 22
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '1'
                                  children: []
                                  pos: 11907
                                  length: 1
                              children: []
                              pos: 11881
                              length: 27
                          children: []
                          pos: 11880
                          length: 29
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 11920
                          length: 13
                        pos: 11910
                        length: 31
                      pos: 11877
                      length: 64
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: NodeUtil.isWithinLoop(use)
                              children: []
                              pos: 12007
                              length: 26
                          children: []
                          pos: 12006
                          length: 28
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 12045
                          length: 13
                        pos: 12035
                        length: 31
                      pos: 12003
                      length: 63
                    - type: local_variable_declaration
                      fields:
                        text: Collection<Node> uses = reachingUses.getUses(varName,
                          getDefCfgNode());
                      children: []
                      pos: 12075
                      length: 71
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: uses.size()
                                  children: []
                                  pos: 12158
                                  length: 11
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '1'
                                  children: []
                                  pos: 12173
                                  length: 1
                              children: []
                              pos: 12158
                              length: 16
                          children: []
                          pos: 12157
                          length: 18
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 12186
                          length: 13
                        pos: 12176
                        length: 31
                      pos: 12154
                      length: 53
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: |-
                                  NodeUtil.has(def.getLastChild(),
                                            new Predicate<Node>() {
                                                @Override
                                                public boolean apply(Node input) {
                                                  switch (input.getType()) {
                                                    case Token.GETELEM:
                                                    case Token.GETPROP:
                                                    case Token.ARRAYLIT:
                                                    case Token.OBJECTLIT:
                                                    case Token.REGEXP:
                                                    case Token.NEW:
                                                      return true;
                                                    case Token.NAME:
                                                      Var var = scope.getOwnSlot(input.getString());
                                                      if (var != null
                                                          && var.getParentNode().isCatch()) {
                                                        return true;
                                                      }
                                                  }
                                                  return false;
                                                }
                                            },
                                            new Predicate<Node>() {
                                                @Override
                                                public boolean apply(Node input) {
                                                  // Recurse if the node is not a function.
                                                  return !input.isFunction();
                                                }
                                            })
                              children: []
                              pos: 12835
                              length: 1011
                          children: []
                          pos: 12834
                          length: 1013
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 13858
                          length: 13
                        pos: 13848
                        length: 31
                      pos: 12831
                      length: 1048
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: NodeUtil.isStatementBlock(getDefCfgNode().getParent())
                                  children: []
                                  pos: 14009
                                  length: 54
                                right:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: method_invocation
                                      fields:
                                        text: getDefCfgNode().getNext()
                                      children: []
                                      pos: 14077
                                      length: 25
                                    right:
                                      type: identifier
                                      fields:
                                        text: useCfgNode
                                      children: []
                                      pos: 14106
                                      length: 10
                                  children: []
                                  pos: 14077
                                  length: 39
                              children: []
                              pos: 14009
                              length: 107
                          children: []
                          pos: 14008
                          length: 109
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: |-
                              CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>
                                        pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(
                                               cfg,
                                               cfg.getDirectedGraphNode(getDefCfgNode()),
                                               cfg.getDirectedGraphNode(useCfgNode),
                                               SIDE_EFFECT_PREDICATE,
                                               Predicates.
                                                   <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                                               false);
                          children: []
                          pos: 14308
                          length: 444
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: method_invocation
                                  fields:
                                    text: pathCheck.somePathsSatisfyPredicate()
                                  children: []
                                  pos: 14765
                                  length: 37
                              children: []
                              pos: 14764
                              length: 39
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: return_statement
                              fields:
                                text: return false;
                              children: []
                              pos: 14816
                              length: 13
                            pos: 14804
                            length: 35
                          pos: 14761
                          length: 78
                        pos: 14118
                        length: 729
                      pos: 14005
                      length: 842
                    - type: return_statement
                      fields:
                        text: return true;
                      children: []
                      pos: 14855
                      length: 12
                    pos: 9949
                    length: 4924
                children: []
                pos: 9904
                length: 4969
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: inlineVariable
                    children: []
                    pos: 14938
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 14925
                    length: 803
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node defParent = def.getParent();
                      children: []
                      pos: 14963
                      length: 33
                    - type: local_variable_declaration
                      fields:
                        text: Node useParent = use.getParent();
                      children: []
                      pos: 15003
                      length: 33
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: def.isAssign()
                              children: []
                              pos: 15047
                              length: 14
                          children: []
                          pos: 15046
                          length: 16
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: Node rhs = def.getLastChild();
                          children: []
                          pos: 15073
                          length: 30
                        - type: expression_statement
                          fields:
                            text: rhs.detachFromParent();
                          children: []
                          pos: 15112
                          length: 23
                        - type: expression_statement
                          fields:
                            text: Preconditions.checkState(defParent.isExprResult());
                          children: []
                          pos: 15198
                          length: 51
                        - type: while_statement
                          fields:
                            text: |-
                              while (defParent.getParent().isLabel()) {
                                        defParent = defParent.getParent();
                                      }
                          children: []
                          pos: 15258
                          length: 96
                        - type: expression_statement
                          fields:
                            text: defParent.detachFromParent();
                          children: []
                          pos: 15363
                          length: 29
                        - type: expression_statement
                          fields:
                            text: useParent.replaceChild(use, rhs);
                          children: []
                          pos: 15401
                          length: 33
                        pos: 15063
                        length: 379
                      pos: 15043
                      length: 644
                    - type: expression_statement
                      fields:
                        text: compiler.reportCodeChange();
                      children: []
                      pos: 15694
                      length: 28
                    pos: 14955
                    length: 773
                children: []
                pos: 14925
                length: 803
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getDefinition
                    children: []
                    pos: 15863
                    length: 13
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 15877
                      length: 6
                    pos: 15850
                    length: 726
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                  new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    switch (n.getType()) {
                                      case Token.NAME:
                                        if (n.getString().equals(varName) && n.hasChildren()) {
                                          def = n;
                                        }
                                        return;

                                      case Token.ASSIGN:
                                        Node lhs = n.getFirstChild();
                                        if (lhs.isName() && lhs.getString().equals(varName)) {
                                          def = n;
                                        }
                                        return;
                                    }
                                  }
                                };
                      children: []
                      pos: 15906
                      length: 611
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, n, gatherCb);
                      children: []
                      pos: 16524
                      length: 46
                    pos: 15898
                    length: 678
                children: []
                pos: 15850
                length: 726
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getNumUseInUseCfgNode
                    children: []
                    pos: 16717
                    length: 21
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 16739
                      length: 6
                    pos: 16704
                    length: 599
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                    new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    if (n.isName() && n.getString().equals(varName) &&
                                        // do not count in if it is left child of an assignment operator
                                        !(parent.isAssign() &&
                                         (parent.getFirstChild() == n))) {
                                      numUseWithinUseCfgNode++;
                                    }
                                  }
                                };
                      children: []
                      pos: 16769
                      length: 474
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, n, gatherCb);
                      children: []
                      pos: 17251
                      length: 46
                    pos: 16760
                    length: 543
                children: []
                pos: 16704
                length: 599
              pos: 9118
              length: 8189
          children: []
          pos: 9118
          length: 8189
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkRightOf
              children: []
              pos: 17574
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 17594
                length: 6
              pos: 17551
              length: 339
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node p = n; p != expressionRoot; p = p.getParent()) {
                          for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {
                            if (predicate.apply(cur)) {
                              return true;
                            }
                          }
                        }
                children: []
                pos: 17656
                length: 212
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 17873
                length: 13
              pos: 17650
              length: 240
          children: []
          pos: 17551
          length: 339
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkLeftOf
              children: []
              pos: 18156
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 18175
                length: 6
              pos: 18133
              length: 375
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
                          for (Node cur = p.getParent().getFirstChild(); cur != p;
                              cur = cur.getNext()) {
                            if (predicate.apply(cur)) {
                              return true;
                            }
                          }
                        }
                children: []
                pos: 18237
                length: 249
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 18491
                length: 13
              pos: 18231
              length: 277
          children: []
          pos: 18133
          length: 375
        pos: 2428
        length: 16082
    children: []
    pos: 2428
    length: 16082
  pos: 0
  length: 18511
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: FlowSensitiveInlineVariables
        children: []
        pos: 2434
        length: 28
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 3042
          length: 40
        - type: field_declaration
          fields:
            text: private final Set<Var> inlinedNewDependencies = Sets.newHashSet();
          children: []
          pos: 3085
          length: 66
        - type: field_declaration
          fields:
            text: private ControlFlowGraph<Node> cfg;
          children: []
          pos: 3243
          length: 35
        - type: field_declaration
          fields:
            text: private List<Candidate> candidates;
          children: []
          pos: 3281
          length: 35
        - type: field_declaration
          fields:
            text: private MustBeReachingVariableDef reachingDef;
          children: []
          pos: 3319
          length: 46
        - type: field_declaration
          fields:
            text: private MaybeReachingVariableUse reachingUses;
          children: []
          pos: 3368
          length: 46
        - type: field_declaration
          fields:
            text: |-
              private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
                  new Predicate<Node>() {
                    @Override
                    public boolean apply(Node n) {
                      // When the node is null it means, we reached the implicit return
                      // where the function returns (possibly without an return statement)
                      if (n == null) {
                        return false;
                      }

                      // TODO(user): We only care about calls to functions that
                      // passes one of the dependent variable to a non-side-effect free
                      // function.
                      if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
                        return true;
                      }

                      if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
                        return true;
                      }

                      if (n.isDelProp()) {
                        return true;
                      }

                      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
                          return true;
                        }
                      }
                      return false;
                    }
                };
          children: []
          pos: 3418
          length: 1006
        - type: constructor_declaration
          fields:
            text: |-
              public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
                  this.compiler = compiler;
                }
          children: []
          pos: 4428
          length: 98
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: enterScope
              children: []
              pos: 4554
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 4565
                length: 15
              pos: 4530
              length: 1770
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: t.inGlobalScope()
                        children: []
                        pos: 4593
                        length: 17
                    children: []
                    pos: 4592
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 4620
                    length: 7
                  pos: 4612
                  length: 85
                pos: 4589
                length: 108
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE
                            children: []
                            pos: 4707
                            length: 46
                          right:
                            type: method_invocation
                            fields:
                              text: t.getScope().getVarCount()
                            children: []
                            pos: 4764
                            length: 26
                        children: []
                        pos: 4707
                        length: 83
                    children: []
                    pos: 4706
                    length: 85
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 4800
                    length: 7
                  pos: 4792
                  length: 21
                pos: 4703
                length: 110
              - type: local_variable_declaration
                fields:
                  text: ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler,
                    false, true);
                children: []
                pos: 4867
                length: 73
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(t.getScopeRoot().isFunction());
                children: []
                pos: 4986
                length: 56
              - type: expression_statement
                fields:
                  text: cfa.process(null, t.getScopeRoot().getLastChild());
                children: []
                pos: 5047
                length: 51
              - type: expression_statement
                fields:
                  text: cfg = cfa.getCfg();
                children: []
                pos: 5103
                length: 19
              - type: expression_statement
                fields:
                  text: reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(),
                    compiler);
                children: []
                pos: 5127
                length: 73
              - type: expression_statement
                fields:
                  text: reachingDef.analyze();
                children: []
                pos: 5205
                length: 22
              - type: expression_statement
                fields:
                  text: candidates = Lists.newLinkedList();
                children: []
                pos: 5232
                length: 35
              - type: expression_statement
                fields:
                  text: |-
                    new NodeTraversal(compiler, new GatherCandiates()).traverse(
                            t.getScopeRoot().getLastChild());
                children: []
                pos: 5366
                length: 102
              - type: expression_statement
                fields:
                  text: reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(),
                    compiler);
                children: []
                pos: 5539
                length: 73
              - type: expression_statement
                fields:
                  text: reachingUses.analyze();
                children: []
                pos: 5617
                length: 23
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Candidate c : candidates) {
                          if (c.canInline()) {
                            c.inlineVariable();

                            // If definition c has dependencies, then inlining it may have
                            // introduced new dependencies for our other inlining candidates.
                            //
                            // MustBeReachingVariableDef uses this dependency graph in its
                            // analysis, so some of these candidates may no longer be valid.
                            // We keep track of when the variable dependency graph changed
                            // so that we can back off appropriately.
                            if (!c.defMetadata.depends.isEmpty()) {
                              inlinedNewDependencies.add(t.getScope().getVar(c.varName));
                            }
                          }
                        }
                children: []
                pos: 5645
                length: 651
              pos: 4582
              length: 1718
          children: []
          pos: 4530
          length: 1770
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exitScope
              children: []
              pos: 6328
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 6338
                length: 15
              pos: 6304
              length: 53
            body:
              type: block
              fields: {}
              children: []
              pos: 6355
              length: 2
          children: []
          pos: 6304
          length: 53
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 6385
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 6393
                length: 12
              pos: 6361
              length: 132
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: "(new NodeTraversal(compiler, this)).traverseRoots(externs,
                    root);"
                children: []
                pos: 6424
                length: 65
              pos: 6418
              length: 75
          children: []
          pos: 6361
          length: 132
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 6521
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 6527
                length: 15
              pos: 6497
              length: 380
            body:
              type: block
              fields: {}
              children: []
              pos: 6565
              length: 312
          children: []
          pos: 6497
          length: 380
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: GatherCandiates
              children: []
              pos: 7257
              length: 15
            body:
              type: class_body
              fields: {}
              children:
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: visit
                    children: []
                    pos: 7337
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 7343
                      length: 15
                    pos: 7311
                    length: 1697
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode(n);
                      children: []
                      pos: 7389
                      length: 66
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: graphNode
                                  children: []
                                  pos: 7466
                                  length: 9
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 7479
                                  length: 4
                              children: []
                              pos: 7466
                              length: 17
                          children: []
                          pos: 7465
                          length: 19
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return;
                          children: []
                          pos: 7522
                          length: 7
                        pos: 7485
                        length: 52
                      pos: 7462
                      length: 75
                    - type: local_variable_declaration
                      fields:
                        text: FlowState<MustDef> state = graphNode.getAnnotation();
                      children: []
                      pos: 7544
                      length: 53
                    - type: local_variable_declaration
                      fields:
                        text: final MustDef defs = state.getIn();
                      children: []
                      pos: 7604
                      length: 35
                    - type: local_variable_declaration
                      fields:
                        text: final Node cfgNode = n;
                      children: []
                      pos: 7646
                      length: 23
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                    new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    if (n.isName()) {

                                      // n.getParent() isn't null. This just the case where n is the root
                                      // node that gatherCb started at.
                                      if (parent == null) {
                                        return;
                                      }

                                      // Make sure that the name node is purely a read.
                                      if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)
                                          || parent.isVar() || parent.isInc() || parent.isDec() ||
                                          parent.isParamList() || parent.isCatch()) {
                                        return;
                                      }

                                      String name = n.getString();
                                      if (compiler.getCodingConvention().isExported(name)) {
                                        return;
                                      }

                                      Definition def = reachingDef.getDef(name, cfgNode);
                                      // TODO(nicksantos): We need to add some notion of @const outer
                                      // scope vars. We can inline those just fine.
                                      if (def != null &&
                                          !reachingDef.dependsOnOuterScopeVars(def)) {
                                        candidates.add(new Candidate(name, def, n, cfgNode));
                                      }
                                    }
                                  }
                                };
                      children: []
                      pos: 7676
                      length: 1266
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, cfgNode, gatherCb);
                      children: []
                      pos: 8950
                      length: 52
                    pos: 7381
                    length: 1627
                children: []
                pos: 7311
                length: 1697
              pos: 7243
              length: 1769
          children: []
          pos: 7243
          length: 1769
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: Candidate
              children: []
              pos: 9120
              length: 9
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final String varName;
                children: []
                pos: 9166
                length: 29
              - type: field_declaration
                fields:
                  text: private Node def;
                children: []
                pos: 9241
                length: 17
              - type: field_declaration
                fields:
                  text: private final Definition defMetadata;
                children: []
                pos: 9263
                length: 37
              - type: field_declaration
                fields:
                  text: private final Node use;
                children: []
                pos: 9339
                length: 23
              - type: field_declaration
                fields:
                  text: private final Node useCfgNode;
                children: []
                pos: 9367
                length: 30
              - type: field_declaration
                fields:
                  text: private int numUseWithinUseCfgNode;
                children: []
                pos: 9505
                length: 35
              - type: constructor_declaration
                fields:
                  text: |-
                    Candidate(String varName, Definition defMetadata,
                            Node use, Node useCfgNode) {
                          Preconditions.checkArgument(use.isName());
                          this.varName = varName;
                          this.defMetadata = defMetadata;
                          this.use = use;
                          this.useCfgNode = useCfgNode;
                        }
                children: []
                pos: 9546
                length: 267
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getDefCfgNode
                    children: []
                    pos: 9832
                    length: 13
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 9819
                    length: 67
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: return defMetadata.node;
                      children: []
                      pos: 9856
                      length: 24
                    pos: 9848
                    length: 38
                children: []
                pos: 9819
                length: 67
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: canInline
                    children: []
                    pos: 9908
                    length: 9
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 9892
                    length: 4697
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: getDefCfgNode().isFunction()
                              children: []
                              pos: 9968
                              length: 28
                          children: []
                          pos: 9967
                          length: 30
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10008
                          length: 13
                        pos: 9998
                        length: 31
                      pos: 9964
                      length: 65
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Var dependency : defMetadata.depends) {
                                  if (inlinedNewDependencies.contains(dependency)) {
                                    return false;
                                  }
                                }
                      children: []
                      pos: 10226
                      length: 145
                    - type: expression_statement
                      fields:
                        text: getDefinition(getDefCfgNode(), null);
                      children: []
                      pos: 10379
                      length: 37
                    - type: expression_statement
                      fields:
                        text: getNumUseInUseCfgNode(useCfgNode, null);
                      children: []
                      pos: 10423
                      length: 40
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: def
                                  children: []
                                  pos: 10510
                                  length: 3
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 10517
                                  length: 4
                              children: []
                              pos: 10510
                              length: 11
                          children: []
                          pos: 10509
                          length: 13
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10533
                          length: 13
                        pos: 10523
                        length: 31
                      pos: 10506
                      length: 48
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: def.isAssign()
                                  children: []
                                  pos: 10682
                                  length: 14
                                right:
                                  type: unary_expression
                                  fields:
                                    text: "!NodeUtil.isExprAssign(def.getParent())"
                                  children: []
                                  pos: 10700
                                  length: 39
                              children: []
                              pos: 10682
                              length: 57
                          children: []
                          pos: 10681
                          length: 59
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10751
                          length: 13
                        pos: 10741
                        length: 31
                      pos: 10678
                      length: 94
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: checkRightOf(def, getDefCfgNode(), SIDE_EFFECT_PREDICATE)
                              children: []
                              pos: 10914
                              length: 57
                          children: []
                          pos: 10913
                          length: 59
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10983
                          length: 13
                        pos: 10973
                        length: 31
                      pos: 10910
                      length: 94
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)
                              children: []
                              pos: 11184
                              length: 51
                          children: []
                          pos: 11183
                          length: 53
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 11247
                          length: 13
                        pos: 11237
                        length: 31
                      pos: 11180
                      length: 88
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: NodeUtil.mayHaveSideEffects(def.getLastChild(),
                                  compiler)
                              children: []
                              pos: 11468
                              length: 57
                          children: []
                          pos: 11467
                          length: 59
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 11537
                          length: 13
                        pos: 11527
                        length: 31
                      pos: 11464
                      length: 94
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: numUseWithinUseCfgNode
                                  children: []
                                  pos: 11852
                                  length: 22
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '1'
                                  children: []
                                  pos: 11878
                                  length: 1
                              children: []
                              pos: 11852
                              length: 27
                          children: []
                          pos: 11851
                          length: 29
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 11891
                          length: 13
                        pos: 11881
                        length: 31
                      pos: 11848
                      length: 64
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: NodeUtil.isWithinLoop(use)
                              children: []
                              pos: 11978
                              length: 26
                          children: []
                          pos: 11977
                          length: 28
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 12016
                          length: 13
                        pos: 12006
                        length: 31
                      pos: 11974
                      length: 63
                    - type: local_variable_declaration
                      fields:
                        text: Collection<Node> uses = reachingUses.getUses(varName,
                          getDefCfgNode());
                      children: []
                      pos: 12046
                      length: 71
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: uses.size()
                                  children: []
                                  pos: 12129
                                  length: 11
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '1'
                                  children: []
                                  pos: 12144
                                  length: 1
                              children: []
                              pos: 12129
                              length: 16
                          children: []
                          pos: 12128
                          length: 18
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 12157
                          length: 13
                        pos: 12147
                        length: 31
                      pos: 12125
                      length: 53
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: |-
                                  NodeUtil.has(def.getLastChild(),
                                            new Predicate<Node>() {
                                                @Override
                                                public boolean apply(Node input) {
                                                  switch (input.getType()) {
                                                    case Token.GETELEM:
                                                    case Token.GETPROP:
                                                    case Token.ARRAYLIT:
                                                    case Token.OBJECTLIT:
                                                    case Token.REGEXP:
                                                    case Token.NEW:
                                                      return true;
                                                  }
                                                  return false;
                                                }
                                            },
                                            new Predicate<Node>() {
                                                @Override
                                                public boolean apply(Node input) {
                                                  // Recurse if the node is not a function.
                                                  return !input.isFunction();
                                                }
                                            })
                              children: []
                              pos: 12806
                              length: 756
                          children: []
                          pos: 12805
                          length: 758
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 13574
                          length: 13
                        pos: 13564
                        length: 31
                      pos: 12802
                      length: 793
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: NodeUtil.isStatementBlock(getDefCfgNode().getParent())
                                  children: []
                                  pos: 13725
                                  length: 54
                                right:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: method_invocation
                                      fields:
                                        text: getDefCfgNode().getNext()
                                      children: []
                                      pos: 13793
                                      length: 25
                                    right:
                                      type: identifier
                                      fields:
                                        text: useCfgNode
                                      children: []
                                      pos: 13822
                                      length: 10
                                  children: []
                                  pos: 13793
                                  length: 39
                              children: []
                              pos: 13725
                              length: 107
                          children: []
                          pos: 13724
                          length: 109
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: |-
                              CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>
                                        pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(
                                               cfg,
                                               cfg.getDirectedGraphNode(getDefCfgNode()),
                                               cfg.getDirectedGraphNode(useCfgNode),
                                               SIDE_EFFECT_PREDICATE,
                                               Predicates.
                                                   <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                                               false);
                          children: []
                          pos: 14024
                          length: 444
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: method_invocation
                                  fields:
                                    text: pathCheck.somePathsSatisfyPredicate()
                                  children: []
                                  pos: 14481
                                  length: 37
                              children: []
                              pos: 14480
                              length: 39
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: return_statement
                              fields:
                                text: return false;
                              children: []
                              pos: 14532
                              length: 13
                            pos: 14520
                            length: 35
                          pos: 14477
                          length: 78
                        pos: 13834
                        length: 729
                      pos: 13721
                      length: 842
                    - type: return_statement
                      fields:
                        text: return true;
                      children: []
                      pos: 14571
                      length: 12
                    pos: 9920
                    length: 4669
                children: []
                pos: 9892
                length: 4697
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: inlineVariable
                    children: []
                    pos: 14654
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 14641
                    length: 803
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node defParent = def.getParent();
                      children: []
                      pos: 14679
                      length: 33
                    - type: local_variable_declaration
                      fields:
                        text: Node useParent = use.getParent();
                      children: []
                      pos: 14719
                      length: 33
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: def.isAssign()
                              children: []
                              pos: 14763
                              length: 14
                          children: []
                          pos: 14762
                          length: 16
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: Node rhs = def.getLastChild();
                          children: []
                          pos: 14789
                          length: 30
                        - type: expression_statement
                          fields:
                            text: rhs.detachFromParent();
                          children: []
                          pos: 14828
                          length: 23
                        - type: expression_statement
                          fields:
                            text: Preconditions.checkState(defParent.isExprResult());
                          children: []
                          pos: 14914
                          length: 51
                        - type: while_statement
                          fields:
                            text: |-
                              while (defParent.getParent().isLabel()) {
                                        defParent = defParent.getParent();
                                      }
                          children: []
                          pos: 14974
                          length: 96
                        - type: expression_statement
                          fields:
                            text: defParent.detachFromParent();
                          children: []
                          pos: 15079
                          length: 29
                        - type: expression_statement
                          fields:
                            text: useParent.replaceChild(use, rhs);
                          children: []
                          pos: 15117
                          length: 33
                        pos: 14779
                        length: 379
                      pos: 14759
                      length: 644
                    - type: expression_statement
                      fields:
                        text: compiler.reportCodeChange();
                      children: []
                      pos: 15410
                      length: 28
                    pos: 14671
                    length: 773
                children: []
                pos: 14641
                length: 803
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getDefinition
                    children: []
                    pos: 15579
                    length: 13
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 15593
                      length: 6
                    pos: 15566
                    length: 726
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                  new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    switch (n.getType()) {
                                      case Token.NAME:
                                        if (n.getString().equals(varName) && n.hasChildren()) {
                                          def = n;
                                        }
                                        return;

                                      case Token.ASSIGN:
                                        Node lhs = n.getFirstChild();
                                        if (lhs.isName() && lhs.getString().equals(varName)) {
                                          def = n;
                                        }
                                        return;
                                    }
                                  }
                                };
                      children: []
                      pos: 15622
                      length: 611
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, n, gatherCb);
                      children: []
                      pos: 16240
                      length: 46
                    pos: 15614
                    length: 678
                children: []
                pos: 15566
                length: 726
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getNumUseInUseCfgNode
                    children: []
                    pos: 16433
                    length: 21
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 16455
                      length: 6
                    pos: 16420
                    length: 599
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                    new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    if (n.isName() && n.getString().equals(varName) &&
                                        // do not count in if it is left child of an assignment operator
                                        !(parent.isAssign() &&
                                         (parent.getFirstChild() == n))) {
                                      numUseWithinUseCfgNode++;
                                    }
                                  }
                                };
                      children: []
                      pos: 16485
                      length: 474
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, n, gatherCb);
                      children: []
                      pos: 16967
                      length: 46
                    pos: 16476
                    length: 543
                children: []
                pos: 16420
                length: 599
              pos: 9106
              length: 7917
          children: []
          pos: 9106
          length: 7917
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkRightOf
              children: []
              pos: 17290
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 17310
                length: 6
              pos: 17267
              length: 339
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node p = n; p != expressionRoot; p = p.getParent()) {
                          for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {
                            if (predicate.apply(cur)) {
                              return true;
                            }
                          }
                        }
                children: []
                pos: 17372
                length: 212
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 17589
                length: 13
              pos: 17366
              length: 240
          children: []
          pos: 17267
          length: 339
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkLeftOf
              children: []
              pos: 17872
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 17891
                length: 6
              pos: 17849
              length: 375
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
                          for (Node cur = p.getParent().getFirstChild(); cur != p;
                              cur = cur.getNext()) {
                            if (predicate.apply(cur)) {
                              return true;
                            }
                          }
                        }
                children: []
                pos: 17953
                length: 249
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 18207
                length: 13
              pos: 17947
              length: 277
          children: []
          pos: 17849
          length: 375
        pos: 2428
        length: 15798
    children: []
    pos: 2428
    length: 15798
  pos: 0
  length: 18227
text_diff: "--- before\n+++ after\n@@ -152,7 +152,7 @@\n     reachingUses = new MaybeReachingVariableUse(cfg,
  t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c :
  candidates) {\n-      if (c.canInline(t.getScope())) {\n+      if (c.canInline())
  {\n         c.inlineVariable();\n \n         // If definition c has dependencies,
  then inlining it may have\n@@ -277,7 +277,7 @@\n       return defMetadata.node;\n
  \    }\n \n-    private boolean canInline(final Scope scope) {\n+    private boolean
  canInline() {\n       // Cannot inline a parameter.\n       if (getDefCfgNode().isFunction())
  {\n         return false;\n@@ -372,12 +372,6 @@\n                   case Token.REGEXP:\n
  \                  case Token.NEW:\n                     return true;\n-                  case
  Token.NAME:\n-                    Var var = scope.getOwnSlot(input.getString());\n-
  \                   if (var != null\n-                        && var.getParentNode().isCatch())
  {\n-                      return true;\n-                    }\n                 }\n
  \                return false;\n               }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (Candidate c : candidates) {
        if (c.canInline(t.getScope())) {
          c.inlineVariable();

          // If definition c has dependencies, then inlining it may have
          // introduced new dependencies for our other inlining candidates.
          //
          // MustBeReachingVariableDef uses this dependency graph in its
          // analysis, so some of these candidates may no longer be valid.
          // We keep track of when the variable dependency graph changed
          // so that we can back off appropriately.
          if (!c.defMetadata.depends.isEmpty()) {
            inlinedNewDependencies.add(t.getScope().getVar(c.varName));
          }
        }
      } to for (Candidate c : candidates) {
        if (c.canInline()) {
          c.inlineVariable();

          // If definition c has dependencies, then inlining it may have
          // introduced new dependencies for our other inlining candidates.
          //
          // MustBeReachingVariableDef uses this dependency graph in its
          // analysis, so some of these candidates may no longer be valid.
          // We keep track of when the variable dependency graph changed
          // so that we can back off appropriately.
          if (!c.defMetadata.depends.isEmpty()) {
            inlinedNewDependencies.add(t.getScope().getVar(c.varName));
          }
        }
      }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Candidate c : candidates) {
        if (c.canInline(t.getScope())) {
          c.inlineVariable();

          // If definition c has dependencies, then inlining it may have
          // introduced new dependencies for our other inlining candidates.
          //
          // MustBeReachingVariableDef uses this dependency graph in its
          // analysis, so some of these candidates may no longer be valid.
          // We keep track of when the variable dependency graph changed
          // so that we can back off appropriately.
          if (!c.defMetadata.depends.isEmpty()) {
            inlinedNewDependencies.add(t.getScope().getVar(c.varName));
          }
        }
      } [5645,6308]
  replace for (Candidate c : candidates) {
        if (c.canInline(t.getScope())) {
          c.inlineVariable();

          // If definition c has dependencies, then inlining it may have
          // introduced new dependencies for our other inlining candidates.
          //
          // MustBeReachingVariableDef uses this dependency graph in its
          // analysis, so some of these candidates may no longer be valid.
          // We keep track of when the variable dependency graph changed
          // so that we can back off appropriately.
          if (!c.defMetadata.depends.isEmpty()) {
            inlinedNewDependencies.add(t.getScope().getVar(c.varName));
          }
        }
      } by for (Candidate c : candidates) {
        if (c.canInline()) {
          c.inlineVariable();

          // If definition c has dependencies, then inlining it may have
          // introduced new dependencies for our other inlining candidates.
          //
          // MustBeReachingVariableDef uses this dependency graph in its
          // analysis, so some of these candidates may no longer be valid.
          // We keep track of when the variable dependency graph changed
          // so that we can back off appropriately.
          if (!c.defMetadata.depends.isEmpty()) {
            inlinedNewDependencies.add(t.getScope().getVar(c.varName));
          }
        }
      }

  New cluster:
  UPDATE from NodeUtil.has(def.getLastChild(),
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  switch (input.getType()) {
                    case Token.GETELEM:
                    case Token.GETPROP:
                    case Token.ARRAYLIT:
                    case Token.OBJECTLIT:
                    case Token.REGEXP:
                    case Token.NEW:
                      return true;
                    case Token.NAME:
                      Var var = scope.getOwnSlot(input.getString());
                      if (var != null
                          && var.getParentNode().isCatch()) {
                        return true;
                      }
                  }
                  return false;
                }
            },
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  // Recurse if the node is not a function.
                  return !input.isFunction();
                }
            }) to NodeUtil.has(def.getLastChild(),
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  switch (input.getType()) {
                    case Token.GETELEM:
                    case Token.GETPROP:
                    case Token.ARRAYLIT:
                    case Token.OBJECTLIT:
                    case Token.REGEXP:
                    case Token.NEW:
                      return true;
                  }
                  return false;
                }
            },
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  // Recurse if the node is not a function.
                  return !input.isFunction();
                }
            })
  ------------
  ===
  update-node
  ---
  method_invocation: NodeUtil.has(def.getLastChild(),
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  switch (input.getType()) {
                    case Token.GETELEM:
                    case Token.GETPROP:
                    case Token.ARRAYLIT:
                    case Token.OBJECTLIT:
                    case Token.REGEXP:
                    case Token.NEW:
                      return true;
                    case Token.NAME:
                      Var var = scope.getOwnSlot(input.getString());
                      if (var != null
                          && var.getParentNode().isCatch()) {
                        return true;
                      }
                  }
                  return false;
                }
            },
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  // Recurse if the node is not a function.
                  return !input.isFunction();
                }
            }) [12835,13846]
  replace NodeUtil.has(def.getLastChild(),
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  switch (input.getType()) {
                    case Token.GETELEM:
                    case Token.GETPROP:
                    case Token.ARRAYLIT:
                    case Token.OBJECTLIT:
                    case Token.REGEXP:
                    case Token.NEW:
                      return true;
                    case Token.NAME:
                      Var var = scope.getOwnSlot(input.getString());
                      if (var != null
                          && var.getParentNode().isCatch()) {
                        return true;
                      }
                  }
                  return false;
                }
            },
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  // Recurse if the node is not a function.
                  return !input.isFunction();
                }
            }) by NodeUtil.has(def.getLastChild(),
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  switch (input.getType()) {
                    case Token.GETELEM:
                    case Token.GETPROP:
                    case Token.ARRAYLIT:
                    case Token.OBJECTLIT:
                    case Token.REGEXP:
                    case Token.NEW:
                      return true;
                  }
                  return false;
                }
            },
            new Predicate<Node>() {
                @Override
                public boolean apply(Node input) {
                  // Recurse if the node is not a function.
                  return !input.isFunction();
                }
            })

  New cluster:
  ===
  delete-node
  ---
  formal_parameter: final Scope scope [9930,9947]
  ===
  ------------
  ===
  delete-node
  ---
  formal_parameter: final Scope scope [9930,9947]
  ===

...
