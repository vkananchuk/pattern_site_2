---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: TypeAdapters
        children: []
        pos: 2036
        length: 12
      body:
        type: class_body
        fields: {}
        children:
        - type: constructor_declaration
          fields:
            text: |-
              private TypeAdapters() {
                  throw new UnsupportedOperationException();
                }
          children: []
          pos: 2053
          length: 75
        - type: field_declaration
          fields:
            text: |-
              @SuppressWarnings("rawtypes")
                public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {
                  @Override
                  public void write(JsonWriter out, Class value) throws IOException {
                    if (value == null) {
                      out.nullValue();
                    } else {
                      throw new UnsupportedOperationException("Attempted to serialize java.lang.Class: "
                          + value.getName() + ". Forgot to register a type adapter?");
                    }
                  }
                  @Override
                  public Class read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    } else {
                      throw new UnsupportedOperationException(
                          "Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?");
                    }
                  }
                };
          children: []
          pos: 2132
          length: 771
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class,
              CLASS);
          children: []
          pos: 2906
          length: 86
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {
                  @Override public BitSet read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }

                    BitSet bitset = new BitSet();
                    in.beginArray();
                    int i = 0;
                    JsonToken tokenType = in.peek();
                    while (tokenType != JsonToken.END_ARRAY) {
                      boolean set;
                      switch (tokenType) {
                      case NUMBER:
                        set = in.nextInt() != 0;
                        break;
                      case BOOLEAN:
                        set = in.nextBoolean();
                        break;
                      case STRING:
                        String stringValue = in.nextString();
                        try {
                          set = Integer.parseInt(stringValue) != 0;
                        } catch (NumberFormatException e) {
                          throw new JsonSyntaxException(
                              "Error: Expecting: bitset number value (1, 0), Found: " + stringValue);
                        }
                        break;
                      default:
                        throw new JsonSyntaxException("Invalid bitset value type: " + tokenType);
                      }
                      if (set) {
                        bitset.set(i);
                      }
                      ++i;
                      tokenType = in.peek();
                    }
                    in.endArray();
                    return bitset;
                  }

                  @Override public void write(JsonWriter out, BitSet src) throws IOException {
                    if (src == null) {
                      out.nullValue();
                      return;
                    }

                    out.beginArray();
                    for (int i = 0; i < src.length(); i++) {
                      int value = (src.get(i)) ? 1 : 0;
                      out.value(value);
                    }
                    out.endArray();
                  }
                };
          children: []
          pos: 2996
          length: 1547
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class,
              BIT_SET);
          children: []
          pos: 4547
          length: 91
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {
                  @Override
                  public Boolean read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    } else if (in.peek() == JsonToken.STRING) {
                      // support strings for compatibility with GSON 1.7
                      return Boolean.parseBoolean(in.nextString());
                    }
                    return in.nextBoolean();
                  }
                  @Override
                  public void write(JsonWriter out, Boolean value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 4642
          length: 569
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {
                  @Override public Boolean read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return Boolean.valueOf(in.nextString());
                  }

                  @Override public void write(JsonWriter out, Boolean value) throws IOException {
                    out.value(value == null ? "null" : value.toString());
                  }
                };
          children: []
          pos: 5331
          length: 461
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory BOOLEAN_FACTORY
                    = newFactory(boolean.class, Boolean.class, BOOLEAN);
          children: []
          pos: 5796
          length: 113
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      int intValue = in.nextInt();
                      return (byte) intValue;
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 5913
          length: 541
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory BYTE_FACTORY
                    = newFactory(byte.class, Byte.class, BYTE);
          children: []
          pos: 6458
          length: 101
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return (short) in.nextInt();
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 6563
          length: 510
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory SHORT_FACTORY
                    = newFactory(short.class, Short.class, SHORT);
          children: []
          pos: 7077
          length: 105
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return in.nextInt();
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 7186
          length: 504
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory INTEGER_FACTORY
                    = newFactory(int.class, Integer.class, INTEGER);
          children: []
          pos: 7693
          length: 109
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {
                  @Override public AtomicInteger read(JsonReader in) throws IOException {
                    try {
                      return new AtomicInteger(in.nextInt());
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override public void write(JsonWriter out, AtomicInteger value) throws IOException {
                    out.value(value.get());
                  }
                }.nullSafe();
          children: []
          pos: 7806
          length: 474
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory ATOMIC_INTEGER_FACTORY =
                    newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER);
          children: []
          pos: 8283
          length: 131
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {
                  @Override public AtomicBoolean read(JsonReader in) throws IOException {
                    return new AtomicBoolean(in.nextBoolean());
                  }
                  @Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {
                    out.value(value.get());
                  }
                }.nullSafe();
          children: []
          pos: 8418
          length: 372
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY =
                    newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN);
          children: []
          pos: 8793
          length: 131
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {
                  @Override public AtomicIntegerArray read(JsonReader in) throws IOException {
                      List<Integer> list = new ArrayList<Integer>();
                      in.beginArray();
                      while (in.hasNext()) {
                        try {
                          int integer = in.nextInt();
                          list.add(integer);
                        } catch (NumberFormatException e) {
                          throw new JsonSyntaxException(e);
                        }
                      }
                      in.endArray();
                      int length = list.size();
                      AtomicIntegerArray array = new AtomicIntegerArray(length);
                      for (int i = 0; i < length; ++i) {
                        array.set(i, list.get(i));
                      }
                      return array;
                  }
                  @Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {
                    out.beginArray();
                    for (int i = 0, length = value.length(); i < length; i++) {
                      out.value(value.get(i));
                    }
                    out.endArray();
                  }
                }.nullSafe();
          children: []
          pos: 8928
          length: 1019
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY =
                    newFactory(AtomicIntegerArray.class, TypeAdapters.ATOMIC_INTEGER_ARRAY);
          children: []
          pos: 9950
          length: 148
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return in.nextLong();
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 10102
          length: 502
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return (float) in.nextDouble();
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 10608
          length: 407
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return in.nextDouble();
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 11019
          length: 400
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    JsonToken jsonToken = in.peek();
                    switch (jsonToken) {
                    case NULL:
                      in.nextNull();
                      return null;
                    case NUMBER:
                    case STRING:
                      return new LazilyParsedNumber(in.nextString());
                    default:
                      throw new JsonSyntaxException("Expecting number, got: " + jsonToken);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 11423
          length: 599
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class,
              NUMBER);
          children: []
          pos: 12026
          length: 89
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {
                  @Override
                  public Character read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    String str = in.nextString();
                    if (str.length() != 1) {
                      throw new JsonSyntaxException("Expecting character, got: " + str);
                    }
                    return str.charAt(0);
                  }
                  @Override
                  public void write(JsonWriter out, Character value) throws IOException {
                    out.value(value == null ? null : String.valueOf(value));
                  }
                };
          children: []
          pos: 12119
          length: 602
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory CHARACTER_FACTORY
                    = newFactory(char.class, Character.class, CHARACTER);
          children: []
          pos: 12725
          length: 116
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {
                  @Override
                  public String read(JsonReader in) throws IOException {
                    JsonToken peek = in.peek();
                    if (peek == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    /* coerce booleans to strings for backwards compatibility */
                    if (peek == JsonToken.BOOLEAN) {
                      return Boolean.toString(in.nextBoolean());
                    }
                    return in.nextString();
                  }
                  @Override
                  public void write(JsonWriter out, String value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 12845
          length: 594
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {
                  @Override public BigDecimal read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return new BigDecimal(in.nextString());
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }

                  @Override public void write(JsonWriter out, BigDecimal value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 13445
          length: 536
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {
                  @Override public BigInteger read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return new BigInteger(in.nextString());
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }

                  @Override public void write(JsonWriter out, BigInteger value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 13987
          length: 536
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class,
              STRING);
          children: []
          pos: 14527
          length: 89
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {
                  @Override
                  public StringBuilder read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return new StringBuilder(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, StringBuilder value) throws IOException {
                    out.value(value == null ? null : value.toString());
                  }
                };
          children: []
          pos: 14620
          length: 489
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory STRING_BUILDER_FACTORY =
                  newFactory(StringBuilder.class, STRING_BUILDER);
          children: []
          pos: 15113
          length: 116
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {
                  @Override
                  public StringBuffer read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return new StringBuffer(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, StringBuffer value) throws IOException {
                    out.value(value == null ? null : value.toString());
                  }
                };
          children: []
          pos: 15233
          length: 483
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory STRING_BUFFER_FACTORY =
                  newFactory(StringBuffer.class, STRING_BUFFER);
          children: []
          pos: 15720
          length: 113
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {
                  @Override
                  public URL read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    String nextString = in.nextString();
                    return "null".equals(nextString) ? null : new URL(nextString);
                  }
                  @Override
                  public void write(JsonWriter out, URL value) throws IOException {
                    out.value(value == null ? null : value.toExternalForm());
                  }
                };
          children: []
          pos: 15837
          length: 507
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class,
              URL);
          children: []
          pos: 16348
          length: 80
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {
                  @Override
                  public URI read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      String nextString = in.nextString();
                      return "null".equals(nextString) ? null : new URI(nextString);
                    } catch (URISyntaxException e) {
                      throw new JsonIOException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, URI value) throws IOException {
                    out.value(value == null ? null : value.toASCIIString());
                  }
                };
          children: []
          pos: 16432
          length: 607
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class,
              URI);
          children: []
          pos: 17043
          length: 80
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {
                  @Override
                  public InetAddress read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    // regrettably, this should have included both the host name and the host address
                    return InetAddress.getByName(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, InetAddress value) throws IOException {
                    out.value(value == null ? null : value.getHostAddress());
                  }
                };
          children: []
          pos: 17127
          length: 577
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory INET_ADDRESS_FACTORY =
                  newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);
          children: []
          pos: 17708
          length: 123
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {
                  @Override
                  public UUID read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return java.util.UUID.fromString(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, UUID value) throws IOException {
                    out.value(value == null ? null : value.toString());
                  }
                };
          children: []
          pos: 17835
          length: 451
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class,
              UUID);
          children: []
          pos: 18290
          length: 83
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {
                  @Override
                  public Currency read(JsonReader in) throws IOException {
                    return Currency.getInstance(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, Currency value) throws IOException {
                    out.value(value.getCurrencyCode());
                  }
                }.nullSafe();
          children: []
          pos: 18377
          length: 368
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class,
              CURRENCY);
          children: []
          pos: 18748
          length: 95
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {
                  @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                  @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                    if (typeToken.getRawType() != Timestamp.class) {
                      return null;
                    }

                    final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);
                    return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {
                      @Override public Timestamp read(JsonReader in) throws IOException {
                        Date date = dateTypeAdapter.read(in);
                        return date != null ? new Timestamp(date.getTime()) : null;
                      }

                      @Override public void write(JsonWriter out, Timestamp value) throws IOException {
                        dateTypeAdapter.write(out, value);
                      }
                    };
                  }
                };
          children: []
          pos: 18847
          length: 851
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {
                  private static final String YEAR = "year";
                  private static final String MONTH = "month";
                  private static final String DAY_OF_MONTH = "dayOfMonth";
                  private static final String HOUR_OF_DAY = "hourOfDay";
                  private static final String MINUTE = "minute";
                  private static final String SECOND = "second";

                  @Override
                  public Calendar read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return  null;
                    }
                    in.beginObject();
                    int year = 0;
                    int month = 0;
                    int dayOfMonth = 0;
                    int hourOfDay = 0;
                    int minute = 0;
                    int second = 0;
                    while (in.peek() != JsonToken.END_OBJECT) {
                      String name = in.nextName();
                      int value = in.nextInt();
                      if (YEAR.equals(name)) {
                        year = value;
                      } else if (MONTH.equals(name)) {
                        month = value;
                      } else if (DAY_OF_MONTH.equals(name)) {
                        dayOfMonth = value;
                      } else if (HOUR_OF_DAY.equals(name)) {
                        hourOfDay = value;
                      } else if (MINUTE.equals(name)) {
                        minute = value;
                      } else if (SECOND.equals(name)) {
                        second = value;
                      }
                    }
                    in.endObject();
                    return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);
                  }

                  @Override
                  public void write(JsonWriter out, Calendar value) throws IOException {
                    if (value == null) {
                      out.nullValue();
                      return;
                    }
                    out.beginObject();
                    out.name(YEAR);
                    out.value(value.get(Calendar.YEAR));
                    out.name(MONTH);
                    out.value(value.get(Calendar.MONTH));
                    out.name(DAY_OF_MONTH);
                    out.value(value.get(Calendar.DAY_OF_MONTH));
                    out.name(HOUR_OF_DAY);
                    out.value(value.get(Calendar.HOUR_OF_DAY));
                    out.name(MINUTE);
                    out.value(value.get(Calendar.MINUTE));
                    out.name(SECOND);
                    out.value(value.get(Calendar.SECOND));
                    out.endObject();
                  }
                };
          children: []
          pos: 19702
          length: 2053
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory CALENDAR_FACTORY =
                  newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);
          children: []
          pos: 21759
          length: 140
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {
                  @Override
                  public Locale read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    String locale = in.nextString();
                    StringTokenizer tokenizer = new StringTokenizer(locale, "_");
                    String language = null;
                    String country = null;
                    String variant = null;
                    if (tokenizer.hasMoreElements()) {
                      language = tokenizer.nextToken();
                    }
                    if (tokenizer.hasMoreElements()) {
                      country = tokenizer.nextToken();
                    }
                    if (tokenizer.hasMoreElements()) {
                      variant = tokenizer.nextToken();
                    }
                    if (country == null && variant == null) {
                      return new Locale(language);
                    } else if (variant == null) {
                      return new Locale(language, country);
                    } else {
                      return new Locale(language, country, variant);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Locale value) throws IOException {
                    out.value(value == null ? null : value.toString());
                  }
                };
          children: []
          pos: 21903
          length: 1115
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class,
              LOCALE);
          children: []
          pos: 23022
          length: 89
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {
                  @Override public JsonElement read(JsonReader in) throws IOException {
                    switch (in.peek()) {
                    case STRING:
                      return new JsonPrimitive(in.nextString());
                    case NUMBER:
                      String number = in.nextString();
                      return new JsonPrimitive(new LazilyParsedNumber(number));
                    case BOOLEAN:
                      return new JsonPrimitive(in.nextBoolean());
                    case NULL:
                      in.nextNull();
                      return JsonNull.INSTANCE;
                    case BEGIN_ARRAY:
                      JsonArray array = new JsonArray();
                      in.beginArray();
                      while (in.hasNext()) {
                        array.add(read(in));
                      }
                      in.endArray();
                      return array;
                    case BEGIN_OBJECT:
                      JsonObject object = new JsonObject();
                      in.beginObject();
                      while (in.hasNext()) {
                        object.add(in.nextName(), read(in));
                      }
                      in.endObject();
                      return object;
                    case END_DOCUMENT:
                    case NAME:
                    case END_OBJECT:
                    case END_ARRAY:
                    default:
                      throw new IllegalArgumentException();
                    }
                  }

                  @Override public void write(JsonWriter out, JsonElement value) throws IOException {
                    if (value == null || value.isJsonNull()) {
                      out.nullValue();
                    } else if (value.isJsonPrimitive()) {
                      JsonPrimitive primitive = value.getAsJsonPrimitive();
                      if (primitive.isNumber()) {
                        out.value(primitive.getAsNumber());
                      } else if (primitive.isBoolean()) {
                        out.value(primitive.getAsBoolean());
                      } else {
                        out.value(primitive.getAsString());
                      }

                    } else if (value.isJsonArray()) {
                      out.beginArray();
                      for (JsonElement e : value.getAsJsonArray()) {
                        write(out, e);
                      }
                      out.endArray();

                    } else if (value.isJsonObject()) {
                      out.beginObject();
                      for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {
                        out.name(e.getKey());
                        write(out, e.getValue());
                      }
                      out.endObject();

                    } else {
                      throw new IllegalArgumentException("Couldn't write " + value.getClass());
                    }
                  }
                };
          children: []
          pos: 23115
          length: 2209
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory JSON_ELEMENT_FACTORY
                    = newTypeHierarchyFactory(JsonElement.class, JSON_ELEMENT);
          children: []
          pos: 25328
          length: 125
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: EnumTypeAdapter
              children: []
              pos: 25484
              length: 15
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final Map<String, T> nameToConstant = new HashMap<String,
                    T>();
                children: []
                pos: 25548
                length: 71
              - type: field_declaration
                fields:
                  text: private final Map<T, String> constantToName = new HashMap<T,
                    String>();
                children: []
                pos: 25624
                length: 71
              - type: constructor_declaration
                fields:
                  text: |-
                    public EnumTypeAdapter(Class<T> classOfT) {
                          try {
                            for (T constant : classOfT.getEnumConstants()) {
                              String name = constant.name();
                              SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);
                              if (annotation != null) {
                                name = annotation.value();
                                for (String alternate : annotation.alternate()) {
                                  nameToConstant.put(alternate, constant);
                                }
                              }
                              nameToConstant.put(name, constant);
                              constantToName.put(constant, name);
                            }
                          } catch (NoSuchFieldException e) {
                            throw new AssertionError(e);
                          }
                        }
                children: []
                pos: 25701
                length: 664
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: read
                    children: []
                    pos: 26389
                    length: 4
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: JsonReader in
                      children: []
                      pos: 26394
                      length: 13
                    pos: 26370
                    length: 208
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: in.peek()
                                  children: []
                                  pos: 26440
                                  length: 9
                                right:
                                  type: field_access
                                  fields:
                                    text: JsonToken.NULL
                                  children: []
                                  pos: 26453
                                  length: 14
                              children: []
                              pos: 26440
                              length: 27
                          children: []
                          pos: 26439
                          length: 29
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: in.nextNull();
                          children: []
                          pos: 26479
                          length: 14
                        - type: return_statement
                          fields:
                            text: return null;
                          children: []
                          pos: 26502
                          length: 12
                        pos: 26469
                        length: 53
                      pos: 26436
                      length: 86
                    - type: return_statement
                      fields:
                        text: return nameToConstant.get(in.nextString());
                      children: []
                      pos: 26529
                      length: 43
                    pos: 26428
                    length: 150
                children: []
                pos: 26370
                length: 208
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: write
                    children: []
                    pos: 26606
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: JsonWriter out
                      children: []
                      pos: 26612
                      length: 14
                    pos: 26584
                    length: 146
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: 'out.value(value == null ? null : constantToName.get(value));'
                      children: []
                      pos: 26664
                      length: 60
                    pos: 26656
                    length: 74
                children: []
                pos: 26584
                length: 146
              pos: 25457
              length: 1277
          children: []
          pos: 25457
          length: 1277
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {
                  @SuppressWarnings({"rawtypes", "unchecked"})
                  @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                    Class<? super T> rawType = typeToken.getRawType();
                    if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {
                      return null;
                    }
                    if (!rawType.isEnum()) {
                      rawType = rawType.getSuperclass(); // handle anonymous subclasses
                    }
                    return (TypeAdapter<T>) new EnumTypeAdapter(rawType);
                  }
                };
          children: []
          pos: 26738
          length: 559
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newFactory
              children: []
              pos: 27339
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final TypeToken<TT> type
                children: []
                pos: 27357
                length: 24
              pos: 27301
              length: 429
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                          @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                            return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;
                          }
                        };
                children: []
                pos: 27424
                length: 302
              pos: 27418
              length: 312
          children: []
          pos: 27301
          length: 429
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newFactory
              children: []
              pos: 27772
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final Class<TT> type
                children: []
                pos: 27790
                length: 20
              pos: 27734
              length: 567
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                          @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                            return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;
                          }
                          @Override public String toString() {
                            return "Factory[type=" + type.getName() + ",adapter=" + typeAdapter + "]";
                          }
                        };
                children: []
                pos: 27853
                length: 444
              pos: 27847
              length: 454
          children: []
          pos: 27734
          length: 567
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newFactory
              children: []
              pos: 28343
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final Class<TT> unboxed
                children: []
                pos: 28361
                length: 23
              pos: 28305
              length: 709
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                          @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                            Class<? super T> rawType = typeToken.getRawType();
                            return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;
                          }
                          @Override public String toString() {
                            return "Factory[type=" + boxed.getName()
                                + "+" + unboxed.getName() + ",adapter=" + typeAdapter + "]";
                          }
                        };
                children: []
                pos: 28458
                length: 552
              pos: 28452
              length: 562
          children: []
          pos: 28305
          length: 709
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newFactoryForMultipleTypes
              children: []
              pos: 29056
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final Class<TT> base
                children: []
                pos: 29083
                length: 20
              pos: 29018
              length: 719
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                          @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                            Class<? super T> rawType = typeToken.getRawType();
                            return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;
                          }
                          @Override public String toString() {
                            return "Factory[type=" + base.getName()
                                + "+" + sub.getName() + ",adapter=" + typeAdapter + "]";
                          }
                        };
                children: []
                pos: 29191
                length: 542
              pos: 29185
              length: 552
          children: []
          pos: 29018
          length: 719
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newTypeHierarchyFactory
              children: []
              pos: 29948
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final Class<T1> clazz
                children: []
                pos: 29979
                length: 21
              pos: 29910
              length: 1212
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked")
                          @Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
                            final Class<? super T2> requestedType = typeToken.getRawType();
                            if (!clazz.isAssignableFrom(requestedType)) {
                              return null;
                            }
                            return (TypeAdapter<T2>) new TypeAdapter<T1>() {
                              @Override public void write(JsonWriter out, T1 value) throws IOException {
                                typeAdapter.write(out, value);
                              }

                              @Override public T1 read(JsonReader in) throws IOException {
                                T1 result = typeAdapter.read(in);
                                if (result != null && !requestedType.isInstance(result)) {
                                  throw new JsonSyntaxException("Expected a " + requestedType.getName()
                                      + " but was " + result.getClass().getName());
                                }
                                return result;
                              }
                            };
                          }
                          @Override public String toString() {
                            return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
                          }
                        };
                children: []
                pos: 30043
                length: 1075
              pos: 30037
              length: 1085
          children: []
          pos: 29910
          length: 1212
        pos: 2017
        length: 29107
    children: []
    pos: 2017
    length: 29107
  pos: 0
  length: 31125
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: TypeAdapters
        children: []
        pos: 2036
        length: 12
      body:
        type: class_body
        fields: {}
        children:
        - type: constructor_declaration
          fields:
            text: |-
              private TypeAdapters() {
                  throw new UnsupportedOperationException();
                }
          children: []
          pos: 2053
          length: 75
        - type: field_declaration
          fields:
            text: |-
              @SuppressWarnings("rawtypes")
                public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {
                  @Override
                  public void write(JsonWriter out, Class value) throws IOException {
                    if (value == null) {
                      out.nullValue();
                    } else {
                      throw new UnsupportedOperationException("Attempted to serialize java.lang.Class: "
                          + value.getName() + ". Forgot to register a type adapter?");
                    }
                  }
                  @Override
                  public Class read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    } else {
                      throw new UnsupportedOperationException(
                          "Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?");
                    }
                  }
                };
          children: []
          pos: 2132
          length: 771
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class,
              CLASS);
          children: []
          pos: 2906
          length: 86
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {
                  @Override public BitSet read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }

                    BitSet bitset = new BitSet();
                    in.beginArray();
                    int i = 0;
                    JsonToken tokenType = in.peek();
                    while (tokenType != JsonToken.END_ARRAY) {
                      boolean set;
                      switch (tokenType) {
                      case NUMBER:
                        set = in.nextInt() != 0;
                        break;
                      case BOOLEAN:
                        set = in.nextBoolean();
                        break;
                      case STRING:
                        String stringValue = in.nextString();
                        try {
                          set = Integer.parseInt(stringValue) != 0;
                        } catch (NumberFormatException e) {
                          throw new JsonSyntaxException(
                              "Error: Expecting: bitset number value (1, 0), Found: " + stringValue);
                        }
                        break;
                      default:
                        throw new JsonSyntaxException("Invalid bitset value type: " + tokenType);
                      }
                      if (set) {
                        bitset.set(i);
                      }
                      ++i;
                      tokenType = in.peek();
                    }
                    in.endArray();
                    return bitset;
                  }

                  @Override public void write(JsonWriter out, BitSet src) throws IOException {
                    if (src == null) {
                      out.nullValue();
                      return;
                    }

                    out.beginArray();
                    for (int i = 0; i < src.length(); i++) {
                      int value = (src.get(i)) ? 1 : 0;
                      out.value(value);
                    }
                    out.endArray();
                  }
                };
          children: []
          pos: 2996
          length: 1547
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class,
              BIT_SET);
          children: []
          pos: 4547
          length: 91
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {
                  @Override
                  public Boolean read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    } else if (in.peek() == JsonToken.STRING) {
                      // support strings for compatibility with GSON 1.7
                      return Boolean.parseBoolean(in.nextString());
                    }
                    return in.nextBoolean();
                  }
                  @Override
                  public void write(JsonWriter out, Boolean value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 4642
          length: 569
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {
                  @Override public Boolean read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return Boolean.valueOf(in.nextString());
                  }

                  @Override public void write(JsonWriter out, Boolean value) throws IOException {
                    out.value(value == null ? "null" : value.toString());
                  }
                };
          children: []
          pos: 5331
          length: 461
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory BOOLEAN_FACTORY
                    = newFactory(boolean.class, Boolean.class, BOOLEAN);
          children: []
          pos: 5796
          length: 113
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      int intValue = in.nextInt();
                      return (byte) intValue;
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 5913
          length: 541
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory BYTE_FACTORY
                    = newFactory(byte.class, Byte.class, BYTE);
          children: []
          pos: 6458
          length: 101
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return (short) in.nextInt();
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 6563
          length: 510
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory SHORT_FACTORY
                    = newFactory(short.class, Short.class, SHORT);
          children: []
          pos: 7077
          length: 105
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return in.nextInt();
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 7186
          length: 504
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory INTEGER_FACTORY
                    = newFactory(int.class, Integer.class, INTEGER);
          children: []
          pos: 7693
          length: 109
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {
                  @Override public AtomicInteger read(JsonReader in) throws IOException {
                    try {
                      return new AtomicInteger(in.nextInt());
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override public void write(JsonWriter out, AtomicInteger value) throws IOException {
                    out.value(value.get());
                  }
                }.nullSafe();
          children: []
          pos: 7806
          length: 474
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory ATOMIC_INTEGER_FACTORY =
                    newFactory(AtomicInteger.class, TypeAdapters.ATOMIC_INTEGER);
          children: []
          pos: 8283
          length: 131
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {
                  @Override public AtomicBoolean read(JsonReader in) throws IOException {
                    return new AtomicBoolean(in.nextBoolean());
                  }
                  @Override public void write(JsonWriter out, AtomicBoolean value) throws IOException {
                    out.value(value.get());
                  }
                }.nullSafe();
          children: []
          pos: 8418
          length: 372
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY =
                    newFactory(AtomicBoolean.class, TypeAdapters.ATOMIC_BOOLEAN);
          children: []
          pos: 8793
          length: 131
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {
                  @Override public AtomicIntegerArray read(JsonReader in) throws IOException {
                      List<Integer> list = new ArrayList<Integer>();
                      in.beginArray();
                      while (in.hasNext()) {
                        try {
                          int integer = in.nextInt();
                          list.add(integer);
                        } catch (NumberFormatException e) {
                          throw new JsonSyntaxException(e);
                        }
                      }
                      in.endArray();
                      int length = list.size();
                      AtomicIntegerArray array = new AtomicIntegerArray(length);
                      for (int i = 0; i < length; ++i) {
                        array.set(i, list.get(i));
                      }
                      return array;
                  }
                  @Override public void write(JsonWriter out, AtomicIntegerArray value) throws IOException {
                    out.beginArray();
                    for (int i = 0, length = value.length(); i < length; i++) {
                      out.value(value.get(i));
                    }
                    out.endArray();
                  }
                }.nullSafe();
          children: []
          pos: 8928
          length: 1019
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY =
                    newFactory(AtomicIntegerArray.class, TypeAdapters.ATOMIC_INTEGER_ARRAY);
          children: []
          pos: 9950
          length: 148
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return in.nextLong();
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 10102
          length: 502
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return (float) in.nextDouble();
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 10608
          length: 407
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return in.nextDouble();
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 11019
          length: 400
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {
                  @Override
                  public Number read(JsonReader in) throws IOException {
                    JsonToken jsonToken = in.peek();
                    switch (jsonToken) {
                    case NULL:
                      in.nextNull();
                      return null;
                    case NUMBER:
                      return new LazilyParsedNumber(in.nextString());
                    default:
                      throw new JsonSyntaxException("Expecting number, got: " + jsonToken);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Number value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 11423
          length: 580
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class,
              NUMBER);
          children: []
          pos: 12007
          length: 89
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {
                  @Override
                  public Character read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    String str = in.nextString();
                    if (str.length() != 1) {
                      throw new JsonSyntaxException("Expecting character, got: " + str);
                    }
                    return str.charAt(0);
                  }
                  @Override
                  public void write(JsonWriter out, Character value) throws IOException {
                    out.value(value == null ? null : String.valueOf(value));
                  }
                };
          children: []
          pos: 12100
          length: 602
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory CHARACTER_FACTORY
                    = newFactory(char.class, Character.class, CHARACTER);
          children: []
          pos: 12706
          length: 116
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {
                  @Override
                  public String read(JsonReader in) throws IOException {
                    JsonToken peek = in.peek();
                    if (peek == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    /* coerce booleans to strings for backwards compatibility */
                    if (peek == JsonToken.BOOLEAN) {
                      return Boolean.toString(in.nextBoolean());
                    }
                    return in.nextString();
                  }
                  @Override
                  public void write(JsonWriter out, String value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 12826
          length: 594
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {
                  @Override public BigDecimal read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return new BigDecimal(in.nextString());
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }

                  @Override public void write(JsonWriter out, BigDecimal value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 13426
          length: 536
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {
                  @Override public BigInteger read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      return new BigInteger(in.nextString());
                    } catch (NumberFormatException e) {
                      throw new JsonSyntaxException(e);
                    }
                  }

                  @Override public void write(JsonWriter out, BigInteger value) throws IOException {
                    out.value(value);
                  }
                };
          children: []
          pos: 13968
          length: 536
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class,
              STRING);
          children: []
          pos: 14508
          length: 89
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {
                  @Override
                  public StringBuilder read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return new StringBuilder(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, StringBuilder value) throws IOException {
                    out.value(value == null ? null : value.toString());
                  }
                };
          children: []
          pos: 14601
          length: 489
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory STRING_BUILDER_FACTORY =
                  newFactory(StringBuilder.class, STRING_BUILDER);
          children: []
          pos: 15094
          length: 116
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {
                  @Override
                  public StringBuffer read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return new StringBuffer(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, StringBuffer value) throws IOException {
                    out.value(value == null ? null : value.toString());
                  }
                };
          children: []
          pos: 15214
          length: 483
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory STRING_BUFFER_FACTORY =
                  newFactory(StringBuffer.class, STRING_BUFFER);
          children: []
          pos: 15701
          length: 113
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {
                  @Override
                  public URL read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    String nextString = in.nextString();
                    return "null".equals(nextString) ? null : new URL(nextString);
                  }
                  @Override
                  public void write(JsonWriter out, URL value) throws IOException {
                    out.value(value == null ? null : value.toExternalForm());
                  }
                };
          children: []
          pos: 15818
          length: 507
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class,
              URL);
          children: []
          pos: 16329
          length: 80
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {
                  @Override
                  public URI read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    try {
                      String nextString = in.nextString();
                      return "null".equals(nextString) ? null : new URI(nextString);
                    } catch (URISyntaxException e) {
                      throw new JsonIOException(e);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, URI value) throws IOException {
                    out.value(value == null ? null : value.toASCIIString());
                  }
                };
          children: []
          pos: 16413
          length: 607
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class,
              URI);
          children: []
          pos: 17024
          length: 80
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {
                  @Override
                  public InetAddress read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    // regrettably, this should have included both the host name and the host address
                    return InetAddress.getByName(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, InetAddress value) throws IOException {
                    out.value(value == null ? null : value.getHostAddress());
                  }
                };
          children: []
          pos: 17108
          length: 577
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory INET_ADDRESS_FACTORY =
                  newTypeHierarchyFactory(InetAddress.class, INET_ADDRESS);
          children: []
          pos: 17689
          length: 123
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {
                  @Override
                  public UUID read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    return java.util.UUID.fromString(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, UUID value) throws IOException {
                    out.value(value == null ? null : value.toString());
                  }
                };
          children: []
          pos: 17816
          length: 451
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class,
              UUID);
          children: []
          pos: 18271
          length: 83
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {
                  @Override
                  public Currency read(JsonReader in) throws IOException {
                    return Currency.getInstance(in.nextString());
                  }
                  @Override
                  public void write(JsonWriter out, Currency value) throws IOException {
                    out.value(value.getCurrencyCode());
                  }
                }.nullSafe();
          children: []
          pos: 18358
          length: 368
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class,
              CURRENCY);
          children: []
          pos: 18729
          length: 95
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {
                  @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                  @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                    if (typeToken.getRawType() != Timestamp.class) {
                      return null;
                    }

                    final TypeAdapter<Date> dateTypeAdapter = gson.getAdapter(Date.class);
                    return (TypeAdapter<T>) new TypeAdapter<Timestamp>() {
                      @Override public Timestamp read(JsonReader in) throws IOException {
                        Date date = dateTypeAdapter.read(in);
                        return date != null ? new Timestamp(date.getTime()) : null;
                      }

                      @Override public void write(JsonWriter out, Timestamp value) throws IOException {
                        dateTypeAdapter.write(out, value);
                      }
                    };
                  }
                };
          children: []
          pos: 18828
          length: 851
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {
                  private static final String YEAR = "year";
                  private static final String MONTH = "month";
                  private static final String DAY_OF_MONTH = "dayOfMonth";
                  private static final String HOUR_OF_DAY = "hourOfDay";
                  private static final String MINUTE = "minute";
                  private static final String SECOND = "second";

                  @Override
                  public Calendar read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return  null;
                    }
                    in.beginObject();
                    int year = 0;
                    int month = 0;
                    int dayOfMonth = 0;
                    int hourOfDay = 0;
                    int minute = 0;
                    int second = 0;
                    while (in.peek() != JsonToken.END_OBJECT) {
                      String name = in.nextName();
                      int value = in.nextInt();
                      if (YEAR.equals(name)) {
                        year = value;
                      } else if (MONTH.equals(name)) {
                        month = value;
                      } else if (DAY_OF_MONTH.equals(name)) {
                        dayOfMonth = value;
                      } else if (HOUR_OF_DAY.equals(name)) {
                        hourOfDay = value;
                      } else if (MINUTE.equals(name)) {
                        minute = value;
                      } else if (SECOND.equals(name)) {
                        second = value;
                      }
                    }
                    in.endObject();
                    return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);
                  }

                  @Override
                  public void write(JsonWriter out, Calendar value) throws IOException {
                    if (value == null) {
                      out.nullValue();
                      return;
                    }
                    out.beginObject();
                    out.name(YEAR);
                    out.value(value.get(Calendar.YEAR));
                    out.name(MONTH);
                    out.value(value.get(Calendar.MONTH));
                    out.name(DAY_OF_MONTH);
                    out.value(value.get(Calendar.DAY_OF_MONTH));
                    out.name(HOUR_OF_DAY);
                    out.value(value.get(Calendar.HOUR_OF_DAY));
                    out.name(MINUTE);
                    out.value(value.get(Calendar.MINUTE));
                    out.name(SECOND);
                    out.value(value.get(Calendar.SECOND));
                    out.endObject();
                  }
                };
          children: []
          pos: 19683
          length: 2053
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory CALENDAR_FACTORY =
                  newFactoryForMultipleTypes(Calendar.class, GregorianCalendar.class, CALENDAR);
          children: []
          pos: 21740
          length: 140
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {
                  @Override
                  public Locale read(JsonReader in) throws IOException {
                    if (in.peek() == JsonToken.NULL) {
                      in.nextNull();
                      return null;
                    }
                    String locale = in.nextString();
                    StringTokenizer tokenizer = new StringTokenizer(locale, "_");
                    String language = null;
                    String country = null;
                    String variant = null;
                    if (tokenizer.hasMoreElements()) {
                      language = tokenizer.nextToken();
                    }
                    if (tokenizer.hasMoreElements()) {
                      country = tokenizer.nextToken();
                    }
                    if (tokenizer.hasMoreElements()) {
                      variant = tokenizer.nextToken();
                    }
                    if (country == null && variant == null) {
                      return new Locale(language);
                    } else if (variant == null) {
                      return new Locale(language, country);
                    } else {
                      return new Locale(language, country, variant);
                    }
                  }
                  @Override
                  public void write(JsonWriter out, Locale value) throws IOException {
                    out.value(value == null ? null : value.toString());
                  }
                };
          children: []
          pos: 21884
          length: 1115
        - type: field_declaration
          fields:
            text: public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class,
              LOCALE);
          children: []
          pos: 23003
          length: 89
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {
                  @Override public JsonElement read(JsonReader in) throws IOException {
                    switch (in.peek()) {
                    case STRING:
                      return new JsonPrimitive(in.nextString());
                    case NUMBER:
                      String number = in.nextString();
                      return new JsonPrimitive(new LazilyParsedNumber(number));
                    case BOOLEAN:
                      return new JsonPrimitive(in.nextBoolean());
                    case NULL:
                      in.nextNull();
                      return JsonNull.INSTANCE;
                    case BEGIN_ARRAY:
                      JsonArray array = new JsonArray();
                      in.beginArray();
                      while (in.hasNext()) {
                        array.add(read(in));
                      }
                      in.endArray();
                      return array;
                    case BEGIN_OBJECT:
                      JsonObject object = new JsonObject();
                      in.beginObject();
                      while (in.hasNext()) {
                        object.add(in.nextName(), read(in));
                      }
                      in.endObject();
                      return object;
                    case END_DOCUMENT:
                    case NAME:
                    case END_OBJECT:
                    case END_ARRAY:
                    default:
                      throw new IllegalArgumentException();
                    }
                  }

                  @Override public void write(JsonWriter out, JsonElement value) throws IOException {
                    if (value == null || value.isJsonNull()) {
                      out.nullValue();
                    } else if (value.isJsonPrimitive()) {
                      JsonPrimitive primitive = value.getAsJsonPrimitive();
                      if (primitive.isNumber()) {
                        out.value(primitive.getAsNumber());
                      } else if (primitive.isBoolean()) {
                        out.value(primitive.getAsBoolean());
                      } else {
                        out.value(primitive.getAsString());
                      }

                    } else if (value.isJsonArray()) {
                      out.beginArray();
                      for (JsonElement e : value.getAsJsonArray()) {
                        write(out, e);
                      }
                      out.endArray();

                    } else if (value.isJsonObject()) {
                      out.beginObject();
                      for (Map.Entry<String, JsonElement> e : value.getAsJsonObject().entrySet()) {
                        out.name(e.getKey());
                        write(out, e.getValue());
                      }
                      out.endObject();

                    } else {
                      throw new IllegalArgumentException("Couldn't write " + value.getClass());
                    }
                  }
                };
          children: []
          pos: 23096
          length: 2209
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory JSON_ELEMENT_FACTORY
                    = newTypeHierarchyFactory(JsonElement.class, JSON_ELEMENT);
          children: []
          pos: 25309
          length: 125
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: EnumTypeAdapter
              children: []
              pos: 25465
              length: 15
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final Map<String, T> nameToConstant = new HashMap<String,
                    T>();
                children: []
                pos: 25529
                length: 71
              - type: field_declaration
                fields:
                  text: private final Map<T, String> constantToName = new HashMap<T,
                    String>();
                children: []
                pos: 25605
                length: 71
              - type: constructor_declaration
                fields:
                  text: |-
                    public EnumTypeAdapter(Class<T> classOfT) {
                          try {
                            for (T constant : classOfT.getEnumConstants()) {
                              String name = constant.name();
                              SerializedName annotation = classOfT.getField(name).getAnnotation(SerializedName.class);
                              if (annotation != null) {
                                name = annotation.value();
                                for (String alternate : annotation.alternate()) {
                                  nameToConstant.put(alternate, constant);
                                }
                              }
                              nameToConstant.put(name, constant);
                              constantToName.put(constant, name);
                            }
                          } catch (NoSuchFieldException e) {
                            throw new AssertionError(e);
                          }
                        }
                children: []
                pos: 25682
                length: 664
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: read
                    children: []
                    pos: 26370
                    length: 4
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: JsonReader in
                      children: []
                      pos: 26375
                      length: 13
                    pos: 26351
                    length: 208
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: in.peek()
                                  children: []
                                  pos: 26421
                                  length: 9
                                right:
                                  type: field_access
                                  fields:
                                    text: JsonToken.NULL
                                  children: []
                                  pos: 26434
                                  length: 14
                              children: []
                              pos: 26421
                              length: 27
                          children: []
                          pos: 26420
                          length: 29
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: in.nextNull();
                          children: []
                          pos: 26460
                          length: 14
                        - type: return_statement
                          fields:
                            text: return null;
                          children: []
                          pos: 26483
                          length: 12
                        pos: 26450
                        length: 53
                      pos: 26417
                      length: 86
                    - type: return_statement
                      fields:
                        text: return nameToConstant.get(in.nextString());
                      children: []
                      pos: 26510
                      length: 43
                    pos: 26409
                    length: 150
                children: []
                pos: 26351
                length: 208
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: write
                    children: []
                    pos: 26587
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: JsonWriter out
                      children: []
                      pos: 26593
                      length: 14
                    pos: 26565
                    length: 146
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: 'out.value(value == null ? null : constantToName.get(value));'
                      children: []
                      pos: 26645
                      length: 60
                    pos: 26637
                    length: 74
                children: []
                pos: 26565
                length: 146
              pos: 25438
              length: 1277
          children: []
          pos: 25438
          length: 1277
        - type: field_declaration
          fields:
            text: |-
              public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {
                  @SuppressWarnings({"rawtypes", "unchecked"})
                  @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                    Class<? super T> rawType = typeToken.getRawType();
                    if (!Enum.class.isAssignableFrom(rawType) || rawType == Enum.class) {
                      return null;
                    }
                    if (!rawType.isEnum()) {
                      rawType = rawType.getSuperclass(); // handle anonymous subclasses
                    }
                    return (TypeAdapter<T>) new EnumTypeAdapter(rawType);
                  }
                };
          children: []
          pos: 26719
          length: 559
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newFactory
              children: []
              pos: 27320
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final TypeToken<TT> type
                children: []
                pos: 27338
                length: 24
              pos: 27282
              length: 429
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                          @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                            return typeToken.equals(type) ? (TypeAdapter<T>) typeAdapter : null;
                          }
                        };
                children: []
                pos: 27405
                length: 302
              pos: 27399
              length: 312
          children: []
          pos: 27282
          length: 429
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newFactory
              children: []
              pos: 27753
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final Class<TT> type
                children: []
                pos: 27771
                length: 20
              pos: 27715
              length: 567
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                          @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                            return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null;
                          }
                          @Override public String toString() {
                            return "Factory[type=" + type.getName() + ",adapter=" + typeAdapter + "]";
                          }
                        };
                children: []
                pos: 27834
                length: 444
              pos: 27828
              length: 454
          children: []
          pos: 27715
          length: 567
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newFactory
              children: []
              pos: 28324
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final Class<TT> unboxed
                children: []
                pos: 28342
                length: 23
              pos: 28286
              length: 709
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                          @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                            Class<? super T> rawType = typeToken.getRawType();
                            return (rawType == unboxed || rawType == boxed) ? (TypeAdapter<T>) typeAdapter : null;
                          }
                          @Override public String toString() {
                            return "Factory[type=" + boxed.getName()
                                + "+" + unboxed.getName() + ",adapter=" + typeAdapter + "]";
                          }
                        };
                children: []
                pos: 28439
                length: 552
              pos: 28433
              length: 562
          children: []
          pos: 28286
          length: 709
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newFactoryForMultipleTypes
              children: []
              pos: 29037
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final Class<TT> base
                children: []
                pos: 29064
                length: 20
              pos: 28999
              length: 719
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked") // we use a runtime check to make sure the 'T's equal
                          @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {
                            Class<? super T> rawType = typeToken.getRawType();
                            return (rawType == base || rawType == sub) ? (TypeAdapter<T>) typeAdapter : null;
                          }
                          @Override public String toString() {
                            return "Factory[type=" + base.getName()
                                + "+" + sub.getName() + ",adapter=" + typeAdapter + "]";
                          }
                        };
                children: []
                pos: 29172
                length: 542
              pos: 29166
              length: 552
          children: []
          pos: 28999
          length: 719
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: newTypeHierarchyFactory
              children: []
              pos: 29929
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final Class<T1> clazz
                children: []
                pos: 29960
                length: 21
              pos: 29891
              length: 1212
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return new TypeAdapterFactory() {
                          @SuppressWarnings("unchecked")
                          @Override public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
                            final Class<? super T2> requestedType = typeToken.getRawType();
                            if (!clazz.isAssignableFrom(requestedType)) {
                              return null;
                            }
                            return (TypeAdapter<T2>) new TypeAdapter<T1>() {
                              @Override public void write(JsonWriter out, T1 value) throws IOException {
                                typeAdapter.write(out, value);
                              }

                              @Override public T1 read(JsonReader in) throws IOException {
                                T1 result = typeAdapter.read(in);
                                if (result != null && !requestedType.isInstance(result)) {
                                  throw new JsonSyntaxException("Expected a " + requestedType.getName()
                                      + " but was " + result.getClass().getName());
                                }
                                return result;
                              }
                            };
                          }
                          @Override public String toString() {
                            return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
                          }
                        };
                children: []
                pos: 30024
                length: 1075
              pos: 30018
              length: 1085
          children: []
          pos: 29891
          length: 1212
        pos: 2017
        length: 29088
    children: []
    pos: 2017
    length: 29088
  pos: 0
  length: 31106
text_diff: |
  --- before
  +++ after
  @@ -368,7 +368,6 @@
           in.nextNull();
           return null;
         case NUMBER:
  -      case STRING:
           return new LazilyParsedNumber(in.nextString());
         default:
           throw new JsonSyntaxException("Expecting number, got: " + jsonToken);
tree_diff: |+
  New cluster:
  UPDATE from public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {
      @Override
      public Number read(JsonReader in) throws IOException {
        JsonToken jsonToken = in.peek();
        switch (jsonToken) {
        case NULL:
          in.nextNull();
          return null;
        case NUMBER:
        case STRING:
          return new LazilyParsedNumber(in.nextString());
        default:
          throw new JsonSyntaxException("Expecting number, got: " + jsonToken);
        }
      }
      @Override
      public void write(JsonWriter out, Number value) throws IOException {
        out.value(value);
      }
    }; to public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {
      @Override
      public Number read(JsonReader in) throws IOException {
        JsonToken jsonToken = in.peek();
        switch (jsonToken) {
        case NULL:
          in.nextNull();
          return null;
        case NUMBER:
          return new LazilyParsedNumber(in.nextString());
        default:
          throw new JsonSyntaxException("Expecting number, got: " + jsonToken);
        }
      }
      @Override
      public void write(JsonWriter out, Number value) throws IOException {
        out.value(value);
      }
    };
  ------------
  ===
  update-node
  ---
  field_declaration: public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {
      @Override
      public Number read(JsonReader in) throws IOException {
        JsonToken jsonToken = in.peek();
        switch (jsonToken) {
        case NULL:
          in.nextNull();
          return null;
        case NUMBER:
        case STRING:
          return new LazilyParsedNumber(in.nextString());
        default:
          throw new JsonSyntaxException("Expecting number, got: " + jsonToken);
        }
      }
      @Override
      public void write(JsonWriter out, Number value) throws IOException {
        out.value(value);
      }
    }; [11423,12022]
  replace public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {
      @Override
      public Number read(JsonReader in) throws IOException {
        JsonToken jsonToken = in.peek();
        switch (jsonToken) {
        case NULL:
          in.nextNull();
          return null;
        case NUMBER:
        case STRING:
          return new LazilyParsedNumber(in.nextString());
        default:
          throw new JsonSyntaxException("Expecting number, got: " + jsonToken);
        }
      }
      @Override
      public void write(JsonWriter out, Number value) throws IOException {
        out.value(value);
      }
    }; by public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {
      @Override
      public Number read(JsonReader in) throws IOException {
        JsonToken jsonToken = in.peek();
        switch (jsonToken) {
        case NULL:
          in.nextNull();
          return null;
        case NUMBER:
          return new LazilyParsedNumber(in.nextString());
        default:
          throw new JsonSyntaxException("Expecting number, got: " + jsonToken);
        }
      }
      @Override
      public void write(JsonWriter out, Number value) throws IOException {
        out.value(value);
      }
    };

...
