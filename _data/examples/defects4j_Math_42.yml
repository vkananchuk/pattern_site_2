---
language: java
text_diff: "--- before\n+++ after\n@@ -407,12 +407,10 @@\n             continue;\n
  \          }\n           Integer basicRow = getBasicRow(colIndex);\n-          if
  (basicRow != null && basicRow == 0) {\n               // if the basic row is found
  to be the objective function row\n               // set the coefficient to 0 ->
  this case handles unconstrained \n               // variables that are still part
  of the objective function\n-              coefficients[i] = 0;\n-          } else
  if (basicRows.contains(basicRow)) {\n+          if (basicRows.contains(basicRow))
  {\n               // if multiple variables can take a given value\n               //
  then we choose the first and set the rest equal to 0\n               coefficients[i]
  = 0 - (restrictToNonNegative ? 0 : mostNegative);\n"
tree_diff: "New cluster:\nUPDATE from for (int i = 0; i < coefficients.length; i++)
  {\n          int colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex
  < 0) {\n            coefficients[i] = 0;\n            continue;\n          }\n          Integer
  basicRow = getBasicRow(colIndex);\n          if (basicRow != null && basicRow ==
  0) {\n              // if the basic row is found to be the objective function row\n
  \             // set the coefficient to 0 -> this case handles unconstrained \n
  \             // variables that are still part of the objective function\n              coefficients[i]
  = 0;\n          } else if (basicRows.contains(basicRow)) {\n              // if
  multiple variables can take a given value\n              // then we choose the first
  and set the rest equal to 0\n              coefficients[i] = 0 - (restrictToNonNegative
  ? 0 : mostNegative);\n          } else {\n              basicRows.add(basicRow);\n
  \             coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow,
  getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n
  \         }\n      } to for (int i = 0; i < coefficients.length; i++) {\n          int
  colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex < 0) {\n            coefficients[i]
  = 0;\n            continue;\n          }\n          Integer basicRow = getBasicRow(colIndex);\n
  \             // if the basic row is found to be the objective function row\n              //
  set the coefficient to 0 -> this case handles unconstrained \n              // variables
  that are still part of the objective function\n          if (basicRows.contains(basicRow))
  {\n              // if multiple variables can take a given value\n              //
  then we choose the first and set the rest equal to 0\n              coefficients[i]
  = 0 - (restrictToNonNegative ? 0 : mostNegative);\n          } else {\n              basicRows.add(basicRow);\n
  \             coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow,
  getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n
  \         }\n      }\n------------\n===\nupdate-node\n---\nfor_statement: for (int
  i = 0; i < coefficients.length; i++) {\n          int colIndex = columnLabels.indexOf(\"x\"
  + i);\n          if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n
  \         }\n          Integer basicRow = getBasicRow(colIndex);\n          if (basicRow
  != null && basicRow == 0) {\n              // if the basic row is found to be the
  objective function row\n              // set the coefficient to 0 -> this case handles
  unconstrained \n              // variables that are still part of the objective
  function\n              coefficients[i] = 0;\n          } else if (basicRows.contains(basicRow))
  {\n              // if multiple variables can take a given value\n              //
  then we choose the first and set the rest equal to 0\n              coefficients[i]
  = 0 - (restrictToNonNegative ? 0 : mostNegative);\n          } else {\n              basicRows.add(basicRow);\n
  \             coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow,
  getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n
  \         }\n      } [15666,16748]\nreplace for (int i = 0; i < coefficients.length;
  i++) {\n          int colIndex = columnLabels.indexOf(\"x\" + i);\n          if
  (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n          }\n
  \         Integer basicRow = getBasicRow(colIndex);\n          if (basicRow != null
  && basicRow == 0) {\n              // if the basic row is found to be the objective
  function row\n              // set the coefficient to 0 -> this case handles unconstrained
  \n              // variables that are still part of the objective function\n              coefficients[i]
  = 0;\n          } else if (basicRows.contains(basicRow)) {\n              // if
  multiple variables can take a given value\n              // then we choose the first
  and set the rest equal to 0\n              coefficients[i] = 0 - (restrictToNonNegative
  ? 0 : mostNegative);\n          } else {\n              basicRows.add(basicRow);\n
  \             coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow,
  getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n
  \         }\n      } by for (int i = 0; i < coefficients.length; i++) {\n          int
  colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex < 0) {\n            coefficients[i]
  = 0;\n            continue;\n          }\n          Integer basicRow = getBasicRow(colIndex);\n
  \             // if the basic row is found to be the objective function row\n              //
  set the coefficient to 0 -> this case handles unconstrained \n              // variables
  that are still part of the objective function\n          if (basicRows.contains(basicRow))
  {\n              // if multiple variables can take a given value\n              //
  then we choose the first and set the rest equal to 0\n              coefficients[i]
  = 0 - (restrictToNonNegative ? 0 : mostNegative);\n          } else {\n              basicRows.add(basicRow);\n
  \             coefficients[i] =\n                  (basicRow == null ? 0 : getEntry(basicRow,
  getRhsOffset())) -\n                  (restrictToNonNegative ? 0 : mostNegative);\n
  \         }\n      }\n\n"
