---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: KHEAPSORT
        children: []
        pos: 190
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: kheapsort
              children: []
              pos: 525
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Integer> arr
                children: []
                pos: 535
                length: 22
              pos: 492
              length: 540
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: PriorityQueue<Integer> heap = new PriorityQueue<Integer>();
                children: []
                pos: 576
                length: 59
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer v : arr.subList(0,k)) {
                                heap.add(v);
                            }
                children: []
                pos: 644
                length: 71
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> output = new ArrayList<Integer>();
                children: []
                pos: 725
                length: 53
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer x : arr) {
                                heap.add(x);
                                Integer popped = heap.poll();
                                output.add(popped);
                            }
                children: []
                pos: 787
                length: 132
              - type: while_statement
                fields:
                  text: |-
                    while (!heap.isEmpty()) {
                                output.add(heap.poll());
                            }
                children: []
                pos: 929
                length: 72
              - type: return_statement
                fields:
                  text: return output;
                children: []
                pos: 1011
                length: 14
              pos: 566
              length: 466
          children: []
          pos: 492
          length: 540
        pos: 177
        length: 857
    children: []
    pos: 177
    length: 857
  pos: 0
  length: 1035
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: KHEAPSORT
        children: []
        pos: 199
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: kheapsort
              children: []
              pos: 534
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Integer> arr
                children: []
                pos: 544
                length: 22
              pos: 501
              length: 563
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: PriorityQueue<Integer> heap = new PriorityQueue<Integer>();
                children: []
                pos: 585
                length: 59
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer v : arr.subList(0,k)) {
                                heap.add(v);
                            }
                children: []
                pos: 653
                length: 71
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> output = new ArrayList<Integer>();
                children: []
                pos: 734
                length: 53
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer x : arr.subList(k, arr.size())) {
                                heap.add(x);
                                Integer popped = heap.poll();
                                output.add(popped);
                            }
                children: []
                pos: 796
                length: 155
              - type: while_statement
                fields:
                  text: |-
                    while (!heap.isEmpty()) {
                                output.add(heap.poll());
                            }
                children: []
                pos: 961
                length: 72
              - type: return_statement
                fields:
                  text: return output;
                children: []
                pos: 1043
                length: 14
              pos: 575
              length: 489
          children: []
          pos: 501
          length: 563
        pos: 186
        length: 880
    children: []
    pos: 186
    length: 880
  pos: 0
  length: 1067
text_diff: "--- before\n+++ after\n@@ -1,5 +1,6 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n+\n /*\n  * To change this template,
  choose Tools | Templates\n  * and open the template in the editor.\n@@ -24,7 +25,7
  @@\n         }\n \n         ArrayList<Integer> output = new ArrayList<Integer>();\n-
  \       for (Integer x : arr) {\n+        for (Integer x : arr.subList(k, arr.size()))
  {\n             heap.add(x);\n             Integer popped = heap.poll();\n             output.add(popped);\n"
tree_diff: |+
  New cluster:
  UPDATE from for (Integer x : arr) {
              heap.add(x);
              Integer popped = heap.poll();
              output.add(popped);
          } to for (Integer x : arr.subList(k, arr.size())) {
              heap.add(x);
              Integer popped = heap.poll();
              output.add(popped);
          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Integer x : arr) {
              heap.add(x);
              Integer popped = heap.poll();
              output.add(popped);
          } [787,919]
  replace for (Integer x : arr) {
              heap.add(x);
              Integer popped = heap.poll();
              output.add(popped);
          } by for (Integer x : arr.subList(k, arr.size())) {
              heap.add(x);
              Integer popped = heap.poll();
              output.add(popped);
          }

...
