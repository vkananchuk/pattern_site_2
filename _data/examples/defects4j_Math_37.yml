---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Complex
        children: []
        pos: 2327
        length: 7
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final Complex I = new Complex(0.0, 1.0);
          children: []
          pos: 2458
          length: 54
        - type: field_declaration
          fields:
            text: public static final Complex NaN = new Complex(Double.NaN, Double.NaN);
          children: []
          pos: 2608
          length: 70
        - type: field_declaration
          fields:
            text: public static final Complex INF = new Complex(Double.POSITIVE_INFINITY,
              Double.POSITIVE_INFINITY);
          children: []
          pos: 2777
          length: 98
        - type: field_declaration
          fields:
            text: public static final Complex ONE = new Complex(1.0, 0.0);
          children: []
          pos: 2934
          length: 56
        - type: field_declaration
          fields:
            text: public static final Complex ZERO = new Complex(0.0, 0.0);
          children: []
          pos: 3049
          length: 57
        - type: field_declaration
          fields:
            text: private static final long serialVersionUID = -6195664516687396620L;
          children: []
          pos: 3155
          length: 67
        - type: field_declaration
          fields:
            text: private final double imaginary;
          children: []
          pos: 3259
          length: 31
        - type: field_declaration
          fields:
            text: private final double real;
          children: []
          pos: 3321
          length: 26
        - type: field_declaration
          fields:
            text: private final transient boolean isNaN;
          children: []
          pos: 3415
          length: 38
        - type: field_declaration
          fields:
            text: private final transient boolean isInfinite;
          children: []
          pos: 3517
          length: 43
        - type: constructor_declaration
          fields:
            text: |-
              public Complex(double real) {
                      this(real, 0.0);
                  }
          children: []
          pos: 3676
          length: 60
        - type: constructor_declaration
          fields:
            text: |-
              public Complex(double real, double imaginary) {
                      this.real = real;
                      this.imaginary = imaginary;

                      isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
                      isInfinite = !isNaN &&
                          (Double.isInfinite(real) || Double.isInfinite(imaginary));
                  }
          children: []
          pos: 3902
          length: 281
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: abs
              children: []
              pos: 4511
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4497
              length: 664
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 4531
                        length: 5
                    children: []
                    pos: 4530
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return Double.NaN;
                    children: []
                    pos: 4552
                    length: 18
                  pos: 4538
                  length: 42
                pos: 4527
                length: 53
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: isInfinite()
                        children: []
                        pos: 4593
                        length: 12
                    children: []
                    pos: 4592
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return Double.POSITIVE_INFINITY;
                    children: []
                    pos: 4621
                    length: 32
                  pos: 4607
                  length: 56
                pos: 4589
                length: 74
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(real)
                            children: []
                            pos: 4676
                            length: 18
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(imaginary)
                            children: []
                            pos: 4697
                            length: 23
                        children: []
                        pos: 4676
                        length: 44
                    children: []
                    pos: 4675
                    length: 46
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 4740
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 4753
                                length: 3
                            children: []
                            pos: 4740
                            length: 16
                        children: []
                        pos: 4739
                        length: 18
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return FastMath.abs(real);
                        children: []
                        pos: 4776
                        length: 26
                      pos: 4758
                      length: 58
                    pos: 4736
                    length: 80
                  - type: local_variable_declaration
                    fields:
                      text: double q = real / imaginary;
                    children: []
                    pos: 4829
                    length: 28
                  - type: return_statement
                    fields:
                      text: return FastMath.abs(imaginary) * FastMath.sqrt(1 + q *
                        q);
                    children: []
                    pos: 4870
                    length: 58
                  pos: 4722
                  length: 216
                pos: 4672
                length: 483
              pos: 4517
              length: 644
          children: []
          pos: 4497
          length: 664
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: add
              children: []
              pos: 5903
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex addend
                children: []
                pos: 5907
                length: 14
              pos: 5888
              length: 302
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(addend);
                children: []
                pos: 5962
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 6006
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: addend.isNaN
                            children: []
                            pos: 6015
                            length: 12
                        children: []
                        pos: 6006
                        length: 21
                    children: []
                    pos: 6005
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 6043
                    length: 11
                  pos: 6029
                  length: 35
                pos: 6002
                length: 62
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real + addend.getReal(),
                                                 imaginary + addend.getImaginary());
                children: []
                pos: 6074
                length: 110
              pos: 5952
              length: 238
          children: []
          pos: 5888
          length: 302
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: add
              children: []
              pos: 6492
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double addend
                children: []
                pos: 6496
                length: 13
              pos: 6477
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 6525
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(addend)
                            children: []
                            pos: 6534
                            length: 20
                        children: []
                        pos: 6525
                        length: 29
                    children: []
                    pos: 6524
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 6570
                    length: 11
                  pos: 6556
                  length: 35
                pos: 6521
                length: 70
              - type: return_statement
                fields:
                  text: return createComplex(real + addend, imaginary);
                children: []
                pos: 6601
                length: 47
              pos: 6511
              length: 143
          children: []
          pos: 6477
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: conjugate
              children: []
              pos: 7274
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7259
              length: 138
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 7300
                        length: 5
                    children: []
                    pos: 7299
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 7321
                    length: 11
                  pos: 7307
                  length: 35
                pos: 7296
                length: 46
              - type: return_statement
                fields:
                  text: return createComplex(real, -imaginary);
                children: []
                pos: 7352
                length: 39
              pos: 7286
              length: 111
          children: []
          pos: 7259
          length: 138
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: divide
              children: []
              pos: 9156
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex divisor
                children: []
                pos: 9163
                length: 15
              pos: 9141
              length: 926
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(divisor);
                children: []
                pos: 9227
                length: 32
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 9272
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: divisor.isNaN
                            children: []
                            pos: 9281
                            length: 13
                        children: []
                        pos: 9272
                        length: 22
                    children: []
                    pos: 9271
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 9310
                    length: 11
                  pos: 9296
                  length: 35
                pos: 9268
                length: 63
              - type: local_variable_declaration
                fields:
                  text: final double c = divisor.getReal();
                children: []
                pos: 9341
                length: 35
              - type: local_variable_declaration
                fields:
                  text: final double d = divisor.getImaginary();
                children: []
                pos: 9385
                length: 40
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: c
                                children: []
                                pos: 9438
                                length: 1
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 9443
                                length: 3
                            children: []
                            pos: 9438
                            length: 8
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: d
                                children: []
                                pos: 9450
                                length: 1
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 9455
                                length: 3
                            children: []
                            pos: 9450
                            length: 8
                        children: []
                        pos: 9438
                        length: 20
                    children: []
                    pos: 9437
                    length: 22
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 9474
                    length: 11
                  pos: 9460
                  length: 35
                pos: 9434
                length: 61
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: divisor.isInfinite()
                            children: []
                            pos: 9509
                            length: 20
                          right:
                            type: unary_expression
                            fields:
                              text: "!isInfinite()"
                            children: []
                            pos: 9533
                            length: 13
                        children: []
                        pos: 9509
                        length: 37
                    children: []
                    pos: 9508
                    length: 39
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return ZERO;
                    children: []
                    pos: 9562
                    length: 12
                  pos: 9548
                  length: 36
                pos: 9505
                length: 79
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(c)
                            children: []
                            pos: 9598
                            length: 15
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(d)
                            children: []
                            pos: 9616
                            length: 15
                        children: []
                        pos: 9598
                        length: 33
                    children: []
                    pos: 9597
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: double q = c / d;
                    children: []
                    pos: 9647
                    length: 17
                  - type: local_variable_declaration
                    fields:
                      text: double denominator = c * q + d;
                    children: []
                    pos: 9677
                    length: 31
                  - type: return_statement
                    fields:
                      text: |-
                        return createComplex((real * q + imaginary) / denominator,
                                        (imaginary * q - real) / denominator);
                    children: []
                    pos: 9721
                    length: 113
                  pos: 9633
                  length: 211
                pos: 9594
                length: 467
              pos: 9217
              length: 850
          children: []
          pos: 9141
          length: 926
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: divide
              children: []
              pos: 10388
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double divisor
                children: []
                pos: 10395
                length: 14
              pos: 10373
              length: 384
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 10425
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(divisor)
                            children: []
                            pos: 10434
                            length: 21
                        children: []
                        pos: 10425
                        length: 30
                    children: []
                    pos: 10424
                    length: 32
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10471
                    length: 11
                  pos: 10457
                  length: 35
                pos: 10421
                length: 71
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: divisor
                            children: []
                            pos: 10505
                            length: 7
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: 0d
                            children: []
                            pos: 10516
                            length: 2
                        children: []
                        pos: 10505
                        length: 13
                    children: []
                    pos: 10504
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10534
                    length: 11
                  pos: 10520
                  length: 35
                pos: 10501
                length: 54
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Double.isInfinite(divisor)
                        children: []
                        pos: 10568
                        length: 26
                    children: []
                    pos: 10567
                    length: 28
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: 'return !isInfinite() ? ZERO : NaN;'
                    children: []
                    pos: 10610
                    length: 34
                  pos: 10596
                  length: 58
                pos: 10564
                length: 90
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real / divisor,
                                                 imaginary  / divisor);
                children: []
                pos: 10663
                length: 88
              pos: 10411
              length: 346
          children: []
          pos: 10373
          length: 384
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: reciprocal
              children: []
              pos: 10803
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 10788
              length: 622
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 10830
                        length: 5
                    children: []
                    pos: 10829
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10851
                    length: 11
                  pos: 10837
                  length: 35
                pos: 10826
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: real
                                children: []
                                pos: 10886
                                length: 4
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 10894
                                length: 3
                            children: []
                            pos: 10886
                            length: 11
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 10901
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 10914
                                length: 3
                            children: []
                            pos: 10901
                            length: 16
                        children: []
                        pos: 10886
                        length: 31
                    children: []
                    pos: 10885
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10933
                    length: 11
                  pos: 10919
                  length: 35
                pos: 10882
                length: 72
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isInfinite
                        children: []
                        pos: 10968
                        length: 10
                    children: []
                    pos: 10967
                    length: 12
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return ZERO;
                    children: []
                    pos: 10994
                    length: 12
                  pos: 10980
                  length: 36
                pos: 10964
                length: 52
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(real)
                            children: []
                            pos: 11030
                            length: 18
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(imaginary)
                            children: []
                            pos: 11051
                            length: 23
                        children: []
                        pos: 11030
                        length: 44
                    children: []
                    pos: 11029
                    length: 46
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: double q = real / imaginary;
                    children: []
                    pos: 11090
                    length: 28
                  - type: local_variable_declaration
                    fields:
                      text: double scale = 1. / (real * q + imaginary);
                    children: []
                    pos: 11131
                    length: 43
                  - type: return_statement
                    fields:
                      text: return createComplex(scale * q, -scale);
                    children: []
                    pos: 11187
                    length: 40
                  pos: 11076
                  length: 161
                pos: 11026
                length: 378
              pos: 10816
              length: 594
          children: []
          pos: 10788
          length: 622
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: equals
              children: []
              pos: 12164
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Object other
                children: []
                pos: 12171
                length: 12
              pos: 12135
              length: 395
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: this
                            fields: {}
                            children: []
                            pos: 12199
                            length: 4
                          right:
                            type: identifier
                            fields:
                              text: other
                            children: []
                            pos: 12207
                            length: 5
                        children: []
                        pos: 12199
                        length: 13
                    children: []
                    pos: 12198
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return true;
                    children: []
                    pos: 12228
                    length: 12
                  pos: 12214
                  length: 36
                pos: 12195
                length: 55
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: instanceof_expression
                        fields:
                          text: other instanceof Complex
                        children: []
                        pos: 12263
                        length: 24
                    children: []
                    pos: 12262
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Complex c = (Complex)other;
                    children: []
                    pos: 12302
                    length: 27
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: field_access
                            fields:
                              text: c.isNaN
                            children: []
                            pos: 12346
                            length: 7
                        children: []
                        pos: 12345
                        length: 9
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return isNaN;
                        children: []
                        pos: 12373
                        length: 13
                      pos: 12355
                      length: 45
                    pos: 12342
                    length: 150
                  pos: 12288
                  length: 214
                pos: 12259
                length: 243
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 12511
                length: 13
              pos: 12185
              length: 345
          children: []
          pos: 12135
          length: 395
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hashCode
              children: []
              pos: 12788
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 12763
              length: 185
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 12813
                        length: 5
                    children: []
                    pos: 12812
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return 7;
                    children: []
                    pos: 12834
                    length: 9
                  pos: 12820
                  length: 33
                pos: 12809
                length: 44
              - type: return_statement
                fields:
                  text: |-
                    return 37 * (17 * MathUtils.hash(imaginary) +
                                MathUtils.hash(real));
                children: []
                pos: 12862
                length: 80
              pos: 12799
              length: 149
          children: []
          pos: 12763
          length: 185
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getImaginary
              children: []
              pos: 13060
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13046
              length: 62
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return imaginary;
                children: []
                pos: 13085
                length: 17
              pos: 13075
              length: 33
          children: []
          pos: 13046
          length: 62
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getReal
              children: []
              pos: 13210
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13196
              length: 52
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return real;
                children: []
                pos: 13230
                length: 12
              pos: 13220
              length: 28
          children: []
          pos: 13196
          length: 52
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isNaN
              children: []
              pos: 13488
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13473
              length: 52
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isNaN;
                children: []
                pos: 13506
                length: 13
              pos: 13496
              length: 29
          children: []
          pos: 13473
          length: 52
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isInfinite
              children: []
              pos: 13921
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13906
              length: 62
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isInfinite;
                children: []
                pos: 13944
                length: 18
              pos: 13934
              length: 34
          children: []
          pos: 13906
          length: 62
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 15007
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex factor
                children: []
                pos: 15016
                length: 14
              pos: 14992
              length: 642
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(factor);
                children: []
                pos: 15079
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 15123
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: factor.isNaN
                            children: []
                            pos: 15132
                            length: 12
                        children: []
                        pos: 15123
                        length: 21
                    children: []
                    pos: 15122
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 15160
                    length: 11
                  pos: 15146
                  length: 35
                pos: 15119
                length: 62
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: or
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: Double.isInfinite(real)
                                    children: []
                                    pos: 15194
                                    length: 23
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: Double.isInfinite(imaginary)
                                    children: []
                                    pos: 15233
                                    length: 28
                                children: []
                                pos: 15194
                                length: 67
                              right:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(factor.real)
                                children: []
                                pos: 15277
                                length: 30
                            children: []
                            pos: 15194
                            length: 113
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(factor.imaginary)
                            children: []
                            pos: 15323
                            length: 35
                        children: []
                        pos: 15194
                        length: 164
                    children: []
                    pos: 15193
                    length: 166
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 15446
                    length: 11
                  pos: 15360
                  length: 107
                pos: 15190
                length: 277
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real * factor.real - imaginary * factor.imaginary,
                                                 real * factor.imaginary + imaginary * factor.real);
                children: []
                pos: 15476
                length: 152
              pos: 15069
              length: 565
          children: []
          pos: 14992
          length: 642
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 15948
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final int factor
                children: []
                pos: 15957
                length: 16
              pos: 15933
              length: 286
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 15989
                        length: 5
                    children: []
                    pos: 15988
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 16010
                    length: 11
                  pos: 15996
                  length: 35
                pos: 15985
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(real)
                            children: []
                            pos: 16044
                            length: 23
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(imaginary)
                            children: []
                            pos: 16083
                            length: 28
                        children: []
                        pos: 16044
                        length: 67
                    children: []
                    pos: 16043
                    length: 69
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 16127
                    length: 11
                  pos: 16113
                  length: 35
                pos: 16040
                length: 108
              - type: return_statement
                fields:
                  text: return createComplex(real * factor, imaginary * factor);
                children: []
                pos: 16157
                length: 56
              pos: 15975
              length: 244
          children: []
          pos: 15933
          length: 286
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 16530
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double factor
                children: []
                pos: 16539
                length: 13
              pos: 16515
              length: 420
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 16568
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(factor)
                            children: []
                            pos: 16577
                            length: 20
                        children: []
                        pos: 16568
                        length: 29
                    children: []
                    pos: 16567
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 16613
                    length: 11
                  pos: 16599
                  length: 35
                pos: 16564
                length: 70
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(real)
                                children: []
                                pos: 16647
                                length: 23
                              right:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(imaginary)
                                children: []
                                pos: 16686
                                length: 28
                            children: []
                            pos: 16647
                            length: 67
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(factor)
                            children: []
                            pos: 16730
                            length: 25
                        children: []
                        pos: 16647
                        length: 108
                    children: []
                    pos: 16646
                    length: 110
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 16843
                    length: 11
                  pos: 16757
                  length: 107
                pos: 16643
                length: 221
              - type: return_statement
                fields:
                  text: return createComplex(real * factor, imaginary * factor);
                children: []
                pos: 16873
                length: 56
              pos: 16554
              length: 381
          children: []
          pos: 16515
          length: 420
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: negate
              children: []
              pos: 17191
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 17176
              length: 136
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 17214
                        length: 5
                    children: []
                    pos: 17213
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 17235
                    length: 11
                  pos: 17221
                  length: 35
                pos: 17210
                length: 46
              - type: return_statement
                fields:
                  text: return createComplex(-real, -imaginary);
                children: []
                pos: 17266
                length: 40
              pos: 17200
              length: 112
          children: []
          pos: 17176
          length: 136
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subtract
              children: []
              pos: 18061
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex subtrahend
                children: []
                pos: 18070
                length: 18
              pos: 18046
              length: 335
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(subtrahend);
                children: []
                pos: 18137
                length: 35
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 18185
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: subtrahend.isNaN
                            children: []
                            pos: 18194
                            length: 16
                        children: []
                        pos: 18185
                        length: 25
                    children: []
                    pos: 18184
                    length: 27
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 18226
                    length: 11
                  pos: 18212
                  length: 35
                pos: 18181
                length: 66
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real - subtrahend.getReal(),
                                                 imaginary - subtrahend.getImaginary());
                children: []
                pos: 18257
                length: 118
              pos: 18127
              length: 254
          children: []
          pos: 18046
          length: 335
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subtract
              children: []
              pos: 18658
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double subtrahend
                children: []
                pos: 18667
                length: 17
              pos: 18643
              length: 193
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 18700
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(subtrahend)
                            children: []
                            pos: 18709
                            length: 24
                        children: []
                        pos: 18700
                        length: 33
                    children: []
                    pos: 18699
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 18749
                    length: 11
                  pos: 18735
                  length: 35
                pos: 18696
                length: 74
              - type: return_statement
                fields:
                  text: return createComplex(real - subtrahend, imaginary);
                children: []
                pos: 18779
                length: 51
              pos: 18686
              length: 150
          children: []
          pos: 18643
          length: 193
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: acos
              children: []
              pos: 19380
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 19365
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 19401
                        length: 5
                    children: []
                    pos: 19400
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 19422
                    length: 11
                  pos: 19408
                  length: 35
                pos: 19397
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return this.add(this.sqrt1z().multiply(I)).log()
                                .multiply(I.negate());
                children: []
                pos: 19453
                length: 83
              pos: 19387
              length: 155
          children: []
          pos: 19365
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: asin
              children: []
              pos: 20077
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20062
              length: 172
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 20098
                        length: 5
                    children: []
                    pos: 20097
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 20119
                    length: 11
                  pos: 20105
                  length: 35
                pos: 20094
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return sqrt1z().add(this.multiply(I)).log()
                                .multiply(I.negate());
                children: []
                pos: 20150
                length: 78
              pos: 20084
              length: 150
          children: []
          pos: 20062
          length: 172
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: atan
              children: []
              pos: 20765
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20750
              length: 201
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 20786
                        length: 5
                    children: []
                    pos: 20785
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 20807
                    length: 11
                  pos: 20793
                  length: 35
                pos: 20782
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return this.add(I).divide(I.subtract(this)).log()
                                .multiply(I.divide(createComplex(2.0, 0.0)));
                children: []
                pos: 20838
                length: 107
              pos: 20772
              length: 179
          children: []
          pos: 20750
          length: 201
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cos
              children: []
              pos: 22056
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 22041
              length: 238
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 22076
                        length: 5
                    children: []
                    pos: 22075
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 22097
                    length: 11
                  pos: 22083
                  length: 35
                pos: 22072
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary),
                                                 -FastMath.sin(real) * FastMath.sinh(imaginary));
                children: []
                pos: 22128
                length: 145
              pos: 22062
              length: 217
          children: []
          pos: 22041
          length: 238
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cosh
              children: []
              pos: 23421
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 23406
              length: 238
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 23442
                        length: 5
                    children: []
                    pos: 23441
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 23463
                    length: 11
                  pos: 23449
                  length: 35
                pos: 23438
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary),
                                                 FastMath.sinh(real) * FastMath.sin(imaginary));
                children: []
                pos: 23494
                length: 144
              pos: 23428
              length: 216
          children: []
          pos: 23406
          length: 238
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exp
              children: []
              pos: 24782
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 24767
              length: 259
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 24802
                        length: 5
                    children: []
                    pos: 24801
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 24823
                    length: 11
                  pos: 24809
                  length: 35
                pos: 24798
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double expReal = FastMath.exp(real);
                children: []
                pos: 24854
                length: 36
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(expReal *  FastMath.cos(imaginary),
                                                 expReal * FastMath.sin(imaginary));
                children: []
                pos: 24899
                length: 121
              pos: 24788
              length: 238
          children: []
          pos: 24767
          length: 259
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: log
              children: []
              pos: 26395
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 26380
              length: 197
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 26415
                        length: 5
                    children: []
                    pos: 26414
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 26436
                    length: 11
                  pos: 26422
                  length: 35
                pos: 26411
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.log(abs()),
                                                 FastMath.atan2(imaginary, real));
                children: []
                pos: 26467
                length: 104
              pos: 26401
              length: 176
          children: []
          pos: 26380
          length: 197
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pow
              children: []
              pos: 27329
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex x
                children: []
                pos: 27333
                length: 9
              pos: 27314
              length: 154
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(x);
                children: []
                pos: 27391
                length: 26
              - type: return_statement
                fields:
                  text: return this.log().multiply(x).exp();
                children: []
                pos: 27426
                length: 36
              pos: 27381
              length: 87
          children: []
          pos: 27314
          length: 154
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pow
              children: []
              pos: 27739
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 27743
                length: 8
              pos: 27724
              length: 81
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return this.log().multiply(x).exp();
                children: []
                pos: 27763
                length: 36
              pos: 27753
              length: 52
          children: []
          pos: 27724
          length: 81
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sin
              children: []
              pos: 28912
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 28897
              length: 237
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 28932
                        length: 5
                    children: []
                    pos: 28931
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 28953
                    length: 11
                  pos: 28939
                  length: 35
                pos: 28928
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sin(real) * FastMath.cosh(imaginary),
                                                 FastMath.cos(real) * FastMath.sinh(imaginary));
                children: []
                pos: 28984
                length: 144
              pos: 28918
              length: 216
          children: []
          pos: 28897
          length: 237
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sinh
              children: []
              pos: 30265
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 30250
              length: 221
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 30286
                        length: 5
                    children: []
                    pos: 30285
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 30307
                    length: 11
                  pos: 30293
                  length: 35
                pos: 30282
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary),
                                FastMath.cosh(real) * FastMath.sin(imaginary));
                children: []
                pos: 30338
                length: 127
              pos: 30272
              length: 199
          children: []
          pos: 30250
          length: 221
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sqrt
              children: []
              pos: 31868
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 31853
              length: 513
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 31889
                        length: 5
                    children: []
                    pos: 31888
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 31910
                    length: 11
                  pos: 31896
                  length: 35
                pos: 31885
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: real
                                children: []
                                pos: 31945
                                length: 4
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 31953
                                length: 3
                            children: []
                            pos: 31945
                            length: 11
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 31960
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 31973
                                length: 3
                            children: []
                            pos: 31960
                            length: 16
                        children: []
                        pos: 31945
                        length: 31
                    children: []
                    pos: 31944
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(0.0, 0.0);
                    children: []
                    pos: 31992
                    length: 31
                  pos: 31978
                  length: 55
                pos: 31941
                length: 92
              - type: local_variable_declaration
                fields:
                  text: double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
                children: []
                pos: 32043
                length: 61
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: real
                            children: []
                            pos: 32117
                            length: 4
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: '0.0'
                            children: []
                            pos: 32125
                            length: 3
                        children: []
                        pos: 32117
                        length: 11
                    children: []
                    pos: 32116
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(t, imaginary / (2.0 * t));
                    children: []
                    pos: 32144
                    length: 47
                  pos: 32130
                  length: 71
                pos: 32113
                length: 247
              pos: 31875
              length: 491
          children: []
          pos: 31853
          length: 513
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sqrt1z
              children: []
              pos: 33053
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 33038
              length: 108
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
                children: []
                pos: 33072
                length: 68
              pos: 33062
              length: 84
          children: []
          pos: 33038
          length: 108
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tan
              children: []
              pos: 34325
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 34310
              length: 549
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 34345
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(real)
                            children: []
                            pos: 34354
                            length: 23
                        children: []
                        pos: 34345
                        length: 32
                    children: []
                    pos: 34344
                    length: 34
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 34393
                    length: 11
                  pos: 34379
                  length: 35
                pos: 34341
                length: 73
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: imaginary
                            children: []
                            pos: 34427
                            length: 9
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: '20.0'
                            children: []
                            pos: 34439
                            length: 4
                        children: []
                        pos: 34427
                        length: 16
                    children: []
                    pos: 34426
                    length: 18
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(0.0, 1.0);
                    children: []
                    pos: 34459
                    length: 31
                  pos: 34445
                  length: 55
                pos: 34423
                length: 77
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: imaginary
                            children: []
                            pos: 34513
                            length: 9
                          right:
                            type: unary_expression
                            fields:
                              text: "-20.0"
                            children: []
                            pos: 34525
                            length: 5
                        children: []
                        pos: 34513
                        length: 17
                    children: []
                    pos: 34512
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(0.0, -1.0);
                    children: []
                    pos: 34546
                    length: 32
                  pos: 34532
                  length: 56
                pos: 34509
                length: 79
              - type: local_variable_declaration
                fields:
                  text: double real2 = 2.0 * real;
                children: []
                pos: 34598
                length: 26
              - type: local_variable_declaration
                fields:
                  text: double imaginary2 = 2.0 * imaginary;
                children: []
                pos: 34633
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);
                children: []
                pos: 34678
                length: 59
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sin(real2) / d,
                                                 FastMath.sinh(imaginary2) / d);
                children: []
                pos: 34747
                length: 106
              pos: 34331
              length: 528
          children: []
          pos: 34310
          length: 549
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tanh
              children: []
              pos: 36048
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 36033
              length: 544
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 36069
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(imaginary)
                            children: []
                            pos: 36078
                            length: 28
                        children: []
                        pos: 36069
                        length: 37
                    children: []
                    pos: 36068
                    length: 39
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 36122
                    length: 11
                  pos: 36108
                  length: 35
                pos: 36065
                length: 78
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: real
                            children: []
                            pos: 36156
                            length: 4
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: '20.0'
                            children: []
                            pos: 36163
                            length: 4
                        children: []
                        pos: 36156
                        length: 11
                    children: []
                    pos: 36155
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(1.0, 0.0);
                    children: []
                    pos: 36183
                    length: 31
                  pos: 36169
                  length: 55
                pos: 36152
                length: 72
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: real
                            children: []
                            pos: 36237
                            length: 4
                          right:
                            type: unary_expression
                            fields:
                              text: "-20.0"
                            children: []
                            pos: 36244
                            length: 5
                        children: []
                        pos: 36237
                        length: 12
                    children: []
                    pos: 36236
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(-1.0, 0.0);
                    children: []
                    pos: 36265
                    length: 32
                  pos: 36251
                  length: 56
                pos: 36233
                length: 74
              - type: local_variable_declaration
                fields:
                  text: double real2 = 2.0 * real;
                children: []
                pos: 36316
                length: 26
              - type: local_variable_declaration
                fields:
                  text: double imaginary2 = 2.0 * imaginary;
                children: []
                pos: 36351
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
                children: []
                pos: 36396
                length: 59
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sinh(real2) / d,
                                                 FastMath.sin(imaginary2) / d);
                children: []
                pos: 36465
                length: 106
              pos: 36055
              length: 522
          children: []
          pos: 36033
          length: 544
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getArgument
              children: []
              pos: 37425
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 37411
              length: 93
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return FastMath.atan2(getImaginary(), getReal());
                children: []
                pos: 37449
                length: 49
              pos: 37439
              length: 65
          children: []
          pos: 37411
          length: 93
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nthRoot
              children: []
              pos: 38447
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 38455
                length: 5
              pos: 38426
              length: 1170
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 38477
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 38482
                            length: 1
                        children: []
                        pos: 38477
                        length: 6
                    children: []
                    pos: 38476
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: |-
                        throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,
                                                                   n);
                    children: []
                    pos: 38499
                    length: 134
                  pos: 38485
                  length: 158
                pos: 38473
                length: 170
              - type: local_variable_declaration
                fields:
                  text: final List<Complex> result = new ArrayList<Complex>();
                children: []
                pos: 38653
                length: 54
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 38721
                        length: 5
                    children: []
                    pos: 38720
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: result.add(NaN);
                    children: []
                    pos: 38742
                    length: 16
                  - type: return_statement
                    fields:
                      text: return result;
                    children: []
                    pos: 38771
                    length: 14
                  pos: 38728
                  length: 67
                pos: 38717
                length: 78
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: isInfinite()
                        children: []
                        pos: 38808
                        length: 12
                    children: []
                    pos: 38807
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: result.add(INF);
                    children: []
                    pos: 38836
                    length: 16
                  - type: return_statement
                    fields:
                      text: return result;
                    children: []
                    pos: 38865
                    length: 14
                  pos: 38822
                  length: 67
                pos: 38804
                length: 85
              - type: local_variable_declaration
                fields:
                  text: final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);
                children: []
                pos: 38974
                length: 57
              - type: local_variable_declaration
                fields:
                  text: final double nthPhi = getArgument() / n;
                children: []
                pos: 39111
                length: 40
              - type: local_variable_declaration
                fields:
                  text: final double slice = 2 * FastMath.PI / n;
                children: []
                pos: 39160
                length: 41
              - type: local_variable_declaration
                fields:
                  text: double innerPart = nthPhi;
                children: []
                pos: 39210
                length: 26
              - type: for_statement
                fields:
                  text: |-
                    for (int k = 0; k < n ; k++) {
                                // inner part
                                final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);
                                final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);
                                result.add(createComplex(realPart, imaginaryPart));
                                innerPart += slice;
                            }
                children: []
                pos: 39245
                length: 321
              - type: return_statement
                fields:
                  text: return result;
                children: []
                pos: 39576
                length: 14
              pos: 38462
              length: 1134
          children: []
          pos: 38426
          length: 1170
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createComplex
              children: []
              pos: 39889
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 39903
                length: 15
              pos: 39871
              length: 167
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new Complex(realPart, imaginaryPart);
                children: []
                pos: 39988
                length: 44
              pos: 39978
              length: 60
          children: []
          pos: 39871
          length: 167
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: valueOf
              children: []
              pos: 40269
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 40277
                length: 15
              pos: 40247
              length: 278
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(realPart)
                            children: []
                            pos: 40364
                            length: 22
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(imaginaryPart)
                            children: []
                            pos: 40402
                            length: 27
                        children: []
                        pos: 40364
                        length: 65
                    children: []
                    pos: 40363
                    length: 67
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 40445
                    length: 11
                  pos: 40431
                  length: 35
                pos: 40360
                length: 106
              - type: return_statement
                fields:
                  text: return new Complex(realPart, imaginaryPart);
                children: []
                pos: 40475
                length: 44
              pos: 40350
              length: 175
          children: []
          pos: 40247
          length: 278
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: valueOf
              children: []
              pos: 40702
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 40710
                length: 15
              pos: 40680
              length: 164
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Double.isNaN(realPart)
                        children: []
                        pos: 40741
                        length: 22
                    children: []
                    pos: 40740
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 40779
                    length: 11
                  pos: 40765
                  length: 35
                pos: 40737
                length: 63
              - type: return_statement
                fields:
                  text: return new Complex(realPart);
                children: []
                pos: 40809
                length: 29
              pos: 40727
              length: 117
          children: []
          pos: 40680
          length: 164
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: readResolve
              children: []
              pos: 41139
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 41116
              length: 91
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return createComplex(real, imaginary);
                children: []
                pos: 41163
                length: 38
              pos: 41153
              length: 54
          children: []
          pos: 41116
          length: 91
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getField
              children: []
              pos: 41258
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 41238
              length: 81
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return ComplexField.getInstance();
                children: []
                pos: 41279
                length: 34
              pos: 41269
              length: 50
          children: []
          pos: 41238
          length: 81
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: toString
              children: []
              pos: 41378
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 41350
              length: 98
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return "(" + real + ", " + imaginary + ")";
                children: []
                pos: 41399
                length: 43
              pos: 41389
              length: 59
          children: []
          pos: 41350
          length: 98
        pos: 2314
        length: 39137
    children: []
    pos: 2314
    length: 39137
  pos: 0
  length: 41452
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Complex
        children: []
        pos: 2327
        length: 7
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final Complex I = new Complex(0.0, 1.0);
          children: []
          pos: 2458
          length: 54
        - type: field_declaration
          fields:
            text: public static final Complex NaN = new Complex(Double.NaN, Double.NaN);
          children: []
          pos: 2608
          length: 70
        - type: field_declaration
          fields:
            text: public static final Complex INF = new Complex(Double.POSITIVE_INFINITY,
              Double.POSITIVE_INFINITY);
          children: []
          pos: 2777
          length: 98
        - type: field_declaration
          fields:
            text: public static final Complex ONE = new Complex(1.0, 0.0);
          children: []
          pos: 2934
          length: 56
        - type: field_declaration
          fields:
            text: public static final Complex ZERO = new Complex(0.0, 0.0);
          children: []
          pos: 3049
          length: 57
        - type: field_declaration
          fields:
            text: private static final long serialVersionUID = -6195664516687396620L;
          children: []
          pos: 3155
          length: 67
        - type: field_declaration
          fields:
            text: private final double imaginary;
          children: []
          pos: 3259
          length: 31
        - type: field_declaration
          fields:
            text: private final double real;
          children: []
          pos: 3321
          length: 26
        - type: field_declaration
          fields:
            text: private final transient boolean isNaN;
          children: []
          pos: 3415
          length: 38
        - type: field_declaration
          fields:
            text: private final transient boolean isInfinite;
          children: []
          pos: 3517
          length: 43
        - type: constructor_declaration
          fields:
            text: |-
              public Complex(double real) {
                      this(real, 0.0);
                  }
          children: []
          pos: 3676
          length: 60
        - type: constructor_declaration
          fields:
            text: |-
              public Complex(double real, double imaginary) {
                      this.real = real;
                      this.imaginary = imaginary;

                      isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
                      isInfinite = !isNaN &&
                          (Double.isInfinite(real) || Double.isInfinite(imaginary));
                  }
          children: []
          pos: 3902
          length: 281
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: abs
              children: []
              pos: 4511
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 4497
              length: 664
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 4531
                        length: 5
                    children: []
                    pos: 4530
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return Double.NaN;
                    children: []
                    pos: 4552
                    length: 18
                  pos: 4538
                  length: 42
                pos: 4527
                length: 53
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: isInfinite()
                        children: []
                        pos: 4593
                        length: 12
                    children: []
                    pos: 4592
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return Double.POSITIVE_INFINITY;
                    children: []
                    pos: 4621
                    length: 32
                  pos: 4607
                  length: 56
                pos: 4589
                length: 74
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(real)
                            children: []
                            pos: 4676
                            length: 18
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(imaginary)
                            children: []
                            pos: 4697
                            length: 23
                        children: []
                        pos: 4676
                        length: 44
                    children: []
                    pos: 4675
                    length: 46
                children:
                - type: block
                  fields: {}
                  children:
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 4740
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 4753
                                length: 3
                            children: []
                            pos: 4740
                            length: 16
                        children: []
                        pos: 4739
                        length: 18
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return FastMath.abs(real);
                        children: []
                        pos: 4776
                        length: 26
                      pos: 4758
                      length: 58
                    pos: 4736
                    length: 80
                  - type: local_variable_declaration
                    fields:
                      text: double q = real / imaginary;
                    children: []
                    pos: 4829
                    length: 28
                  - type: return_statement
                    fields:
                      text: return FastMath.abs(imaginary) * FastMath.sqrt(1 + q *
                        q);
                    children: []
                    pos: 4870
                    length: 58
                  pos: 4722
                  length: 216
                pos: 4672
                length: 483
              pos: 4517
              length: 644
          children: []
          pos: 4497
          length: 664
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: add
              children: []
              pos: 5903
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex addend
                children: []
                pos: 5907
                length: 14
              pos: 5888
              length: 302
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(addend);
                children: []
                pos: 5962
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 6006
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: addend.isNaN
                            children: []
                            pos: 6015
                            length: 12
                        children: []
                        pos: 6006
                        length: 21
                    children: []
                    pos: 6005
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 6043
                    length: 11
                  pos: 6029
                  length: 35
                pos: 6002
                length: 62
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real + addend.getReal(),
                                                 imaginary + addend.getImaginary());
                children: []
                pos: 6074
                length: 110
              pos: 5952
              length: 238
          children: []
          pos: 5888
          length: 302
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: add
              children: []
              pos: 6492
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double addend
                children: []
                pos: 6496
                length: 13
              pos: 6477
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 6525
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(addend)
                            children: []
                            pos: 6534
                            length: 20
                        children: []
                        pos: 6525
                        length: 29
                    children: []
                    pos: 6524
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 6570
                    length: 11
                  pos: 6556
                  length: 35
                pos: 6521
                length: 70
              - type: return_statement
                fields:
                  text: return createComplex(real + addend, imaginary);
                children: []
                pos: 6601
                length: 47
              pos: 6511
              length: 143
          children: []
          pos: 6477
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: conjugate
              children: []
              pos: 7274
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7259
              length: 138
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 7300
                        length: 5
                    children: []
                    pos: 7299
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 7321
                    length: 11
                  pos: 7307
                  length: 35
                pos: 7296
                length: 46
              - type: return_statement
                fields:
                  text: return createComplex(real, -imaginary);
                children: []
                pos: 7352
                length: 39
              pos: 7286
              length: 111
          children: []
          pos: 7259
          length: 138
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: divide
              children: []
              pos: 9156
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex divisor
                children: []
                pos: 9163
                length: 15
              pos: 9141
              length: 926
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(divisor);
                children: []
                pos: 9227
                length: 32
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 9272
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: divisor.isNaN
                            children: []
                            pos: 9281
                            length: 13
                        children: []
                        pos: 9272
                        length: 22
                    children: []
                    pos: 9271
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 9310
                    length: 11
                  pos: 9296
                  length: 35
                pos: 9268
                length: 63
              - type: local_variable_declaration
                fields:
                  text: final double c = divisor.getReal();
                children: []
                pos: 9341
                length: 35
              - type: local_variable_declaration
                fields:
                  text: final double d = divisor.getImaginary();
                children: []
                pos: 9385
                length: 40
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: c
                                children: []
                                pos: 9438
                                length: 1
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 9443
                                length: 3
                            children: []
                            pos: 9438
                            length: 8
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: d
                                children: []
                                pos: 9450
                                length: 1
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 9455
                                length: 3
                            children: []
                            pos: 9450
                            length: 8
                        children: []
                        pos: 9438
                        length: 20
                    children: []
                    pos: 9437
                    length: 22
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 9474
                    length: 11
                  pos: 9460
                  length: 35
                pos: 9434
                length: 61
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: divisor.isInfinite()
                            children: []
                            pos: 9509
                            length: 20
                          right:
                            type: unary_expression
                            fields:
                              text: "!isInfinite()"
                            children: []
                            pos: 9533
                            length: 13
                        children: []
                        pos: 9509
                        length: 37
                    children: []
                    pos: 9508
                    length: 39
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return ZERO;
                    children: []
                    pos: 9562
                    length: 12
                  pos: 9548
                  length: 36
                pos: 9505
                length: 79
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(c)
                            children: []
                            pos: 9598
                            length: 15
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(d)
                            children: []
                            pos: 9616
                            length: 15
                        children: []
                        pos: 9598
                        length: 33
                    children: []
                    pos: 9597
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: double q = c / d;
                    children: []
                    pos: 9647
                    length: 17
                  - type: local_variable_declaration
                    fields:
                      text: double denominator = c * q + d;
                    children: []
                    pos: 9677
                    length: 31
                  - type: return_statement
                    fields:
                      text: |-
                        return createComplex((real * q + imaginary) / denominator,
                                        (imaginary * q - real) / denominator);
                    children: []
                    pos: 9721
                    length: 113
                  pos: 9633
                  length: 211
                pos: 9594
                length: 467
              pos: 9217
              length: 850
          children: []
          pos: 9141
          length: 926
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: divide
              children: []
              pos: 10388
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double divisor
                children: []
                pos: 10395
                length: 14
              pos: 10373
              length: 384
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 10425
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(divisor)
                            children: []
                            pos: 10434
                            length: 21
                        children: []
                        pos: 10425
                        length: 30
                    children: []
                    pos: 10424
                    length: 32
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10471
                    length: 11
                  pos: 10457
                  length: 35
                pos: 10421
                length: 71
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: divisor
                            children: []
                            pos: 10505
                            length: 7
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: 0d
                            children: []
                            pos: 10516
                            length: 2
                        children: []
                        pos: 10505
                        length: 13
                    children: []
                    pos: 10504
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10534
                    length: 11
                  pos: 10520
                  length: 35
                pos: 10501
                length: 54
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Double.isInfinite(divisor)
                        children: []
                        pos: 10568
                        length: 26
                    children: []
                    pos: 10567
                    length: 28
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: 'return !isInfinite() ? ZERO : NaN;'
                    children: []
                    pos: 10610
                    length: 34
                  pos: 10596
                  length: 58
                pos: 10564
                length: 90
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real / divisor,
                                                 imaginary  / divisor);
                children: []
                pos: 10663
                length: 88
              pos: 10411
              length: 346
          children: []
          pos: 10373
          length: 384
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: reciprocal
              children: []
              pos: 10803
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 10788
              length: 622
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 10830
                        length: 5
                    children: []
                    pos: 10829
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10851
                    length: 11
                  pos: 10837
                  length: 35
                pos: 10826
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: real
                                children: []
                                pos: 10886
                                length: 4
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 10894
                                length: 3
                            children: []
                            pos: 10886
                            length: 11
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 10901
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 10914
                                length: 3
                            children: []
                            pos: 10901
                            length: 16
                        children: []
                        pos: 10886
                        length: 31
                    children: []
                    pos: 10885
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 10933
                    length: 11
                  pos: 10919
                  length: 35
                pos: 10882
                length: 72
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isInfinite
                        children: []
                        pos: 10968
                        length: 10
                    children: []
                    pos: 10967
                    length: 12
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return ZERO;
                    children: []
                    pos: 10994
                    length: 12
                  pos: 10980
                  length: 36
                pos: 10964
                length: 52
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(real)
                            children: []
                            pos: 11030
                            length: 18
                          right:
                            type: method_invocation
                            fields:
                              text: FastMath.abs(imaginary)
                            children: []
                            pos: 11051
                            length: 23
                        children: []
                        pos: 11030
                        length: 44
                    children: []
                    pos: 11029
                    length: 46
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: double q = real / imaginary;
                    children: []
                    pos: 11090
                    length: 28
                  - type: local_variable_declaration
                    fields:
                      text: double scale = 1. / (real * q + imaginary);
                    children: []
                    pos: 11131
                    length: 43
                  - type: return_statement
                    fields:
                      text: return createComplex(scale * q, -scale);
                    children: []
                    pos: 11187
                    length: 40
                  pos: 11076
                  length: 161
                pos: 11026
                length: 378
              pos: 10816
              length: 594
          children: []
          pos: 10788
          length: 622
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: equals
              children: []
              pos: 12164
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Object other
                children: []
                pos: 12171
                length: 12
              pos: 12135
              length: 395
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: this
                            fields: {}
                            children: []
                            pos: 12199
                            length: 4
                          right:
                            type: identifier
                            fields:
                              text: other
                            children: []
                            pos: 12207
                            length: 5
                        children: []
                        pos: 12199
                        length: 13
                    children: []
                    pos: 12198
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return true;
                    children: []
                    pos: 12228
                    length: 12
                  pos: 12214
                  length: 36
                pos: 12195
                length: 55
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: instanceof_expression
                        fields:
                          text: other instanceof Complex
                        children: []
                        pos: 12263
                        length: 24
                    children: []
                    pos: 12262
                    length: 26
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Complex c = (Complex)other;
                    children: []
                    pos: 12302
                    length: 27
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: field_access
                            fields:
                              text: c.isNaN
                            children: []
                            pos: 12346
                            length: 7
                        children: []
                        pos: 12345
                        length: 9
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return isNaN;
                        children: []
                        pos: 12373
                        length: 13
                      pos: 12355
                      length: 45
                    pos: 12342
                    length: 150
                  pos: 12288
                  length: 214
                pos: 12259
                length: 243
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 12511
                length: 13
              pos: 12185
              length: 345
          children: []
          pos: 12135
          length: 395
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hashCode
              children: []
              pos: 12788
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 12763
              length: 185
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 12813
                        length: 5
                    children: []
                    pos: 12812
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return 7;
                    children: []
                    pos: 12834
                    length: 9
                  pos: 12820
                  length: 33
                pos: 12809
                length: 44
              - type: return_statement
                fields:
                  text: |-
                    return 37 * (17 * MathUtils.hash(imaginary) +
                                MathUtils.hash(real));
                children: []
                pos: 12862
                length: 80
              pos: 12799
              length: 149
          children: []
          pos: 12763
          length: 185
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getImaginary
              children: []
              pos: 13060
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13046
              length: 62
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return imaginary;
                children: []
                pos: 13085
                length: 17
              pos: 13075
              length: 33
          children: []
          pos: 13046
          length: 62
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getReal
              children: []
              pos: 13210
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13196
              length: 52
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return real;
                children: []
                pos: 13230
                length: 12
              pos: 13220
              length: 28
          children: []
          pos: 13196
          length: 52
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isNaN
              children: []
              pos: 13488
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13473
              length: 52
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isNaN;
                children: []
                pos: 13506
                length: 13
              pos: 13496
              length: 29
          children: []
          pos: 13473
          length: 52
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isInfinite
              children: []
              pos: 13921
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 13906
              length: 62
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return isInfinite;
                children: []
                pos: 13944
                length: 18
              pos: 13934
              length: 34
          children: []
          pos: 13906
          length: 62
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 15007
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex factor
                children: []
                pos: 15016
                length: 14
              pos: 14992
              length: 642
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(factor);
                children: []
                pos: 15079
                length: 31
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 15123
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: factor.isNaN
                            children: []
                            pos: 15132
                            length: 12
                        children: []
                        pos: 15123
                        length: 21
                    children: []
                    pos: 15122
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 15160
                    length: 11
                  pos: 15146
                  length: 35
                pos: 15119
                length: 62
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: or
                                fields:
                                  left:
                                    type: method_invocation
                                    fields:
                                      text: Double.isInfinite(real)
                                    children: []
                                    pos: 15194
                                    length: 23
                                  right:
                                    type: method_invocation
                                    fields:
                                      text: Double.isInfinite(imaginary)
                                    children: []
                                    pos: 15233
                                    length: 28
                                children: []
                                pos: 15194
                                length: 67
                              right:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(factor.real)
                                children: []
                                pos: 15277
                                length: 30
                            children: []
                            pos: 15194
                            length: 113
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(factor.imaginary)
                            children: []
                            pos: 15323
                            length: 35
                        children: []
                        pos: 15194
                        length: 164
                    children: []
                    pos: 15193
                    length: 166
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 15446
                    length: 11
                  pos: 15360
                  length: 107
                pos: 15190
                length: 277
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real * factor.real - imaginary * factor.imaginary,
                                                 real * factor.imaginary + imaginary * factor.real);
                children: []
                pos: 15476
                length: 152
              pos: 15069
              length: 565
          children: []
          pos: 14992
          length: 642
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 15948
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: final int factor
                children: []
                pos: 15957
                length: 16
              pos: 15933
              length: 286
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 15989
                        length: 5
                    children: []
                    pos: 15988
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 16010
                    length: 11
                  pos: 15996
                  length: 35
                pos: 15985
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(real)
                            children: []
                            pos: 16044
                            length: 23
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(imaginary)
                            children: []
                            pos: 16083
                            length: 28
                        children: []
                        pos: 16044
                        length: 67
                    children: []
                    pos: 16043
                    length: 69
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 16127
                    length: 11
                  pos: 16113
                  length: 35
                pos: 16040
                length: 108
              - type: return_statement
                fields:
                  text: return createComplex(real * factor, imaginary * factor);
                children: []
                pos: 16157
                length: 56
              pos: 15975
              length: 244
          children: []
          pos: 15933
          length: 286
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: multiply
              children: []
              pos: 16530
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double factor
                children: []
                pos: 16539
                length: 13
              pos: 16515
              length: 420
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 16568
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(factor)
                            children: []
                            pos: 16577
                            length: 20
                        children: []
                        pos: 16568
                        length: 29
                    children: []
                    pos: 16567
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 16613
                    length: 11
                  pos: 16599
                  length: 35
                pos: 16564
                length: 70
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: or
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(real)
                                children: []
                                pos: 16647
                                length: 23
                              right:
                                type: method_invocation
                                fields:
                                  text: Double.isInfinite(imaginary)
                                children: []
                                pos: 16686
                                length: 28
                            children: []
                            pos: 16647
                            length: 67
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isInfinite(factor)
                            children: []
                            pos: 16730
                            length: 25
                        children: []
                        pos: 16647
                        length: 108
                    children: []
                    pos: 16646
                    length: 110
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 16843
                    length: 11
                  pos: 16757
                  length: 107
                pos: 16643
                length: 221
              - type: return_statement
                fields:
                  text: return createComplex(real * factor, imaginary * factor);
                children: []
                pos: 16873
                length: 56
              pos: 16554
              length: 381
          children: []
          pos: 16515
          length: 420
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: negate
              children: []
              pos: 17191
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 17176
              length: 136
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 17214
                        length: 5
                    children: []
                    pos: 17213
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 17235
                    length: 11
                  pos: 17221
                  length: 35
                pos: 17210
                length: 46
              - type: return_statement
                fields:
                  text: return createComplex(-real, -imaginary);
                children: []
                pos: 17266
                length: 40
              pos: 17200
              length: 112
          children: []
          pos: 17176
          length: 136
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subtract
              children: []
              pos: 18061
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex subtrahend
                children: []
                pos: 18070
                length: 18
              pos: 18046
              length: 335
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(subtrahend);
                children: []
                pos: 18137
                length: 35
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 18185
                            length: 5
                          right:
                            type: field_access
                            fields:
                              text: subtrahend.isNaN
                            children: []
                            pos: 18194
                            length: 16
                        children: []
                        pos: 18185
                        length: 25
                    children: []
                    pos: 18184
                    length: 27
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 18226
                    length: 11
                  pos: 18212
                  length: 35
                pos: 18181
                length: 66
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(real - subtrahend.getReal(),
                                                 imaginary - subtrahend.getImaginary());
                children: []
                pos: 18257
                length: 118
              pos: 18127
              length: 254
          children: []
          pos: 18046
          length: 335
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: subtract
              children: []
              pos: 18658
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double subtrahend
                children: []
                pos: 18667
                length: 17
              pos: 18643
              length: 193
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: isNaN
                            children: []
                            pos: 18700
                            length: 5
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(subtrahend)
                            children: []
                            pos: 18709
                            length: 24
                        children: []
                        pos: 18700
                        length: 33
                    children: []
                    pos: 18699
                    length: 35
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 18749
                    length: 11
                  pos: 18735
                  length: 35
                pos: 18696
                length: 74
              - type: return_statement
                fields:
                  text: return createComplex(real - subtrahend, imaginary);
                children: []
                pos: 18779
                length: 51
              pos: 18686
              length: 150
          children: []
          pos: 18643
          length: 193
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: acos
              children: []
              pos: 19380
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 19365
              length: 177
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 19401
                        length: 5
                    children: []
                    pos: 19400
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 19422
                    length: 11
                  pos: 19408
                  length: 35
                pos: 19397
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return this.add(this.sqrt1z().multiply(I)).log()
                                .multiply(I.negate());
                children: []
                pos: 19453
                length: 83
              pos: 19387
              length: 155
          children: []
          pos: 19365
          length: 177
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: asin
              children: []
              pos: 20077
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20062
              length: 172
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 20098
                        length: 5
                    children: []
                    pos: 20097
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 20119
                    length: 11
                  pos: 20105
                  length: 35
                pos: 20094
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return sqrt1z().add(this.multiply(I)).log()
                                .multiply(I.negate());
                children: []
                pos: 20150
                length: 78
              pos: 20084
              length: 150
          children: []
          pos: 20062
          length: 172
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: atan
              children: []
              pos: 20765
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 20750
              length: 201
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 20786
                        length: 5
                    children: []
                    pos: 20785
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 20807
                    length: 11
                  pos: 20793
                  length: 35
                pos: 20782
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return this.add(I).divide(I.subtract(this)).log()
                                .multiply(I.divide(createComplex(2.0, 0.0)));
                children: []
                pos: 20838
                length: 107
              pos: 20772
              length: 179
          children: []
          pos: 20750
          length: 201
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cos
              children: []
              pos: 22056
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 22041
              length: 238
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 22076
                        length: 5
                    children: []
                    pos: 22075
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 22097
                    length: 11
                  pos: 22083
                  length: 35
                pos: 22072
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.cos(real) * FastMath.cosh(imaginary),
                                                 -FastMath.sin(real) * FastMath.sinh(imaginary));
                children: []
                pos: 22128
                length: 145
              pos: 22062
              length: 217
          children: []
          pos: 22041
          length: 238
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cosh
              children: []
              pos: 23421
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 23406
              length: 238
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 23442
                        length: 5
                    children: []
                    pos: 23441
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 23463
                    length: 11
                  pos: 23449
                  length: 35
                pos: 23438
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.cosh(real) * FastMath.cos(imaginary),
                                                 FastMath.sinh(real) * FastMath.sin(imaginary));
                children: []
                pos: 23494
                length: 144
              pos: 23428
              length: 216
          children: []
          pos: 23406
          length: 238
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exp
              children: []
              pos: 24782
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 24767
              length: 259
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 24802
                        length: 5
                    children: []
                    pos: 24801
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 24823
                    length: 11
                  pos: 24809
                  length: 35
                pos: 24798
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double expReal = FastMath.exp(real);
                children: []
                pos: 24854
                length: 36
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(expReal *  FastMath.cos(imaginary),
                                                 expReal * FastMath.sin(imaginary));
                children: []
                pos: 24899
                length: 121
              pos: 24788
              length: 238
          children: []
          pos: 24767
          length: 259
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: log
              children: []
              pos: 26395
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 26380
              length: 197
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 26415
                        length: 5
                    children: []
                    pos: 26414
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 26436
                    length: 11
                  pos: 26422
                  length: 35
                pos: 26411
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.log(abs()),
                                                 FastMath.atan2(imaginary, real));
                children: []
                pos: 26467
                length: 104
              pos: 26401
              length: 176
          children: []
          pos: 26380
          length: 197
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pow
              children: []
              pos: 27329
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Complex x
                children: []
                pos: 27333
                length: 9
              pos: 27314
              length: 154
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: MathUtils.checkNotNull(x);
                children: []
                pos: 27391
                length: 26
              - type: return_statement
                fields:
                  text: return this.log().multiply(x).exp();
                children: []
                pos: 27426
                length: 36
              pos: 27381
              length: 87
          children: []
          pos: 27314
          length: 154
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: pow
              children: []
              pos: 27739
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 27743
                length: 8
              pos: 27724
              length: 81
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return this.log().multiply(x).exp();
                children: []
                pos: 27763
                length: 36
              pos: 27753
              length: 52
          children: []
          pos: 27724
          length: 81
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sin
              children: []
              pos: 28912
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 28897
              length: 237
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 28932
                        length: 5
                    children: []
                    pos: 28931
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 28953
                    length: 11
                  pos: 28939
                  length: 35
                pos: 28928
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sin(real) * FastMath.cosh(imaginary),
                                                 FastMath.cos(real) * FastMath.sinh(imaginary));
                children: []
                pos: 28984
                length: 144
              pos: 28918
              length: 216
          children: []
          pos: 28897
          length: 237
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sinh
              children: []
              pos: 30265
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 30250
              length: 221
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 30286
                        length: 5
                    children: []
                    pos: 30285
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 30307
                    length: 11
                  pos: 30293
                  length: 35
                pos: 30282
                length: 46
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sinh(real) * FastMath.cos(imaginary),
                                FastMath.cosh(real) * FastMath.sin(imaginary));
                children: []
                pos: 30338
                length: 127
              pos: 30272
              length: 199
          children: []
          pos: 30250
          length: 221
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sqrt
              children: []
              pos: 31868
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 31853
              length: 513
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 31889
                        length: 5
                    children: []
                    pos: 31888
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 31910
                    length: 11
                  pos: 31896
                  length: 35
                pos: 31885
                length: 46
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: real
                                children: []
                                pos: 31945
                                length: 4
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 31953
                                length: 3
                            children: []
                            pos: 31945
                            length: 11
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: imaginary
                                children: []
                                pos: 31960
                                length: 9
                              right:
                                type: decimal_floating_point_literal
                                fields:
                                  text: '0.0'
                                children: []
                                pos: 31973
                                length: 3
                            children: []
                            pos: 31960
                            length: 16
                        children: []
                        pos: 31945
                        length: 31
                    children: []
                    pos: 31944
                    length: 33
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(0.0, 0.0);
                    children: []
                    pos: 31992
                    length: 31
                  pos: 31978
                  length: 55
                pos: 31941
                length: 92
              - type: local_variable_declaration
                fields:
                  text: double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
                children: []
                pos: 32043
                length: 61
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: real
                            children: []
                            pos: 32117
                            length: 4
                          right:
                            type: decimal_floating_point_literal
                            fields:
                              text: '0.0'
                            children: []
                            pos: 32125
                            length: 3
                        children: []
                        pos: 32117
                        length: 11
                    children: []
                    pos: 32116
                    length: 13
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return createComplex(t, imaginary / (2.0 * t));
                    children: []
                    pos: 32144
                    length: 47
                  pos: 32130
                  length: 71
                pos: 32113
                length: 247
              pos: 31875
              length: 491
          children: []
          pos: 31853
          length: 513
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sqrt1z
              children: []
              pos: 33053
              length: 6
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 33038
              length: 108
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
                children: []
                pos: 33072
                length: 68
              pos: 33062
              length: 84
          children: []
          pos: 33038
          length: 108
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tan
              children: []
              pos: 34325
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 34310
              length: 348
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 34345
                        length: 5
                    children: []
                    pos: 34344
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 34366
                    length: 11
                  pos: 34352
                  length: 35
                pos: 34341
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double real2 = 2.0 * real;
                children: []
                pos: 34397
                length: 26
              - type: local_variable_declaration
                fields:
                  text: double imaginary2 = 2.0 * imaginary;
                children: []
                pos: 34432
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);
                children: []
                pos: 34477
                length: 59
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sin(real2) / d,
                                                 FastMath.sinh(imaginary2) / d);
                children: []
                pos: 34546
                length: 106
              pos: 34331
              length: 327
          children: []
          pos: 34310
          length: 348
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tanh
              children: []
              pos: 35847
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 35832
              length: 348
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 35868
                        length: 5
                    children: []
                    pos: 35867
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 35889
                    length: 11
                  pos: 35875
                  length: 35
                pos: 35864
                length: 46
              - type: local_variable_declaration
                fields:
                  text: double real2 = 2.0 * real;
                children: []
                pos: 35919
                length: 26
              - type: local_variable_declaration
                fields:
                  text: double imaginary2 = 2.0 * imaginary;
                children: []
                pos: 35954
                length: 36
              - type: local_variable_declaration
                fields:
                  text: double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
                children: []
                pos: 35999
                length: 59
              - type: return_statement
                fields:
                  text: |-
                    return createComplex(FastMath.sinh(real2) / d,
                                                 FastMath.sin(imaginary2) / d);
                children: []
                pos: 36068
                length: 106
              pos: 35854
              length: 326
          children: []
          pos: 35832
          length: 348
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getArgument
              children: []
              pos: 37028
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 37014
              length: 93
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return FastMath.atan2(getImaginary(), getReal());
                children: []
                pos: 37052
                length: 49
              pos: 37042
              length: 65
          children: []
          pos: 37014
          length: 93
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nthRoot
              children: []
              pos: 38050
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 38058
                length: 5
              pos: 38029
              length: 1170
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 38080
                            length: 1
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 38085
                            length: 1
                        children: []
                        pos: 38080
                        length: 6
                    children: []
                    pos: 38079
                    length: 8
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: |-
                        throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N,
                                                                   n);
                    children: []
                    pos: 38102
                    length: 134
                  pos: 38088
                  length: 158
                pos: 38076
                length: 170
              - type: local_variable_declaration
                fields:
                  text: final List<Complex> result = new ArrayList<Complex>();
                children: []
                pos: 38256
                length: 54
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: isNaN
                        children: []
                        pos: 38324
                        length: 5
                    children: []
                    pos: 38323
                    length: 7
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: result.add(NaN);
                    children: []
                    pos: 38345
                    length: 16
                  - type: return_statement
                    fields:
                      text: return result;
                    children: []
                    pos: 38374
                    length: 14
                  pos: 38331
                  length: 67
                pos: 38320
                length: 78
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: isInfinite()
                        children: []
                        pos: 38411
                        length: 12
                    children: []
                    pos: 38410
                    length: 14
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: result.add(INF);
                    children: []
                    pos: 38439
                    length: 16
                  - type: return_statement
                    fields:
                      text: return result;
                    children: []
                    pos: 38468
                    length: 14
                  pos: 38425
                  length: 67
                pos: 38407
                length: 85
              - type: local_variable_declaration
                fields:
                  text: final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);
                children: []
                pos: 38577
                length: 57
              - type: local_variable_declaration
                fields:
                  text: final double nthPhi = getArgument() / n;
                children: []
                pos: 38714
                length: 40
              - type: local_variable_declaration
                fields:
                  text: final double slice = 2 * FastMath.PI / n;
                children: []
                pos: 38763
                length: 41
              - type: local_variable_declaration
                fields:
                  text: double innerPart = nthPhi;
                children: []
                pos: 38813
                length: 26
              - type: for_statement
                fields:
                  text: |-
                    for (int k = 0; k < n ; k++) {
                                // inner part
                                final double realPart = nthRootOfAbs *  FastMath.cos(innerPart);
                                final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);
                                result.add(createComplex(realPart, imaginaryPart));
                                innerPart += slice;
                            }
                children: []
                pos: 38848
                length: 321
              - type: return_statement
                fields:
                  text: return result;
                children: []
                pos: 39179
                length: 14
              pos: 38065
              length: 1134
          children: []
          pos: 38029
          length: 1170
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createComplex
              children: []
              pos: 39492
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 39506
                length: 15
              pos: 39474
              length: 167
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new Complex(realPart, imaginaryPart);
                children: []
                pos: 39591
                length: 44
              pos: 39581
              length: 60
          children: []
          pos: 39474
          length: 167
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: valueOf
              children: []
              pos: 39872
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 39880
                length: 15
              pos: 39850
              length: 278
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(realPart)
                            children: []
                            pos: 39967
                            length: 22
                          right:
                            type: method_invocation
                            fields:
                              text: Double.isNaN(imaginaryPart)
                            children: []
                            pos: 40005
                            length: 27
                        children: []
                        pos: 39967
                        length: 65
                    children: []
                    pos: 39966
                    length: 67
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 40048
                    length: 11
                  pos: 40034
                  length: 35
                pos: 39963
                length: 106
              - type: return_statement
                fields:
                  text: return new Complex(realPart, imaginaryPart);
                children: []
                pos: 40078
                length: 44
              pos: 39953
              length: 175
          children: []
          pos: 39850
          length: 278
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: valueOf
              children: []
              pos: 40305
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double realPart
                children: []
                pos: 40313
                length: 15
              pos: 40283
              length: 164
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Double.isNaN(realPart)
                        children: []
                        pos: 40344
                        length: 22
                    children: []
                    pos: 40343
                    length: 24
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return NaN;
                    children: []
                    pos: 40382
                    length: 11
                  pos: 40368
                  length: 35
                pos: 40340
                length: 63
              - type: return_statement
                fields:
                  text: return new Complex(realPart);
                children: []
                pos: 40412
                length: 29
              pos: 40330
              length: 117
          children: []
          pos: 40283
          length: 164
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: readResolve
              children: []
              pos: 40742
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 40719
              length: 91
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return createComplex(real, imaginary);
                children: []
                pos: 40766
                length: 38
              pos: 40756
              length: 54
          children: []
          pos: 40719
          length: 91
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getField
              children: []
              pos: 40861
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 40841
              length: 81
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return ComplexField.getInstance();
                children: []
                pos: 40882
                length: 34
              pos: 40872
              length: 50
          children: []
          pos: 40841
          length: 81
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: toString
              children: []
              pos: 40981
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 40953
              length: 98
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return "(" + real + ", " + imaginary + ")";
                children: []
                pos: 41002
                length: 43
              pos: 40992
              length: 59
          children: []
          pos: 40953
          length: 98
        pos: 2314
        length: 38740
    children: []
    pos: 2314
    length: 38740
  pos: 0
  length: 41055
text_diff: "--- before\n+++ after\n@@ -1015,15 +1015,9 @@\n      * @since 1.2\n      */\n
  \    public Complex tan() {\n-        if (isNaN || Double.isInfinite(real)) {\n+
  \       if (isNaN) {\n             return NaN;\n         }\n-        if (imaginary
  > 20.0) {\n-            return createComplex(0.0, 1.0);\n-        }\n-        if
  (imaginary < -20.0) {\n-            return createComplex(0.0, -1.0);\n-        }\n
  \n         double real2 = 2.0 * real;\n         double imaginary2 = 2.0 * imaginary;\n@@
  -1066,15 +1060,9 @@\n      * @since 1.2\n      */\n     public Complex tanh() {\n-
  \       if (isNaN || Double.isInfinite(imaginary)) {\n+        if (isNaN) {\n             return
  NaN;\n         }\n-        if (real > 20.0) {\n-            return createComplex(1.0,
  0.0);\n-        }\n-        if (real < -20.0) {\n-            return createComplex(-1.0,
  0.0);\n-        }\n         double real2 = 2.0 * real;\n         double imaginary2
  = 2.0 * imaginary;\n         double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);\n"
tree_diff: |+
  New cluster:
  ===
  insert-node
  ---
  method_declaration [34310,34658]
  to
  class_body [2314,41451]
  at 44
  ------------
  ===
  insert-node
  ---
  return_statement: return createComplex(FastMath.sin(real2) / d,
                               FastMath.sinh(imaginary2) / d); [34546,34652]
  to
  block [34331,34658]
  at 4
  ===
  insert-node
  ---
  local_variable_declaration: double imaginary2 = 2.0 * imaginary; [34432,34468]
  to
  block [34331,34658]
  at 2
  ===
  insert-node
  ---
  method_parameters [34310,34658]
  to
  method_declaration [34310,34658]
  at 1
  ===
  insert-node
  ---
  local_variable_declaration: double real2 = 2.0 * real; [34397,34423]
  to
  block [34331,34658]
  at 1
  ===
  insert-node
  ---
  method_declaration [34310,34658]
  to
  class_body [2314,41451]
  at 44
  ===
  insert-node
  ---
  identifier: tan [34325,34328]
  to
  method_declaration [34310,34658]
  at 0
  ===
  insert-node
  ---
  block [34331,34658]
  to
  method_declaration [34310,34658]
  at 2
  ===
  insert-node
  ---
  local_variable_declaration: double d = FastMath.cos(real2) + FastMath.cosh(imaginary2); [34477,34536]
  to
  block [34331,34658]
  at 3

  New cluster:
  ===
  insert-node
  ---
  method_declaration [35832,36180]
  to
  class_body [2314,41451]
  at 45
  ------------
  ===
  insert-node
  ---
  local_variable_declaration: double real2 = 2.0 * real; [35919,35945]
  to
  block [35854,36180]
  at 1
  ===
  insert-node
  ---
  return_statement: return createComplex(FastMath.sinh(real2) / d,
                               FastMath.sin(imaginary2) / d); [36068,36174]
  to
  block [35854,36180]
  at 4
  ===
  insert-node
  ---
  identifier: tanh [35847,35851]
  to
  method_declaration [35832,36180]
  at 0
  ===
  insert-node
  ---
  block [35854,36180]
  to
  method_declaration [35832,36180]
  at 2
  ===
  insert-node
  ---
  local_variable_declaration: double imaginary2 = 2.0 * imaginary; [35954,35990]
  to
  block [35854,36180]
  at 2
  ===
  insert-node
  ---
  local_variable_declaration: double d = FastMath.cosh(real2) + FastMath.cos(imaginary2); [35999,36058]
  to
  block [35854,36180]
  at 3
  ===
  insert-node
  ---
  method_declaration [35832,36180]
  to
  class_body [2314,41451]
  at 45
  ===
  insert-node
  ---
  method_parameters [35832,36180]
  to
  method_declaration [35832,36180]
  at 1

  New cluster:
  MOVE from block [34331,34658]
  ------------
  ===
  move-tree
  ---
  if_statement [34341,34414]
      parenthesized_expression [34344,34378]
          or [34345,34377]
              identifier: isNaN [34345,34350]
              method_invocation: Double.isInfinite(real) [34354,34377]
      block [34379,34414]
          return_statement: return NaN; [34393,34404]
  to
  block [34331,34658]
  at 0

  New cluster:
  MOVE from block [35854,36180]
  ------------
  ===
  move-tree
  ---
  if_statement [36065,36143]
      parenthesized_expression [36068,36107]
          or [36069,36106]
              identifier: isNaN [36069,36074]
              method_invocation: Double.isInfinite(imaginary) [36078,36106]
      block [36108,36143]
          return_statement: return NaN; [36122,36133]
  to
  block [35854,36180]
  at 0

  New cluster:
  ===
  insert-node
  ---
  identifier: isNaN [34345,34350]
  to
  parenthesized_expression [34344,34378]
  at 0
  ------------
  ===
  insert-node
  ---
  identifier: isNaN [34345,34350]
  to
  parenthesized_expression [34344,34378]
  at 0

  New cluster:
  ===
  insert-node
  ---
  identifier: isNaN [35868,35873]
  to
  parenthesized_expression [36068,36107]
  at 0
  ------------
  ===
  insert-node
  ---
  identifier: isNaN [35868,35873]
  to
  parenthesized_expression [36068,36107]
  at 0

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  or [34345,34377]
      identifier: isNaN [34345,34350]
      method_invocation: Double.isInfinite(real) [34354,34377]

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  or [36069,36106]
      identifier: isNaN [36069,36074]
      method_invocation: Double.isInfinite(imaginary) [36078,36106]

  New cluster:
  ===
  delete-node
  ---
  method_declaration [34310,34859]
  ===
  ------------
  ===
  delete-node
  ---
  block [34331,34859]
  ===
  ===
  delete-node
  ---
  local_variable_declaration: double real2 = 2.0 * real; [34598,34624]
  ===
  ===
  delete-node
  ---
  identifier: tan [34325,34328]
  ===
  ===
  delete-node
  ---
  return_statement: return createComplex(FastMath.sin(real2) / d,
                               FastMath.sinh(imaginary2) / d); [34747,34853]
  ===
  ===
  delete-node
  ---
  method_declaration [34310,34859]
  ===
  ===
  delete-node
  ---
  method_parameters [34310,34859]
  ===
  ===
  delete-node
  ---
  local_variable_declaration: double d = FastMath.cos(real2) + FastMath.cosh(imaginary2); [34678,34737]
  ===
  ===
  delete-node
  ---
  local_variable_declaration: double imaginary2 = 2.0 * imaginary; [34633,34669]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [34423,34500]
      parenthesized_expression [34426,34444]
          greater_than [34427,34443]
              identifier: imaginary [34427,34436]
              decimal_floating_point_literal: 20.0 [34439,34443]
      block [34445,34500]
          return_statement: return createComplex(0.0, 1.0); [34459,34490]

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [34509,34588]
      parenthesized_expression [34512,34531]
          less_than [34513,34530]
              identifier: imaginary [34513,34522]
              unary_expression: -20.0 [34525,34530]
      block [34532,34588]
          return_statement: return createComplex(0.0, -1.0); [34546,34578]

  New cluster:
  ===
  delete-node
  ---
  method_declaration [36033,36577]
  ===
  ------------
  ===
  delete-node
  ---
  method_declaration [36033,36577]
  ===
  ===
  delete-node
  ---
  method_parameters [36033,36577]
  ===
  ===
  delete-node
  ---
  block [36055,36577]
  ===
  ===
  delete-node
  ---
  local_variable_declaration: double imaginary2 = 2.0 * imaginary; [36351,36387]
  ===
  ===
  delete-node
  ---
  identifier: tanh [36048,36052]
  ===
  ===
  delete-node
  ---
  local_variable_declaration: double real2 = 2.0 * real; [36316,36342]
  ===
  ===
  delete-node
  ---
  local_variable_declaration: double d = FastMath.cosh(real2) + FastMath.cos(imaginary2); [36396,36455]
  ===
  ===
  delete-node
  ---
  return_statement: return createComplex(FastMath.sinh(real2) / d,
                               FastMath.sin(imaginary2) / d); [36465,36571]
  ===

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [36152,36224]
      parenthesized_expression [36155,36168]
          greater_than [36156,36167]
              identifier: real [36156,36160]
              decimal_floating_point_literal: 20.0 [36163,36167]
      block [36169,36224]
          return_statement: return createComplex(1.0, 0.0); [36183,36214]

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [36233,36307]
      parenthesized_expression [36236,36250]
          less_than [36237,36249]
              identifier: real [36237,36241]
              unary_expression: -20.0 [36244,36249]
      block [36251,36307]
          return_statement: return createComplex(-1.0, 0.0); [36265,36297]

...
