---
language: python
text_diff: "--- before\n+++ after\n@@ -1,3 +1,4 @@\n+\n from collections import defaultdict\n
  \n def shortest_path_lengths(n, length_by_edge):\n@@ -10,29 +11,8 @@\n             for
  j in range(n):\n                 length_by_path[i, j] = min(\n                     length_by_path[i,
  j],\n-                    length_by_path[i, k] + length_by_path[j, k]\n+                    length_by_path[i,
  k] + length_by_path[k, j]\n                 )\n \n     return length_by_path\n \n-\n-\"\"\"\n-All
  Shortest Paths\n-floyd-warshall\n-\n-Floyd-Warshall algorithm implementation.\n-\n-Calculates
  the length of the shortest path connecting every ordered pair of nodes in a directed
  graph.\n-\n-\n-\n-Input:\n-    n: The number of nodes in the graph. The nodes are
  assumed to have ids 0..n-1\n-    length_by_edge: A dict containing edge length keyed
  by an ordered pair of node ids\n-\n-Precondition:\n-    There are no negative-length
  cycles in the input graph\n-\n-Output:\n-    A dict containing shortest path length
  keyed by an ordered pair of node ids\n-\"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from for k in range(n):
          for i in range(n):
              for j in range(n):
                  length_by_path[i, j] = min(
                      length_by_path[i, j],
                      length_by_path[i, k] + length_by_path[j, k]
                  ) to for k in range(n):
          for i in range(n):
              for j in range(n):
                  length_by_path[i, j] = min(
                      length_by_path[i, j],
                      length_by_path[i, k] + length_by_path[k, j]
                  )
  ------------
  ===
  update-node
  ---
  for_statement: for k in range(n):
          for i in range(n):
              for j in range(n):
                  length_by_path[i, j] = min(
                      length_by_path[i, j],
                      length_by_path[i, k] + length_by_path[j, k]
                  ) [242,486]
  replace for k in range(n):
          for i in range(n):
              for j in range(n):
                  length_by_path[i, j] = min(
                      length_by_path[i, j],
                      length_by_path[i, k] + length_by_path[j, k]
                  ) by for k in range(n):
          for i in range(n):
              for j in range(n):
                  length_by_path[i, j] = min(
                      length_by_path[i, j],
                      length_by_path[i, k] + length_by_path[k, j]
                  )

  New cluster:
  ===
  delete-node
  ---
  expression_statement: """
  All Shortest Paths
  floyd-warshall

  Floyd-Warshall algorithm implementation.

  Calculates the length of the shortest path connecting every ordered pair of nodes in a directed graph.



  Input:
      n: The number of nodes in the graph. The nodes are assumed to have ids 0..n-1
      length_by_edge: A dict containing edge length keyed by an ordered pair of node ids

  Precondition:
      There are no negative-length cycles in the input graph

  Output:
      A dict containing shortest path length keyed by an ordered pair of node ids
  """ [516,1045]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: """
  All Shortest Paths
  floyd-warshall

  Floyd-Warshall algorithm implementation.

  Calculates the length of the shortest path connecting every ordered pair of nodes in a directed graph.



  Input:
      n: The number of nodes in the graph. The nodes are assumed to have ids 0..n-1
      length_by_edge: A dict containing edge length keyed by an ordered pair of node ids

  Precondition:
      There are no negative-length cycles in the input graph

  Output:
      A dict containing shortest path length keyed by an ordered pair of node ids
  """ [516,1045]
  ===

...
