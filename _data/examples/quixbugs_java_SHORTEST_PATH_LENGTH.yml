---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SHORTEST_PATH_LENGTH
        children: []
        pos: 92
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shortest_path_length
              children: []
              pos: 137
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Map<List<Node>, Integer> length_by_edge
                children: []
                pos: 158
                length: 39
              pos: 119
              length: 1275
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int n = length_by_edge.size();
                children: []
                pos: 240
                length: 30
              - type: local_variable_declaration
                fields:
                  text: Map<Node, Integer> unvisitedNodes = new HashMap<>();
                children: []
                pos: 337
                length: 52
              - type: local_variable_declaration
                fields:
                  text: Set<Node> visitedNodes = new HashSet<>();
                children: []
                pos: 398
                length: 41
              - type: expression_statement
                fields:
                  text: unvisitedNodes.put(startnode, 0);
                children: []
                pos: 449
                length: 33
              - type: while_statement
                fields:
                  text: |-
                    while (!unvisitedNodes.isEmpty()) {
                                Node node = getNodeWithMinDistance(unvisitedNodes);
                                int distance = unvisitedNodes.get(node);
                                unvisitedNodes.remove(node);

                                if (node.getValue() == goalnode.getValue()) {
                                    return distance;
                                }
                                visitedNodes.add(node);

                                for (Node nextnode : node.getSuccessors()) {
                                    if (visitedNodes.contains(nextnode)) {
                                        continue;
                                    }

                                    if (unvisitedNodes.get(nextnode) == null) {
                                        unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                                    }

                                    unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                                            unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                                }
                            }
                children: []
                pos: 492
                length: 861
              - type: return_statement
                fields:
                  text: return Integer.MAX_VALUE;
                children: []
                pos: 1363
                length: 25
              pos: 230
              length: 1164
          children: []
          pos: 119
          length: 1275
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getNodeWithMinDistance
              children: []
              pos: 1419
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Map<Node,Integer> list
                children: []
                pos: 1442
                length: 22
              pos: 1400
              length: 394
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node minNode = null;
                children: []
                pos: 1476
                length: 20
              - type: local_variable_declaration
                fields:
                  text: int minDistance = Integer.MAX_VALUE;
                children: []
                pos: 1505
                length: 36
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Node node : list.keySet()) {
                                int distance = list.get(node);
                                if (distance < minDistance) {
                                    minDistance = distance;
                                    minNode = node;
                                }
                            }
                children: []
                pos: 1550
                length: 214
              - type: return_statement
                fields:
                  text: return minNode;
                children: []
                pos: 1773
                length: 15
              pos: 1466
              length: 328
          children: []
          pos: 1400
          length: 394
        pos: 79
        length: 1717
    children: []
    pos: 79
    length: 1717
  pos: 0
  length: 1796
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SHORTEST_PATH_LENGTH
        children: []
        pos: 128
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shortest_path_length
              children: []
              pos: 173
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Map<List<Node>, Integer> length_by_edge
                children: []
                pos: 194
                length: 39
              pos: 155
              length: 1255
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int n = length_by_edge.size();
                children: []
                pos: 276
                length: 30
              - type: local_variable_declaration
                fields:
                  text: Map<Node, Integer> unvisitedNodes = new HashMap<>();
                children: []
                pos: 373
                length: 52
              - type: local_variable_declaration
                fields:
                  text: Set<Node> visitedNodes = new HashSet<>();
                children: []
                pos: 434
                length: 41
              - type: expression_statement
                fields:
                  text: unvisitedNodes.put(startnode, 0);
                children: []
                pos: 485
                length: 33
              - type: while_statement
                fields:
                  text: |-
                    while (!unvisitedNodes.isEmpty()) {
                                Node node = getNodeWithMinDistance(unvisitedNodes);
                                int distance = unvisitedNodes.get(node);
                                unvisitedNodes.remove(node);

                                if (node.getValue() == goalnode.getValue()) {
                                    return distance;
                                }
                                visitedNodes.add(node);

                                for (Node nextnode : node.getSuccessors()) {
                                    if (visitedNodes.contains(nextnode)) {
                                        continue;
                                    }

                                    if (unvisitedNodes.get(nextnode) == null) {
                                        unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                                    }

                                    unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                                            distance + length_by_edge.get(Arrays.asList(node, nextnode))));
                                }
                            }
                children: []
                pos: 528
                length: 841
              - type: return_statement
                fields:
                  text: return Integer.MAX_VALUE;
                children: []
                pos: 1379
                length: 25
              pos: 266
              length: 1144
          children: []
          pos: 155
          length: 1255
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getNodeWithMinDistance
              children: []
              pos: 1435
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Map<Node,Integer> list
                children: []
                pos: 1458
                length: 22
              pos: 1416
              length: 394
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node minNode = null;
                children: []
                pos: 1492
                length: 20
              - type: local_variable_declaration
                fields:
                  text: int minDistance = Integer.MAX_VALUE;
                children: []
                pos: 1521
                length: 36
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Node node : list.keySet()) {
                                int distance = list.get(node);
                                if (distance < minDistance) {
                                    minDistance = distance;
                                    minNode = node;
                                }
                            }
                children: []
                pos: 1566
                length: 214
              - type: return_statement
                fields:
                  text: return minNode;
                children: []
                pos: 1789
                length: 15
              pos: 1482
              length: 328
          children: []
          pos: 1416
          length: 394
        pos: 115
        length: 1697
    children: []
    pos: 115
    length: 1697
  pos: 0
  length: 1812
text_diff: "--- before\n+++ after\n@@ -1,6 +1,8 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n+import java_programs.Node;\n+\n
  /**\n  *\n  * @author Angela Chen\n@@ -35,7 +37,7 @@\n                 }\n \n                 unvisitedNodes.put(nextnode,
  Math.min(unvisitedNodes.get(nextnode),\n-                        unvisitedNodes.get(nextnode)
  + length_by_edge.get(Arrays.asList(node, nextnode))));\n+                        distance
  + length_by_edge.get(Arrays.asList(node, nextnode))));\n             }\n         }\n
  \n"
tree_diff: |+
  New cluster:
  UPDATE from while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);

              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          } to while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);

              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          distance + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);

              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          } [492,1353]
  replace while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);

              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          } by while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);

              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          distance + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }

...
