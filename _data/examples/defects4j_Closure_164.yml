---
language: java
text_diff: "--- before\n+++ after\n@@ -125,25 +125,13 @@\n \n       boolean thisIsVarArgs
  = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-
  \     boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean
  thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\"
  can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional
  && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)}
  and\n         // {function(...NoType)} to to indicate that arity should not be\n
  \        // checked. Strictly speaking, this is not a correct formulation,\n         //
  because now a sub-function can required arguments that are var_args\n         //
  in the super-function. So we special-case this.\n-        boolean isTopFunction
  =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType()
  ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-
  \         return false;\n-        }\n-      }\n \n       // don't advance if we
  have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@\n     }\n
  \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-
  \   if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-
  \       && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n
  \  }\n"
tree_diff: |+
  New cluster:
  UPDATE from while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();
        boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();
        boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();

        // "that" can't be a supertype, because it's missing a required argument.
        if (!thisIsOptional && thatIsOptional) {
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.
          boolean isTopFunction =
              thatIsVarArgs &&
              (thatParamType == null ||
               thatParamType.isUnknownType() ||
               thatParamType.isNoType());
          if (!isTopFunction) {
            return false;
          }
        }

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      } to while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();

        // "that" can't be a supertype, because it's missing a required argument.
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      }
  ------------
  ===
  update-node
  ---
  while_statement: while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();
        boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();
        boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();

        // "that" can't be a supertype, because it's missing a required argument.
        if (!thisIsOptional && thatIsOptional) {
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.
          boolean isTopFunction =
              thatIsVarArgs &&
              (thatParamType == null ||
               thatParamType.isUnknownType() ||
               thatParamType.isNoType());
          if (!isTopFunction) {
            return false;
          }
        }

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      } [4203,5888]
  replace while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();
        boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();
        boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();

        // "that" can't be a supertype, because it's missing a required argument.
        if (!thisIsOptional && thatIsOptional) {
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.
          boolean isTopFunction =
              thatIsVarArgs &&
              (thatParamType == null ||
               thatParamType.isUnknownType() ||
               thatParamType.isNoType());
          if (!isTopFunction) {
            return false;
          }
        }

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      } by while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();

        // "that" can't be a supertype, because it's missing a required argument.
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      }

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [5973,6116]
      parenthesized_expression [5976,6088]
          and [5977,6087]
              and [5977,6058]
                  and [5977,6032]
                      not_equals [5977,5994]
                          identifier: thisParam [5977,5986]
                          null_literal [5990,5994]
                      unary_expression: !thisParam.isOptionalArg() [6006,6032]
                  unary_expression: !thisParam.isVarArgs() [6036,6058]
              equals [6070,6087]
                  identifier: thatParam [6070,6079]
                  null_literal [6083,6087]
      block [6089,6116]
          return_statement: return false; [6097,6110]

...
