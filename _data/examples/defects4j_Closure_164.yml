---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: ArrowType
        children: []
        pos: 2102
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final long serialVersionUID = 1L;
          children: []
          pos: 2131
          length: 48
        - type: field_declaration
          fields:
            text: final Node parameters;
          children: []
          pos: 2183
          length: 22
        - type: field_declaration
          fields:
            text: JSType returnType;
          children: []
          pos: 2208
          length: 18
        - type: field_declaration
          fields:
            text: final boolean returnTypeInferred;
          children: []
          pos: 2272
          length: 33
        - type: constructor_declaration
          fields:
            text: |-
              ArrowType(JSTypeRegistry registry, Node parameters,
                    JSType returnType) {
                  this(registry, parameters, returnType, false);
                }
          children: []
          pos: 2309
          length: 133
        - type: constructor_declaration
          fields:
            text: |-
              ArrowType(JSTypeRegistry registry, Node parameters,
                    JSType returnType, boolean returnTypeInferred) {
                  super(registry);

                  this.parameters = parameters == null ?
                      registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :
                      parameters;
                  this.returnType = returnType == null ?
                      getNativeType(UNKNOWN_TYPE) : returnType;
                  this.returnTypeInferred = returnTypeInferred;
                }
          children: []
          pos: 2446
          length: 414
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isSubtype
              children: []
              pos: 2891
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType other
                children: []
                pos: 2901
                length: 12
              pos: 2864
              length: 3274
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!(other instanceof ArrowType)"
                        children: []
                        pos: 2925
                        length: 29
                    children: []
                    pos: 2924
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 2964
                    length: 13
                  pos: 2956
                  length: 27
                pos: 2921
                length: 62
              - type: local_variable_declaration
                fields:
                  text: ArrowType that = (ArrowType) other;
                children: []
                pos: 2989
                length: 35
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!this.returnType.isSubtype(that.returnType)"
                        children: []
                        pos: 3190
                        length: 43
                    children: []
                    pos: 3189
                    length: 45
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 3243
                    length: 13
                  pos: 3235
                  length: 27
                pos: 3186
                length: 76
              - type: local_variable_declaration
                fields:
                  text: Node thisParam = parameters.getFirstChild();
                children: []
                pos: 4100
                length: 44
              - type: local_variable_declaration
                fields:
                  text: Node thatParam = that.parameters.getFirstChild();
                children: []
                pos: 4149
                length: 49
              - type: while_statement
                fields:
                  text: |-
                    while (thisParam != null && thatParam != null) {
                          JSType thisParamType = thisParam.getJSType();
                          JSType thatParamType = thatParam.getJSType();
                          if (thisParamType != null) {
                            if (thatParamType == null ||
                                !thatParamType.isSubtype(thisParamType)) {
                              return false;
                            }
                          }

                          boolean thisIsVarArgs = thisParam.isVarArgs();
                          boolean thatIsVarArgs = thatParam.isVarArgs();
                          boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();
                          boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();

                          // "that" can't be a supertype, because it's missing a required argument.
                          if (!thisIsOptional && thatIsOptional) {
                            // NOTE(nicksantos): In our type system, we use {function(...?)} and
                            // {function(...NoType)} to to indicate that arity should not be
                            // checked. Strictly speaking, this is not a correct formulation,
                            // because now a sub-function can required arguments that are var_args
                            // in the super-function. So we special-case this.
                            boolean isTopFunction =
                                thatIsVarArgs &&
                                (thatParamType == null ||
                                 thatParamType.isUnknownType() ||
                                 thatParamType.isNoType());
                            if (!isTopFunction) {
                              return false;
                            }
                          }

                          // don't advance if we have variable arguments
                          if (!thisIsVarArgs) {
                            thisParam = thisParam.getNext();
                          }
                          if (!thatIsVarArgs) {
                            thatParam = thatParam.getNext();
                          }

                          // both var_args indicates the end
                          if (thisIsVarArgs && thatIsVarArgs) {
                            thisParam = null;
                            thatParam = null;
                          }
                        }
                children: []
                pos: 4203
                length: 1685
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: and
                        fields:
                          left:
                            type: and
                            fields:
                              left:
                                type: and
                                fields:
                                  left:
                                    type: not_equals
                                    fields:
                                      left:
                                        type: identifier
                                        fields:
                                          text: thisParam
                                        children: []
                                        pos: 5977
                                        length: 9
                                      right:
                                        type: null_literal
                                        fields: {}
                                        children: []
                                        pos: 5990
                                        length: 4
                                    children: []
                                    pos: 5977
                                    length: 17
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!thisParam.isOptionalArg()"
                                    children: []
                                    pos: 6006
                                    length: 26
                                children: []
                                pos: 5977
                                length: 55
                              right:
                                type: unary_expression
                                fields:
                                  text: "!thisParam.isVarArgs()"
                                children: []
                                pos: 6036
                                length: 22
                            children: []
                            pos: 5977
                            length: 81
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: thatParam
                                children: []
                                pos: 6070
                                length: 9
                              right:
                                type: null_literal
                                fields: {}
                                children: []
                                pos: 6083
                                length: 4
                            children: []
                            pos: 6070
                            length: 17
                        children: []
                        pos: 5977
                        length: 110
                    children: []
                    pos: 5976
                    length: 112
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 6097
                    length: 13
                  pos: 6089
                  length: 27
                pos: 5973
                length: 143
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 6122
                length: 12
              pos: 2915
              length: 3223
          children: []
          pos: 2864
          length: 3274
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hasEqualParameters
              children: []
              pos: 6254
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrowType that
                children: []
                pos: 6273
                length: 14
              pos: 6246
              length: 900
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node thisParam = parameters.getFirstChild();
                children: []
                pos: 6295
                length: 44
              - type: local_variable_declaration
                fields:
                  text: Node otherParam = that.parameters.getFirstChild();
                children: []
                pos: 6344
                length: 50
              - type: while_statement
                fields:
                  text: |-
                    while (thisParam != null && otherParam != null) {
                          JSType thisParamType = thisParam.getJSType();
                          JSType otherParamType = otherParam.getJSType();
                          if (thisParamType != null) {
                            // Both parameter lists give a type for this param, it should be equal
                            if (otherParamType != null &&
                                !thisParamType.isEquivalentTo(otherParamType)) {
                              return false;
                            }
                          } else {
                            if (otherParamType != null) {
                              return false;
                            }
                          }
                          thisParam = thisParam.getNext();
                          otherParam = otherParam.getNext();
                        }
                children: []
                pos: 6399
                length: 583
              - type: return_statement
                fields:
                  text: return thisParam == otherParam;
                children: []
                pos: 7111
                length: 31
              pos: 6289
              length: 857
          children: []
          pos: 6246
          length: 900
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isEquivalentTo
              children: []
              pos: 7177
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType object
                children: []
                pos: 7192
                length: 13
              pos: 7150
              length: 362
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!(object instanceof ArrowType)"
                        children: []
                        pos: 7290
                        length: 30
                    children: []
                    pos: 7289
                    length: 32
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 7330
                    length: 13
                  pos: 7322
                  length: 27
                pos: 7286
                length: 63
              - type: local_variable_declaration
                fields:
                  text: ArrowType that = (ArrowType) object;
                children: []
                pos: 7354
                length: 36
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!returnType.isEquivalentTo(that.returnType)"
                        children: []
                        pos: 7399
                        length: 43
                    children: []
                    pos: 7398
                    length: 45
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 7452
                    length: 13
                  pos: 7444
                  length: 27
                pos: 7395
                length: 76
              - type: return_statement
                fields:
                  text: return hasEqualParameters(that);
                children: []
                pos: 7476
                length: 32
              pos: 7207
              length: 305
          children: []
          pos: 7150
          length: 362
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hashCode
              children: []
              pos: 7539
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7516
              length: 503
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int hashCode = 0;
                children: []
                pos: 7556
                length: 17
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: returnType
                            children: []
                            pos: 7582
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 7596
                            length: 4
                        children: []
                        pos: 7582
                        length: 18
                    children: []
                    pos: 7581
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: hashCode += returnType.hashCode();
                    children: []
                    pos: 7610
                    length: 34
                  pos: 7602
                  length: 48
                pos: 7578
                length: 72
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: returnTypeInferred
                        children: []
                        pos: 7659
                        length: 18
                    children: []
                    pos: 7658
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: hashCode += 1;
                    children: []
                    pos: 7687
                    length: 14
                  pos: 7679
                  length: 28
                pos: 7655
                length: 52
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parameters
                            children: []
                            pos: 7716
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 7730
                            length: 4
                        children: []
                        pos: 7716
                        length: 18
                    children: []
                    pos: 7715
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Node param = parameters.getFirstChild();
                    children: []
                    pos: 7744
                    length: 40
                  - type: while_statement
                    fields:
                      text: |-
                        while (param != null) {
                                JSType paramType = param.getJSType();
                                if (paramType != null) {
                                  hashCode += paramType.hashCode();
                                }
                                param = param.getNext();
                              }
                    children: []
                    pos: 7791
                    length: 197
                  pos: 7736
                  length: 258
                pos: 7712
                length: 282
              - type: return_statement
                fields:
                  text: return hashCode;
                children: []
                pos: 7999
                length: 16
              pos: 7550
              length: 469
          children: []
          pos: 7516
          length: 503
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getLeastSupertype
              children: []
              pos: 8049
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType that
                children: []
                pos: 8067
                length: 11
              pos: 8023
              length: 109
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new UnsupportedOperationException();
                children: []
                pos: 8086
                length: 42
              pos: 8080
              length: 52
          children: []
          pos: 8023
          length: 109
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getGreatestSubtype
              children: []
              pos: 8162
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType that
                children: []
                pos: 8181
                length: 11
              pos: 8136
              length: 110
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new UnsupportedOperationException();
                children: []
                pos: 8200
                length: 42
              pos: 8194
              length: 52
          children: []
          pos: 8136
          length: 110
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: testForEquality
              children: []
              pos: 8282
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType that
                children: []
                pos: 8298
                length: 11
              pos: 8250
              length: 113
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new UnsupportedOperationException();
                children: []
                pos: 8317
                length: 42
              pos: 8311
              length: 52
          children: []
          pos: 8250
          length: 113
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 8392
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Visitor<T> visitor
                children: []
                pos: 8398
                length: 18
              pos: 8367
              length: 103
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new UnsupportedOperationException();
                children: []
                pos: 8424
                length: 42
              pos: 8418
              length: 52
          children: []
          pos: 8367
          length: 103
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getPossibleToBooleanOutcomes
              children: []
              pos: 8511
              length: 28
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8474
              length: 108
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return BooleanLiteralSet.TRUE;
                children: []
                pos: 8548
                length: 30
              pos: 8542
              length: 40
          children: []
          pos: 8474
          length: 108
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: resolveInternal
              children: []
              pos: 8605
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ErrorReporter t
                children: []
                pos: 8621
                length: 15
              pos: 8586
              length: 388
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: returnType = safeResolve(returnType, t, scope);
                children: []
                pos: 8671
                length: 47
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parameters
                            children: []
                            pos: 8727
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 8741
                            length: 4
                        children: []
                        pos: 8727
                        length: 18
                    children: []
                    pos: 8726
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (Node paramNode = parameters.getFirstChild();
                                   paramNode != null; paramNode = paramNode.getNext()) {
                                paramNode.setJSType(paramNode.getJSType().resolve(t, scope));
                              }
                    children: []
                    pos: 8755
                    length: 192
                  pos: 8747
                  length: 206
                pos: 8723
                length: 230
              - type: return_statement
                fields:
                  text: return this;
                children: []
                pos: 8958
                length: 12
              pos: 8665
              length: 309
          children: []
          pos: 8586
          length: 388
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hasUnknownParamsOrReturn
              children: []
              pos: 8986
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8978
              length: 396
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parameters
                            children: []
                            pos: 9023
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 9037
                            length: 4
                        children: []
                        pos: 9023
                        length: 18
                    children: []
                    pos: 9022
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (Node paramNode = parameters.getFirstChild();
                                   paramNode != null; paramNode = paramNode.getNext()) {
                                JSType type = paramNode.getJSType();
                                if (type == null || type.isUnknownType()) {
                                  return true;
                                }
                              }
                    children: []
                    pos: 9051
                    length: 252
                  pos: 9043
                  length: 266
                pos: 9019
                length: 290
              - type: return_statement
                fields:
                  text: return returnType == null || returnType.isUnknownType();
                children: []
                pos: 9314
                length: 56
              pos: 9013
              length: 361
          children: []
          pos: 8978
          length: 396
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: toStringHelper
              children: []
              pos: 9397
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: boolean forAnnotations
                children: []
                pos: 9412
                length: 22
              pos: 9378
              length: 92
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return super.toString();
                children: []
                pos: 9442
                length: 24
              pos: 9436
              length: 34
          children: []
          pos: 9378
          length: 92
        pos: 2090
        length: 7382
    children: []
    pos: 2090
    length: 7382
  pos: 0
  length: 9473
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: ArrowType
        children: []
        pos: 2102
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final long serialVersionUID = 1L;
          children: []
          pos: 2131
          length: 48
        - type: field_declaration
          fields:
            text: final Node parameters;
          children: []
          pos: 2183
          length: 22
        - type: field_declaration
          fields:
            text: JSType returnType;
          children: []
          pos: 2208
          length: 18
        - type: field_declaration
          fields:
            text: final boolean returnTypeInferred;
          children: []
          pos: 2272
          length: 33
        - type: constructor_declaration
          fields:
            text: |-
              ArrowType(JSTypeRegistry registry, Node parameters,
                    JSType returnType) {
                  this(registry, parameters, returnType, false);
                }
          children: []
          pos: 2309
          length: 133
        - type: constructor_declaration
          fields:
            text: |-
              ArrowType(JSTypeRegistry registry, Node parameters,
                    JSType returnType, boolean returnTypeInferred) {
                  super(registry);

                  this.parameters = parameters == null ?
                      registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :
                      parameters;
                  this.returnType = returnType == null ?
                      getNativeType(UNKNOWN_TYPE) : returnType;
                  this.returnTypeInferred = returnTypeInferred;
                }
          children: []
          pos: 2446
          length: 414
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isSubtype
              children: []
              pos: 2891
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType other
                children: []
                pos: 2901
                length: 12
              pos: 2864
              length: 2672
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!(other instanceof ArrowType)"
                        children: []
                        pos: 2925
                        length: 29
                    children: []
                    pos: 2924
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 2964
                    length: 13
                  pos: 2956
                  length: 27
                pos: 2921
                length: 62
              - type: local_variable_declaration
                fields:
                  text: ArrowType that = (ArrowType) other;
                children: []
                pos: 2989
                length: 35
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!this.returnType.isSubtype(that.returnType)"
                        children: []
                        pos: 3190
                        length: 43
                    children: []
                    pos: 3189
                    length: 45
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 3243
                    length: 13
                  pos: 3235
                  length: 27
                pos: 3186
                length: 76
              - type: local_variable_declaration
                fields:
                  text: Node thisParam = parameters.getFirstChild();
                children: []
                pos: 4100
                length: 44
              - type: local_variable_declaration
                fields:
                  text: Node thatParam = that.parameters.getFirstChild();
                children: []
                pos: 4149
                length: 49
              - type: while_statement
                fields:
                  text: |-
                    while (thisParam != null && thatParam != null) {
                          JSType thisParamType = thisParam.getJSType();
                          JSType thatParamType = thatParam.getJSType();
                          if (thisParamType != null) {
                            if (thatParamType == null ||
                                !thatParamType.isSubtype(thisParamType)) {
                              return false;
                            }
                          }

                          boolean thisIsVarArgs = thisParam.isVarArgs();
                          boolean thatIsVarArgs = thatParam.isVarArgs();

                          // "that" can't be a supertype, because it's missing a required argument.
                            // NOTE(nicksantos): In our type system, we use {function(...?)} and
                            // {function(...NoType)} to to indicate that arity should not be
                            // checked. Strictly speaking, this is not a correct formulation,
                            // because now a sub-function can required arguments that are var_args
                            // in the super-function. So we special-case this.

                          // don't advance if we have variable arguments
                          if (!thisIsVarArgs) {
                            thisParam = thisParam.getNext();
                          }
                          if (!thatIsVarArgs) {
                            thatParam = thatParam.getNext();
                          }

                          // both var_args indicates the end
                          if (thisIsVarArgs && thatIsVarArgs) {
                            thisParam = null;
                            thatParam = null;
                          }
                        }
                children: []
                pos: 4203
                length: 1231
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 5520
                length: 12
              pos: 2915
              length: 2621
          children: []
          pos: 2864
          length: 2672
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hasEqualParameters
              children: []
              pos: 5652
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrowType that
                children: []
                pos: 5671
                length: 14
              pos: 5644
              length: 900
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node thisParam = parameters.getFirstChild();
                children: []
                pos: 5693
                length: 44
              - type: local_variable_declaration
                fields:
                  text: Node otherParam = that.parameters.getFirstChild();
                children: []
                pos: 5742
                length: 50
              - type: while_statement
                fields:
                  text: |-
                    while (thisParam != null && otherParam != null) {
                          JSType thisParamType = thisParam.getJSType();
                          JSType otherParamType = otherParam.getJSType();
                          if (thisParamType != null) {
                            // Both parameter lists give a type for this param, it should be equal
                            if (otherParamType != null &&
                                !thisParamType.isEquivalentTo(otherParamType)) {
                              return false;
                            }
                          } else {
                            if (otherParamType != null) {
                              return false;
                            }
                          }
                          thisParam = thisParam.getNext();
                          otherParam = otherParam.getNext();
                        }
                children: []
                pos: 5797
                length: 583
              - type: return_statement
                fields:
                  text: return thisParam == otherParam;
                children: []
                pos: 6509
                length: 31
              pos: 5687
              length: 857
          children: []
          pos: 5644
          length: 900
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: isEquivalentTo
              children: []
              pos: 6575
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType object
                children: []
                pos: 6590
                length: 13
              pos: 6548
              length: 362
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!(object instanceof ArrowType)"
                        children: []
                        pos: 6688
                        length: 30
                    children: []
                    pos: 6687
                    length: 32
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 6728
                    length: 13
                  pos: 6720
                  length: 27
                pos: 6684
                length: 63
              - type: local_variable_declaration
                fields:
                  text: ArrowType that = (ArrowType) object;
                children: []
                pos: 6752
                length: 36
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: unary_expression
                        fields:
                          text: "!returnType.isEquivalentTo(that.returnType)"
                        children: []
                        pos: 6797
                        length: 43
                    children: []
                    pos: 6796
                    length: 45
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return false;
                    children: []
                    pos: 6850
                    length: 13
                  pos: 6842
                  length: 27
                pos: 6793
                length: 76
              - type: return_statement
                fields:
                  text: return hasEqualParameters(that);
                children: []
                pos: 6874
                length: 32
              pos: 6605
              length: 305
          children: []
          pos: 6548
          length: 362
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hashCode
              children: []
              pos: 6937
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 6914
              length: 503
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: int hashCode = 0;
                children: []
                pos: 6954
                length: 17
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: returnType
                            children: []
                            pos: 6980
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 6994
                            length: 4
                        children: []
                        pos: 6980
                        length: 18
                    children: []
                    pos: 6979
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: hashCode += returnType.hashCode();
                    children: []
                    pos: 7008
                    length: 34
                  pos: 7000
                  length: 48
                pos: 6976
                length: 72
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: identifier
                        fields:
                          text: returnTypeInferred
                        children: []
                        pos: 7057
                        length: 18
                    children: []
                    pos: 7056
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: hashCode += 1;
                    children: []
                    pos: 7085
                    length: 14
                  pos: 7077
                  length: 28
                pos: 7053
                length: 52
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parameters
                            children: []
                            pos: 7114
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 7128
                            length: 4
                        children: []
                        pos: 7114
                        length: 18
                    children: []
                    pos: 7113
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: Node param = parameters.getFirstChild();
                    children: []
                    pos: 7142
                    length: 40
                  - type: while_statement
                    fields:
                      text: |-
                        while (param != null) {
                                JSType paramType = param.getJSType();
                                if (paramType != null) {
                                  hashCode += paramType.hashCode();
                                }
                                param = param.getNext();
                              }
                    children: []
                    pos: 7189
                    length: 197
                  pos: 7134
                  length: 258
                pos: 7110
                length: 282
              - type: return_statement
                fields:
                  text: return hashCode;
                children: []
                pos: 7397
                length: 16
              pos: 6948
              length: 469
          children: []
          pos: 6914
          length: 503
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getLeastSupertype
              children: []
              pos: 7447
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType that
                children: []
                pos: 7465
                length: 11
              pos: 7421
              length: 109
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new UnsupportedOperationException();
                children: []
                pos: 7484
                length: 42
              pos: 7478
              length: 52
          children: []
          pos: 7421
          length: 109
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getGreatestSubtype
              children: []
              pos: 7560
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType that
                children: []
                pos: 7579
                length: 11
              pos: 7534
              length: 110
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new UnsupportedOperationException();
                children: []
                pos: 7598
                length: 42
              pos: 7592
              length: 52
          children: []
          pos: 7534
          length: 110
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: testForEquality
              children: []
              pos: 7680
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: JSType that
                children: []
                pos: 7696
                length: 11
              pos: 7648
              length: 113
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new UnsupportedOperationException();
                children: []
                pos: 7715
                length: 42
              pos: 7709
              length: 52
          children: []
          pos: 7648
          length: 113
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 7790
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Visitor<T> visitor
                children: []
                pos: 7796
                length: 18
              pos: 7765
              length: 103
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new UnsupportedOperationException();
                children: []
                pos: 7822
                length: 42
              pos: 7816
              length: 52
          children: []
          pos: 7765
          length: 103
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getPossibleToBooleanOutcomes
              children: []
              pos: 7909
              length: 28
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7872
              length: 108
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return BooleanLiteralSet.TRUE;
                children: []
                pos: 7946
                length: 30
              pos: 7940
              length: 40
          children: []
          pos: 7872
          length: 108
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: resolveInternal
              children: []
              pos: 8003
              length: 15
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ErrorReporter t
                children: []
                pos: 8019
                length: 15
              pos: 7984
              length: 388
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: returnType = safeResolve(returnType, t, scope);
                children: []
                pos: 8069
                length: 47
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parameters
                            children: []
                            pos: 8125
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 8139
                            length: 4
                        children: []
                        pos: 8125
                        length: 18
                    children: []
                    pos: 8124
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (Node paramNode = parameters.getFirstChild();
                                   paramNode != null; paramNode = paramNode.getNext()) {
                                paramNode.setJSType(paramNode.getJSType().resolve(t, scope));
                              }
                    children: []
                    pos: 8153
                    length: 192
                  pos: 8145
                  length: 206
                pos: 8121
                length: 230
              - type: return_statement
                fields:
                  text: return this;
                children: []
                pos: 8356
                length: 12
              pos: 8063
              length: 309
          children: []
          pos: 7984
          length: 388
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: hasUnknownParamsOrReturn
              children: []
              pos: 8384
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8376
              length: 396
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: not_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parameters
                            children: []
                            pos: 8421
                            length: 10
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 8435
                            length: 4
                        children: []
                        pos: 8421
                        length: 18
                    children: []
                    pos: 8420
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: for_statement
                    fields:
                      text: |-
                        for (Node paramNode = parameters.getFirstChild();
                                   paramNode != null; paramNode = paramNode.getNext()) {
                                JSType type = paramNode.getJSType();
                                if (type == null || type.isUnknownType()) {
                                  return true;
                                }
                              }
                    children: []
                    pos: 8449
                    length: 252
                  pos: 8441
                  length: 266
                pos: 8417
                length: 290
              - type: return_statement
                fields:
                  text: return returnType == null || returnType.isUnknownType();
                children: []
                pos: 8712
                length: 56
              pos: 8411
              length: 361
          children: []
          pos: 8376
          length: 396
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: toStringHelper
              children: []
              pos: 8795
              length: 14
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: boolean forAnnotations
                children: []
                pos: 8810
                length: 22
              pos: 8776
              length: 92
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return super.toString();
                children: []
                pos: 8840
                length: 24
              pos: 8834
              length: 34
          children: []
          pos: 8776
          length: 92
        pos: 2090
        length: 6780
    children: []
    pos: 2090
    length: 6780
  pos: 0
  length: 8871
text_diff: "--- before\n+++ after\n@@ -125,25 +125,13 @@\n \n       boolean thisIsVarArgs
  = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n-
  \     boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n-      boolean
  thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n \n       // \"that\"
  can't be a supertype, because it's missing a required argument.\n-      if (!thisIsOptional
  && thatIsOptional) {\n         // NOTE(nicksantos): In our type system, we use {function(...?)}
  and\n         // {function(...NoType)} to to indicate that arity should not be\n
  \        // checked. Strictly speaking, this is not a correct formulation,\n         //
  because now a sub-function can required arguments that are var_args\n         //
  in the super-function. So we special-case this.\n-        boolean isTopFunction
  =\n-            thatIsVarArgs &&\n-            (thatParamType == null ||\n-             thatParamType.isUnknownType()
  ||\n-             thatParamType.isNoType());\n-        if (!isTopFunction) {\n-
  \         return false;\n-        }\n-      }\n \n       // don't advance if we
  have variable arguments\n       if (!thisIsVarArgs) {\n@@ -161,11 +149,6 @@\n     }\n
  \n     // \"that\" can't be a supertype, because it's missing a required arguement.\n-
  \   if (thisParam != null\n-        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n-
  \       && thatParam == null) {\n-      return false;\n-    }\n \n     return true;\n
  \  }\n"
tree_diff: |+
  New cluster:
  UPDATE from while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();
        boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();
        boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();

        // "that" can't be a supertype, because it's missing a required argument.
        if (!thisIsOptional && thatIsOptional) {
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.
          boolean isTopFunction =
              thatIsVarArgs &&
              (thatParamType == null ||
               thatParamType.isUnknownType() ||
               thatParamType.isNoType());
          if (!isTopFunction) {
            return false;
          }
        }

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      } to while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();

        // "that" can't be a supertype, because it's missing a required argument.
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      }
  ------------
  ===
  update-node
  ---
  while_statement: while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();
        boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();
        boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();

        // "that" can't be a supertype, because it's missing a required argument.
        if (!thisIsOptional && thatIsOptional) {
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.
          boolean isTopFunction =
              thatIsVarArgs &&
              (thatParamType == null ||
               thatParamType.isUnknownType() ||
               thatParamType.isNoType());
          if (!isTopFunction) {
            return false;
          }
        }

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      } [4203,5888]
  replace while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();
        boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();
        boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();

        // "that" can't be a supertype, because it's missing a required argument.
        if (!thisIsOptional && thatIsOptional) {
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.
          boolean isTopFunction =
              thatIsVarArgs &&
              (thatParamType == null ||
               thatParamType.isUnknownType() ||
               thatParamType.isNoType());
          if (!isTopFunction) {
            return false;
          }
        }

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      } by while (thisParam != null && thatParam != null) {
        JSType thisParamType = thisParam.getJSType();
        JSType thatParamType = thatParam.getJSType();
        if (thisParamType != null) {
          if (thatParamType == null ||
              !thatParamType.isSubtype(thisParamType)) {
            return false;
          }
        }

        boolean thisIsVarArgs = thisParam.isVarArgs();
        boolean thatIsVarArgs = thatParam.isVarArgs();

        // "that" can't be a supertype, because it's missing a required argument.
          // NOTE(nicksantos): In our type system, we use {function(...?)} and
          // {function(...NoType)} to to indicate that arity should not be
          // checked. Strictly speaking, this is not a correct formulation,
          // because now a sub-function can required arguments that are var_args
          // in the super-function. So we special-case this.

        // don't advance if we have variable arguments
        if (!thisIsVarArgs) {
          thisParam = thisParam.getNext();
        }
        if (!thatIsVarArgs) {
          thatParam = thatParam.getNext();
        }

        // both var_args indicates the end
        if (thisIsVarArgs && thatIsVarArgs) {
          thisParam = null;
          thatParam = null;
        }
      }

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [5973,6116]
      parenthesized_expression [5976,6088]
          and [5977,6087]
              and [5977,6058]
                  and [5977,6032]
                      not_equals [5977,5994]
                          identifier: thisParam [5977,5986]
                          null_literal [5990,5994]
                      unary_expression: !thisParam.isOptionalArg() [6006,6032]
                  unary_expression: !thisParam.isVarArgs() [6036,6058]
              equals [6070,6087]
                  identifier: thatParam [6070,6079]
                  null_literal [6083,6087]
      block [6089,6116]
          return_statement: return false; [6097,6110]

...
