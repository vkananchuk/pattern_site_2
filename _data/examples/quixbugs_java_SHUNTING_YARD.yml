---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SHUNTING_YARD
        children: []
        pos: 191
        length: 13
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shunting_yard
              children: []
              pos: 230
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList tokens
                children: []
                pos: 244
                length: 16
              pos: 211
              length: 928
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<String, Integer> precedence = new HashMap<String, Integer>();
                children: []
                pos: 272
                length: 65
              - type: expression_statement
                fields:
                  text: precedence.put("+",1);
                children: []
                pos: 346
                length: 22
              - type: expression_statement
                fields:
                  text: precedence.put("-",1);
                children: []
                pos: 377
                length: 22
              - type: expression_statement
                fields:
                  text: precedence.put("*",2);
                children: []
                pos: 408
                length: 22
              - type: expression_statement
                fields:
                  text: precedence.put("/",2);
                children: []
                pos: 439
                length: 22
              - type: local_variable_declaration
                fields:
                  text: ArrayList rpntokens = new ArrayList(100);
                children: []
                pos: 471
                length: 41
              - type: local_variable_declaration
                fields:
                  text: ArrayDeque opstack = new ArrayDeque();
                children: []
                pos: 521
                length: 38
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Object token: tokens) {
                                if (Integer.class.isInstance(token)) {
                                // cover also Double case I guess?
                                    rpntokens.add((Integer) token);
                                } else {
                                    String operator = (String) token;
                                    while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                                        rpntokens.add(opstack.pop());
                                    }
                                }
                            }
                children: []
                pos: 569
                length: 447
              - type: while_statement
                fields:
                  text: |-
                    while (!opstack.isEmpty()) {
                                rpntokens.add(opstack.pop());
                            }
                children: []
                pos: 1026
                length: 80
              - type: return_statement
                fields:
                  text: return rpntokens;
                children: []
                pos: 1116
                length: 17
              pos: 262
              length: 877
          children: []
          pos: 211
          length: 928
        pos: 178
        length: 964
    children: []
    pos: 178
    length: 964
  pos: 0
  length: 1143
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SHUNTING_YARD
        children: []
        pos: 200
        length: 13
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shunting_yard
              children: []
              pos: 239
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList tokens
                children: []
                pos: 253
                length: 16
              pos: 220
              length: 975
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<String, Integer> precedence = new HashMap<String, Integer>();
                children: []
                pos: 281
                length: 65
              - type: expression_statement
                fields:
                  text: precedence.put("+", 1);
                children: []
                pos: 355
                length: 23
              - type: expression_statement
                fields:
                  text: precedence.put("-", 1);
                children: []
                pos: 387
                length: 23
              - type: expression_statement
                fields:
                  text: precedence.put("*", 2);
                children: []
                pos: 419
                length: 23
              - type: expression_statement
                fields:
                  text: precedence.put("/", 2);
                children: []
                pos: 451
                length: 23
              - type: local_variable_declaration
                fields:
                  text: ArrayList rpntokens = new ArrayList(100);
                children: []
                pos: 484
                length: 41
              - type: local_variable_declaration
                fields:
                  text: ArrayDeque opstack = new ArrayDeque();
                children: []
                pos: 534
                length: 38
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Object token : tokens) {
                                if (Integer.class.isInstance(token)) {
                                    // cover also Double case I guess?
                                    rpntokens.add((Integer) token);
                                } else {
                                    String operator = (String) token;
                                    while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                                        rpntokens.add(opstack.pop());
                                    }
                                    opstack.push(token);
                                }

                            }
                children: []
                pos: 582
                length: 490
              - type: while_statement
                fields:
                  text: |-
                    while (!opstack.isEmpty()) {
                                rpntokens.add(opstack.pop());
                            }
                children: []
                pos: 1082
                length: 80
              - type: return_statement
                fields:
                  text: return rpntokens;
                children: []
                pos: 1172
                length: 17
              pos: 271
              length: 924
          children: []
          pos: 220
          length: 975
        pos: 187
        length: 1010
    children: []
    pos: 187
    length: 1010
  pos: 0
  length: 1199
text_diff: "--- before\n+++ after\n@@ -1,4 +1,5 @@\n-package java_programs;\n+package
  correct_java_programs;\n+\n import java.util.*;\n \n /*\n@@ -13,24 +14,26 @@\n public
  class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n
  \        Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-
  \       precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n+
  \       precedence.put(\"+\", 1);\n+        precedence.put(\"-\", 1);\n+        precedence.put(\"*\",
  2);\n+        precedence.put(\"/\", 2);\n \n         ArrayList rpntokens = new ArrayList(100);\n
  \        ArrayDeque opstack = new ArrayDeque();\n \n-        for (Object token:
  tokens) {\n+        for (Object token : tokens) {\n             if (Integer.class.isInstance(token))
  {\n-            // cover also Double case I guess?\n+                // cover also
  Double case I guess?\n                 rpntokens.add((Integer) token);\n             }
  else {\n                 String operator = (String) token;\n                 while
  (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast()))
  {\n                     rpntokens.add(opstack.pop());\n                 }\n+                opstack.push(token);\n
  \            }\n+\n         }\n \n         while (!opstack.isEmpty()) {\n@@ -39,5
  +42,5 @@\n \n         return rpntokens;\n     }\n-\n }\n+\n"
tree_diff: |+
  New cluster:
  UPDATE from precedence.put("+",1); to precedence.put("+", 1);
  ------------
  ===
  update-node
  ---
  expression_statement: precedence.put("+",1); [346,368]
  replace precedence.put("+",1); by precedence.put("+", 1);

  New cluster:
  UPDATE from precedence.put("-",1); to precedence.put("-", 1);
  ------------
  ===
  update-node
  ---
  expression_statement: precedence.put("-",1); [377,399]
  replace precedence.put("-",1); by precedence.put("-", 1);

  New cluster:
  UPDATE from precedence.put("*",2); to precedence.put("*", 2);
  ------------
  ===
  update-node
  ---
  expression_statement: precedence.put("*",2); [408,430]
  replace precedence.put("*",2); by precedence.put("*", 2);

  New cluster:
  UPDATE from precedence.put("/",2); to precedence.put("/", 2);
  ------------
  ===
  update-node
  ---
  expression_statement: precedence.put("/",2); [439,461]
  replace precedence.put("/",2); by precedence.put("/", 2);

  New cluster:
  UPDATE from for (Object token: tokens) {
              if (Integer.class.isInstance(token)) {
              // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
              }
          } to for (Object token : tokens) {
              if (Integer.class.isInstance(token)) {
                  // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
                  opstack.push(token);
              }

          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Object token: tokens) {
              if (Integer.class.isInstance(token)) {
              // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
              }
          } [569,1016]
  replace for (Object token: tokens) {
              if (Integer.class.isInstance(token)) {
              // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
              }
          } by for (Object token : tokens) {
              if (Integer.class.isInstance(token)) {
                  // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
                  opstack.push(token);
              }

          }

...
