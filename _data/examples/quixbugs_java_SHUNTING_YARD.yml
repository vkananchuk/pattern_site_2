---
language: java
text_diff: "--- before\n+++ after\n@@ -1,4 +1,5 @@\n-package java_programs;\n+package
  correct_java_programs;\n+\n import java.util.*;\n \n /*\n@@ -13,24 +14,26 @@\n public
  class SHUNTING_YARD {\n     public static List shunting_yard(ArrayList tokens) {\n
  \        Map<String, Integer> precedence = new HashMap<String, Integer>();\n-        precedence.put(\"+\",1);\n-
  \       precedence.put(\"-\",1);\n-        precedence.put(\"*\",2);\n-        precedence.put(\"/\",2);\n+
  \       precedence.put(\"+\", 1);\n+        precedence.put(\"-\", 1);\n+        precedence.put(\"*\",
  2);\n+        precedence.put(\"/\", 2);\n \n         ArrayList rpntokens = new ArrayList(100);\n
  \        ArrayDeque opstack = new ArrayDeque();\n \n-        for (Object token:
  tokens) {\n+        for (Object token : tokens) {\n             if (Integer.class.isInstance(token))
  {\n-            // cover also Double case I guess?\n+                // cover also
  Double case I guess?\n                 rpntokens.add((Integer) token);\n             }
  else {\n                 String operator = (String) token;\n                 while
  (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast()))
  {\n                     rpntokens.add(opstack.pop());\n                 }\n+                opstack.push(token);\n
  \            }\n+\n         }\n \n         while (!opstack.isEmpty()) {\n@@ -39,5
  +42,5 @@\n \n         return rpntokens;\n     }\n-\n }\n+\n"
tree_diff: |+
  New cluster:
  UPDATE from precedence.put("+",1); to precedence.put("+", 1);
  ------------
  ===
  update-node
  ---
  expression_statement: precedence.put("+",1); [346,368]
  replace precedence.put("+",1); by precedence.put("+", 1);

  New cluster:
  UPDATE from precedence.put("-",1); to precedence.put("-", 1);
  ------------
  ===
  update-node
  ---
  expression_statement: precedence.put("-",1); [377,399]
  replace precedence.put("-",1); by precedence.put("-", 1);

  New cluster:
  UPDATE from precedence.put("*",2); to precedence.put("*", 2);
  ------------
  ===
  update-node
  ---
  expression_statement: precedence.put("*",2); [408,430]
  replace precedence.put("*",2); by precedence.put("*", 2);

  New cluster:
  UPDATE from precedence.put("/",2); to precedence.put("/", 2);
  ------------
  ===
  update-node
  ---
  expression_statement: precedence.put("/",2); [439,461]
  replace precedence.put("/",2); by precedence.put("/", 2);

  New cluster:
  UPDATE from for (Object token: tokens) {
              if (Integer.class.isInstance(token)) {
              // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
              }
          } to for (Object token : tokens) {
              if (Integer.class.isInstance(token)) {
                  // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
                  opstack.push(token);
              }

          }
  ------------
  ===
  update-node
  ---
  enhanced_for_statement: for (Object token: tokens) {
              if (Integer.class.isInstance(token)) {
              // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
              }
          } [569,1016]
  replace for (Object token: tokens) {
              if (Integer.class.isInstance(token)) {
              // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
              }
          } by for (Object token : tokens) {
              if (Integer.class.isInstance(token)) {
                  // cover also Double case I guess?
                  rpntokens.add((Integer) token);
              } else {
                  String operator = (String) token;
                  while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {
                      rpntokens.add(opstack.pop());
                  }
                  opstack.push(token);
              }

          }

...
