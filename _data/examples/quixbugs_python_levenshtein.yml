---
language: python
text_diff: "--- before\n+++ after\n@@ -1,9 +1,10 @@\n+\n def levenshtein(source, target):\n
  \    if source == '' or target == '':\n         return len(source) or len(target)\n
  \n     elif source[0] == target[0]:\n-        return 1 + levenshtein(source[1:],
  target[1:])\n+        return levenshtein(source[1:], target[1:])\n \n     else:\n
  \        return 1 + min(\n@@ -12,21 +13,3 @@\n             levenshtein(source[1:],
  target)\n         )\n \n-\"\"\"\n-Levenshtein Distance\n-\n-\n-Calculates the Levenshtein
  distance between two strings.  The Levenshtein distance is defined as the minimum
  amount of single-character edits (either removing a character, adding a character,
  or changing a character) necessary to transform a source string into a target string.\n-\n-Input:\n-
  \   source: The string you begin with.\n-    target: The string to transform into.\n-\n-Output:\n-
  \   The Levenshtein distance between the source and target.\n-\n-Example:\n-    electron
  can be transformed into neutron by removing the e, turning the l into n, and turning
  the c into u.\n-    >>> levenshtein(electron, neutron)\n-    3\n-\"\"\"\n"
tree_diff: |+
  New cluster:
  UPDATE from return 1 + levenshtein(source[1:], target[1:]) to return levenshtein(source[1:], target[1:])
  ------------
  ===
  update-node
  ---
  return_statement: return 1 + levenshtein(source[1:], target[1:]) [154,200]
  replace return 1 + levenshtein(source[1:], target[1:]) by return levenshtein(source[1:], target[1:])

  New cluster:
  ===
  delete-node
  ---
  expression_statement: """
  Levenshtein Distance


  Calculates the Levenshtein distance between two strings.  The Levenshtein distance is defined as the minimum amount of single-character edits (either removing a character, adding a character, or changing a character) necessary to transform a source string into a target string.

  Input:
      source: The string you begin with.
      target: The string to transform into.

  Output:
      The Levenshtein distance between the source and target.

  Example:
      electron can be transformed into neutron by removing the e, turning the l into n, and turning the c into u.
      >>> levenshtein(electron, neutron)
      3
  """ [389,1022]
  ===
  ------------
  ===
  delete-node
  ---
  expression_statement: """
  Levenshtein Distance


  Calculates the Levenshtein distance between two strings.  The Levenshtein distance is defined as the minimum amount of single-character edits (either removing a character, adding a character, or changing a character) necessary to transform a source string into a target string.

  Input:
      source: The string you begin with.
      target: The string to transform into.

  Output:
      The Levenshtein distance between the source and target.

  Example:
      electron can be transformed into neutron by removing the e, turning the l into n, and turning the c into u.
      >>> levenshtein(electron, neutron)
      3
  """ [389,1022]
  ===

...
