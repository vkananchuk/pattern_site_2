---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: GnuParser
        children: []
        pos: 1128
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flatten
              children: []
              pos: 2029
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Options options
                children: []
                pos: 2037
                length: 15
              pos: 2010
              length: 2042
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: List tokens = new ArrayList();
                children: []
                pos: 2113
                length: 30
              - type: local_variable_declaration
                fields:
                  text: boolean eatTheRest = false;
                children: []
                pos: 2153
                length: 27
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < arguments.length; i++)
                            {
                                String arg = arguments[i];

                                if ("--".equals(arg))
                                {
                                    eatTheRest = true;
                                    tokens.add("--");
                                }
                                else if ("-".equals(arg))
                                {
                                    tokens.add("-");
                                }
                                else if (arg.startsWith("-"))
                                {
                                    String opt = Util.stripLeadingHyphens(arg);

                                    if (options.hasOption(opt))
                                    {
                                        tokens.add(arg);
                                    }
                                    else
                                    {
                                        if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))
                                        {
                                            // the format is --foo=value or -foo=value
                                            tokens.add(arg.substring(0, arg.indexOf('='))); // --foo
                                            tokens.add(arg.substring(arg.indexOf('=') + 1)); // value
                                        }
                                        else if (options.hasOption(arg.substring(0, 2)))
                                        {
                                            // the format is a special properties option (-Dproperty=value)
                                            tokens.add(arg.substring(0, 2)); // -D
                                            tokens.add(arg.substring(2)); // property=value
                                        }
                                        else
                                        {
                                            eatTheRest = stopAtNonOption;
                                            tokens.add(arg);
                                        }
                                    }
                                }
                                else
                                {
                                    tokens.add(arg);
                                }

                                if (eatTheRest)
                                {
                                    for (i++; i < arguments.length; i++)
                                    {
                                        tokens.add(arguments[i]);
                                    }
                                }
                            }
                children: []
                pos: 2190
                length: 1786
              - type: return_statement
                fields:
                  text: return (String[]) tokens.toArray(new String[tokens.size()]);
                children: []
                pos: 3986
                length: 60
              pos: 2103
              length: 1949
          children: []
          pos: 2010
          length: 2042
        pos: 1115
        length: 2939
    children: []
    pos: 1115
    length: 2939
  pos: 0
  length: 4055
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: GnuParser
        children: []
        pos: 1128
        length: 9
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: flatten
              children: []
              pos: 2029
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Options options
                children: []
                pos: 2037
                length: 15
              pos: 2010
              length: 1725
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: List tokens = new ArrayList();
                children: []
                pos: 2113
                length: 30
              - type: local_variable_declaration
                fields:
                  text: boolean eatTheRest = false;
                children: []
                pos: 2153
                length: 27
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < arguments.length; i++)
                            {
                                String arg = arguments[i];

                                if ("--".equals(arg))
                                {
                                    eatTheRest = true;
                                    tokens.add("--");
                                }
                                else if ("-".equals(arg))
                                {
                                    tokens.add("-");
                                }
                                else if (arg.startsWith("-"))
                                {
                                    String opt = Util.stripLeadingHyphens(arg);

                                    if (options.hasOption(opt))
                                    {
                                        tokens.add(arg);
                                    }
                                    else
                                    {
                                        if (options.hasOption(arg.substring(0, 2)))
                                        {
                                            // the format is --foo=value or -foo=value
                                            // the format is a special properties option (-Dproperty=value)
                                            tokens.add(arg.substring(0, 2)); // -D
                                            tokens.add(arg.substring(2)); // property=value
                                        }
                                        else
                                        {
                                            eatTheRest = stopAtNonOption;
                                            tokens.add(arg);
                                        }
                                    }
                                }
                                else
                                {
                                    tokens.add(arg);
                                }

                                if (eatTheRest)
                                {
                                    for (i++; i < arguments.length; i++)
                                    {
                                        tokens.add(arguments[i]);
                                    }
                                }
                            }
                children: []
                pos: 2190
                length: 1469
              - type: return_statement
                fields:
                  text: return (String[]) tokens.toArray(new String[tokens.size()]);
                children: []
                pos: 3669
                length: 60
              pos: 2103
              length: 1632
          children: []
          pos: 2010
          length: 1725
        pos: 1115
        length: 2622
    children: []
    pos: 1115
    length: 2622
  pos: 0
  length: 3738
text_diff: |
  --- before
  +++ after
  @@ -78,14 +78,9 @@
                   }
                   else
                   {
  -                    if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))
  +                    if (options.hasOption(arg.substring(0, 2)))
                       {
                           // the format is --foo=value or -foo=value
  -                        tokens.add(arg.substring(0, arg.indexOf('='))); // --foo
  -                        tokens.add(arg.substring(arg.indexOf('=') + 1)); // value
  -                    }
  -                    else if (options.hasOption(arg.substring(0, 2)))
  -                    {
                           // the format is a special properties option (-Dproperty=value)
                           tokens.add(arg.substring(0, 2)); // -D
                           tokens.add(arg.substring(2)); // property=value
tree_diff: |+
  New cluster:
  UPDATE from for (int i = 0; i < arguments.length; i++)
          {
              String arg = arguments[i];

              if ("--".equals(arg))
              {
                  eatTheRest = true;
                  tokens.add("--");
              }
              else if ("-".equals(arg))
              {
                  tokens.add("-");
              }
              else if (arg.startsWith("-"))
              {
                  String opt = Util.stripLeadingHyphens(arg);

                  if (options.hasOption(opt))
                  {
                      tokens.add(arg);
                  }
                  else
                  {
                      if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))
                      {
                          // the format is --foo=value or -foo=value
                          tokens.add(arg.substring(0, arg.indexOf('='))); // --foo
                          tokens.add(arg.substring(arg.indexOf('=') + 1)); // value
                      }
                      else if (options.hasOption(arg.substring(0, 2)))
                      {
                          // the format is a special properties option (-Dproperty=value)
                          tokens.add(arg.substring(0, 2)); // -D
                          tokens.add(arg.substring(2)); // property=value
                      }
                      else
                      {
                          eatTheRest = stopAtNonOption;
                          tokens.add(arg);
                      }
                  }
              }
              else
              {
                  tokens.add(arg);
              }

              if (eatTheRest)
              {
                  for (i++; i < arguments.length; i++)
                  {
                      tokens.add(arguments[i]);
                  }
              }
          } to for (int i = 0; i < arguments.length; i++)
          {
              String arg = arguments[i];

              if ("--".equals(arg))
              {
                  eatTheRest = true;
                  tokens.add("--");
              }
              else if ("-".equals(arg))
              {
                  tokens.add("-");
              }
              else if (arg.startsWith("-"))
              {
                  String opt = Util.stripLeadingHyphens(arg);

                  if (options.hasOption(opt))
                  {
                      tokens.add(arg);
                  }
                  else
                  {
                      if (options.hasOption(arg.substring(0, 2)))
                      {
                          // the format is --foo=value or -foo=value
                          // the format is a special properties option (-Dproperty=value)
                          tokens.add(arg.substring(0, 2)); // -D
                          tokens.add(arg.substring(2)); // property=value
                      }
                      else
                      {
                          eatTheRest = stopAtNonOption;
                          tokens.add(arg);
                      }
                  }
              }
              else
              {
                  tokens.add(arg);
              }

              if (eatTheRest)
              {
                  for (i++; i < arguments.length; i++)
                  {
                      tokens.add(arguments[i]);
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int i = 0; i < arguments.length; i++)
          {
              String arg = arguments[i];

              if ("--".equals(arg))
              {
                  eatTheRest = true;
                  tokens.add("--");
              }
              else if ("-".equals(arg))
              {
                  tokens.add("-");
              }
              else if (arg.startsWith("-"))
              {
                  String opt = Util.stripLeadingHyphens(arg);

                  if (options.hasOption(opt))
                  {
                      tokens.add(arg);
                  }
                  else
                  {
                      if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))
                      {
                          // the format is --foo=value or -foo=value
                          tokens.add(arg.substring(0, arg.indexOf('='))); // --foo
                          tokens.add(arg.substring(arg.indexOf('=') + 1)); // value
                      }
                      else if (options.hasOption(arg.substring(0, 2)))
                      {
                          // the format is a special properties option (-Dproperty=value)
                          tokens.add(arg.substring(0, 2)); // -D
                          tokens.add(arg.substring(2)); // property=value
                      }
                      else
                      {
                          eatTheRest = stopAtNonOption;
                          tokens.add(arg);
                      }
                  }
              }
              else
              {
                  tokens.add(arg);
              }

              if (eatTheRest)
              {
                  for (i++; i < arguments.length; i++)
                  {
                      tokens.add(arguments[i]);
                  }
              }
          } [2190,3976]
  replace for (int i = 0; i < arguments.length; i++)
          {
              String arg = arguments[i];

              if ("--".equals(arg))
              {
                  eatTheRest = true;
                  tokens.add("--");
              }
              else if ("-".equals(arg))
              {
                  tokens.add("-");
              }
              else if (arg.startsWith("-"))
              {
                  String opt = Util.stripLeadingHyphens(arg);

                  if (options.hasOption(opt))
                  {
                      tokens.add(arg);
                  }
                  else
                  {
                      if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))
                      {
                          // the format is --foo=value or -foo=value
                          tokens.add(arg.substring(0, arg.indexOf('='))); // --foo
                          tokens.add(arg.substring(arg.indexOf('=') + 1)); // value
                      }
                      else if (options.hasOption(arg.substring(0, 2)))
                      {
                          // the format is a special properties option (-Dproperty=value)
                          tokens.add(arg.substring(0, 2)); // -D
                          tokens.add(arg.substring(2)); // property=value
                      }
                      else
                      {
                          eatTheRest = stopAtNonOption;
                          tokens.add(arg);
                      }
                  }
              }
              else
              {
                  tokens.add(arg);
              }

              if (eatTheRest)
              {
                  for (i++; i < arguments.length; i++)
                  {
                      tokens.add(arguments[i]);
                  }
              }
          } by for (int i = 0; i < arguments.length; i++)
          {
              String arg = arguments[i];

              if ("--".equals(arg))
              {
                  eatTheRest = true;
                  tokens.add("--");
              }
              else if ("-".equals(arg))
              {
                  tokens.add("-");
              }
              else if (arg.startsWith("-"))
              {
                  String opt = Util.stripLeadingHyphens(arg);

                  if (options.hasOption(opt))
                  {
                      tokens.add(arg);
                  }
                  else
                  {
                      if (options.hasOption(arg.substring(0, 2)))
                      {
                          // the format is --foo=value or -foo=value
                          // the format is a special properties option (-Dproperty=value)
                          tokens.add(arg.substring(0, 2)); // -D
                          tokens.add(arg.substring(2)); // property=value
                      }
                      else
                      {
                          eatTheRest = stopAtNonOption;
                          tokens.add(arg);
                      }
                  }
              }
              else
              {
                  tokens.add(arg);
              }

              if (eatTheRest)
              {
                  for (i++; i < arguments.length; i++)
                  {
                      tokens.add(arguments[i]);
                  }
              }
          }

...
