---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Reporter
        children: []
        pos: 1815
        length: 8
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkedExceptionInvalid
              children: []
              pos: 1843
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Throwable t
                children: []
                pos: 1867
                length: 11
              pos: 1831
              length: 206
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Checked exception is invalid for this method!",
                                    "Invalid: " + t
                            ));
                children: []
                pos: 1890
                length: 141
              pos: 1880
              length: 157
          children: []
          pos: 1831
          length: 206
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotStubWithNullThrowable
              children: []
              pos: 2055
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 2043
              length: 154
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Cannot stub with null throwable!"
                            ));
                children: []
                pos: 2095
                length: 95
              pos: 2085
              length: 112
          children: []
          pos: 2043
          length: 154
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: unfinishedStubbing
              children: []
              pos: 2215
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Location location
                children: []
                pos: 2234
                length: 17
              pos: 2203
              length: 812
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new UnfinishedStubbingException(join(
                                    "Unfinished stubbing detected here:",
                                    location,
                                    "",
                                    "E.g. thenReturn() may be missing.",
                                    "Examples of correct stubbing:",
                                    "    when(mock.isOk()).thenReturn(true);",
                                    "    when(mock.isOk()).thenThrow(exception);",
                                    "    doThrow(exception).when(mock).someVoidMethod();",
                                    "Hints:",
                                    " 1. missing thenReturn()",
                                    " 2. you are trying to stub a final method, you naughty developer!",
                                    " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed",
                                    ""
                            ));
                children: []
                pos: 2263
                length: 746
              pos: 2253
              length: 762
          children: []
          pos: 2203
          length: 812
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: incorrectUseOfApi
              children: []
              pos: 3033
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 3021
              length: 622
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Incorrect use of API detected here:",
                                    new LocationImpl(),
                                    "",
                                    "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.",
                                    "Examples of correct usage:",
                                    "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);",
                                    "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);",
                                    ""
                            ));
                children: []
                pos: 3063
                length: 574
              pos: 3053
              length: 590
          children: []
          pos: 3021
          length: 622
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: missingMethodInvocation
              children: []
              pos: 3661
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 3649
              length: 709
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MissingMethodInvocationException(join(
                                    "when() requires an argument which has to be 'a method call on a mock'.",
                                    "For example:",
                                    "    when(mock.getArticles()).thenReturn(articles);",
                                    "",
                                    "Also, this error might show up because:",
                                    "1. you stub either of: final/private/equals()/hashCode() methods.",
                                    "   Those methods *cannot* be stubbed/verified.",
                                    "   " + MockitoLimitations.NON_PUBLIC_PARENT,
                                    "2. inside when() you don't call method on mock but on some other object.",
                                    ""
                            ));
                children: []
                pos: 3697
                length: 655
              pos: 3687
              length: 671
          children: []
          pos: 3649
          length: 709
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: unfinishedVerificationException
              children: []
              pos: 4376
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Location location
                children: []
                pos: 4408
                length: 17
              pos: 4364
              length: 691
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    UnfinishedVerificationException exception = new UnfinishedVerificationException(join(
                                    "Missing method call for verify(mock) here:",
                                    location,
                                    "",
                                    "Example of correct verification:",
                                    "    verify(mock).doSomething()",
                                    "",
                                    "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.",
                                    "Those methods *cannot* be stubbed/verified.",
                                    MockitoLimitations.NON_PUBLIC_PARENT,
                                    ""
                            ));
                children: []
                pos: 4437
                length: 586
              - type: throw_statement
                fields:
                  text: throw exception;
                children: []
                pos: 5033
                length: 16
              pos: 4427
              length: 628
          children: []
          pos: 4364
          length: 691
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: notAMockPassedToVerify
              children: []
              pos: 5073
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class type
                children: []
                pos: 5096
                length: 10
              pos: 5061
              length: 517
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotAMockException(join(
                                    "Argument passed to verify() is of type " + type.getSimpleName() + " and is not a mock!",
                                    "Make sure you place the parenthesis correctly!",
                                    "See the examples of correct verifications:",
                                    "    verify(mock).someMethod();",
                                    "    verify(mock, times(10)).someMethod();",
                                    "    verify(mock, atLeastOnce()).someMethod();"
                            ));
                children: []
                pos: 5118
                length: 454
              pos: 5108
              length: 470
          children: []
          pos: 5061
          length: 517
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nullPassedToVerify
              children: []
              pos: 5596
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 5584
              length: 540
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NullInsteadOfMockException(join(
                                    "Argument passed to verify() should be a mock but is null!",
                                    "Examples of correct verifications:",
                                    "    verify(mock).someMethod();",
                                    "    verify(mock, times(10)).someMethod();",
                                    "    verify(mock, atLeastOnce()).someMethod();",
                                    "    not: verify(mock.someMethod());",
                                    "Also, if you use @Mock annotation don't miss initMocks()"
                            ));
                children: []
                pos: 5627
                length: 491
              pos: 5617
              length: 507
          children: []
          pos: 5584
          length: 540
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: notAMockPassedToWhenMethod
              children: []
              pos: 6142
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 6130
              length: 289
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotAMockException(join(
                                    "Argument passed to when() is not a mock!",
                                    "Example of correct stubbing:",
                                    "    doThrow(new RuntimeException()).when(mock).someMethod();"
                            ));
                children: []
                pos: 6181
                length: 232
              pos: 6171
              length: 248
          children: []
          pos: 6130
          length: 289
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nullPassedToWhenMethod
              children: []
              pos: 6437
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 6425
              length: 364
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NullInsteadOfMockException(join(
                                    "Argument passed to when() is null!",
                                    "Example of correct stubbing:",
                                    "    doThrow(new RuntimeException()).when(mock).someMethod();",
                                    "Also, if you use @Mock annotation don't miss initMocks()"
                            ));
                children: []
                pos: 6472
                length: 311
              pos: 6462
              length: 327
          children: []
          pos: 6425
          length: 364
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mocksHaveToBePassedToVerifyNoMoreInteractions
              children: []
              pos: 6807
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 6795
              length: 379
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Method requires argument(s)!",
                                    "Pass mocks that should be verified, e.g:",
                                    "    verifyNoMoreInteractions(mockOne, mockTwo);",
                                    "    verifyZeroInteractions(mockOne, mockTwo);",
                                    ""
                            ));
                children: []
                pos: 6865
                length: 303
              pos: 6855
              length: 319
          children: []
          pos: 6795
          length: 379
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: notAMockPassedToVerifyNoMoreInteractions
              children: []
              pos: 7192
              length: 40
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7180
              length: 374
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotAMockException(join(
                                    "Argument(s) passed is not a mock!",
                                    "Examples of correct verifications:",
                                    "    verifyNoMoreInteractions(mockOne, mockTwo);",
                                    "    verifyZeroInteractions(mockOne, mockTwo);",
                                    ""
                            ));
                children: []
                pos: 7245
                length: 303
              pos: 7235
              length: 319
          children: []
          pos: 7180
          length: 374
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nullPassedToVerifyNoMoreInteractions
              children: []
              pos: 7572
              length: 36
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7560
              length: 353
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NullInsteadOfMockException(join(
                                    "Argument(s) passed is null!",
                                    "Examples of correct verifications:",
                                    "    verifyNoMoreInteractions(mockOne, mockTwo);",
                                    "    verifyZeroInteractions(mockOne, mockTwo);"
                            ));
                children: []
                pos: 7621
                length: 286
              pos: 7611
              length: 302
          children: []
          pos: 7560
          length: 353
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: notAMockPassedWhenCreatingInOrder
              children: []
              pos: 7931
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7919
              length: 327
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotAMockException(join(
                                    "Argument(s) passed is not a mock!",
                                    "Pass mocks that require verification in order.",
                                    "For example:",
                                    "    InOrder inOrder = inOrder(mockOne, mockTwo);"
                            ));
                children: []
                pos: 7977
                length: 263
              pos: 7967
              length: 279
          children: []
          pos: 7919
          length: 327
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nullPassedWhenCreatingInOrder
              children: []
              pos: 8264
              length: 29
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8252
              length: 326
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NullInsteadOfMockException(join(
                                    "Argument(s) passed is null!",
                                    "Pass mocks that require verification in order.",
                                    "For example:",
                                    "    InOrder inOrder = inOrder(mockOne, mockTwo);"
                            ));
                children: []
                pos: 8306
                length: 266
              pos: 8296
              length: 282
          children: []
          pos: 8252
          length: 326
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mocksHaveToBePassedWhenCreatingInOrder
              children: []
              pos: 8596
              length: 38
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8584
              length: 326
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Method requires argument(s)!",
                                    "Pass mocks that require verification in order.",
                                    "For example:",
                                    "    InOrder inOrder = inOrder(mockOne, mockTwo);"
                            ));
                children: []
                pos: 8647
                length: 257
              pos: 8637
              length: 273
          children: []
          pos: 8584
          length: 326
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inOrderRequiresFamiliarMock
              children: []
              pos: 8928
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8916
              length: 347
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "InOrder can only verify mocks that were passed in during creation of InOrder.",
                                    "For example:",
                                    "    InOrder inOrder = inOrder(mockOne);",
                                    "    inOrder.verify(mockOne).doStuff();"
                            ));
                children: []
                pos: 8968
                length: 289
              pos: 8958
              length: 305
          children: []
          pos: 8916
          length: 347
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invalidUseOfMatchers
              children: []
              pos: 9281
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int expectedMatchersCount
                children: []
                pos: 9302
                length: 25
              pos: 9269
              length: 925
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new InvalidUseOfMatchersException(join(
                                    "Invalid use of argument matchers!",
                                    expectedMatchersCount + " matchers expected, " + recordedMatchers.size()+ " recorded:" +
                                            locationsOf(recordedMatchers),
                                    "",
                                    "This exception may occur if matchers are combined with raw values:",
                                    "    //incorrect:",
                                    "    someMethod(anyObject(), \"raw String\");",
                                    "When using matchers, all arguments have to be provided by matchers.",
                                    "For example:",
                                    "    //correct:",
                                    "    someMethod(anyObject(), eq(\"String by matcher\"));",
                                    "",
                                    "For more info see javadoc for Matchers class.",
                                    ""
                            ));
                children: []
                pos: 9380
                length: 808
              pos: 9370
              length: 824
          children: []
          pos: 9269
          length: 925
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: incorrectUseOfAdditionalMatchers
              children: []
              pos: 10212
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String additionalMatcherName
                children: []
                pos: 10245
                length: 28
              pos: 10200
              length: 1140
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new InvalidUseOfMatchersException(join(
                                    "Invalid use of argument matchers inside additional matcher " + additionalMatcherName + " !",
                                    new LocationImpl(),
                                    "",
                                    expectedSubMatchersCount + " sub matchers expected, " + matcherStack.size() + " recorded:",
                                    locationsOf(matcherStack),
                                    "",
                                    "This exception may occur if matchers are combined with raw values:",
                                    "    //incorrect:",
                                    "    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");",
                                    "When using matchers, all arguments have to be provided by matchers.",
                                    "For example:",
                                    "    //correct:",
                                    "    someMethod(AdditionalMatchers.and(isNotNull(), eq(\"raw String\"));",
                                    "",
                                    "For more info see javadoc for Matchers and AdditionalMatchers classes.",
                                    ""
                            ));
                children: []
                pos: 10358
                length: 976
              pos: 10348
              length: 992
          children: []
          pos: 10200
          length: 1140
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: stubPassedToVerify
              children: []
              pos: 11358
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 11346
              length: 300
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new CannotVerifyStubOnlyMock(join(
                                    "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                                    "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
                            ));
                children: []
                pos: 11389
                length: 251
              pos: 11379
              length: 267
          children: []
          pos: 11346
          length: 300
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: reportNoSubMatchersFound
              children: []
              pos: 11664
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String additionalMatcherName
                children: []
                pos: 11689
                length: 28
              pos: 11652
              length: 280
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new InvalidUseOfMatchersException(join(
                                    "No matchers found for additional matcher " + additionalMatcherName,
                                    new LocationImpl(),
                                    ""
                            ));
                children: []
                pos: 11729
                length: 197
              pos: 11719
              length: 213
          children: []
          pos: 11652
          length: 280
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: locationsOf
              children: []
              pos: 11954
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Collection<LocalizedMatcher> matchers
                children: []
                pos: 11966
                length: 37
              pos: 11939
              length: 290
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: List<String> description = new ArrayList<String>();
                children: []
                pos: 12015
                length: 51
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (LocalizedMatcher matcher : matchers)
                                description.add(matcher.getLocation().toString());
                children: []
                pos: 12075
                length: 104
              - type: return_statement
                fields:
                  text: return join(description.toArray());
                children: []
                pos: 12188
                length: 35
              pos: 12005
              length: 224
          children: []
          pos: 11939
          length: 290
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: argumentsAreDifferent
              children: []
              pos: 12247
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String wanted
                children: []
                pos: 12269
                length: 13
              pos: 12235
              length: 460
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    String message = join("Argument(s) are different! Wanted:",
                                    wanted,
                                    new LocationImpl(),
                                    "Actual invocation has different arguments:",
                                    actual,
                                    actualLocation,
                                    ""
                            );
                children: []
                pos: 12334
                length: 267
              - type: throw_statement
                fields:
                  text: throw JUnitTool.createArgumentsAreDifferentException(message,
                    wanted, actual);
                children: []
                pos: 12611
                length: 78
              pos: 12324
              length: 371
          children: []
          pos: 12235
          length: 460
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wantedButNotInvoked
              children: []
              pos: 12713
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 12733
                length: 26
              pos: 12701
              length: 148
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new WantedButNotInvoked(createWantedButNotInvokedMessage(wanted));
                children: []
                pos: 12771
                length: 72
              pos: 12761
              length: 88
          children: []
          pos: 12701
          length: 148
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wantedButNotInvoked
              children: []
              pos: 12867
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 12887
                length: 26
              pos: 12855
              length: 827
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String allInvocations;
                children: []
                pos: 12974
                length: 22
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: invocations.isEmpty()
                        children: []
                        pos: 13009
                        length: 21
                    children: []
                    pos: 13008
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: allInvocations = "Actually, there were zero interactions
                        with this mock.\n";
                    children: []
                    pos: 13046
                    length: 76
                  pos: 13032
                  length: 100
                pos: 13005
                length: 538
              - type: local_variable_declaration
                fields:
                  text: String message = createWantedButNotInvokedMessage(wanted);
                children: []
                pos: 13553
                length: 58
              - type: throw_statement
                fields:
                  text: throw new WantedButNotInvoked(message + allInvocations);
                children: []
                pos: 13620
                length: 56
              pos: 12964
              length: 718
          children: []
          pos: 12855
          length: 827
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createWantedButNotInvokedMessage
              children: []
              pos: 13703
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 13736
                length: 26
              pos: 13688
              length: 248
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return join(
                                    "Wanted but not invoked:",
                                    wanted.toString(),
                                    new LocationImpl(),
                                    ""
                            );
                children: []
                pos: 13774
                length: 156
              pos: 13764
              length: 172
          children: []
          pos: 13688
          length: 248
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wantedButNotInvokedInOrder
              children: []
              pos: 13954
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 13981
                length: 26
              pos: 13942
              length: 490
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new VerificationInOrderFailure(join(
                                    "Verification in order failure",
                                    "Wanted but not invoked:",
                                    wanted.toString(),
                                    new LocationImpl(),
                                    "Wanted anywhere AFTER following interaction:",
                                    previous.toString(),
                                    previous.getLocation(),
                                    ""
                            ));
                children: []
                pos: 14049
                length: 377
              pos: 14039
              length: 393
          children: []
          pos: 13942
          length: 490
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tooManyActualInvocations
              children: []
              pos: 14450
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int wantedCount
                children: []
                pos: 14475
                length: 15
              pos: 14438
              length: 292
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String message = createTooManyInvocationsMessage(wantedCount,
                    actualCount, wanted, firstUndesired);
                children: []
                pos: 14572
                length: 99
              - type: throw_statement
                fields:
                  text: throw new TooManyActualInvocations(message);
                children: []
                pos: 14680
                length: 44
              pos: 14562
              length: 168
          children: []
          pos: 14438
          length: 292
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createTooManyInvocationsMessage
              children: []
              pos: 14751
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int wantedCount
                children: []
                pos: 14783
                length: 15
              pos: 14736
              length: 485
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return join(
                                    wanted.toString(),
                                    "Wanted " + pluralize(wantedCount) + ":",
                                    new LocationImpl(),
                                    "But was " + pluralize(actualCount) + ". Undesired invocation:",
                                    firstUndesired,
                                    ""
                            );
                children: []
                pos: 14931
                length: 284
              pos: 14921
              length: 300
          children: []
          pos: 14736
          length: 485
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: neverWantedButInvoked
              children: []
              pos: 15239
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 15261
                length: 26
              pos: 15227
              length: 349
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NeverWantedButInvoked(join(
                                    wanted.toString(),
                                    "Never wanted here:",
                                    new LocationImpl(),
                                    "But invoked here:",
                                    firstUndesired,
                                    ""
                            ));
                children: []
                pos: 15324
                length: 246
              pos: 15314
              length: 262
          children: []
          pos: 15227
          length: 349
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tooManyActualInvocationsInOrder
              children: []
              pos: 15594
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int wantedCount
                children: []
                pos: 15626
                length: 15
              pos: 15582
              length: 368
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String message = createTooManyInvocationsMessage(wantedCount,
                    actualCount, wanted, firstUndesired);
                children: []
                pos: 15723
                length: 99
              - type: throw_statement
                fields:
                  text: |-
                    throw new VerificationInOrderFailure(join(
                                    "Verification in order failure:" + message
                            ));
                children: []
                pos: 15831
                length: 113
              pos: 15713
              length: 237
          children: []
          pos: 15582
          length: 368
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createTooLittleInvocationsMessage
              children: []
              pos: 15971
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: org.mockito.internal.reporting.Discrepancy discrepancy
                children: []
                pos: 16005
                length: 54
              pos: 15956
              length: 642
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    String ending =
                                    (lastActualInvocation != null)? lastActualInvocation + "\n" : "\n";
                children: []
                pos: 16183
                length: 99
              - type: local_variable_declaration
                fields:
                  text: |-
                    String message = join(
                                    wanted.toString(),
                                    "Wanted " + discrepancy.getPluralizedWantedCount() + ":",
                                    new LocationImpl(),
                                    "But was " + discrepancy.getPluralizedActualCount() + ":",
                                    ending
                            );
                children: []
                pos: 16292
                length: 276
              - type: return_statement
                fields:
                  text: return message;
                children: []
                pos: 16577
                length: 15
              pos: 16173
              length: 425
          children: []
          pos: 15956
          length: 642
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tooLittleActualInvocations
              children: []
              pos: 16616
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: org.mockito.internal.reporting.Discrepancy discrepancy
                children: []
                pos: 16643
                length: 54
              pos: 16604
              length: 316
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String message = createTooLittleInvocationsMessage(discrepancy,
                    wanted, lastActualLocation);
                children: []
                pos: 16766
                length: 92
              - type: throw_statement
                fields:
                  text: throw new TooLittleActualInvocations(message);
                children: []
                pos: 16868
                length: 46
              pos: 16756
              length: 164
          children: []
          pos: 16604
          length: 316
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tooLittleActualInvocationsInOrder
              children: []
              pos: 16938
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: org.mockito.internal.reporting.Discrepancy discrepancy
                children: []
                pos: 16972
                length: 54
              pos: 16926
              length: 390
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String message = createTooLittleInvocationsMessage(discrepancy,
                    wanted, lastActualLocation);
                children: []
                pos: 17095
                length: 92
              - type: throw_statement
                fields:
                  text: |-
                    throw new VerificationInOrderFailure(join(
                                    "Verification in order failure:" + message
                            ));
                children: []
                pos: 17197
                length: 113
              pos: 17085
              length: 231
          children: []
          pos: 16926
          length: 390
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: noMoreInteractionsWanted
              children: []
              pos: 17334
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Invocation undesired
                children: []
                pos: 17359
                length: 20
              pos: 17322
              length: 552
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ScenarioPrinter scenarioPrinter = new ScenarioPrinter();
                children: []
                pos: 17438
                length: 56
              - type: local_variable_declaration
                fields:
                  text: String scenario = scenarioPrinter.print(invocations);
                children: []
                pos: 17503
                length: 53
              - type: throw_statement
                fields:
                  text: |-
                    throw new NoInteractionsWanted(join(
                                    "No interactions wanted here:",
                                    new LocationImpl(),
                                    "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
                                    undesired.getLocation(),
                                    scenario
                            ));
                children: []
                pos: 17566
                length: 302
              pos: 17428
              length: 446
          children: []
          pos: 17322
          length: 552
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: noMoreInteractionsWantedInOrder
              children: []
              pos: 17892
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Invocation undesired
                children: []
                pos: 17924
                length: 20
              pos: 17880
              length: 364
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new VerificationInOrderFailure(join(
                                    "No interactions wanted here:",
                                    new LocationImpl(),
                                    "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
                                    undesired.getLocation()
                            ));
                children: []
                pos: 17956
                length: 282
              pos: 17946
              length: 298
          children: []
          pos: 17880
          length: 364
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotMockFinalClass
              children: []
              pos: 18262
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> clazz
                children: []
                pos: 18283
                length: 14
              pos: 18250
              length: 334
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Cannot mock/spy " + clazz.toString(),
                                    "Mockito cannot mock/spy following:",
                                    "  - final classes",
                                    "  - anonymous classes",
                                    "  - primitive types"
                            ));
                children: []
                pos: 18309
                length: 269
              pos: 18299
              length: 285
          children: []
          pos: 18250
          length: 334
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotStubVoidMethodWithAReturnValue
              children: []
              pos: 18602
              length: 36
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String methodName
                children: []
                pos: 18639
                length: 17
              pos: 18590
              length: 1127
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new CannotStubVoidMethodWithReturnValue(join(
                                    "'" + methodName + "' is a *void method* and it *cannot* be stubbed with a *return value*!",
                                    "Voids are usually stubbed with Throwables:",
                                    "    doThrow(exception).when(mock).someVoidMethod();",
                                    "***",
                                    "If you're unsure why you're getting above error read on.",
                                    "Due to the nature of the syntax above problem might occur because:",
                                    "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.",
                                    "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.",
                                    "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ",
                                    "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.",
                                    "4. " + MockitoLimitations.NON_PUBLIC_PARENT,
                                    ""
                            ));
                children: []
                pos: 18668
                length: 1043
              pos: 18658
              length: 1059
          children: []
          pos: 18590
          length: 1127
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: onlyVoidMethodsCanBeSetToDoNothing
              children: []
              pos: 19735
              length: 34
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 19723
              length: 505
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Only void methods can doNothing()!",
                                    "Example of correct use of doNothing():",
                                    "    doNothing().",
                                    "    doThrow(new RuntimeException())",
                                    "    .when(mock).someVoidMethod();",
                                    "Above means:",
                                    "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
                            ));
                children: []
                pos: 19782
                length: 440
              pos: 19772
              length: 456
          children: []
          pos: 19723
          length: 505
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wrongTypeOfReturnValue
              children: []
              pos: 20246
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String expectedType
                children: []
                pos: 20269
                length: 19
              pos: 20234
              length: 899
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new WrongTypeOfReturnValue(join(
                                    actualType + " cannot be returned by " + methodName + "()",
                                    methodName + "() should return " + expectedType,
                                    "***",
                                    "If you're unsure why you're getting above error read on.",
                                    "Due to the nature of the syntax above problem might occur because:",
                                    "1. This exception *might* occur in wrongly written multi-threaded tests.",
                                    "   Please refer to Mockito FAQ on limitations of concurrency testing.",
                                    "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ",
                                    "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.",
                                    ""
                            ));
                children: []
                pos: 20338
                length: 789
              pos: 20328
              length: 805
          children: []
          pos: 20234
          length: 899
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wantedAtMostX
              children: []
              pos: 21151
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int maxNumberOfInvocations
                children: []
                pos: 21165
                length: 26
              pos: 21139
              length: 204
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoAssertionError(join("Wanted at most " + pluralize(maxNumberOfInvocations)
                    + " but was " + foundSize));
                children: []
                pos: 21218
                length: 119
              pos: 21208
              length: 135
          children: []
          pos: 21139
          length: 204
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: misplacedArgumentMatcher
              children: []
              pos: 21361
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: List<LocalizedMatcher> lastMatchers
                children: []
                pos: 21386
                length: 35
              pos: 21349
              length: 969
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new InvalidUseOfMatchersException(join(
                                    "Misplaced argument matcher detected here:",
                                    locationsOf(lastMatchers),
                                    "",
                                    "You cannot use argument matchers outside of verification or stubbing.",
                                    "Examples of correct usage of argument matchers:",
                                    "    when(mock.get(anyInt())).thenReturn(null);",
                                    "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());",
                                    "    verify(mock).someMethod(contains(\"foo\"))",
                                    "",
                                    "Also, this error might show up because you use argument matchers with methods that cannot be mocked.",
                                    "Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().",
                                    MockitoLimitations.NON_PUBLIC_PARENT,
                                    ""
                            ));
                children: []
                pos: 21433
                length: 879
              pos: 21423
              length: 895
          children: []
          pos: 21349
          length: 969
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: smartNullPointerException
              children: []
              pos: 22336
              length: 25
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String invocation
                children: []
                pos: 22362
                length: 17
              pos: 22324
              length: 384
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new SmartNullPointerException(join(
                                    "You have a NullPointerException here:",
                                    new LocationImpl(),
                                    "because this method call was *not* stubbed correctly:",
                                    location,
                                    invocation,
                                    ""
                            ));
                children: []
                pos: 22410
                length: 292
              pos: 22400
              length: 308
          children: []
          pos: 22324
          length: 384
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: noArgumentValueWasCaptured
              children: []
              pos: 22726
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 22714
              length: 756
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "No argument value was captured!",
                                    "You might have forgotten to use argument.capture() in verify()...",
                                    "...or you used capture() in stubbing but stubbed method was not called.",
                                    "Be aware that it is recommended to use capture() only with verify()",
                                    "",
                                    "Examples of correct argument capturing:",
                                    "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);",
                                    "    verify(mock).doSomething(argument.capture());",
                                    "    assertEquals(\"John\", argument.getValue().getName());",
                                    ""
                            ));
                children: []
                pos: 22765
                length: 699
              pos: 22755
              length: 715
          children: []
          pos: 22714
          length: 756
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: extraInterfacesDoesNotAcceptNullParameters
              children: []
              pos: 23488
              length: 42
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 23476
              length: 186
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "extraInterfaces() does not accept null parameters."
                            ));
                children: []
                pos: 23543
                length: 113
              pos: 23533
              length: 129
          children: []
          pos: 23476
          length: 186
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: extraInterfacesAcceptsOnlyInterfaces
              children: []
              pos: 23680
              length: 36
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> wrongType
                children: []
                pos: 23717
                length: 18
              pos: 23668
              length: 297
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "extraInterfaces() accepts only interfaces.",
                                    "You passed following type: " + wrongType.getSimpleName() + " which is not an interface."
                            ));
                children: []
                pos: 23747
                length: 212
              pos: 23737
              length: 228
          children: []
          pos: 23668
          length: 297
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: extraInterfacesCannotContainMockedType
              children: []
              pos: 23983
              length: 38
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> wrongType
                children: []
                pos: 24022
                length: 18
              pos: 23971
              length: 375
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "extraInterfaces() does not accept the same type as the mocked type.",
                                    "You mocked following type: " + wrongType.getSimpleName(),
                                    "and you passed the same very interface to the extraInterfaces()"
                            ));
                children: []
                pos: 24052
                length: 288
              pos: 24042
              length: 304
          children: []
          pos: 23971
          length: 375
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: extraInterfacesRequiresAtLeastOneInterface
              children: []
              pos: 24364
              length: 42
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 24352
              length: 186
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "extraInterfaces() requires at least one interface."
                            ));
                children: []
                pos: 24419
                length: 113
              pos: 24409
              length: 129
          children: []
          pos: 24352
          length: 186
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mockedTypeIsInconsistentWithSpiedInstanceType
              children: []
              pos: 24556
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> mockedType
                children: []
                pos: 24602
                length: 19
              pos: 24544
              length: 676
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Mocked type must be the same as the type of your spied instance.",
                                    "Mocked type must be: " + spiedInstance.getClass().getSimpleName() + ", but is: " + mockedType.getSimpleName(),
                                    "  //correct spying:",
                                    "  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );",
                                    "  //incorrect - types don't match:",
                                    "  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );"
                            ));
                children: []
                pos: 24655
                length: 559
              pos: 24645
              length: 575
          children: []
          pos: 24544
          length: 676
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotCallAbstractRealMethod
              children: []
              pos: 25238
              length: 28
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 25226
              length: 390
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Cannot call abstract real method on java object!",
                                    "Calling real methods is only possible when mocking non abstract method.",
                                    "  //correct example:",
                                    "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
                            ));
                children: []
                pos: 25279
                length: 331
              pos: 25269
              length: 347
          children: []
          pos: 25226
          length: 390
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotVerifyToString
              children: []
              pos: 25634
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 25622
              length: 674
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Mockito cannot verify toString()",
                                    "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                                            "Verifying it may give inconsistent or hard to understand results. " +
                                            "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                                    "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
                            ));
                children: []
                pos: 25667
                length: 623
              pos: 25657
              length: 639
          children: []
          pos: 25622
          length: 674
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: moreThanOneAnnotationNotAllowed
              children: []
              pos: 26314
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String fieldName
                children: []
                pos: 26346
                length: 16
              pos: 26302
              length: 363
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException("You cannot have more than one Mockito annotation on a field!\n" +
                                    "The field '" + fieldName + "' has multiple Mockito annotations.\n" +
                                    "For info how to use annotations see examples in javadoc for MockitoAnnotations class.");
                children: []
                pos: 26374
                length: 285
              pos: 26364
              length: 301
          children: []
          pos: 26302
          length: 363
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: unsupportedCombinationOfAnnotations
              children: []
              pos: 26683
              length: 35
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String undesiredAnnotationOne
                children: []
                pos: 26719
                length: 29
              pos: 26671
              length: 309
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException("This combination of annotations is not permitted on a single field:\n" +
                                    "@" + undesiredAnnotationOne + " and @" + undesiredAnnotationTwo);
                children: []
                pos: 26791
                length: 183
              pos: 26781
              length: 199
          children: []
          pos: 26671
          length: 309
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotInitializeForSpyAnnotation
              children: []
              pos: 26998
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String fieldName
                children: []
                pos: 27031
                length: 16
              pos: 26986
              length: 685
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join("Cannot instantiate a @Spy for '" + fieldName + "' field.",
                                    "You haven't provided the instance for spying at field declaration so I tried to construct the instance.",
                                    "However, I failed because: " + details.getMessage(),
                                    "Examples of correct usage of @Spy:",
                                    "   @Spy List mock = new LinkedList();",
                                    "   @Spy Foo foo; //only if Foo has parameterless constructor",
                                    "   //also, don't forget about MockitoAnnotations.initMocks();",
                                    ""), details);
                children: []
                pos: 27078
                length: 587
              pos: 27068
              length: 603
          children: []
          pos: 26986
          length: 685
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotInitializeForInjectMocksAnnotation
              children: []
              pos: 27689
              length: 40
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String fieldName
                children: []
                pos: 27730
                length: 16
              pos: 27677
              length: 760
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join("Cannot instantiate @InjectMocks field named '" + fieldName + "'.",
                                    "You haven't provided the instance at field declaration so I tried to construct the instance.",
                                    "However, I failed because: " + details.getMessage(),
                                    "Examples of correct usage of @InjectMocks:",
                                    "   @InjectMocks Service service = new Service();",
                                    "   @InjectMocks Service service;",
                                    "   //also, don't forget about MockitoAnnotations.initMocks();",
                                    "   //and... don't forget about some @Mocks for injection :)",
                                    ""), details);
                children: []
                pos: 27777
                length: 654
              pos: 27767
              length: 670
          children: []
          pos: 27677
          length: 760
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: atMostAndNeverShouldNotBeUsedWithTimeout
              children: []
              pos: 28455
              length: 40
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 28443
              length: 645
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new FriendlyReminderException(join("",
                                    "Don't panic! I'm just a friendly reminder!",
                                    "timeout() should not be used with atMost() or never() because...",
                                    "...it does not make much sense - the test would have passed immediately in concurency",
                                    "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                    "In future release we will remove timeout(x).atMost(y) from the API.",
                                    "If you want to find out more please refer to issue 235",
                                    ""));
                children: []
                pos: 28508
                length: 574
              pos: 28498
              length: 590
          children: []
          pos: 28443
          length: 645
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: fieldInitialisationThrewException
              children: []
              pos: 29106
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Field field
                children: []
                pos: 29140
                length: 11
              pos: 29094
              length: 511
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Cannot instantiate @InjectMocks field named '" + field.getName() + "' of type '" + field.getType() +  "'.",
                                    "You haven't provided the instance at field declaration so I tried to construct the instance.",
                                    "However the constructor or the initialization block threw an exception : " + details.getMessage(),
                                    ""), details);
                children: []
                pos: 29182
                length: 416
              pos: 29172
              length: 433
          children: []
          pos: 29094
          length: 511
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invocationListenerDoesNotAcceptNullParameters
              children: []
              pos: 29623
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 29611
              length: 160
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoException("invocationListeners() does not
                    accept null parameters");
                children: []
                pos: 29681
                length: 84
              pos: 29671
              length: 100
          children: []
          pos: 29611
          length: 160
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invocationListenersRequiresAtLeastOneListener
              children: []
              pos: 29789
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 29777
              length: 159
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoException("invocationListeners() requires
                    at least one listener");
                children: []
                pos: 29847
                length: 83
              pos: 29837
              length: 99
          children: []
          pos: 29777
          length: 159
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invocationListenerThrewException
              children: []
              pos: 29954
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: InvocationListener listener
                children: []
                pos: 29987
                length: 27
              pos: 29942
              length: 386
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(StringJoiner.join(
                                    "The invocation listener with type " + listener.getClass().getName(),
                                    "threw an exception : " + listenerThrowable.getClass().getName() + listenerThrowable.getMessage()), listenerThrowable);
                children: []
                pos: 30055
                length: 267
              pos: 30045
              length: 283
          children: []
          pos: 29942
          length: 386
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotInjectDependency
              children: []
              pos: 30346
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Field field
                children: []
                pos: 30369
                length: 11
              pos: 30334
              length: 538
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Mockito couldn't inject mock dependency '" + safelyGetMockName(matchingMock) + "' on field ",
                                    "'" + field + "'",
                                    "whose type '" + field.getDeclaringClass().getCanonicalName() + "' was annotated by @InjectMocks in your test.",
                                    "Also I failed because: " + exceptionCauseMessageIfAvailable(details),
                                    ""
                            ), details);
                children: []
                pos: 30432
                length: 434
              pos: 30422
              length: 450
          children: []
          pos: 30334
          length: 538
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exceptionCauseMessageIfAvailable
              children: []
              pos: 30893
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Exception details
                children: []
                pos: 30926
                length: 17
              pos: 30878
              length: 215
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: details.getCause()
                            children: []
                            pos: 30959
                            length: 18
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 30981
                            length: 4
                        children: []
                        pos: 30959
                        length: 26
                    children: []
                    pos: 30958
                    length: 28
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return details.getMessage();
                    children: []
                    pos: 31001
                    length: 28
                  pos: 30987
                  length: 52
                pos: 30955
                length: 84
              - type: return_statement
                fields:
                  text: return details.getCause().getMessage();
                children: []
                pos: 31048
                length: 39
              pos: 30945
              length: 148
          children: []
          pos: 30878
          length: 215
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mockedTypeIsInconsistentWithDelegatedInstanceType
              children: []
              pos: 31111
              length: 49
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class mockedType
                children: []
                pos: 31161
                length: 16
              pos: 31099
              length: 692
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Mocked type must be the same as the type of your delegated instance.",
                                    "Mocked type must be: " + delegatedInstance.getClass().getSimpleName() + ", but is: " + mockedType.getSimpleName(),
                                    "  //correct delegate:",
                                    "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new ArrayList()<- );",
                                    "  //incorrect - types don't match:",
                                    "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new HashSet()<- );"
                            ));
                children: []
                pos: 31215
                length: 570
              pos: 31205
              length: 586
          children: []
          pos: 31099
          length: 692
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: spyAndDelegateAreMutuallyExclusive
              children: []
              pos: 31809
              length: 34
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 31797
              length: 213
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Settings should not define a spy instance and a delegated instance at the same time."
                            )) ;
                children: []
                pos: 31856
                length: 148
              pos: 31846
              length: 164
          children: []
          pos: 31797
          length: 213
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invalidArgumentRangeAtIdentityAnswerCreationTime
              children: []
              pos: 32028
              length: 48
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 32016
              length: 389
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join("Invalid argument index.",
                                    "The index need to be a positive number that indicates the position of the argument to return.",
                                    "However it is possible to use the -1 value to indicates that the last argument should be",
                                    "returned."));
                children: []
                pos: 32089
                length: 310
              pos: 32079
              length: 326
          children: []
          pos: 32016
          length: 389
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invalidArgumentPositionRangeAtInvocationTime
              children: []
              pos: 32422
              length: 44
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: InvocationOnMock invocation
                children: []
                pos: 32467
                length: 27
              pos: 32411
              length: 945
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(
                                    join("Invalid argument index for the current invocation of method : ",
                                            " -> " + safelyGetMockName(invocation.getMock()) + "." + invocation.getMethod().getName() + "()",
                                            "",
                                            (willReturnLastParameter ?
                                                    "Last parameter wanted" :
                                                    "Wanted parameter at position " + argumentIndex) + " but " + possibleArgumentTypesOf(invocation),
                                            "The index need to be a positive number that indicates a valid position of the argument in the invocation.",
                                            "However it is possible to use the -1 value to indicates that the last argument should be returned.",
                                            ""));
                children: []
                pos: 32558
                length: 792
              pos: 32548
              length: 808
          children: []
          pos: 32411
          length: 945
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: possibleArgumentTypesOf
              children: []
              pos: 33384
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: InvocationOnMock invocation
                children: []
                pos: 33408
                length: 27
              pos: 33362
              length: 960
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Class<?>[] parameterTypes = invocation.getMethod().getParameterTypes();
                children: []
                pos: 33447
                length: 71
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: parameterTypes.length
                            children: []
                            pos: 33531
                            length: 21
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 33556
                            length: 1
                        children: []
                        pos: 33531
                        length: 26
                    children: []
                    pos: 33530
                    length: 28
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return new StringBuilder("the method has no arguments.\n");
                    children: []
                    pos: 33573
                    length: 59
                  pos: 33559
                  length: 83
                pos: 33527
                length: 115
              - type: local_variable_declaration
                fields:
                  text: StringBuilder stringBuilder = new StringBuilder("the possible
                    argument indexes for this method are :\n");
                children: []
                pos: 33652
                length: 105
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0, parameterTypesLength = parameterTypes.length; i < parameterTypesLength; i++) {
                                stringBuilder.append("    [").append(i);

                                if (invocation.getMethod().isVarArgs() && i == parameterTypesLength - 1) {
                                    stringBuilder.append("+] ").append(parameterTypes[i].getComponentType().getSimpleName()).append("  <- Vararg").append("\n");
                                } else {
                                    stringBuilder.append("] ").append(parameterTypes[i].getSimpleName()).append("\n");
                                }
                            }
                children: []
                pos: 33766
                length: 520
              - type: return_statement
                fields:
                  text: return stringBuilder;
                children: []
                pos: 34295
                length: 21
              pos: 33437
              length: 885
          children: []
          pos: 33362
          length: 960
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wrongTypeOfArgumentToReturn
              children: []
              pos: 34340
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: InvocationOnMock invocation
                children: []
                pos: 34368
                length: 27
              pos: 34328
              length: 1455
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new WrongTypeOfReturnValue(join(
                                    "The argument of type '" + actualType.getSimpleName() + "' cannot be returned because the following ",
                                    "method should return the type '" + expectedType + "'",
                                    " -> " + safelyGetMockName(invocation.getMock()) + "." + invocation.getMethod().getName() + "()",
                                    "",
                                    "The reason for this error can be :",
                                    "1. The wanted argument position is incorrect.",
                                    "2. The answer is used on the wrong interaction.",
                                    "",
                                    "Position of the wanted argument is " + argumentIndex + " and " + possibleArgumentTypesOf(invocation),
                                    "***",
                                    "However if you're still unsure why you're getting above error read on.",
                                    "Due to the nature of the syntax above problem might occur because:",
                                    "1. This exception *might* occur in wrongly written multi-threaded tests.",
                                    "   Please refer to Mockito FAQ on limitations of concurrency testing.",
                                    "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ",
                                    "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.",
                                    ""
                            ));
                children: []
                pos: 34465
                length: 1312
              pos: 34455
              length: 1328
          children: []
          pos: 34328
          length: 1455
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: defaultAnswerDoesNotAcceptNullParameter
              children: []
              pos: 35801
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 35789
              length: 147
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoException("defaultAnswer() does not accept
                    null parameter");
                children: []
                pos: 35853
                length: 77
              pos: 35843
              length: 93
          children: []
          pos: 35789
          length: 147
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: serializableWontWorkForObjectsThatDontImplementSerializable
              children: []
              pos: 35954
              length: 59
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class classToMock
                children: []
                pos: 36014
                length: 17
              pos: 35942
              length: 794
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '" + classToMock.getSimpleName() + "'",
                                    "do not implement Serializable AND do not have a no-arg constructor.",
                                    "This combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized",
                                    "",
                                    "Also note that as requested by the Java serialization specification, the whole hierarchy need to implements Serializable,",
                                    "i.e. the top-most superclass has to implements Serializable.",
                                    ""
                            ));
                children: []
                pos: 36043
                length: 687
              pos: 36033
              length: 703
          children: []
          pos: 35942
          length: 794
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: delegatedMethodHasWrongReturnType
              children: []
              pos: 36754
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Method mockMethod
                children: []
                pos: 36788
                length: 17
              pos: 36742
              length: 716
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: "throw new MockitoException(join(\n    \t        \"Methods
                    called on delegated instance must have compatible return types
                    with the mock.\",\n    \t        \"When calling: \" + mockMethod
                    + \" on mock: \" + safelyGetMockName(mock),\n    \t        \"return
                    type should be: \" + mockMethod.getReturnType().getSimpleName()
                    + \", but was: \" + delegateMethod.getReturnType().getSimpleName(),\n
                    \   \t        \"Check that the instance passed to delegatesTo()
                    is of the correct type or contains compatible methods\",\n    \t
                    \       \"(delegate instance had type: \" + delegate.getClass().getSimpleName()
                    + \")\"\n    \t));"
                children: []
                pos: 36867
                length: 585
              pos: 36860
              length: 598
          children: []
          pos: 36742
          length: 716
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: delegatedMethodDoesNotExistOnDelegate
              children: []
              pos: 37473
              length: 37
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Method mockMethod
                children: []
                pos: 37511
                length: 17
              pos: 37461
              length: 554
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: "throw new MockitoException(join(\n    \t        \"Methods
                    called on mock must exist in delegated instance.\",\n    \t        \"When
                    calling: \" + mockMethod + \" on mock: \" + safelyGetMockName(mock),\n
                    \   \t        \"no such method was found.\",\n    \t        \"Check
                    that the instance passed to delegatesTo() is of the correct type
                    or contains compatible methods\",\n    \t        \"(delegate instance
                    had type: \" + delegate.getClass().getSimpleName() + \")\"\n    \t));"
                children: []
                pos: 37564
                length: 448
              pos: 37560
              length: 455
          children: []
          pos: 37461
          length: 554
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: usingConstructorWithFancySerializable
              children: []
              pos: 38033
              length: 37
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: SerializableMode mode
                children: []
                pos: 38071
                length: 21
              pos: 38021
              length: 212
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoException("Mocks instantiated with constructor
                    cannot be combined with " + mode + " serialization mode.");
                children: []
                pos: 38104
                length: 123
              pos: 38094
              length: 139
          children: []
          pos: 38021
          length: 212
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: safelyGetMockName
              children: []
              pos: 38256
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Object mock
                children: []
                pos: 38274
                length: 11
              pos: 38239
              length: 104
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new MockUtil().getMockName(mock);
                children: []
                pos: 38297
                length: 40
              pos: 38287
              length: 56
          children: []
          pos: 38239
          length: 104
        pos: 1802
        length: 36543
    children: []
    pos: 1802
    length: 36543
  pos: 0
  length: 38346
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: Reporter
        children: []
        pos: 1815
        length: 8
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkedExceptionInvalid
              children: []
              pos: 1843
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Throwable t
                children: []
                pos: 1867
                length: 11
              pos: 1831
              length: 206
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Checked exception is invalid for this method!",
                                    "Invalid: " + t
                            ));
                children: []
                pos: 1890
                length: 141
              pos: 1880
              length: 157
          children: []
          pos: 1831
          length: 206
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotStubWithNullThrowable
              children: []
              pos: 2055
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 2043
              length: 154
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Cannot stub with null throwable!"
                            ));
                children: []
                pos: 2095
                length: 95
              pos: 2085
              length: 112
          children: []
          pos: 2043
          length: 154
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: unfinishedStubbing
              children: []
              pos: 2215
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Location location
                children: []
                pos: 2234
                length: 17
              pos: 2203
              length: 812
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new UnfinishedStubbingException(join(
                                    "Unfinished stubbing detected here:",
                                    location,
                                    "",
                                    "E.g. thenReturn() may be missing.",
                                    "Examples of correct stubbing:",
                                    "    when(mock.isOk()).thenReturn(true);",
                                    "    when(mock.isOk()).thenThrow(exception);",
                                    "    doThrow(exception).when(mock).someVoidMethod();",
                                    "Hints:",
                                    " 1. missing thenReturn()",
                                    " 2. you are trying to stub a final method, you naughty developer!",
                                    " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed",
                                    ""
                            ));
                children: []
                pos: 2263
                length: 746
              pos: 2253
              length: 762
          children: []
          pos: 2203
          length: 812
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: incorrectUseOfApi
              children: []
              pos: 3033
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 3021
              length: 622
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Incorrect use of API detected here:",
                                    new LocationImpl(),
                                    "",
                                    "You probably stored a reference to OngoingStubbing returned by when() and called stubbing methods like thenReturn() on this reference more than once.",
                                    "Examples of correct usage:",
                                    "    when(mock.isOk()).thenReturn(true).thenReturn(false).thenThrow(exception);",
                                    "    when(mock.isOk()).thenReturn(true, false).thenThrow(exception);",
                                    ""
                            ));
                children: []
                pos: 3063
                length: 574
              pos: 3053
              length: 590
          children: []
          pos: 3021
          length: 622
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: missingMethodInvocation
              children: []
              pos: 3661
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 3649
              length: 709
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MissingMethodInvocationException(join(
                                    "when() requires an argument which has to be 'a method call on a mock'.",
                                    "For example:",
                                    "    when(mock.getArticles()).thenReturn(articles);",
                                    "",
                                    "Also, this error might show up because:",
                                    "1. you stub either of: final/private/equals()/hashCode() methods.",
                                    "   Those methods *cannot* be stubbed/verified.",
                                    "   " + MockitoLimitations.NON_PUBLIC_PARENT,
                                    "2. inside when() you don't call method on mock but on some other object.",
                                    ""
                            ));
                children: []
                pos: 3697
                length: 655
              pos: 3687
              length: 671
          children: []
          pos: 3649
          length: 709
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: unfinishedVerificationException
              children: []
              pos: 4376
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Location location
                children: []
                pos: 4408
                length: 17
              pos: 4364
              length: 691
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    UnfinishedVerificationException exception = new UnfinishedVerificationException(join(
                                    "Missing method call for verify(mock) here:",
                                    location,
                                    "",
                                    "Example of correct verification:",
                                    "    verify(mock).doSomething()",
                                    "",
                                    "Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.",
                                    "Those methods *cannot* be stubbed/verified.",
                                    MockitoLimitations.NON_PUBLIC_PARENT,
                                    ""
                            ));
                children: []
                pos: 4437
                length: 586
              - type: throw_statement
                fields:
                  text: throw exception;
                children: []
                pos: 5033
                length: 16
              pos: 4427
              length: 628
          children: []
          pos: 4364
          length: 691
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: notAMockPassedToVerify
              children: []
              pos: 5073
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class type
                children: []
                pos: 5096
                length: 10
              pos: 5061
              length: 517
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotAMockException(join(
                                    "Argument passed to verify() is of type " + type.getSimpleName() + " and is not a mock!",
                                    "Make sure you place the parenthesis correctly!",
                                    "See the examples of correct verifications:",
                                    "    verify(mock).someMethod();",
                                    "    verify(mock, times(10)).someMethod();",
                                    "    verify(mock, atLeastOnce()).someMethod();"
                            ));
                children: []
                pos: 5118
                length: 454
              pos: 5108
              length: 470
          children: []
          pos: 5061
          length: 517
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nullPassedToVerify
              children: []
              pos: 5596
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 5584
              length: 540
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NullInsteadOfMockException(join(
                                    "Argument passed to verify() should be a mock but is null!",
                                    "Examples of correct verifications:",
                                    "    verify(mock).someMethod();",
                                    "    verify(mock, times(10)).someMethod();",
                                    "    verify(mock, atLeastOnce()).someMethod();",
                                    "    not: verify(mock.someMethod());",
                                    "Also, if you use @Mock annotation don't miss initMocks()"
                            ));
                children: []
                pos: 5627
                length: 491
              pos: 5617
              length: 507
          children: []
          pos: 5584
          length: 540
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: notAMockPassedToWhenMethod
              children: []
              pos: 6142
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 6130
              length: 289
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotAMockException(join(
                                    "Argument passed to when() is not a mock!",
                                    "Example of correct stubbing:",
                                    "    doThrow(new RuntimeException()).when(mock).someMethod();"
                            ));
                children: []
                pos: 6181
                length: 232
              pos: 6171
              length: 248
          children: []
          pos: 6130
          length: 289
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nullPassedToWhenMethod
              children: []
              pos: 6437
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 6425
              length: 364
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NullInsteadOfMockException(join(
                                    "Argument passed to when() is null!",
                                    "Example of correct stubbing:",
                                    "    doThrow(new RuntimeException()).when(mock).someMethod();",
                                    "Also, if you use @Mock annotation don't miss initMocks()"
                            ));
                children: []
                pos: 6472
                length: 311
              pos: 6462
              length: 327
          children: []
          pos: 6425
          length: 364
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mocksHaveToBePassedToVerifyNoMoreInteractions
              children: []
              pos: 6807
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 6795
              length: 379
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Method requires argument(s)!",
                                    "Pass mocks that should be verified, e.g:",
                                    "    verifyNoMoreInteractions(mockOne, mockTwo);",
                                    "    verifyZeroInteractions(mockOne, mockTwo);",
                                    ""
                            ));
                children: []
                pos: 6865
                length: 303
              pos: 6855
              length: 319
          children: []
          pos: 6795
          length: 379
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: notAMockPassedToVerifyNoMoreInteractions
              children: []
              pos: 7192
              length: 40
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7180
              length: 374
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotAMockException(join(
                                    "Argument(s) passed is not a mock!",
                                    "Examples of correct verifications:",
                                    "    verifyNoMoreInteractions(mockOne, mockTwo);",
                                    "    verifyZeroInteractions(mockOne, mockTwo);",
                                    ""
                            ));
                children: []
                pos: 7245
                length: 303
              pos: 7235
              length: 319
          children: []
          pos: 7180
          length: 374
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nullPassedToVerifyNoMoreInteractions
              children: []
              pos: 7572
              length: 36
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7560
              length: 353
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NullInsteadOfMockException(join(
                                    "Argument(s) passed is null!",
                                    "Examples of correct verifications:",
                                    "    verifyNoMoreInteractions(mockOne, mockTwo);",
                                    "    verifyZeroInteractions(mockOne, mockTwo);"
                            ));
                children: []
                pos: 7621
                length: 286
              pos: 7611
              length: 302
          children: []
          pos: 7560
          length: 353
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: notAMockPassedWhenCreatingInOrder
              children: []
              pos: 7931
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 7919
              length: 327
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NotAMockException(join(
                                    "Argument(s) passed is not a mock!",
                                    "Pass mocks that require verification in order.",
                                    "For example:",
                                    "    InOrder inOrder = inOrder(mockOne, mockTwo);"
                            ));
                children: []
                pos: 7977
                length: 263
              pos: 7967
              length: 279
          children: []
          pos: 7919
          length: 327
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: nullPassedWhenCreatingInOrder
              children: []
              pos: 8264
              length: 29
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8252
              length: 326
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NullInsteadOfMockException(join(
                                    "Argument(s) passed is null!",
                                    "Pass mocks that require verification in order.",
                                    "For example:",
                                    "    InOrder inOrder = inOrder(mockOne, mockTwo);"
                            ));
                children: []
                pos: 8306
                length: 266
              pos: 8296
              length: 282
          children: []
          pos: 8252
          length: 326
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mocksHaveToBePassedWhenCreatingInOrder
              children: []
              pos: 8596
              length: 38
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8584
              length: 326
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Method requires argument(s)!",
                                    "Pass mocks that require verification in order.",
                                    "For example:",
                                    "    InOrder inOrder = inOrder(mockOne, mockTwo);"
                            ));
                children: []
                pos: 8647
                length: 257
              pos: 8637
              length: 273
          children: []
          pos: 8584
          length: 326
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: inOrderRequiresFamiliarMock
              children: []
              pos: 8928
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 8916
              length: 347
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "InOrder can only verify mocks that were passed in during creation of InOrder.",
                                    "For example:",
                                    "    InOrder inOrder = inOrder(mockOne);",
                                    "    inOrder.verify(mockOne).doStuff();"
                            ));
                children: []
                pos: 8968
                length: 289
              pos: 8958
              length: 305
          children: []
          pos: 8916
          length: 347
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invalidUseOfMatchers
              children: []
              pos: 9281
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int expectedMatchersCount
                children: []
                pos: 9302
                length: 25
              pos: 9269
              length: 925
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new InvalidUseOfMatchersException(join(
                                    "Invalid use of argument matchers!",
                                    expectedMatchersCount + " matchers expected, " + recordedMatchers.size()+ " recorded:" +
                                            locationsOf(recordedMatchers),
                                    "",
                                    "This exception may occur if matchers are combined with raw values:",
                                    "    //incorrect:",
                                    "    someMethod(anyObject(), \"raw String\");",
                                    "When using matchers, all arguments have to be provided by matchers.",
                                    "For example:",
                                    "    //correct:",
                                    "    someMethod(anyObject(), eq(\"String by matcher\"));",
                                    "",
                                    "For more info see javadoc for Matchers class.",
                                    ""
                            ));
                children: []
                pos: 9380
                length: 808
              pos: 9370
              length: 824
          children: []
          pos: 9269
          length: 925
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: incorrectUseOfAdditionalMatchers
              children: []
              pos: 10212
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String additionalMatcherName
                children: []
                pos: 10245
                length: 28
              pos: 10200
              length: 1140
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new InvalidUseOfMatchersException(join(
                                    "Invalid use of argument matchers inside additional matcher " + additionalMatcherName + " !",
                                    new LocationImpl(),
                                    "",
                                    expectedSubMatchersCount + " sub matchers expected, " + matcherStack.size() + " recorded:",
                                    locationsOf(matcherStack),
                                    "",
                                    "This exception may occur if matchers are combined with raw values:",
                                    "    //incorrect:",
                                    "    someMethod(AdditionalMatchers.and(isNotNull(), \"raw String\");",
                                    "When using matchers, all arguments have to be provided by matchers.",
                                    "For example:",
                                    "    //correct:",
                                    "    someMethod(AdditionalMatchers.and(isNotNull(), eq(\"raw String\"));",
                                    "",
                                    "For more info see javadoc for Matchers and AdditionalMatchers classes.",
                                    ""
                            ));
                children: []
                pos: 10358
                length: 976
              pos: 10348
              length: 992
          children: []
          pos: 10200
          length: 1140
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: stubPassedToVerify
              children: []
              pos: 11358
              length: 18
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 11346
              length: 300
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new CannotVerifyStubOnlyMock(join(
                                    "Argument passed to verify() is a stubOnly() mock, not a full blown mock!",
                                    "If you intend to verify invocations on a mock, don't use stubOnly() in its MockSettings."
                            ));
                children: []
                pos: 11389
                length: 251
              pos: 11379
              length: 267
          children: []
          pos: 11346
          length: 300
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: reportNoSubMatchersFound
              children: []
              pos: 11664
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String additionalMatcherName
                children: []
                pos: 11689
                length: 28
              pos: 11652
              length: 280
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new InvalidUseOfMatchersException(join(
                                    "No matchers found for additional matcher " + additionalMatcherName,
                                    new LocationImpl(),
                                    ""
                            ));
                children: []
                pos: 11729
                length: 197
              pos: 11719
              length: 213
          children: []
          pos: 11652
          length: 280
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: locationsOf
              children: []
              pos: 11954
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Collection<LocalizedMatcher> matchers
                children: []
                pos: 11966
                length: 37
              pos: 11939
              length: 290
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: List<String> description = new ArrayList<String>();
                children: []
                pos: 12015
                length: 51
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (LocalizedMatcher matcher : matchers)
                                description.add(matcher.getLocation().toString());
                children: []
                pos: 12075
                length: 104
              - type: return_statement
                fields:
                  text: return join(description.toArray());
                children: []
                pos: 12188
                length: 35
              pos: 12005
              length: 224
          children: []
          pos: 11939
          length: 290
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: argumentsAreDifferent
              children: []
              pos: 12247
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String wanted
                children: []
                pos: 12269
                length: 13
              pos: 12235
              length: 460
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    String message = join("Argument(s) are different! Wanted:",
                                    wanted,
                                    new LocationImpl(),
                                    "Actual invocation has different arguments:",
                                    actual,
                                    actualLocation,
                                    ""
                            );
                children: []
                pos: 12334
                length: 267
              - type: throw_statement
                fields:
                  text: throw JUnitTool.createArgumentsAreDifferentException(message,
                    wanted, actual);
                children: []
                pos: 12611
                length: 78
              pos: 12324
              length: 371
          children: []
          pos: 12235
          length: 460
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wantedButNotInvoked
              children: []
              pos: 12713
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 12733
                length: 26
              pos: 12701
              length: 148
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new WantedButNotInvoked(createWantedButNotInvokedMessage(wanted));
                children: []
                pos: 12771
                length: 72
              pos: 12761
              length: 88
          children: []
          pos: 12701
          length: 148
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wantedButNotInvoked
              children: []
              pos: 12867
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 12887
                length: 26
              pos: 12855
              length: 827
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String allInvocations;
                children: []
                pos: 12974
                length: 22
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: invocations.isEmpty()
                        children: []
                        pos: 13009
                        length: 21
                    children: []
                    pos: 13008
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: allInvocations = "Actually, there were zero interactions
                        with this mock.\n";
                    children: []
                    pos: 13046
                    length: 76
                  pos: 13032
                  length: 100
                pos: 13005
                length: 538
              - type: local_variable_declaration
                fields:
                  text: String message = createWantedButNotInvokedMessage(wanted);
                children: []
                pos: 13553
                length: 58
              - type: throw_statement
                fields:
                  text: throw new WantedButNotInvoked(message + allInvocations);
                children: []
                pos: 13620
                length: 56
              pos: 12964
              length: 718
          children: []
          pos: 12855
          length: 827
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createWantedButNotInvokedMessage
              children: []
              pos: 13703
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 13736
                length: 26
              pos: 13688
              length: 248
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return join(
                                    "Wanted but not invoked:",
                                    wanted.toString(),
                                    new LocationImpl(),
                                    ""
                            );
                children: []
                pos: 13774
                length: 156
              pos: 13764
              length: 172
          children: []
          pos: 13688
          length: 248
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wantedButNotInvokedInOrder
              children: []
              pos: 13954
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 13981
                length: 26
              pos: 13942
              length: 490
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new VerificationInOrderFailure(join(
                                    "Verification in order failure",
                                    "Wanted but not invoked:",
                                    wanted.toString(),
                                    new LocationImpl(),
                                    "Wanted anywhere AFTER following interaction:",
                                    previous.toString(),
                                    previous.getLocation(),
                                    ""
                            ));
                children: []
                pos: 14049
                length: 377
              pos: 14039
              length: 393
          children: []
          pos: 13942
          length: 490
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tooManyActualInvocations
              children: []
              pos: 14450
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int wantedCount
                children: []
                pos: 14475
                length: 15
              pos: 14438
              length: 292
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String message = createTooManyInvocationsMessage(wantedCount,
                    actualCount, wanted, firstUndesired);
                children: []
                pos: 14572
                length: 99
              - type: throw_statement
                fields:
                  text: throw new TooManyActualInvocations(message);
                children: []
                pos: 14680
                length: 44
              pos: 14562
              length: 168
          children: []
          pos: 14438
          length: 292
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createTooManyInvocationsMessage
              children: []
              pos: 14751
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int wantedCount
                children: []
                pos: 14783
                length: 15
              pos: 14736
              length: 485
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: |-
                    return join(
                                    wanted.toString(),
                                    "Wanted " + pluralize(wantedCount) + ":",
                                    new LocationImpl(),
                                    "But was " + pluralize(actualCount) + ". Undesired invocation:",
                                    firstUndesired,
                                    ""
                            );
                children: []
                pos: 14931
                length: 284
              pos: 14921
              length: 300
          children: []
          pos: 14736
          length: 485
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: neverWantedButInvoked
              children: []
              pos: 15239
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: DescribedInvocation wanted
                children: []
                pos: 15261
                length: 26
              pos: 15227
              length: 349
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new NeverWantedButInvoked(join(
                                    wanted.toString(),
                                    "Never wanted here:",
                                    new LocationImpl(),
                                    "But invoked here:",
                                    firstUndesired,
                                    ""
                            ));
                children: []
                pos: 15324
                length: 246
              pos: 15314
              length: 262
          children: []
          pos: 15227
          length: 349
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tooManyActualInvocationsInOrder
              children: []
              pos: 15594
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int wantedCount
                children: []
                pos: 15626
                length: 15
              pos: 15582
              length: 368
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String message = createTooManyInvocationsMessage(wantedCount,
                    actualCount, wanted, firstUndesired);
                children: []
                pos: 15723
                length: 99
              - type: throw_statement
                fields:
                  text: |-
                    throw new VerificationInOrderFailure(join(
                                    "Verification in order failure:" + message
                            ));
                children: []
                pos: 15831
                length: 113
              pos: 15713
              length: 237
          children: []
          pos: 15582
          length: 368
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createTooLittleInvocationsMessage
              children: []
              pos: 15971
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: org.mockito.internal.reporting.Discrepancy discrepancy
                children: []
                pos: 16005
                length: 54
              pos: 15956
              length: 642
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    String ending =
                                    (lastActualInvocation != null)? lastActualInvocation + "\n" : "\n";
                children: []
                pos: 16183
                length: 99
              - type: local_variable_declaration
                fields:
                  text: |-
                    String message = join(
                                    wanted.toString(),
                                    "Wanted " + discrepancy.getPluralizedWantedCount() + ":",
                                    new LocationImpl(),
                                    "But was " + discrepancy.getPluralizedActualCount() + ":",
                                    ending
                            );
                children: []
                pos: 16292
                length: 276
              - type: return_statement
                fields:
                  text: return message;
                children: []
                pos: 16577
                length: 15
              pos: 16173
              length: 425
          children: []
          pos: 15956
          length: 642
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tooLittleActualInvocations
              children: []
              pos: 16616
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: org.mockito.internal.reporting.Discrepancy discrepancy
                children: []
                pos: 16643
                length: 54
              pos: 16604
              length: 316
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String message = createTooLittleInvocationsMessage(discrepancy,
                    wanted, lastActualLocation);
                children: []
                pos: 16766
                length: 92
              - type: throw_statement
                fields:
                  text: throw new TooLittleActualInvocations(message);
                children: []
                pos: 16868
                length: 46
              pos: 16756
              length: 164
          children: []
          pos: 16604
          length: 316
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tooLittleActualInvocationsInOrder
              children: []
              pos: 16938
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: org.mockito.internal.reporting.Discrepancy discrepancy
                children: []
                pos: 16972
                length: 54
              pos: 16926
              length: 390
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String message = createTooLittleInvocationsMessage(discrepancy,
                    wanted, lastActualLocation);
                children: []
                pos: 17095
                length: 92
              - type: throw_statement
                fields:
                  text: |-
                    throw new VerificationInOrderFailure(join(
                                    "Verification in order failure:" + message
                            ));
                children: []
                pos: 17197
                length: 113
              pos: 17085
              length: 231
          children: []
          pos: 16926
          length: 390
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: noMoreInteractionsWanted
              children: []
              pos: 17334
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Invocation undesired
                children: []
                pos: 17359
                length: 20
              pos: 17322
              length: 533
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ScenarioPrinter scenarioPrinter = new ScenarioPrinter();
                children: []
                pos: 17438
                length: 56
              - type: local_variable_declaration
                fields:
                  text: String scenario = scenarioPrinter.print(invocations);
                children: []
                pos: 17503
                length: 53
              - type: throw_statement
                fields:
                  text: |-
                    throw new NoInteractionsWanted(join(
                                    "No interactions wanted here:",
                                    new LocationImpl(),
                                    "But found this interaction on mock '" + undesired.getMock() + "':",
                                    undesired.getLocation(),
                                    scenario
                            ));
                children: []
                pos: 17566
                length: 283
              pos: 17428
              length: 427
          children: []
          pos: 17322
          length: 533
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: noMoreInteractionsWantedInOrder
              children: []
              pos: 17873
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Invocation undesired
                children: []
                pos: 17905
                length: 20
              pos: 17861
              length: 345
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new VerificationInOrderFailure(join(
                                    "No interactions wanted here:",
                                    new LocationImpl(),
                                    "But found this interaction on mock '" + undesired.getMock() + "':",
                                    undesired.getLocation()
                            ));
                children: []
                pos: 17937
                length: 263
              pos: 17927
              length: 279
          children: []
          pos: 17861
          length: 345
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotMockFinalClass
              children: []
              pos: 18224
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> clazz
                children: []
                pos: 18245
                length: 14
              pos: 18212
              length: 334
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Cannot mock/spy " + clazz.toString(),
                                    "Mockito cannot mock/spy following:",
                                    "  - final classes",
                                    "  - anonymous classes",
                                    "  - primitive types"
                            ));
                children: []
                pos: 18271
                length: 269
              pos: 18261
              length: 285
          children: []
          pos: 18212
          length: 334
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotStubVoidMethodWithAReturnValue
              children: []
              pos: 18564
              length: 36
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String methodName
                children: []
                pos: 18601
                length: 17
              pos: 18552
              length: 1127
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new CannotStubVoidMethodWithReturnValue(join(
                                    "'" + methodName + "' is a *void method* and it *cannot* be stubbed with a *return value*!",
                                    "Voids are usually stubbed with Throwables:",
                                    "    doThrow(exception).when(mock).someVoidMethod();",
                                    "***",
                                    "If you're unsure why you're getting above error read on.",
                                    "Due to the nature of the syntax above problem might occur because:",
                                    "1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.",
                                    "2. Somewhere in your test you are stubbing *final methods*. Sorry, Mockito does not verify/stub final methods.",
                                    "3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ",
                                    "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.",
                                    "4. " + MockitoLimitations.NON_PUBLIC_PARENT,
                                    ""
                            ));
                children: []
                pos: 18630
                length: 1043
              pos: 18620
              length: 1059
          children: []
          pos: 18552
          length: 1127
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: onlyVoidMethodsCanBeSetToDoNothing
              children: []
              pos: 19697
              length: 34
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 19685
              length: 505
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Only void methods can doNothing()!",
                                    "Example of correct use of doNothing():",
                                    "    doNothing().",
                                    "    doThrow(new RuntimeException())",
                                    "    .when(mock).someVoidMethod();",
                                    "Above means:",
                                    "someVoidMethod() does nothing the 1st time but throws an exception the 2nd time is called"
                            ));
                children: []
                pos: 19744
                length: 440
              pos: 19734
              length: 456
          children: []
          pos: 19685
          length: 505
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wrongTypeOfReturnValue
              children: []
              pos: 20208
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String expectedType
                children: []
                pos: 20231
                length: 19
              pos: 20196
              length: 899
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new WrongTypeOfReturnValue(join(
                                    actualType + " cannot be returned by " + methodName + "()",
                                    methodName + "() should return " + expectedType,
                                    "***",
                                    "If you're unsure why you're getting above error read on.",
                                    "Due to the nature of the syntax above problem might occur because:",
                                    "1. This exception *might* occur in wrongly written multi-threaded tests.",
                                    "   Please refer to Mockito FAQ on limitations of concurrency testing.",
                                    "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ",
                                    "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.",
                                    ""
                            ));
                children: []
                pos: 20300
                length: 789
              pos: 20290
              length: 805
          children: []
          pos: 20196
          length: 899
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wantedAtMostX
              children: []
              pos: 21113
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int maxNumberOfInvocations
                children: []
                pos: 21127
                length: 26
              pos: 21101
              length: 204
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoAssertionError(join("Wanted at most " + pluralize(maxNumberOfInvocations)
                    + " but was " + foundSize));
                children: []
                pos: 21180
                length: 119
              pos: 21170
              length: 135
          children: []
          pos: 21101
          length: 204
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: misplacedArgumentMatcher
              children: []
              pos: 21323
              length: 24
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: List<LocalizedMatcher> lastMatchers
                children: []
                pos: 21348
                length: 35
              pos: 21311
              length: 969
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new InvalidUseOfMatchersException(join(
                                    "Misplaced argument matcher detected here:",
                                    locationsOf(lastMatchers),
                                    "",
                                    "You cannot use argument matchers outside of verification or stubbing.",
                                    "Examples of correct usage of argument matchers:",
                                    "    when(mock.get(anyInt())).thenReturn(null);",
                                    "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());",
                                    "    verify(mock).someMethod(contains(\"foo\"))",
                                    "",
                                    "Also, this error might show up because you use argument matchers with methods that cannot be mocked.",
                                    "Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().",
                                    MockitoLimitations.NON_PUBLIC_PARENT,
                                    ""
                            ));
                children: []
                pos: 21395
                length: 879
              pos: 21385
              length: 895
          children: []
          pos: 21311
          length: 969
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: smartNullPointerException
              children: []
              pos: 22298
              length: 25
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String invocation
                children: []
                pos: 22324
                length: 17
              pos: 22286
              length: 384
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new SmartNullPointerException(join(
                                    "You have a NullPointerException here:",
                                    new LocationImpl(),
                                    "because this method call was *not* stubbed correctly:",
                                    location,
                                    invocation,
                                    ""
                            ));
                children: []
                pos: 22372
                length: 292
              pos: 22362
              length: 308
          children: []
          pos: 22286
          length: 384
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: noArgumentValueWasCaptured
              children: []
              pos: 22688
              length: 26
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 22676
              length: 756
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "No argument value was captured!",
                                    "You might have forgotten to use argument.capture() in verify()...",
                                    "...or you used capture() in stubbing but stubbed method was not called.",
                                    "Be aware that it is recommended to use capture() only with verify()",
                                    "",
                                    "Examples of correct argument capturing:",
                                    "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);",
                                    "    verify(mock).doSomething(argument.capture());",
                                    "    assertEquals(\"John\", argument.getValue().getName());",
                                    ""
                            ));
                children: []
                pos: 22727
                length: 699
              pos: 22717
              length: 715
          children: []
          pos: 22676
          length: 756
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: extraInterfacesDoesNotAcceptNullParameters
              children: []
              pos: 23450
              length: 42
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 23438
              length: 186
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "extraInterfaces() does not accept null parameters."
                            ));
                children: []
                pos: 23505
                length: 113
              pos: 23495
              length: 129
          children: []
          pos: 23438
          length: 186
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: extraInterfacesAcceptsOnlyInterfaces
              children: []
              pos: 23642
              length: 36
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> wrongType
                children: []
                pos: 23679
                length: 18
              pos: 23630
              length: 297
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "extraInterfaces() accepts only interfaces.",
                                    "You passed following type: " + wrongType.getSimpleName() + " which is not an interface."
                            ));
                children: []
                pos: 23709
                length: 212
              pos: 23699
              length: 228
          children: []
          pos: 23630
          length: 297
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: extraInterfacesCannotContainMockedType
              children: []
              pos: 23945
              length: 38
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> wrongType
                children: []
                pos: 23984
                length: 18
              pos: 23933
              length: 375
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "extraInterfaces() does not accept the same type as the mocked type.",
                                    "You mocked following type: " + wrongType.getSimpleName(),
                                    "and you passed the same very interface to the extraInterfaces()"
                            ));
                children: []
                pos: 24014
                length: 288
              pos: 24004
              length: 304
          children: []
          pos: 23933
          length: 375
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: extraInterfacesRequiresAtLeastOneInterface
              children: []
              pos: 24326
              length: 42
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 24314
              length: 186
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "extraInterfaces() requires at least one interface."
                            ));
                children: []
                pos: 24381
                length: 113
              pos: 24371
              length: 129
          children: []
          pos: 24314
          length: 186
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mockedTypeIsInconsistentWithSpiedInstanceType
              children: []
              pos: 24518
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> mockedType
                children: []
                pos: 24564
                length: 19
              pos: 24506
              length: 676
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Mocked type must be the same as the type of your spied instance.",
                                    "Mocked type must be: " + spiedInstance.getClass().getSimpleName() + ", but is: " + mockedType.getSimpleName(),
                                    "  //correct spying:",
                                    "  spy = mock( ->ArrayList.class<- , withSettings().spiedInstance( ->new ArrayList()<- );",
                                    "  //incorrect - types don't match:",
                                    "  spy = mock( ->List.class<- , withSettings().spiedInstance( ->new ArrayList()<- );"
                            ));
                children: []
                pos: 24617
                length: 559
              pos: 24607
              length: 575
          children: []
          pos: 24506
          length: 676
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotCallAbstractRealMethod
              children: []
              pos: 25200
              length: 28
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 25188
              length: 390
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Cannot call abstract real method on java object!",
                                    "Calling real methods is only possible when mocking non abstract method.",
                                    "  //correct example:",
                                    "  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();"
                            ));
                children: []
                pos: 25241
                length: 331
              pos: 25231
              length: 347
          children: []
          pos: 25188
          length: 390
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotVerifyToString
              children: []
              pos: 25596
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 25584
              length: 674
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Mockito cannot verify toString()",
                                    "toString() is too often used behind of scenes  (i.e. during String concatenation, in IDE debugging views). " +
                                            "Verifying it may give inconsistent or hard to understand results. " +
                                            "Not to mention that verifying toString() most likely hints awkward design (hard to explain in a short exception message. Trust me...)",
                                    "However, it is possible to stub toString(). Stubbing toString() smells a bit funny but there are rare, legitimate use cases."
                            ));
                children: []
                pos: 25629
                length: 623
              pos: 25619
              length: 639
          children: []
          pos: 25584
          length: 674
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: moreThanOneAnnotationNotAllowed
              children: []
              pos: 26276
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String fieldName
                children: []
                pos: 26308
                length: 16
              pos: 26264
              length: 363
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException("You cannot have more than one Mockito annotation on a field!\n" +
                                    "The field '" + fieldName + "' has multiple Mockito annotations.\n" +
                                    "For info how to use annotations see examples in javadoc for MockitoAnnotations class.");
                children: []
                pos: 26336
                length: 285
              pos: 26326
              length: 301
          children: []
          pos: 26264
          length: 363
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: unsupportedCombinationOfAnnotations
              children: []
              pos: 26645
              length: 35
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String undesiredAnnotationOne
                children: []
                pos: 26681
                length: 29
              pos: 26633
              length: 309
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException("This combination of annotations is not permitted on a single field:\n" +
                                    "@" + undesiredAnnotationOne + " and @" + undesiredAnnotationTwo);
                children: []
                pos: 26753
                length: 183
              pos: 26743
              length: 199
          children: []
          pos: 26633
          length: 309
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotInitializeForSpyAnnotation
              children: []
              pos: 26960
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String fieldName
                children: []
                pos: 26993
                length: 16
              pos: 26948
              length: 685
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join("Cannot instantiate a @Spy for '" + fieldName + "' field.",
                                    "You haven't provided the instance for spying at field declaration so I tried to construct the instance.",
                                    "However, I failed because: " + details.getMessage(),
                                    "Examples of correct usage of @Spy:",
                                    "   @Spy List mock = new LinkedList();",
                                    "   @Spy Foo foo; //only if Foo has parameterless constructor",
                                    "   //also, don't forget about MockitoAnnotations.initMocks();",
                                    ""), details);
                children: []
                pos: 27040
                length: 587
              pos: 27030
              length: 603
          children: []
          pos: 26948
          length: 685
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotInitializeForInjectMocksAnnotation
              children: []
              pos: 27651
              length: 40
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: String fieldName
                children: []
                pos: 27692
                length: 16
              pos: 27639
              length: 760
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join("Cannot instantiate @InjectMocks field named '" + fieldName + "'.",
                                    "You haven't provided the instance at field declaration so I tried to construct the instance.",
                                    "However, I failed because: " + details.getMessage(),
                                    "Examples of correct usage of @InjectMocks:",
                                    "   @InjectMocks Service service = new Service();",
                                    "   @InjectMocks Service service;",
                                    "   //also, don't forget about MockitoAnnotations.initMocks();",
                                    "   //and... don't forget about some @Mocks for injection :)",
                                    ""), details);
                children: []
                pos: 27739
                length: 654
              pos: 27729
              length: 670
          children: []
          pos: 27639
          length: 760
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: atMostAndNeverShouldNotBeUsedWithTimeout
              children: []
              pos: 28417
              length: 40
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 28405
              length: 645
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new FriendlyReminderException(join("",
                                    "Don't panic! I'm just a friendly reminder!",
                                    "timeout() should not be used with atMost() or never() because...",
                                    "...it does not make much sense - the test would have passed immediately in concurency",
                                    "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                    "In future release we will remove timeout(x).atMost(y) from the API.",
                                    "If you want to find out more please refer to issue 235",
                                    ""));
                children: []
                pos: 28470
                length: 574
              pos: 28460
              length: 590
          children: []
          pos: 28405
          length: 645
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: fieldInitialisationThrewException
              children: []
              pos: 29068
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Field field
                children: []
                pos: 29102
                length: 11
              pos: 29056
              length: 511
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Cannot instantiate @InjectMocks field named '" + field.getName() + "' of type '" + field.getType() +  "'.",
                                    "You haven't provided the instance at field declaration so I tried to construct the instance.",
                                    "However the constructor or the initialization block threw an exception : " + details.getMessage(),
                                    ""), details);
                children: []
                pos: 29144
                length: 416
              pos: 29134
              length: 433
          children: []
          pos: 29056
          length: 511
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invocationListenerDoesNotAcceptNullParameters
              children: []
              pos: 29585
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 29573
              length: 160
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoException("invocationListeners() does not
                    accept null parameters");
                children: []
                pos: 29643
                length: 84
              pos: 29633
              length: 100
          children: []
          pos: 29573
          length: 160
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invocationListenersRequiresAtLeastOneListener
              children: []
              pos: 29751
              length: 45
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 29739
              length: 159
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoException("invocationListeners() requires
                    at least one listener");
                children: []
                pos: 29809
                length: 83
              pos: 29799
              length: 99
          children: []
          pos: 29739
          length: 159
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invocationListenerThrewException
              children: []
              pos: 29916
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: InvocationListener listener
                children: []
                pos: 29949
                length: 27
              pos: 29904
              length: 386
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(StringJoiner.join(
                                    "The invocation listener with type " + listener.getClass().getName(),
                                    "threw an exception : " + listenerThrowable.getClass().getName() + listenerThrowable.getMessage()), listenerThrowable);
                children: []
                pos: 30017
                length: 267
              pos: 30007
              length: 283
          children: []
          pos: 29904
          length: 386
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: cannotInjectDependency
              children: []
              pos: 30308
              length: 22
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Field field
                children: []
                pos: 30331
                length: 11
              pos: 30296
              length: 538
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Mockito couldn't inject mock dependency '" + safelyGetMockName(matchingMock) + "' on field ",
                                    "'" + field + "'",
                                    "whose type '" + field.getDeclaringClass().getCanonicalName() + "' was annotated by @InjectMocks in your test.",
                                    "Also I failed because: " + exceptionCauseMessageIfAvailable(details),
                                    ""
                            ), details);
                children: []
                pos: 30394
                length: 434
              pos: 30384
              length: 450
          children: []
          pos: 30296
          length: 538
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exceptionCauseMessageIfAvailable
              children: []
              pos: 30855
              length: 32
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Exception details
                children: []
                pos: 30888
                length: 17
              pos: 30840
              length: 122
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return details.getCause().getMessage();
                children: []
                pos: 30917
                length: 39
              pos: 30907
              length: 55
          children: []
          pos: 30840
          length: 122
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: mockedTypeIsInconsistentWithDelegatedInstanceType
              children: []
              pos: 30980
              length: 49
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class mockedType
                children: []
                pos: 31030
                length: 16
              pos: 30968
              length: 692
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Mocked type must be the same as the type of your delegated instance.",
                                    "Mocked type must be: " + delegatedInstance.getClass().getSimpleName() + ", but is: " + mockedType.getSimpleName(),
                                    "  //correct delegate:",
                                    "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new ArrayList()<- );",
                                    "  //incorrect - types don't match:",
                                    "  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new HashSet()<- );"
                            ));
                children: []
                pos: 31084
                length: 570
              pos: 31074
              length: 586
          children: []
          pos: 30968
          length: 692
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: spyAndDelegateAreMutuallyExclusive
              children: []
              pos: 31678
              length: 34
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 31666
              length: 213
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "Settings should not define a spy instance and a delegated instance at the same time."
                            )) ;
                children: []
                pos: 31725
                length: 148
              pos: 31715
              length: 164
          children: []
          pos: 31666
          length: 213
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invalidArgumentRangeAtIdentityAnswerCreationTime
              children: []
              pos: 31897
              length: 48
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 31885
              length: 389
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join("Invalid argument index.",
                                    "The index need to be a positive number that indicates the position of the argument to return.",
                                    "However it is possible to use the -1 value to indicates that the last argument should be",
                                    "returned."));
                children: []
                pos: 31958
                length: 310
              pos: 31948
              length: 326
          children: []
          pos: 31885
          length: 389
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: invalidArgumentPositionRangeAtInvocationTime
              children: []
              pos: 32291
              length: 44
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: InvocationOnMock invocation
                children: []
                pos: 32336
                length: 27
              pos: 32280
              length: 945
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(
                                    join("Invalid argument index for the current invocation of method : ",
                                            " -> " + safelyGetMockName(invocation.getMock()) + "." + invocation.getMethod().getName() + "()",
                                            "",
                                            (willReturnLastParameter ?
                                                    "Last parameter wanted" :
                                                    "Wanted parameter at position " + argumentIndex) + " but " + possibleArgumentTypesOf(invocation),
                                            "The index need to be a positive number that indicates a valid position of the argument in the invocation.",
                                            "However it is possible to use the -1 value to indicates that the last argument should be returned.",
                                            ""));
                children: []
                pos: 32427
                length: 792
              pos: 32417
              length: 808
          children: []
          pos: 32280
          length: 945
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: possibleArgumentTypesOf
              children: []
              pos: 33253
              length: 23
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: InvocationOnMock invocation
                children: []
                pos: 33277
                length: 27
              pos: 33231
              length: 960
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Class<?>[] parameterTypes = invocation.getMethod().getParameterTypes();
                children: []
                pos: 33316
                length: 71
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: parameterTypes.length
                            children: []
                            pos: 33400
                            length: 21
                          right:
                            type: decimal_integer_literal
                            fields:
                              text: '0'
                            children: []
                            pos: 33425
                            length: 1
                        children: []
                        pos: 33400
                        length: 26
                    children: []
                    pos: 33399
                    length: 28
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return new StringBuilder("the method has no arguments.\n");
                    children: []
                    pos: 33442
                    length: 59
                  pos: 33428
                  length: 83
                pos: 33396
                length: 115
              - type: local_variable_declaration
                fields:
                  text: StringBuilder stringBuilder = new StringBuilder("the possible
                    argument indexes for this method are :\n");
                children: []
                pos: 33521
                length: 105
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0, parameterTypesLength = parameterTypes.length; i < parameterTypesLength; i++) {
                                stringBuilder.append("    [").append(i);

                                if (invocation.getMethod().isVarArgs() && i == parameterTypesLength - 1) {
                                    stringBuilder.append("+] ").append(parameterTypes[i].getComponentType().getSimpleName()).append("  <- Vararg").append("\n");
                                } else {
                                    stringBuilder.append("] ").append(parameterTypes[i].getSimpleName()).append("\n");
                                }
                            }
                children: []
                pos: 33635
                length: 520
              - type: return_statement
                fields:
                  text: return stringBuilder;
                children: []
                pos: 34164
                length: 21
              pos: 33306
              length: 885
          children: []
          pos: 33231
          length: 960
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: wrongTypeOfArgumentToReturn
              children: []
              pos: 34209
              length: 27
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: InvocationOnMock invocation
                children: []
                pos: 34237
                length: 27
              pos: 34197
              length: 1455
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new WrongTypeOfReturnValue(join(
                                    "The argument of type '" + actualType.getSimpleName() + "' cannot be returned because the following ",
                                    "method should return the type '" + expectedType + "'",
                                    " -> " + safelyGetMockName(invocation.getMock()) + "." + invocation.getMethod().getName() + "()",
                                    "",
                                    "The reason for this error can be :",
                                    "1. The wanted argument position is incorrect.",
                                    "2. The answer is used on the wrong interaction.",
                                    "",
                                    "Position of the wanted argument is " + argumentIndex + " and " + possibleArgumentTypesOf(invocation),
                                    "***",
                                    "However if you're still unsure why you're getting above error read on.",
                                    "Due to the nature of the syntax above problem might occur because:",
                                    "1. This exception *might* occur in wrongly written multi-threaded tests.",
                                    "   Please refer to Mockito FAQ on limitations of concurrency testing.",
                                    "2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - ",
                                    "   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.",
                                    ""
                            ));
                children: []
                pos: 34334
                length: 1312
              pos: 34324
              length: 1328
          children: []
          pos: 34197
          length: 1455
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: defaultAnswerDoesNotAcceptNullParameter
              children: []
              pos: 35670
              length: 39
            parameters:
              type: method_parameters
              fields: {}
              children: []
              pos: 35658
              length: 147
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoException("defaultAnswer() does not accept
                    null parameter");
                children: []
                pos: 35722
                length: 77
              pos: 35712
              length: 93
          children: []
          pos: 35658
          length: 147
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: serializableWontWorkForObjectsThatDontImplementSerializable
              children: []
              pos: 35823
              length: 59
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class classToMock
                children: []
                pos: 35883
                length: 17
              pos: 35811
              length: 794
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: |-
                    throw new MockitoException(join(
                                    "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '" + classToMock.getSimpleName() + "'",
                                    "do not implement Serializable AND do not have a no-arg constructor.",
                                    "This combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized",
                                    "",
                                    "Also note that as requested by the Java serialization specification, the whole hierarchy need to implements Serializable,",
                                    "i.e. the top-most superclass has to implements Serializable.",
                                    ""
                            ));
                children: []
                pos: 35912
                length: 687
              pos: 35902
              length: 703
          children: []
          pos: 35811
          length: 794
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: delegatedMethodHasWrongReturnType
              children: []
              pos: 36623
              length: 33
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Method mockMethod
                children: []
                pos: 36657
                length: 17
              pos: 36611
              length: 716
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: "throw new MockitoException(join(\n    \t        \"Methods
                    called on delegated instance must have compatible return types
                    with the mock.\",\n    \t        \"When calling: \" + mockMethod
                    + \" on mock: \" + safelyGetMockName(mock),\n    \t        \"return
                    type should be: \" + mockMethod.getReturnType().getSimpleName()
                    + \", but was: \" + delegateMethod.getReturnType().getSimpleName(),\n
                    \   \t        \"Check that the instance passed to delegatesTo()
                    is of the correct type or contains compatible methods\",\n    \t
                    \       \"(delegate instance had type: \" + delegate.getClass().getSimpleName()
                    + \")\"\n    \t));"
                children: []
                pos: 36736
                length: 585
              pos: 36729
              length: 598
          children: []
          pos: 36611
          length: 716
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: delegatedMethodDoesNotExistOnDelegate
              children: []
              pos: 37342
              length: 37
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Method mockMethod
                children: []
                pos: 37380
                length: 17
              pos: 37330
              length: 554
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: "throw new MockitoException(join(\n    \t        \"Methods
                    called on mock must exist in delegated instance.\",\n    \t        \"When
                    calling: \" + mockMethod + \" on mock: \" + safelyGetMockName(mock),\n
                    \   \t        \"no such method was found.\",\n    \t        \"Check
                    that the instance passed to delegatesTo() is of the correct type
                    or contains compatible methods\",\n    \t        \"(delegate instance
                    had type: \" + delegate.getClass().getSimpleName() + \")\"\n    \t));"
                children: []
                pos: 37433
                length: 448
              pos: 37429
              length: 455
          children: []
          pos: 37330
          length: 554
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: usingConstructorWithFancySerializable
              children: []
              pos: 37902
              length: 37
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: SerializableMode mode
                children: []
                pos: 37940
                length: 21
              pos: 37890
              length: 212
            body:
              type: block
              fields: {}
              children:
              - type: throw_statement
                fields:
                  text: throw new MockitoException("Mocks instantiated with constructor
                    cannot be combined with " + mode + " serialization mode.");
                children: []
                pos: 37973
                length: 123
              pos: 37963
              length: 139
          children: []
          pos: 37890
          length: 212
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: safelyGetMockName
              children: []
              pos: 38125
              length: 17
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Object mock
                children: []
                pos: 38143
                length: 11
              pos: 38108
              length: 104
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return new MockUtil().getMockName(mock);
                children: []
                pos: 38166
                length: 40
              pos: 38156
              length: 56
          children: []
          pos: 38108
          length: 104
        pos: 1802
        length: 36412
    children: []
    pos: 1802
    length: 36412
  pos: 0
  length: 38215
text_diff: "--- before\n+++ after\n@@ -421,7 +421,7 @@\n         throw new NoInteractionsWanted(join(\n
  \                \"No interactions wanted here:\",\n                 new LocationImpl(),\n-
  \               \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock())
  + \"':\",\n+                \"But found this interaction on mock '\" + undesired.getMock()
  + \"':\",\n                 undesired.getLocation(),\n                 scenario\n
  \        ));\n@@ -431,7 +431,7 @@\n         throw new VerificationInOrderFailure(join(\n
  \                \"No interactions wanted here:\",\n                 new LocationImpl(),\n-
  \               \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock())
  + \"':\",\n+                \"But found this interaction on mock '\" + undesired.getMock()
  + \"':\",\n                 undesired.getLocation()\n         ));\n     }\n@@ -674,9
  +674,6 @@\n     }\n \n     private String exceptionCauseMessageIfAvailable(Exception
  details) {\n-        if (details.getCause() == null) {\n-            return details.getMessage();\n-
  \       }\n         return details.getCause().getMessage();\n     }\n \n"
tree_diff: |+
  New cluster:
  UPDATE from throw new NoInteractionsWanted(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
                  undesired.getLocation(),
                  scenario
          )); to throw new NoInteractionsWanted(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + undesired.getMock() + "':",
                  undesired.getLocation(),
                  scenario
          ));
  ------------
  ===
  update-node
  ---
  throw_statement: throw new NoInteractionsWanted(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
                  undesired.getLocation(),
                  scenario
          )); [17566,17868]
  replace throw new NoInteractionsWanted(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
                  undesired.getLocation(),
                  scenario
          )); by throw new NoInteractionsWanted(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + undesired.getMock() + "':",
                  undesired.getLocation(),
                  scenario
          ));

  New cluster:
  UPDATE from throw new VerificationInOrderFailure(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
                  undesired.getLocation()
          )); to throw new VerificationInOrderFailure(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + undesired.getMock() + "':",
                  undesired.getLocation()
          ));
  ------------
  ===
  update-node
  ---
  throw_statement: throw new VerificationInOrderFailure(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
                  undesired.getLocation()
          )); [17956,18238]
  replace throw new VerificationInOrderFailure(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
                  undesired.getLocation()
          )); by throw new VerificationInOrderFailure(join(
                  "No interactions wanted here:",
                  new LocationImpl(),
                  "But found this interaction on mock '" + undesired.getMock() + "':",
                  undesired.getLocation()
          ));

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [30955,31039]
      parenthesized_expression [30958,30986]
          equals [30959,30985]
              method_invocation: details.getCause() [30959,30977]
              null_literal [30981,30985]
      block [30987,31039]
          return_statement: return details.getMessage(); [31001,31029]

...
