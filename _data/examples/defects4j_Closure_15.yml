---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: FlowSensitiveInlineVariables
        children: []
        pos: 2252
        length: 28
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 2860
          length: 40
        - type: field_declaration
          fields:
            text: private ControlFlowGraph<Node> cfg;
          children: []
          pos: 2992
          length: 35
        - type: field_declaration
          fields:
            text: private List<Candidate> candidates;
          children: []
          pos: 3030
          length: 35
        - type: field_declaration
          fields:
            text: private MustBeReachingVariableDef reachingDef;
          children: []
          pos: 3068
          length: 46
        - type: field_declaration
          fields:
            text: private MaybeReachingVariableUse reachingUses;
          children: []
          pos: 3117
          length: 46
        - type: field_declaration
          fields:
            text: |-
              private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
                  new Predicate<Node>() {
                    @Override
                    public boolean apply(Node n) {
                      // When the node is null it means, we reached the implicit return
                      // where the function returns (possibly without an return statement)
                      if (n == null) {
                        return false;
                      }

                      // TODO(user): We only care about calls to functions that
                      // passes one of the dependent variable to a non-side-effect free
                      // function.
                      if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
                        return true;
                      }

                      if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
                        return true;
                      }

                      if (n.isDelProp()) {
                        return true;
                      }

                      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
                          return true;
                        }
                      }
                      return false;
                    }
                };
          children: []
          pos: 3167
          length: 1006
        - type: constructor_declaration
          fields:
            text: |-
              public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
                  this.compiler = compiler;
                }
          children: []
          pos: 4177
          length: 98
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: enterScope
              children: []
              pos: 4303
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 4314
                length: 15
              pos: 4279
              length: 1220
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: t.inGlobalScope()
                        children: []
                        pos: 4342
                        length: 17
                    children: []
                    pos: 4341
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 4369
                    length: 7
                  pos: 4361
                  length: 85
                pos: 4338
                length: 108
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE
                            children: []
                            pos: 4456
                            length: 46
                          right:
                            type: method_invocation
                            fields:
                              text: t.getScope().getVarCount()
                            children: []
                            pos: 4513
                            length: 26
                        children: []
                        pos: 4456
                        length: 83
                    children: []
                    pos: 4455
                    length: 85
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 4549
                    length: 7
                  pos: 4541
                  length: 21
                pos: 4452
                length: 110
              - type: local_variable_declaration
                fields:
                  text: ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler,
                    false, true);
                children: []
                pos: 4616
                length: 73
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(t.getScopeRoot().isFunction());
                children: []
                pos: 4735
                length: 56
              - type: expression_statement
                fields:
                  text: cfa.process(null, t.getScopeRoot().getLastChild());
                children: []
                pos: 4796
                length: 51
              - type: expression_statement
                fields:
                  text: cfg = cfa.getCfg();
                children: []
                pos: 4852
                length: 19
              - type: expression_statement
                fields:
                  text: reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(),
                    compiler);
                children: []
                pos: 4876
                length: 73
              - type: expression_statement
                fields:
                  text: reachingDef.analyze();
                children: []
                pos: 4954
                length: 22
              - type: expression_statement
                fields:
                  text: candidates = Lists.newLinkedList();
                children: []
                pos: 4981
                length: 35
              - type: expression_statement
                fields:
                  text: |-
                    new NodeTraversal(compiler, new GatherCandiates()).traverse(
                            t.getScopeRoot().getLastChild());
                children: []
                pos: 5115
                length: 102
              - type: expression_statement
                fields:
                  text: reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(),
                    compiler);
                children: []
                pos: 5288
                length: 73
              - type: expression_statement
                fields:
                  text: reachingUses.analyze();
                children: []
                pos: 5366
                length: 23
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Candidate c : candidates) {
                          if (c.canInline()) {
                            c.inlineVariable();
                          }
                        }
                children: []
                pos: 5394
                length: 101
              pos: 4331
              length: 1168
          children: []
          pos: 4279
          length: 1220
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exitScope
              children: []
              pos: 5527
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 5537
                length: 15
              pos: 5503
              length: 53
            body:
              type: block
              fields: {}
              children: []
              pos: 5554
              length: 2
          children: []
          pos: 5503
          length: 53
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 5584
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 5592
                length: 12
              pos: 5560
              length: 132
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: "(new NodeTraversal(compiler, this)).traverseRoots(externs,
                    root);"
                children: []
                pos: 5623
                length: 65
              pos: 5617
              length: 75
          children: []
          pos: 5560
          length: 132
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 5720
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 5726
                length: 15
              pos: 5696
              length: 380
            body:
              type: block
              fields: {}
              children: []
              pos: 5764
              length: 312
          children: []
          pos: 5696
          length: 380
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: GatherCandiates
              children: []
              pos: 6456
              length: 15
            body:
              type: class_body
              fields: {}
              children:
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: visit
                    children: []
                    pos: 6536
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 6542
                      length: 15
                    pos: 6510
                    length: 1713
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode(n);
                      children: []
                      pos: 6588
                      length: 66
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: graphNode
                                  children: []
                                  pos: 6665
                                  length: 9
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 6678
                                  length: 4
                              children: []
                              pos: 6665
                              length: 17
                          children: []
                          pos: 6664
                          length: 19
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return;
                          children: []
                          pos: 6721
                          length: 7
                        pos: 6684
                        length: 52
                      pos: 6661
                      length: 75
                    - type: local_variable_declaration
                      fields:
                        text: FlowState<MustDef> state = graphNode.getAnnotation();
                      children: []
                      pos: 6743
                      length: 53
                    - type: local_variable_declaration
                      fields:
                        text: final MustDef defs = state.getIn();
                      children: []
                      pos: 6803
                      length: 35
                    - type: local_variable_declaration
                      fields:
                        text: final Node cfgNode = n;
                      children: []
                      pos: 6845
                      length: 23
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                    new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    if (n.isName()) {

                                      // n.getParent() isn't null. This just the case where n is the root
                                      // node that gatherCb started at.
                                      if (parent == null) {
                                        return;
                                      }

                                      // Make sure that the name node is purely a read.
                                      if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)
                                          || parent.isVar() || parent.isInc() || parent.isDec() ||
                                          parent.isParamList() || parent.isCatch()) {
                                        return;
                                      }

                                      String name = n.getString();
                                      if (compiler.getCodingConvention().isExported(name)) {
                                        return;
                                      }

                                      Node defNode = reachingDef.getDef(name, cfgNode);
                                      // TODO(nicksantos): We need to add some notion of @const outer
                                      // scope vars. We can inline those just fine.
                                      if (defNode != null &&
                                          !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {
                                        candidates.add(new Candidate(name, defNode, n, cfgNode));
                                      }
                                    }
                                  }
                                };
                      children: []
                      pos: 6875
                      length: 1282
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, cfgNode, gatherCb);
                      children: []
                      pos: 8165
                      length: 52
                    pos: 6580
                    length: 1643
                children: []
                pos: 6510
                length: 1713
              pos: 6442
              length: 1785
          children: []
          pos: 6442
          length: 1785
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: Candidate
              children: []
              pos: 8335
              length: 9
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final String varName;
                children: []
                pos: 8381
                length: 29
              - type: field_declaration
                fields:
                  text: private Node def;
                children: []
                pos: 8456
                length: 17
              - type: field_declaration
                fields:
                  text: private final Node defCfgNode;
                children: []
                pos: 8478
                length: 30
              - type: field_declaration
                fields:
                  text: private final Node use;
                children: []
                pos: 8547
                length: 23
              - type: field_declaration
                fields:
                  text: private final Node useCfgNode;
                children: []
                pos: 8575
                length: 30
              - type: field_declaration
                fields:
                  text: private int numUseWithinUseCfgNode;
                children: []
                pos: 8713
                length: 35
              - type: constructor_declaration
                fields:
                  text: |-
                    Candidate(String varName, Node defCfgNode, Node use, Node useCfgNode) {
                          Preconditions.checkArgument(use.isName());
                          this.varName = varName;
                          this.defCfgNode = defCfgNode;
                          this.use = use;
                          this.useCfgNode = useCfgNode;
                        }
                children: []
                pos: 8754
                length: 250
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: canInline
                    children: []
                    pos: 9026
                    length: 9
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 9010
                    length: 4082
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: defCfgNode.isFunction()
                              children: []
                              pos: 9087
                              length: 23
                          children: []
                          pos: 9086
                          length: 25
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 9122
                          length: 13
                        pos: 9112
                        length: 31
                      pos: 9083
                      length: 60
                    - type: expression_statement
                      fields:
                        text: getDefinition(defCfgNode, null);
                      children: []
                      pos: 9151
                      length: 32
                    - type: expression_statement
                      fields:
                        text: getNumUseInUseCfgNode(useCfgNode, null);
                      children: []
                      pos: 9190
                      length: 40
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: def
                                  children: []
                                  pos: 9277
                                  length: 3
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 9284
                                  length: 4
                              children: []
                              pos: 9277
                              length: 11
                          children: []
                          pos: 9276
                          length: 13
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 9300
                          length: 13
                        pos: 9290
                        length: 31
                      pos: 9273
                      length: 48
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: def.isAssign()
                                  children: []
                                  pos: 9449
                                  length: 14
                                right:
                                  type: unary_expression
                                  fields:
                                    text: "!NodeUtil.isExprAssign(def.getParent())"
                                  children: []
                                  pos: 9467
                                  length: 39
                              children: []
                              pos: 9449
                              length: 57
                          children: []
                          pos: 9448
                          length: 59
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 9518
                          length: 13
                        pos: 9508
                        length: 31
                      pos: 9445
                      length: 94
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)
                              children: []
                              pos: 9682
                              length: 52
                          children: []
                          pos: 9681
                          length: 54
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 9746
                          length: 13
                        pos: 9736
                        length: 31
                      pos: 9678
                      length: 89
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)
                              children: []
                              pos: 9947
                              length: 51
                          children: []
                          pos: 9946
                          length: 53
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10010
                          length: 13
                        pos: 10000
                        length: 31
                      pos: 9943
                      length: 88
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: NodeUtil.mayHaveSideEffects(def.getLastChild())
                              children: []
                              pos: 10232
                              length: 47
                          children: []
                          pos: 10231
                          length: 49
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10291
                          length: 13
                        pos: 10281
                        length: 31
                      pos: 10228
                      length: 84
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: numUseWithinUseCfgNode
                                  children: []
                                  pos: 10606
                                  length: 22
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '1'
                                  children: []
                                  pos: 10632
                                  length: 1
                              children: []
                              pos: 10606
                              length: 27
                          children: []
                          pos: 10605
                          length: 29
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10645
                          length: 13
                        pos: 10635
                        length: 31
                      pos: 10602
                      length: 64
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: NodeUtil.isWithinLoop(use)
                              children: []
                              pos: 10732
                              length: 26
                          children: []
                          pos: 10731
                          length: 28
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10770
                          length: 13
                        pos: 10760
                        length: 31
                      pos: 10728
                      length: 63
                    - type: local_variable_declaration
                      fields:
                        text: Collection<Node> uses = reachingUses.getUses(varName,
                          defCfgNode);
                      children: []
                      pos: 10800
                      length: 66
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: uses.size()
                                  children: []
                                  pos: 10878
                                  length: 11
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '1'
                                  children: []
                                  pos: 10893
                                  length: 1
                              children: []
                              pos: 10878
                              length: 16
                          children: []
                          pos: 10877
                          length: 18
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10906
                          length: 13
                        pos: 10896
                        length: 31
                      pos: 10874
                      length: 53
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: |-
                                  NodeUtil.has(def.getLastChild(),
                                            new Predicate<Node>() {
                                                @Override
                                                public boolean apply(Node input) {
                                                  switch (input.getType()) {
                                                    case Token.GETELEM:
                                                    case Token.GETPROP:
                                                    case Token.ARRAYLIT:
                                                    case Token.OBJECTLIT:
                                                    case Token.REGEXP:
                                                    case Token.NEW:
                                                      return true;
                                                  }
                                                  return false;
                                                }
                                            },
                                            new Predicate<Node>() {
                                                @Override
                                                public boolean apply(Node input) {
                                                  // Recurse if the node is not a function.
                                                  return !input.isFunction();
                                                }
                                            })
                              children: []
                              pos: 11324
                              length: 756
                          children: []
                          pos: 11323
                          length: 758
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 12092
                          length: 13
                        pos: 12082
                        length: 31
                      pos: 11320
                      length: 793
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: NodeUtil.isStatementBlock(defCfgNode.getParent())
                                  children: []
                                  pos: 12243
                                  length: 49
                                right:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: method_invocation
                                      fields:
                                        text: defCfgNode.getNext()
                                      children: []
                                      pos: 12306
                                      length: 20
                                    right:
                                      type: identifier
                                      fields:
                                        text: useCfgNode
                                      children: []
                                      pos: 12330
                                      length: 10
                                  children: []
                                  pos: 12306
                                  length: 34
                              children: []
                              pos: 12243
                              length: 97
                          children: []
                          pos: 12242
                          length: 99
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: |-
                              CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>
                                        pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(
                                               cfg,
                                               cfg.getDirectedGraphNode(defCfgNode),
                                               cfg.getDirectedGraphNode(useCfgNode),
                                               SIDE_EFFECT_PREDICATE,
                                               Predicates.
                                                   <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                                               false);
                          children: []
                          pos: 12532
                          length: 439
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: method_invocation
                                  fields:
                                    text: pathCheck.somePathsSatisfyPredicate()
                                  children: []
                                  pos: 12984
                                  length: 37
                              children: []
                              pos: 12983
                              length: 39
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: return_statement
                              fields:
                                text: return false;
                              children: []
                              pos: 13035
                              length: 13
                            pos: 13023
                            length: 35
                          pos: 12980
                          length: 78
                        pos: 12342
                        length: 724
                      pos: 12239
                      length: 827
                    - type: return_statement
                      fields:
                        text: return true;
                      children: []
                      pos: 13074
                      length: 12
                    pos: 9038
                    length: 4054
                children: []
                pos: 9010
                length: 4082
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: inlineVariable
                    children: []
                    pos: 13157
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 13144
                    length: 803
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node defParent = def.getParent();
                      children: []
                      pos: 13182
                      length: 33
                    - type: local_variable_declaration
                      fields:
                        text: Node useParent = use.getParent();
                      children: []
                      pos: 13222
                      length: 33
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: def.isAssign()
                              children: []
                              pos: 13266
                              length: 14
                          children: []
                          pos: 13265
                          length: 16
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: Node rhs = def.getLastChild();
                          children: []
                          pos: 13292
                          length: 30
                        - type: expression_statement
                          fields:
                            text: rhs.detachFromParent();
                          children: []
                          pos: 13331
                          length: 23
                        - type: expression_statement
                          fields:
                            text: Preconditions.checkState(defParent.isExprResult());
                          children: []
                          pos: 13417
                          length: 51
                        - type: while_statement
                          fields:
                            text: |-
                              while (defParent.getParent().isLabel()) {
                                        defParent = defParent.getParent();
                                      }
                          children: []
                          pos: 13477
                          length: 96
                        - type: expression_statement
                          fields:
                            text: defParent.detachFromParent();
                          children: []
                          pos: 13582
                          length: 29
                        - type: expression_statement
                          fields:
                            text: useParent.replaceChild(use, rhs);
                          children: []
                          pos: 13620
                          length: 33
                        pos: 13282
                        length: 379
                      pos: 13262
                      length: 644
                    - type: expression_statement
                      fields:
                        text: compiler.reportCodeChange();
                      children: []
                      pos: 13913
                      length: 28
                    pos: 13174
                    length: 773
                children: []
                pos: 13144
                length: 803
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getDefinition
                    children: []
                    pos: 14082
                    length: 13
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 14096
                      length: 6
                    pos: 14069
                    length: 726
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                  new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    switch (n.getType()) {
                                      case Token.NAME:
                                        if (n.getString().equals(varName) && n.hasChildren()) {
                                          def = n;
                                        }
                                        return;

                                      case Token.ASSIGN:
                                        Node lhs = n.getFirstChild();
                                        if (lhs.isName() && lhs.getString().equals(varName)) {
                                          def = n;
                                        }
                                        return;
                                    }
                                  }
                                };
                      children: []
                      pos: 14125
                      length: 611
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, n, gatherCb);
                      children: []
                      pos: 14743
                      length: 46
                    pos: 14117
                    length: 678
                children: []
                pos: 14069
                length: 726
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getNumUseInUseCfgNode
                    children: []
                    pos: 14936
                    length: 21
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 14958
                      length: 6
                    pos: 14923
                    length: 599
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                    new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    if (n.isName() && n.getString().equals(varName) &&
                                        // do not count in if it is left child of an assignment operator
                                        !(parent.isAssign() &&
                                         (parent.getFirstChild() == n))) {
                                      numUseWithinUseCfgNode++;
                                    }
                                  }
                                };
                      children: []
                      pos: 14988
                      length: 474
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, n, gatherCb);
                      children: []
                      pos: 15470
                      length: 46
                    pos: 14979
                    length: 543
                children: []
                pos: 14923
                length: 599
              pos: 8321
              length: 7205
          children: []
          pos: 8321
          length: 7205
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkRightOf
              children: []
              pos: 15793
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 15813
                length: 6
              pos: 15770
              length: 339
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node p = n; p != expressionRoot; p = p.getParent()) {
                          for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {
                            if (predicate.apply(cur)) {
                              return true;
                            }
                          }
                        }
                children: []
                pos: 15875
                length: 212
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 16092
                length: 13
              pos: 15869
              length: 240
          children: []
          pos: 15770
          length: 339
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkLeftOf
              children: []
              pos: 16375
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 16394
                length: 6
              pos: 16352
              length: 375
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
                          for (Node cur = p.getParent().getFirstChild(); cur != p;
                              cur = cur.getNext()) {
                            if (predicate.apply(cur)) {
                              return true;
                            }
                          }
                        }
                children: []
                pos: 16456
                length: 249
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 16710
                length: 13
              pos: 16450
              length: 277
          children: []
          pos: 16352
          length: 375
        pos: 2246
        length: 14483
    children: []
    pos: 2246
    length: 14483
  pos: 0
  length: 16730
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: FlowSensitiveInlineVariables
        children: []
        pos: 2252
        length: 28
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 2860
          length: 40
        - type: field_declaration
          fields:
            text: private ControlFlowGraph<Node> cfg;
          children: []
          pos: 2992
          length: 35
        - type: field_declaration
          fields:
            text: private List<Candidate> candidates;
          children: []
          pos: 3030
          length: 35
        - type: field_declaration
          fields:
            text: private MustBeReachingVariableDef reachingDef;
          children: []
          pos: 3068
          length: 46
        - type: field_declaration
          fields:
            text: private MaybeReachingVariableUse reachingUses;
          children: []
          pos: 3117
          length: 46
        - type: field_declaration
          fields:
            text: |-
              private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
                  new Predicate<Node>() {
                    @Override
                    public boolean apply(Node n) {
                      // When the node is null it means, we reached the implicit return
                      // where the function returns (possibly without an return statement)
                      if (n == null) {
                        return false;
                      }

                      // TODO(user): We only care about calls to functions that
                      // passes one of the dependent variable to a non-side-effect free
                      // function.
                      if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
                        return true;
                      }

                      if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
                        return true;
                      }


                      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
                          return true;
                        }
                      }
                      return false;
                    }
                };
          children: []
          pos: 3167
          length: 944
        - type: constructor_declaration
          fields:
            text: |-
              public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
                  this.compiler = compiler;
                }
          children: []
          pos: 4115
          length: 98
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: enterScope
              children: []
              pos: 4241
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 4252
                length: 15
              pos: 4217
              length: 1220
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: t.inGlobalScope()
                        children: []
                        pos: 4280
                        length: 17
                    children: []
                    pos: 4279
                    length: 19
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 4307
                    length: 7
                  pos: 4299
                  length: 85
                pos: 4276
                length: 108
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: less_than
                        fields:
                          left:
                            type: field_access
                            fields:
                              text: LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE
                            children: []
                            pos: 4394
                            length: 46
                          right:
                            type: method_invocation
                            fields:
                              text: t.getScope().getVarCount()
                            children: []
                            pos: 4451
                            length: 26
                        children: []
                        pos: 4394
                        length: 83
                    children: []
                    pos: 4393
                    length: 85
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 4487
                    length: 7
                  pos: 4479
                  length: 21
                pos: 4390
                length: 110
              - type: local_variable_declaration
                fields:
                  text: ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler,
                    false, true);
                children: []
                pos: 4554
                length: 73
              - type: expression_statement
                fields:
                  text: Preconditions.checkState(t.getScopeRoot().isFunction());
                children: []
                pos: 4673
                length: 56
              - type: expression_statement
                fields:
                  text: cfa.process(null, t.getScopeRoot().getLastChild());
                children: []
                pos: 4734
                length: 51
              - type: expression_statement
                fields:
                  text: cfg = cfa.getCfg();
                children: []
                pos: 4790
                length: 19
              - type: expression_statement
                fields:
                  text: reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(),
                    compiler);
                children: []
                pos: 4814
                length: 73
              - type: expression_statement
                fields:
                  text: reachingDef.analyze();
                children: []
                pos: 4892
                length: 22
              - type: expression_statement
                fields:
                  text: candidates = Lists.newLinkedList();
                children: []
                pos: 4919
                length: 35
              - type: expression_statement
                fields:
                  text: |-
                    new NodeTraversal(compiler, new GatherCandiates()).traverse(
                            t.getScopeRoot().getLastChild());
                children: []
                pos: 5053
                length: 102
              - type: expression_statement
                fields:
                  text: reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(),
                    compiler);
                children: []
                pos: 5226
                length: 73
              - type: expression_statement
                fields:
                  text: reachingUses.analyze();
                children: []
                pos: 5304
                length: 23
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Candidate c : candidates) {
                          if (c.canInline()) {
                            c.inlineVariable();
                          }
                        }
                children: []
                pos: 5332
                length: 101
              pos: 4269
              length: 1168
          children: []
          pos: 4217
          length: 1220
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exitScope
              children: []
              pos: 5465
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 5475
                length: 15
              pos: 5441
              length: 53
            body:
              type: block
              fields: {}
              children: []
              pos: 5492
              length: 2
          children: []
          pos: 5441
          length: 53
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 5522
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 5530
                length: 12
              pos: 5498
              length: 132
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: "(new NodeTraversal(compiler, this)).traverseRoots(externs,
                    root);"
                children: []
                pos: 5561
                length: 65
              pos: 5555
              length: 75
          children: []
          pos: 5498
          length: 132
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 5658
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 5664
                length: 15
              pos: 5634
              length: 380
            body:
              type: block
              fields: {}
              children: []
              pos: 5702
              length: 312
          children: []
          pos: 5634
          length: 380
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: GatherCandiates
              children: []
              pos: 6394
              length: 15
            body:
              type: class_body
              fields: {}
              children:
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: visit
                    children: []
                    pos: 6474
                    length: 5
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 6480
                      length: 15
                    pos: 6448
                    length: 1713
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: DiGraphNode<Node, Branch> graphNode = cfg.getDirectedGraphNode(n);
                      children: []
                      pos: 6526
                      length: 66
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: graphNode
                                  children: []
                                  pos: 6603
                                  length: 9
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 6616
                                  length: 4
                              children: []
                              pos: 6603
                              length: 17
                          children: []
                          pos: 6602
                          length: 19
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return;
                          children: []
                          pos: 6659
                          length: 7
                        pos: 6622
                        length: 52
                      pos: 6599
                      length: 75
                    - type: local_variable_declaration
                      fields:
                        text: FlowState<MustDef> state = graphNode.getAnnotation();
                      children: []
                      pos: 6681
                      length: 53
                    - type: local_variable_declaration
                      fields:
                        text: final MustDef defs = state.getIn();
                      children: []
                      pos: 6741
                      length: 35
                    - type: local_variable_declaration
                      fields:
                        text: final Node cfgNode = n;
                      children: []
                      pos: 6783
                      length: 23
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                    new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    if (n.isName()) {

                                      // n.getParent() isn't null. This just the case where n is the root
                                      // node that gatherCb started at.
                                      if (parent == null) {
                                        return;
                                      }

                                      // Make sure that the name node is purely a read.
                                      if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)
                                          || parent.isVar() || parent.isInc() || parent.isDec() ||
                                          parent.isParamList() || parent.isCatch()) {
                                        return;
                                      }

                                      String name = n.getString();
                                      if (compiler.getCodingConvention().isExported(name)) {
                                        return;
                                      }

                                      Node defNode = reachingDef.getDef(name, cfgNode);
                                      // TODO(nicksantos): We need to add some notion of @const outer
                                      // scope vars. We can inline those just fine.
                                      if (defNode != null &&
                                          !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {
                                        candidates.add(new Candidate(name, defNode, n, cfgNode));
                                      }
                                    }
                                  }
                                };
                      children: []
                      pos: 6813
                      length: 1282
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, cfgNode, gatherCb);
                      children: []
                      pos: 8103
                      length: 52
                    pos: 6518
                    length: 1643
                children: []
                pos: 6448
                length: 1713
              pos: 6380
              length: 1785
          children: []
          pos: 6380
          length: 1785
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: Candidate
              children: []
              pos: 8273
              length: 9
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final String varName;
                children: []
                pos: 8319
                length: 29
              - type: field_declaration
                fields:
                  text: private Node def;
                children: []
                pos: 8394
                length: 17
              - type: field_declaration
                fields:
                  text: private final Node defCfgNode;
                children: []
                pos: 8416
                length: 30
              - type: field_declaration
                fields:
                  text: private final Node use;
                children: []
                pos: 8485
                length: 23
              - type: field_declaration
                fields:
                  text: private final Node useCfgNode;
                children: []
                pos: 8513
                length: 30
              - type: field_declaration
                fields:
                  text: private int numUseWithinUseCfgNode;
                children: []
                pos: 8651
                length: 35
              - type: constructor_declaration
                fields:
                  text: |-
                    Candidate(String varName, Node defCfgNode, Node use, Node useCfgNode) {
                          Preconditions.checkArgument(use.isName());
                          this.varName = varName;
                          this.defCfgNode = defCfgNode;
                          this.use = use;
                          this.useCfgNode = useCfgNode;
                        }
                children: []
                pos: 8692
                length: 250
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: canInline
                    children: []
                    pos: 8964
                    length: 9
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 8948
                    length: 4082
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: defCfgNode.isFunction()
                              children: []
                              pos: 9025
                              length: 23
                          children: []
                          pos: 9024
                          length: 25
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 9060
                          length: 13
                        pos: 9050
                        length: 31
                      pos: 9021
                      length: 60
                    - type: expression_statement
                      fields:
                        text: getDefinition(defCfgNode, null);
                      children: []
                      pos: 9089
                      length: 32
                    - type: expression_statement
                      fields:
                        text: getNumUseInUseCfgNode(useCfgNode, null);
                      children: []
                      pos: 9128
                      length: 40
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: def
                                  children: []
                                  pos: 9215
                                  length: 3
                                right:
                                  type: null_literal
                                  fields: {}
                                  children: []
                                  pos: 9222
                                  length: 4
                              children: []
                              pos: 9215
                              length: 11
                          children: []
                          pos: 9214
                          length: 13
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 9238
                          length: 13
                        pos: 9228
                        length: 31
                      pos: 9211
                      length: 48
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: def.isAssign()
                                  children: []
                                  pos: 9387
                                  length: 14
                                right:
                                  type: unary_expression
                                  fields:
                                    text: "!NodeUtil.isExprAssign(def.getParent())"
                                  children: []
                                  pos: 9405
                                  length: 39
                              children: []
                              pos: 9387
                              length: 57
                          children: []
                          pos: 9386
                          length: 59
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 9456
                          length: 13
                        pos: 9446
                        length: 31
                      pos: 9383
                      length: 94
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: checkRightOf(def, defCfgNode, SIDE_EFFECT_PREDICATE)
                              children: []
                              pos: 9620
                              length: 52
                          children: []
                          pos: 9619
                          length: 54
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 9684
                          length: 13
                        pos: 9674
                        length: 31
                      pos: 9616
                      length: 89
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)
                              children: []
                              pos: 9885
                              length: 51
                          children: []
                          pos: 9884
                          length: 53
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 9948
                          length: 13
                        pos: 9938
                        length: 31
                      pos: 9881
                      length: 88
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: NodeUtil.mayHaveSideEffects(def.getLastChild())
                              children: []
                              pos: 10170
                              length: 47
                          children: []
                          pos: 10169
                          length: 49
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10229
                          length: 13
                        pos: 10219
                        length: 31
                      pos: 10166
                      length: 84
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: identifier
                                  fields:
                                    text: numUseWithinUseCfgNode
                                  children: []
                                  pos: 10544
                                  length: 22
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '1'
                                  children: []
                                  pos: 10570
                                  length: 1
                              children: []
                              pos: 10544
                              length: 27
                          children: []
                          pos: 10543
                          length: 29
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10583
                          length: 13
                        pos: 10573
                        length: 31
                      pos: 10540
                      length: 64
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: NodeUtil.isWithinLoop(use)
                              children: []
                              pos: 10670
                              length: 26
                          children: []
                          pos: 10669
                          length: 28
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10708
                          length: 13
                        pos: 10698
                        length: 31
                      pos: 10666
                      length: 63
                    - type: local_variable_declaration
                      fields:
                        text: Collection<Node> uses = reachingUses.getUses(varName,
                          defCfgNode);
                      children: []
                      pos: 10738
                      length: 66
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: not_equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: uses.size()
                                  children: []
                                  pos: 10816
                                  length: 11
                                right:
                                  type: decimal_integer_literal
                                  fields:
                                    text: '1'
                                  children: []
                                  pos: 10831
                                  length: 1
                              children: []
                              pos: 10816
                              length: 16
                          children: []
                          pos: 10815
                          length: 18
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 10844
                          length: 13
                        pos: 10834
                        length: 31
                      pos: 10812
                      length: 53
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: |-
                                  NodeUtil.has(def.getLastChild(),
                                            new Predicate<Node>() {
                                                @Override
                                                public boolean apply(Node input) {
                                                  switch (input.getType()) {
                                                    case Token.GETELEM:
                                                    case Token.GETPROP:
                                                    case Token.ARRAYLIT:
                                                    case Token.OBJECTLIT:
                                                    case Token.REGEXP:
                                                    case Token.NEW:
                                                      return true;
                                                  }
                                                  return false;
                                                }
                                            },
                                            new Predicate<Node>() {
                                                @Override
                                                public boolean apply(Node input) {
                                                  // Recurse if the node is not a function.
                                                  return !input.isFunction();
                                                }
                                            })
                              children: []
                              pos: 11262
                              length: 756
                          children: []
                          pos: 11261
                          length: 758
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: return_statement
                          fields:
                            text: return false;
                          children: []
                          pos: 12030
                          length: 13
                        pos: 12020
                        length: 31
                      pos: 11258
                      length: 793
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: and
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: NodeUtil.isStatementBlock(defCfgNode.getParent())
                                  children: []
                                  pos: 12181
                                  length: 49
                                right:
                                  type: not_equals
                                  fields:
                                    left:
                                      type: method_invocation
                                      fields:
                                        text: defCfgNode.getNext()
                                      children: []
                                      pos: 12244
                                      length: 20
                                    right:
                                      type: identifier
                                      fields:
                                        text: useCfgNode
                                      children: []
                                      pos: 12268
                                      length: 10
                                  children: []
                                  pos: 12244
                                  length: 34
                              children: []
                              pos: 12181
                              length: 97
                          children: []
                          pos: 12180
                          length: 99
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: |-
                              CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>
                                        pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(
                                               cfg,
                                               cfg.getDirectedGraphNode(defCfgNode),
                                               cfg.getDirectedGraphNode(useCfgNode),
                                               SIDE_EFFECT_PREDICATE,
                                               Predicates.
                                                   <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
                                               false);
                          children: []
                          pos: 12470
                          length: 439
                        - type: if_statement
                          fields:
                            condition:
                              type: parenthesized_expression
                              fields:
                                expression:
                                  type: method_invocation
                                  fields:
                                    text: pathCheck.somePathsSatisfyPredicate()
                                  children: []
                                  pos: 12922
                                  length: 37
                              children: []
                              pos: 12921
                              length: 39
                          children:
                          - type: block
                            fields: {}
                            children:
                            - type: return_statement
                              fields:
                                text: return false;
                              children: []
                              pos: 12973
                              length: 13
                            pos: 12961
                            length: 35
                          pos: 12918
                          length: 78
                        pos: 12280
                        length: 724
                      pos: 12177
                      length: 827
                    - type: return_statement
                      fields:
                        text: return true;
                      children: []
                      pos: 13012
                      length: 12
                    pos: 8976
                    length: 4054
                children: []
                pos: 8948
                length: 4082
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: inlineVariable
                    children: []
                    pos: 13095
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children: []
                    pos: 13082
                    length: 803
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node defParent = def.getParent();
                      children: []
                      pos: 13120
                      length: 33
                    - type: local_variable_declaration
                      fields:
                        text: Node useParent = use.getParent();
                      children: []
                      pos: 13160
                      length: 33
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: def.isAssign()
                              children: []
                              pos: 13204
                              length: 14
                          children: []
                          pos: 13203
                          length: 16
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: local_variable_declaration
                          fields:
                            text: Node rhs = def.getLastChild();
                          children: []
                          pos: 13230
                          length: 30
                        - type: expression_statement
                          fields:
                            text: rhs.detachFromParent();
                          children: []
                          pos: 13269
                          length: 23
                        - type: expression_statement
                          fields:
                            text: Preconditions.checkState(defParent.isExprResult());
                          children: []
                          pos: 13355
                          length: 51
                        - type: while_statement
                          fields:
                            text: |-
                              while (defParent.getParent().isLabel()) {
                                        defParent = defParent.getParent();
                                      }
                          children: []
                          pos: 13415
                          length: 96
                        - type: expression_statement
                          fields:
                            text: defParent.detachFromParent();
                          children: []
                          pos: 13520
                          length: 29
                        - type: expression_statement
                          fields:
                            text: useParent.replaceChild(use, rhs);
                          children: []
                          pos: 13558
                          length: 33
                        pos: 13220
                        length: 379
                      pos: 13200
                      length: 644
                    - type: expression_statement
                      fields:
                        text: compiler.reportCodeChange();
                      children: []
                      pos: 13851
                      length: 28
                    pos: 13112
                    length: 773
                children: []
                pos: 13082
                length: 803
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getDefinition
                    children: []
                    pos: 14020
                    length: 13
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 14034
                      length: 6
                    pos: 14007
                    length: 726
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                  new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    switch (n.getType()) {
                                      case Token.NAME:
                                        if (n.getString().equals(varName) && n.hasChildren()) {
                                          def = n;
                                        }
                                        return;

                                      case Token.ASSIGN:
                                        Node lhs = n.getFirstChild();
                                        if (lhs.isName() && lhs.getString().equals(varName)) {
                                          def = n;
                                        }
                                        return;
                                    }
                                  }
                                };
                      children: []
                      pos: 14063
                      length: 611
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, n, gatherCb);
                      children: []
                      pos: 14681
                      length: 46
                    pos: 14055
                    length: 678
                children: []
                pos: 14007
                length: 726
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: getNumUseInUseCfgNode
                    children: []
                    pos: 14874
                    length: 21
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 14896
                      length: 6
                    pos: 14861
                    length: 599
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          AbstractCfgNodeTraversalCallback gatherCb =
                                    new AbstractCfgNodeTraversalCallback() {

                                  @Override
                                  public void visit(NodeTraversal t, Node n, Node parent) {
                                    if (n.isName() && n.getString().equals(varName) &&
                                        // do not count in if it is left child of an assignment operator
                                        !(parent.isAssign() &&
                                         (parent.getFirstChild() == n))) {
                                      numUseWithinUseCfgNode++;
                                    }
                                  }
                                };
                      children: []
                      pos: 14926
                      length: 474
                    - type: expression_statement
                      fields:
                        text: NodeTraversal.traverse(compiler, n, gatherCb);
                      children: []
                      pos: 15408
                      length: 46
                    pos: 14917
                    length: 543
                children: []
                pos: 14861
                length: 599
              pos: 8259
              length: 7205
          children: []
          pos: 8259
          length: 7205
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkRightOf
              children: []
              pos: 15731
              length: 12
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 15751
                length: 6
              pos: 15708
              length: 339
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node p = n; p != expressionRoot; p = p.getParent()) {
                          for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {
                            if (predicate.apply(cur)) {
                              return true;
                            }
                          }
                        }
                children: []
                pos: 15813
                length: 212
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 16030
                length: 13
              pos: 15807
              length: 240
          children: []
          pos: 15708
          length: 339
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: checkLeftOf
              children: []
              pos: 16313
              length: 11
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 16332
                length: 6
              pos: 16290
              length: 375
            body:
              type: block
              fields: {}
              children:
              - type: for_statement
                fields:
                  text: |-
                    for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
                          for (Node cur = p.getParent().getFirstChild(); cur != p;
                              cur = cur.getNext()) {
                            if (predicate.apply(cur)) {
                              return true;
                            }
                          }
                        }
                children: []
                pos: 16394
                length: 249
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 16648
                length: 13
              pos: 16388
              length: 277
          children: []
          pos: 16290
          length: 375
        pos: 2246
        length: 14421
    children: []
    pos: 2246
    length: 14421
  pos: 0
  length: 16668
text_diff: "--- before\n+++ after\n@@ -99,9 +99,6 @@\n           return true;\n         }\n
  \n-        if (n.isDelProp()) {\n-          return true;\n-        }\n \n         for
  (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c)
  && apply(c)) {\n"
tree_diff: |+
  New cluster:
  UPDATE from private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }

          if (n.isDelProp()) {
            return true;
          }

          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    }; to private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }


          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    };
  ------------
  ===
  update-node
  ---
  field_declaration: private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }

          if (n.isDelProp()) {
            return true;
          }

          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    }; [3167,4173]
  replace private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }

          if (n.isDelProp()) {
            return true;
          }

          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    }; by private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }


          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    };

...
