---
language: java
text_diff: "--- before\n+++ after\n@@ -99,9 +99,6 @@\n           return true;\n         }\n
  \n-        if (n.isDelProp()) {\n-          return true;\n-        }\n \n         for
  (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c)
  && apply(c)) {\n"
tree_diff: |+
  New cluster:
  UPDATE from private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }

          if (n.isDelProp()) {
            return true;
          }

          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    }; to private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }


          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    };
  ------------
  ===
  update-node
  ---
  field_declaration: private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }

          if (n.isDelProp()) {
            return true;
          }

          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    }; [3167,4173]
  replace private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }

          if (n.isDelProp()) {
            return true;
          }

          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    }; by private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
      new Predicate<Node>() {
        @Override
        public boolean apply(Node n) {
          // When the node is null it means, we reached the implicit return
          // where the function returns (possibly without an return statement)
          if (n == null) {
            return false;
          }

          // TODO(user): We only care about calls to functions that
          // passes one of the dependent variable to a non-side-effect free
          // function.
          if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
            return true;
          }

          if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
            return true;
          }


          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
              return true;
            }
          }
          return false;
        }
    };

...
