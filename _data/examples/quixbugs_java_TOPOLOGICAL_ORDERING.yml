---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: TOPOLOGICAL_ORDERING
        children: []
        pos: 57
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: topological_ordering
              children: []
              pos: 114
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: List<Node> directedGraph
                children: []
                pos: 136
                length: 24
              pos: 84
              length: 758
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Node> orderedNodes = new ArrayList<Node>();
                children: []
                pos: 172
                length: 53
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Node node : directedGraph) {
                                if (node.getPredecessors().isEmpty()) {
                                    orderedNodes.add(node);
                                }
                            }
                children: []
                pos: 234
                length: 149
              - type: local_variable_declaration
                fields:
                  text: int listSize = orderedNodes.size();
                children: []
                pos: 393
                length: 35
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < listSize; i++) {
                                Node node = orderedNodes.get(i);
                                for (Node nextNode : node.getSuccessors()) {
                                    if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {
                                        orderedNodes.add(nextNode);
                                        listSize++;
                                    }
                                }
                            }
                children: []
                pos: 437
                length: 370
              - type: return_statement
                fields:
                  text: return orderedNodes;
                children: []
                pos: 816
                length: 20
              pos: 162
              length: 680
          children: []
          pos: 84
          length: 758
        pos: 44
        length: 800
    children: []
    pos: 44
    length: 800
  pos: 0
  length: 845
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: TOPOLOGICAL_ORDERING
        children: []
        pos: 93
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: topological_ordering
              children: []
              pos: 150
              length: 20
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: List<Node> directedGraph
                children: []
                pos: 172
                length: 24
              pos: 120
              length: 760
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Node> orderedNodes = new ArrayList<Node>();
                children: []
                pos: 208
                length: 53
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Node node : directedGraph) {
                                if (node.getPredecessors().isEmpty()) {
                                    orderedNodes.add(node);
                                }
                            }
                children: []
                pos: 270
                length: 149
              - type: local_variable_declaration
                fields:
                  text: int listSize = orderedNodes.size();
                children: []
                pos: 429
                length: 35
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < listSize; i++) {
                                Node node = orderedNodes.get(i);
                                for (Node nextNode : node.getSuccessors()) {
                                    if (orderedNodes.containsAll(nextNode.getPredecessors()) && !orderedNodes.contains(nextNode)) {
                                        orderedNodes.add(nextNode);
                                        listSize++;
                                    }
                                }
                            }
                children: []
                pos: 473
                length: 372
              - type: return_statement
                fields:
                  text: return orderedNodes;
                children: []
                pos: 854
                length: 20
              pos: 198
              length: 682
          children: []
          pos: 120
          length: 760
        pos: 80
        length: 802
    children: []
    pos: 80
    length: 802
  pos: 0
  length: 883
text_diff: "--- before\n+++ after\n@@ -1,6 +1,8 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n+import java_programs.Node;\n+\n
  public class TOPOLOGICAL_ORDERING {\n     public static ArrayList<Node> topological_ordering
  (List<Node> directedGraph) {\n         ArrayList<Node> orderedNodes = new ArrayList<Node>();\n@@
  -14,7 +16,7 @@\n         for (int i = 0; i < listSize; i++) {\n             Node
  node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors())
  {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode))
  {\n+                if (orderedNodes.containsAll(nextNode.getPredecessors()) &&
  !orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n
  \                    listSize++;\n                 }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          } to for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getPredecessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          } [437,807]
  replace for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          } by for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getPredecessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          }

...
