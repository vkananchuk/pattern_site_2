---
language: java
text_diff: "--- before\n+++ after\n@@ -1,6 +1,8 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n+import java_programs.Node;\n+\n
  public class TOPOLOGICAL_ORDERING {\n     public static ArrayList<Node> topological_ordering
  (List<Node> directedGraph) {\n         ArrayList<Node> orderedNodes = new ArrayList<Node>();\n@@
  -14,7 +16,7 @@\n         for (int i = 0; i < listSize; i++) {\n             Node
  node = orderedNodes.get(i);\n             for (Node nextNode : node.getSuccessors())
  {\n-                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode))
  {\n+                if (orderedNodes.containsAll(nextNode.getPredecessors()) &&
  !orderedNodes.contains(nextNode)) {\n                     orderedNodes.add(nextNode);\n
  \                    listSize++;\n                 }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          } to for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getPredecessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          } [437,807]
  replace for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          } by for (int i = 0; i < listSize; i++) {
              Node node = orderedNodes.get(i);
              for (Node nextNode : node.getSuccessors()) {
                  if (orderedNodes.containsAll(nextNode.getPredecessors()) && !orderedNodes.contains(nextNode)) {
                      orderedNodes.add(nextNode);
                      listSize++;
                  }
              }
          }

...
