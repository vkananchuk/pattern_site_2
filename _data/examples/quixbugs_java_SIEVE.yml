---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SIEVE
        children: []
        pos: 191
        length: 5
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: all
              children: []
              pos: 226
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Boolean> arr
                children: []
                pos: 230
                length: 22
              pos: 204
              length: 166
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (boolean value : arr) {
                                if (!value) { return false; }
                            }
                children: []
                pos: 264
                length: 79
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 352
                length: 12
              pos: 254
              length: 116
          children: []
          pos: 204
          length: 166
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: any
              children: []
              pos: 398
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Boolean> arr
                children: []
                pos: 402
                length: 22
              pos: 376
              length: 164
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (boolean value: arr) {
                                if (value) { return true; }
                            }
                children: []
                pos: 436
                length: 76
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 521
                length: 13
              pos: 426
              length: 114
          children: []
          pos: 376
          length: 164
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: list_comp
              children: []
              pos: 579
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 589
                length: 5
              pos: 546
              length: 288
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();
                children: []
                pos: 633
                length: 66
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer p : primes) {
                                built_comprehension.add(n % p > 0);
                            }
                children: []
                pos: 708
                length: 84
              - type: return_statement
                fields:
                  text: return built_comprehension;
                children: []
                pos: 801
                length: 27
              pos: 623
              length: 211
          children: []
          pos: 546
          length: 288
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sieve
              children: []
              pos: 874
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Integer max
                children: []
                pos: 880
                length: 11
              pos: 841
              length: 282
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> primes = new ArrayList<Integer>();
                children: []
                pos: 903
                length: 53
              - type: for_statement
                fields:
                  text: |-
                    for (int n=2; n<max+1; n++) {
                                if (any(list_comp(n, primes))) {
                                    primes.add(n);
                                }
                            }
                children: []
                pos: 965
                length: 129
              - type: return_statement
                fields:
                  text: return primes;
                children: []
                pos: 1103
                length: 14
              pos: 893
              length: 230
          children: []
          pos: 841
          length: 282
        pos: 178
        length: 947
    children: []
    pos: 178
    length: 947
  pos: 0
  length: 1126
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SIEVE
        children: []
        pos: 199
        length: 5
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: all
              children: []
              pos: 234
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Boolean> arr
                children: []
                pos: 238
                length: 22
              pos: 212
              length: 166
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (boolean value : arr) {
                                if (!value) { return false; }
                            }
                children: []
                pos: 272
                length: 79
              - type: return_statement
                fields:
                  text: return true;
                children: []
                pos: 360
                length: 12
              pos: 262
              length: 116
          children: []
          pos: 212
          length: 166
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: any
              children: []
              pos: 406
              length: 3
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: ArrayList<Boolean> arr
                children: []
                pos: 410
                length: 22
              pos: 384
              length: 164
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (boolean value: arr) {
                                if (value) { return true; }
                            }
                children: []
                pos: 444
                length: 76
              - type: return_statement
                fields:
                  text: return false;
                children: []
                pos: 529
                length: 13
              pos: 434
              length: 114
          children: []
          pos: 384
          length: 164
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: list_comp
              children: []
              pos: 587
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 597
                length: 5
              pos: 554
              length: 288
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();
                children: []
                pos: 641
                length: 66
              - type: enhanced_for_statement
                fields:
                  text: |-
                    for (Integer p : primes) {
                                built_comprehension.add(n % p > 0);
                            }
                children: []
                pos: 716
                length: 84
              - type: return_statement
                fields:
                  text: return built_comprehension;
                children: []
                pos: 809
                length: 27
              pos: 631
              length: 211
          children: []
          pos: 554
          length: 288
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sieve
              children: []
              pos: 882
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Integer max
                children: []
                pos: 888
                length: 11
              pos: 849
              length: 282
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: ArrayList<Integer> primes = new ArrayList<Integer>();
                children: []
                pos: 911
                length: 53
              - type: for_statement
                fields:
                  text: |-
                    for (int n=2; n<max+1; n++) {
                                if (all(list_comp(n, primes))) {
                                    primes.add(n);
                                }
                            }
                children: []
                pos: 973
                length: 129
              - type: return_statement
                fields:
                  text: return primes;
                children: []
                pos: 1111
                length: 14
              pos: 901
              length: 230
          children: []
          pos: 849
          length: 282
        pos: 186
        length: 947
    children: []
    pos: 186
    length: 947
  pos: 0
  length: 1134
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n /*\n@@ -38,7 +38,7 @@\n     public
  static ArrayList<Integer> sieve(Integer max) {\n         ArrayList<Integer> primes
  = new ArrayList<Integer>();\n         for (int n=2; n<max+1; n++) {\n-            if
  (any(list_comp(n, primes))) {\n+            if (all(list_comp(n, primes))) {\n                 primes.add(n);\n
  \            }\n         }\n"
tree_diff: |+
  New cluster:
  UPDATE from for (int n=2; n<max+1; n++) {
              if (any(list_comp(n, primes))) {
                  primes.add(n);
              }
          } to for (int n=2; n<max+1; n++) {
              if (all(list_comp(n, primes))) {
                  primes.add(n);
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int n=2; n<max+1; n++) {
              if (any(list_comp(n, primes))) {
                  primes.add(n);
              }
          } [965,1094]
  replace for (int n=2; n<max+1; n++) {
              if (any(list_comp(n, primes))) {
                  primes.add(n);
              }
          } by for (int n=2; n<max+1; n++) {
              if (all(list_comp(n, primes))) {
                  primes.add(n);
              }
          }

...
