---
language: java
text_diff: "--- before\n+++ after\n@@ -131,6 +131,8 @@\n \n         int n = 1;\n         double
  dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double
  cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@\n             final
  double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double
  dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN
  = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if
  (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double
  cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if
  (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor
  = 1d;\n+                double lastScaleFactor = 1d;\n+                final int
  maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if
  (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
  x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+
  \                   lastScaleFactor = scaleFactor;\n+                    scaleFactor
  *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN
  = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2
  = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else
  if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+
  \                       q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+
  \                   }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2)))
  {\n+                        break;\n+                    }\n+                }\n
  \            }\n \n-            dN = 1 / dN;\n-            final double deltaN =
  cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN =
  cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN))
  {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@
  -164,9 +182,11 @@\n                 break;\n             }\n \n-            dPrev
  = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev =
  q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev
  = cN;\n+            q1 = q2;\n             n++;\n         }\n \n"
tree_diff: |+
  New cluster:
  ===
  insert-node
  ---
  local_variable_declaration: double p0 = 1.0; [4931,4947]
  to
  block [4643,6310]
  at 5
  ------------
  ===
  insert-node
  ---
  local_variable_declaration: double p0 = 1.0; [4931,4947]
  to
  block [4643,6310]
  at 5

  New cluster:
  ===
  insert-node
  ---
  local_variable_declaration: double q1 = 1.0; [4956,4972]
  to
  block [4643,6310]
  at 6
  ------------
  ===
  insert-node
  ---
  local_variable_declaration: double q1 = 1.0; [4956,4972]
  to
  block [4643,6310]
  at 6

  New cluster:
  UPDATE from while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double dN = a + b * dPrev;
              if (Precision.equals(dN, 0.0, small)) {
                  dN = small;
              }
              double cN = a + b / cPrev;
              if (Precision.equals(cN, 0.0, small)) {
                  cN = small;
              }

              dN = 1 / dN;
              final double deltaN = cN * dN;
              hN = hPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = dN;
              cPrev = cN;
              hPrev = hN;
              n++;
          } to while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double cN = a * hPrev + b * p0;
              double q2 = a * q1 + b * dPrev;
              if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                  double scaleFactor = 1d;
                  double lastScaleFactor = 1d;
                  final int maxPower = 5;
                  final double scale = FastMath.max(a,b);
                  if (scale <= 0) {  // Can't scale
                      throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                  }
                  for (int i = 0; i < maxPower; i++) {
                      lastScaleFactor = scaleFactor;
                      scaleFactor *= scale;
                      if (a != 0.0 && a > b) {
                          cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                          q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
                      } else if (b != 0) {
                          cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
                          q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                      }
                      if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                          break;
                      }
                  }
              }

              final double deltaN = cN / q2 / cPrev;
              hN = cPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = q1;
              cPrev = cN / q2;
              p0 = hPrev;
              hPrev = cN;
              q1 = q2;
              n++;
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double dN = a + b * dPrev;
              if (Precision.equals(dN, 0.0, small)) {
                  dN = small;
              }
              double cN = a + b / cPrev;
              if (Precision.equals(cN, 0.0, small)) {
                  cN = small;
              }

              dN = 1 / dN;
              final double deltaN = cN * dN;
              hN = hPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = dN;
              cPrev = cN;
              hPrev = hN;
              n++;
          } [4989,6072]
  replace while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double dN = a + b * dPrev;
              if (Precision.equals(dN, 0.0, small)) {
                  dN = small;
              }
              double cN = a + b / cPrev;
              if (Precision.equals(cN, 0.0, small)) {
                  cN = small;
              }

              dN = 1 / dN;
              final double deltaN = cN * dN;
              hN = hPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = dN;
              cPrev = cN;
              hPrev = hN;
              n++;
          } by while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double cN = a * hPrev + b * p0;
              double q2 = a * q1 + b * dPrev;
              if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                  double scaleFactor = 1d;
                  double lastScaleFactor = 1d;
                  final int maxPower = 5;
                  final double scale = FastMath.max(a,b);
                  if (scale <= 0) {  // Can't scale
                      throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                  }
                  for (int i = 0; i < maxPower; i++) {
                      lastScaleFactor = scaleFactor;
                      scaleFactor *= scale;
                      if (a != 0.0 && a > b) {
                          cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                          q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
                      } else if (b != 0) {
                          cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
                          q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                      }
                      if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                          break;
                      }
                  }
              }

              final double deltaN = cN / q2 / cPrev;
              hN = cPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = q1;
              cPrev = cN / q2;
              p0 = hPrev;
              hPrev = cN;
              q1 = q2;
              n++;
          }

...
