---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: ContinuedFraction
        children: []
        pos: 1396
        length: 17
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final double DEFAULT_EPSILON = 10e-9;
          children: []
          pos: 1464
          length: 52
        - type: constructor_declaration
          fields:
            text: |-
              protected ContinuedFraction() {
                      super();
                  }
          children: []
          pos: 1566
          length: 54
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getA
              children: []
              pos: 1949
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 1954
                length: 5
              pos: 1923
              length: 48
          children: []
          pos: 1923
          length: 48
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getB
              children: []
              pos: 2300
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 2305
                length: 5
              pos: 2274
              length: 48
          children: []
          pos: 2274
          length: 48
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: evaluate
              children: []
              pos: 2591
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 2600
                length: 8
              pos: 2577
              length: 104
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);
                children: []
                pos: 2620
                length: 55
              pos: 2610
              length: 71
          children: []
          pos: 2577
          length: 104
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: evaluate
              children: []
              pos: 2995
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 3004
                length: 8
              pos: 2981
              length: 112
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return evaluate(x, epsilon, Integer.MAX_VALUE);
                children: []
                pos: 3040
                length: 47
              pos: 3030
              length: 63
          children: []
          pos: 2981
          length: 112
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: evaluate
              children: []
              pos: 3420
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 3429
                length: 8
              pos: 3406
              length: 119
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return evaluate(x, DEFAULT_EPSILON, maxIterations);
                children: []
                pos: 3468
                length: 51
              pos: 3458
              length: 67
          children: []
          pos: 3406
          length: 119
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: evaluate
              children: []
              pos: 4589
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 4598
                length: 8
              pos: 4575
              length: 1735
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: final double small = 1e-50;
                children: []
                pos: 4653
                length: 27
              - type: local_variable_declaration
                fields:
                  text: double hPrev = getA(0, x);
                children: []
                pos: 4689
                length: 26
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Precision.equals(hPrev, 0.0, small)
                        children: []
                        pos: 4799
                        length: 35
                    children: []
                    pos: 4798
                    length: 37
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: hPrev = small;
                    children: []
                    pos: 4850
                    length: 14
                  pos: 4836
                  length: 38
                pos: 4795
                length: 79
              - type: local_variable_declaration
                fields:
                  text: int n = 1;
                children: []
                pos: 4884
                length: 10
              - type: local_variable_declaration
                fields:
                  text: double dPrev = 0.0;
                children: []
                pos: 4903
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double cPrev = hPrev;
                children: []
                pos: 4931
                length: 21
              - type: local_variable_declaration
                fields:
                  text: double hN = hPrev;
                children: []
                pos: 4961
                length: 18
              - type: while_statement
                fields:
                  text: |-
                    while (n < maxIterations) {
                                final double a = getA(n, x);
                                final double b = getB(n, x);

                                double dN = a + b * dPrev;
                                if (Precision.equals(dN, 0.0, small)) {
                                    dN = small;
                                }
                                double cN = a + b / cPrev;
                                if (Precision.equals(cN, 0.0, small)) {
                                    cN = small;
                                }

                                dN = 1 / dN;
                                final double deltaN = cN * dN;
                                hN = hPrev * deltaN;

                                if (Double.isInfinite(hN)) {
                                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                                   x);
                                }
                                if (Double.isNaN(hN)) {
                                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                                   x);
                                }

                                if (FastMath.abs(deltaN - 1.0) < epsilon) {
                                    break;
                                }

                                dPrev = dN;
                                cPrev = cN;
                                hPrev = hN;
                                n++;
                            }
                children: []
                pos: 4989
                length: 1083
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 6086
                            length: 1
                          right:
                            type: identifier
                            fields:
                              text: maxIterations
                            children: []
                            pos: 6091
                            length: 13
                        children: []
                        pos: 6086
                        length: 18
                    children: []
                    pos: 6085
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: |-
                        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                                        maxIterations, x);
                    children: []
                    pos: 6120
                    length: 154
                  pos: 6106
                  length: 178
                pos: 6082
                length: 202
              - type: return_statement
                fields:
                  text: return hN;
                children: []
                pos: 6294
                length: 10
              pos: 4643
              length: 1667
          children: []
          pos: 4575
          length: 1735
        pos: 1374
        length: 4939
    children: []
    pos: 1374
    length: 4939
  pos: 0
  length: 6314
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: ContinuedFraction
        children: []
        pos: 1396
        length: 17
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: private static final double DEFAULT_EPSILON = 10e-9;
          children: []
          pos: 1464
          length: 52
        - type: constructor_declaration
          fields:
            text: |-
              protected ContinuedFraction() {
                      super();
                  }
          children: []
          pos: 1566
          length: 54
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getA
              children: []
              pos: 1949
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 1954
                length: 5
              pos: 1923
              length: 48
          children: []
          pos: 1923
          length: 48
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: getB
              children: []
              pos: 2300
              length: 4
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int n
                children: []
                pos: 2305
                length: 5
              pos: 2274
              length: 48
          children: []
          pos: 2274
          length: 48
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: evaluate
              children: []
              pos: 2591
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 2600
                length: 8
              pos: 2577
              length: 104
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);
                children: []
                pos: 2620
                length: 55
              pos: 2610
              length: 71
          children: []
          pos: 2577
          length: 104
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: evaluate
              children: []
              pos: 2995
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 3004
                length: 8
              pos: 2981
              length: 112
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return evaluate(x, epsilon, Integer.MAX_VALUE);
                children: []
                pos: 3040
                length: 47
              pos: 3030
              length: 63
          children: []
          pos: 2981
          length: 112
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: evaluate
              children: []
              pos: 3420
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 3429
                length: 8
              pos: 3406
              length: 119
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return evaluate(x, DEFAULT_EPSILON, maxIterations);
                children: []
                pos: 3468
                length: 51
              pos: 3458
              length: 67
          children: []
          pos: 3406
          length: 119
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: evaluate
              children: []
              pos: 4589
              length: 8
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: double x
                children: []
                pos: 4598
                length: 8
              pos: 4575
              length: 2800
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: final double small = 1e-50;
                children: []
                pos: 4653
                length: 27
              - type: local_variable_declaration
                fields:
                  text: double hPrev = getA(0, x);
                children: []
                pos: 4689
                length: 26
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: Precision.equals(hPrev, 0.0, small)
                        children: []
                        pos: 4799
                        length: 35
                    children: []
                    pos: 4798
                    length: 37
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: hPrev = small;
                    children: []
                    pos: 4850
                    length: 14
                  pos: 4836
                  length: 38
                pos: 4795
                length: 79
              - type: local_variable_declaration
                fields:
                  text: int n = 1;
                children: []
                pos: 4884
                length: 10
              - type: local_variable_declaration
                fields:
                  text: double dPrev = 0.0;
                children: []
                pos: 4903
                length: 19
              - type: local_variable_declaration
                fields:
                  text: double p0 = 1.0;
                children: []
                pos: 4931
                length: 16
              - type: local_variable_declaration
                fields:
                  text: double q1 = 1.0;
                children: []
                pos: 4956
                length: 16
              - type: local_variable_declaration
                fields:
                  text: double cPrev = hPrev;
                children: []
                pos: 4981
                length: 21
              - type: local_variable_declaration
                fields:
                  text: double hN = hPrev;
                children: []
                pos: 5011
                length: 18
              - type: while_statement
                fields:
                  text: |-
                    while (n < maxIterations) {
                                final double a = getA(n, x);
                                final double b = getB(n, x);

                                double cN = a * hPrev + b * p0;
                                double q2 = a * q1 + b * dPrev;
                                if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                                    double scaleFactor = 1d;
                                    double lastScaleFactor = 1d;
                                    final int maxPower = 5;
                                    final double scale = FastMath.max(a,b);
                                    if (scale <= 0) {  // Can't scale
                                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                                    }
                                    for (int i = 0; i < maxPower; i++) {
                                        lastScaleFactor = scaleFactor;
                                        scaleFactor *= scale;
                                        if (a != 0.0 && a > b) {
                                            cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                                            q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
                                        } else if (b != 0) {
                                            cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
                                            q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                                        }
                                        if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                                            break;
                                        }
                                    }
                                }

                                final double deltaN = cN / q2 / cPrev;
                                hN = cPrev * deltaN;

                                if (Double.isInfinite(hN)) {
                                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                                   x);
                                }
                                if (Double.isNaN(hN)) {
                                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                                   x);
                                }

                                if (FastMath.abs(deltaN - 1.0) < epsilon) {
                                    break;
                                }

                                dPrev = q1;
                                cPrev = cN / q2;
                                p0 = hPrev;
                                hPrev = cN;
                                q1 = q2;
                                n++;
                            }
                children: []
                pos: 5039
                length: 2098
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: greater_or_equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 7151
                            length: 1
                          right:
                            type: identifier
                            fields:
                              text: maxIterations
                            children: []
                            pos: 7156
                            length: 13
                        children: []
                        pos: 7151
                        length: 18
                    children: []
                    pos: 7150
                    length: 20
                children:
                - type: block
                  fields: {}
                  children:
                  - type: throw_statement
                    fields:
                      text: |-
                        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,
                                                                        maxIterations, x);
                    children: []
                    pos: 7185
                    length: 154
                  pos: 7171
                  length: 178
                pos: 7147
                length: 202
              - type: return_statement
                fields:
                  text: return hN;
                children: []
                pos: 7359
                length: 10
              pos: 4643
              length: 2732
          children: []
          pos: 4575
          length: 2800
        pos: 1374
        length: 6004
    children: []
    pos: 1374
    length: 6004
  pos: 0
  length: 7379
text_diff: "--- before\n+++ after\n@@ -131,6 +131,8 @@\n \n         int n = 1;\n         double
  dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double
  cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@\n             final
  double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double
  dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN
  = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if
  (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double
  cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if
  (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor
  = 1d;\n+                double lastScaleFactor = 1d;\n+                final int
  maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if
  (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
  x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+
  \                   lastScaleFactor = scaleFactor;\n+                    scaleFactor
  *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN
  = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2
  = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else
  if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+
  \                       q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+
  \                   }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2)))
  {\n+                        break;\n+                    }\n+                }\n
  \            }\n \n-            dN = 1 / dN;\n-            final double deltaN =
  cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN =
  cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN))
  {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@
  -164,9 +182,11 @@\n                 break;\n             }\n \n-            dPrev
  = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev =
  q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev
  = cN;\n+            q1 = q2;\n             n++;\n         }\n \n"
tree_diff: |+
  New cluster:
  ===
  insert-node
  ---
  local_variable_declaration: double p0 = 1.0; [4931,4947]
  to
  block [4643,6310]
  at 5
  ------------
  ===
  insert-node
  ---
  local_variable_declaration: double p0 = 1.0; [4931,4947]
  to
  block [4643,6310]
  at 5

  New cluster:
  ===
  insert-node
  ---
  local_variable_declaration: double q1 = 1.0; [4956,4972]
  to
  block [4643,6310]
  at 6
  ------------
  ===
  insert-node
  ---
  local_variable_declaration: double q1 = 1.0; [4956,4972]
  to
  block [4643,6310]
  at 6

  New cluster:
  UPDATE from while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double dN = a + b * dPrev;
              if (Precision.equals(dN, 0.0, small)) {
                  dN = small;
              }
              double cN = a + b / cPrev;
              if (Precision.equals(cN, 0.0, small)) {
                  cN = small;
              }

              dN = 1 / dN;
              final double deltaN = cN * dN;
              hN = hPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = dN;
              cPrev = cN;
              hPrev = hN;
              n++;
          } to while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double cN = a * hPrev + b * p0;
              double q2 = a * q1 + b * dPrev;
              if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                  double scaleFactor = 1d;
                  double lastScaleFactor = 1d;
                  final int maxPower = 5;
                  final double scale = FastMath.max(a,b);
                  if (scale <= 0) {  // Can't scale
                      throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                  }
                  for (int i = 0; i < maxPower; i++) {
                      lastScaleFactor = scaleFactor;
                      scaleFactor *= scale;
                      if (a != 0.0 && a > b) {
                          cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                          q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
                      } else if (b != 0) {
                          cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
                          q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                      }
                      if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                          break;
                      }
                  }
              }

              final double deltaN = cN / q2 / cPrev;
              hN = cPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = q1;
              cPrev = cN / q2;
              p0 = hPrev;
              hPrev = cN;
              q1 = q2;
              n++;
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double dN = a + b * dPrev;
              if (Precision.equals(dN, 0.0, small)) {
                  dN = small;
              }
              double cN = a + b / cPrev;
              if (Precision.equals(cN, 0.0, small)) {
                  cN = small;
              }

              dN = 1 / dN;
              final double deltaN = cN * dN;
              hN = hPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = dN;
              cPrev = cN;
              hPrev = hN;
              n++;
          } [4989,6072]
  replace while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double dN = a + b * dPrev;
              if (Precision.equals(dN, 0.0, small)) {
                  dN = small;
              }
              double cN = a + b / cPrev;
              if (Precision.equals(cN, 0.0, small)) {
                  cN = small;
              }

              dN = 1 / dN;
              final double deltaN = cN * dN;
              hN = hPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = dN;
              cPrev = cN;
              hPrev = hN;
              n++;
          } by while (n < maxIterations) {
              final double a = getA(n, x);
              final double b = getB(n, x);

              double cN = a * hPrev + b * p0;
              double q2 = a * q1 + b * dPrev;
              if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
                  double scaleFactor = 1d;
                  double lastScaleFactor = 1d;
                  final int maxPower = 5;
                  final double scale = FastMath.max(a,b);
                  if (scale <= 0) {  // Can't scale
                      throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
                  }
                  for (int i = 0; i < maxPower; i++) {
                      lastScaleFactor = scaleFactor;
                      scaleFactor *= scale;
                      if (a != 0.0 && a > b) {
                          cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
                          q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
                      } else if (b != 0) {
                          cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
                          q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
                      }
                      if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
                          break;
                      }
                  }
              }

              final double deltaN = cN / q2 / cPrev;
              hN = cPrev * deltaN;

              if (Double.isInfinite(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
                                                 x);
              }
              if (Double.isNaN(hN)) {
                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                 x);
              }

              if (FastMath.abs(deltaN - 1.0) < epsilon) {
                  break;
              }

              dPrev = q1;
              cPrev = cN / q2;
              p0 = hPrev;
              hPrev = cN;
              q1 = q2;
              n++;
          }

...
