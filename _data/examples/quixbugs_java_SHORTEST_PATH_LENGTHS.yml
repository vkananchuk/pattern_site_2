---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SHORTEST_PATH_LENGTHS
        children: []
        pos: 216
        length: 21
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: final static int INF = 99999;
          children: []
          pos: 364
          length: 29
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shortest_path_lengths
              children: []
              pos: 439
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int numNodes
                children: []
                pos: 461
                length: 12
              pos: 398
              length: 1298
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<List<Integer>,Integer> length_by_path = new HashMap<>();
                children: []
                pos: 528
                length: 60
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < numNodes; i++) {
                                for (int j =0; j < numNodes; j++) {
                                    List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
                                    if (i == j) {
                                        length_by_path.put(edge, 0);
                                    }
                                    else if (length_by_edge.containsKey(edge) ) {
                                        length_by_path.put(edge, length_by_edge.get(edge));
                                    } else {
                                        length_by_path.put(edge, INF);
                                    }
                                }
                            }
                children: []
                pos: 597
                length: 507
              - type: for_statement
                fields:
                  text: |-
                    for (int k = 0; k < numNodes; k++) {
                                for (int i = 0; i < numNodes; i++) {
                                    for (int j = 0; j < numNodes; j++) {
                                        int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                                     sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                                                length_by_path.get(Arrays.asList(j,k))));
                                        length_by_path.put(Arrays.asList(i,j), update_length);
                                    }
                                }
                            }
                children: []
                pos: 1113
                length: 546
              - type: return_statement
                fields:
                  text: return length_by_path;
                children: []
                pos: 1668
                length: 22
              pos: 518
              length: 1178
          children: []
          pos: 398
          length: 1298
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sumLengths
              children: []
              pos: 1721
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int a
                children: []
                pos: 1732
                length: 5
              pos: 1702
              length: 142
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: a
                                children: []
                                pos: 1759
                                length: 1
                              right:
                                type: identifier
                                fields:
                                  text: INF
                                children: []
                                pos: 1764
                                length: 3
                            children: []
                            pos: 1759
                            length: 8
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: b
                                children: []
                                pos: 1771
                                length: 1
                              right:
                                type: identifier
                                fields:
                                  text: INF
                                children: []
                                pos: 1776
                                length: 3
                            children: []
                            pos: 1771
                            length: 8
                        children: []
                        pos: 1759
                        length: 20
                    children: []
                    pos: 1758
                    length: 22
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 1795
                    length: 11
                  pos: 1781
                  length: 35
                pos: 1756
                length: 60
              - type: return_statement
                fields:
                  text: return a + b;
                children: []
                pos: 1825
                length: 13
              pos: 1746
              length: 98
          children: []
          pos: 1702
          length: 142
        pos: 203
        length: 1644
    children: []
    pos: 203
    length: 1644
  pos: 0
  length: 1848
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SHORTEST_PATH_LENGTHS
        children: []
        pos: 224
        length: 21
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: final static int INF = 99999;
          children: []
          pos: 372
          length: 29
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: shortest_path_lengths
              children: []
              pos: 447
              length: 21
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int numNodes
                children: []
                pos: 469
                length: 12
              pos: 406
              length: 1299
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Map<List<Integer>,Integer> length_by_path = new HashMap<>();
                children: []
                pos: 536
                length: 60
              - type: for_statement
                fields:
                  text: |-
                    for (int i = 0; i < numNodes; i++) {
                                for (int j =0; j < numNodes; j++) {
                                    List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));
                                    if (i == j) {
                                        length_by_path.put(edge, 0);
                                    }
                                    else if (length_by_edge.containsKey(edge) ) {
                                        length_by_path.put(edge, length_by_edge.get(edge));
                                    } else {
                                        length_by_path.put(edge, INF);
                                    }
                                }
                            }
                children: []
                pos: 605
                length: 507
              - type: for_statement
                fields:
                  text: |-
                    for (int k = 0; k < numNodes; k++) {
                                for (int i = 0; i < numNodes; i++) {
                                    for (int j = 0; j < numNodes; j++) {
                                        int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                                     sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                                                length_by_path.get(Arrays.asList(k,j))));

                                        length_by_path.put(Arrays.asList(i,j), update_length);
                                    }
                                }
                            }
                children: []
                pos: 1121
                length: 547
              - type: return_statement
                fields:
                  text: return length_by_path;
                children: []
                pos: 1677
                length: 22
              pos: 526
              length: 1179
          children: []
          pos: 406
          length: 1299
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: sumLengths
              children: []
              pos: 1730
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int a
                children: []
                pos: 1741
                length: 5
              pos: 1711
              length: 142
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: a
                                children: []
                                pos: 1768
                                length: 1
                              right:
                                type: identifier
                                fields:
                                  text: INF
                                children: []
                                pos: 1773
                                length: 3
                            children: []
                            pos: 1768
                            length: 8
                          right:
                            type: equals
                            fields:
                              left:
                                type: identifier
                                fields:
                                  text: b
                                children: []
                                pos: 1780
                                length: 1
                              right:
                                type: identifier
                                fields:
                                  text: INF
                                children: []
                                pos: 1785
                                length: 3
                            children: []
                            pos: 1780
                            length: 8
                        children: []
                        pos: 1768
                        length: 20
                    children: []
                    pos: 1767
                    length: 22
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return INF;
                    children: []
                    pos: 1804
                    length: 11
                  pos: 1790
                  length: 35
                pos: 1765
                length: 60
              - type: return_statement
                fields:
                  text: return a + b;
                children: []
                pos: 1834
                length: 13
              pos: 1755
              length: 98
          children: []
          pos: 1711
          length: 142
        pos: 211
        length: 1645
    children: []
    pos: 211
    length: 1645
  pos: 0
  length: 1857
text_diff: |
  --- before
  +++ after
  @@ -1,4 +1,4 @@
  -package java_programs;
  +package correct_java_programs;
   import java.util.*;
   import java.lang.Math.*;
   /*
  @@ -34,7 +34,8 @@
                   for (int j = 0; j < numNodes; j++) {
                       int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                    sumLengths(length_by_path.get(Arrays.asList(i,k)),
  -                                                            length_by_path.get(Arrays.asList(j,k))));
  +                                                            length_by_path.get(Arrays.asList(k,j))));
  +
                       length_by_path.put(Arrays.asList(i,j), update_length);
                   }
               }
tree_diff: |+
  New cluster:
  UPDATE from for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(j,k))));
                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          } to for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(k,j))));

                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(j,k))));
                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          } [1113,1659]
  replace for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(j,k))));
                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          } by for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(k,j))));

                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          }

...
