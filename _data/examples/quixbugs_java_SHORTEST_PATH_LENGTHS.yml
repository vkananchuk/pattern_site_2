---
language: java
text_diff: |
  --- before
  +++ after
  @@ -1,4 +1,4 @@
  -package java_programs;
  +package correct_java_programs;
   import java.util.*;
   import java.lang.Math.*;
   /*
  @@ -34,7 +34,8 @@
                   for (int j = 0; j < numNodes; j++) {
                       int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                    sumLengths(length_by_path.get(Arrays.asList(i,k)),
  -                                                            length_by_path.get(Arrays.asList(j,k))));
  +                                                            length_by_path.get(Arrays.asList(k,j))));
  +
                       length_by_path.put(Arrays.asList(i,j), update_length);
                   }
               }
tree_diff: |+
  New cluster:
  UPDATE from for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(j,k))));
                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          } to for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(k,j))));

                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(j,k))));
                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          } [1113,1659]
  replace for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(j,k))));
                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          } by for (int k = 0; k < numNodes; k++) {
              for (int i = 0; i < numNodes; i++) {
                  for (int j = 0; j < numNodes; j++) {
                      int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),
                                                   sumLengths(length_by_path.get(Arrays.asList(i,k)),
                                                              length_by_path.get(Arrays.asList(k,j))));

                      length_by_path.put(Arrays.asList(i,j), update_length);
                  }
              }
          }

...
