---
language: java
text_diff: |
  --- before
  +++ after
  @@ -168,7 +168,7 @@
                   } else {
                       double r = correlationMatrix.getEntry(i, j);
                       double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
  -                    out[i][j] = 2 * tDistribution.cumulativeProbability(-t);
  +                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
                   }
               }
           }
tree_diff: |+
  New cluster:
  UPDATE from for (int i = 0; i < nVars; i++) {
              for (int j = 0; j < nVars; j++) {
                  if (i == j) {
                      out[i][j] = 0d;
                  } else {
                      double r = correlationMatrix.getEntry(i, j);
                      double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
                      out[i][j] = 2 * tDistribution.cumulativeProbability(-t);
                  }
              }
          } to for (int i = 0; i < nVars; i++) {
              for (int j = 0; j < nVars; j++) {
                  if (i == j) {
                      out[i][j] = 0d;
                  } else {
                      double r = correlationMatrix.getEntry(i, j);
                      double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
                      out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
                  }
              }
          }
  ------------
  ===
  update-node
  ---
  for_statement: for (int i = 0; i < nVars; i++) {
              for (int j = 0; j < nVars; j++) {
                  if (i == j) {
                      out[i][j] = 0d;
                  } else {
                      double r = correlationMatrix.getEntry(i, j);
                      double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
                      out[i][j] = 2 * tDistribution.cumulativeProbability(-t);
                  }
              }
          } [6689,7123]
  replace for (int i = 0; i < nVars; i++) {
              for (int j = 0; j < nVars; j++) {
                  if (i == j) {
                      out[i][j] = 0d;
                  } else {
                      double r = correlationMatrix.getEntry(i, j);
                      double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
                      out[i][j] = 2 * tDistribution.cumulativeProbability(-t);
                  }
              }
          } by for (int i = 0; i < nVars; i++) {
              for (int j = 0; j < nVars; j++) {
                  if (i == j) {
                      out[i][j] = 0d;
                  } else {
                      double r = correlationMatrix.getEntry(i, j);
                      double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
                      out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
                  }
              }
          }

...
