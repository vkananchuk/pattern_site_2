---
language: java
text_diff: "--- before\n+++ after\n@@ -148,7 +148,6 @@\n         UnivariatePointValuePair
  current\n             = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n         //
  Best point encountered so far (which is the initial guess).\n-        UnivariatePointValuePair
  best = current;\n \n         int iter = 0;\n         while (true) {\n@@ -232,15
  +231,10 @@\n                 // User-defined convergence checker.\n                 previous
  = current;\n                 current = new UnivariatePointValuePair(u, isMinim ?
  fu : -fu);\n-                best = best(best,\n-                            best(current,\n-
  \                                previous,\n-                                 isMinim),\n-
  \                           isMinim);\n \n                 if (checker != null)
  {\n                     if (checker.converged(iter, previous, current)) {\n-                        return
  best;\n+                        return best(current, previous, isMinim);\n                     }\n
  \                }\n \n@@ -277,10 +271,9 @@\n                     }\n                 }\n
  \            } else { // Default termination (Brent's criterion).\n-                return
  best(best,\n+                return\n                             best(current,\n
  \                                 previous,\n-                                 isMinim),\n
  \                            isMinim);\n             }\n             ++iter;\n"
tree_diff: |+
  New cluster:
  UPDATE from while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
                  best = best(best,
                              best(current,
                                   previous,
                                   isMinim),
                              isMinim);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return best;
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return best(best,
                              best(current,
                                   previous,
                                   isMinim),
                              isMinim);
              }
              ++iter;
          } to while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return best(current, previous, isMinim);
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return
                              best(current,
                                   previous,
                              isMinim);
              }
              ++iter;
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
                  best = best(best,
                              best(current,
                                   previous,
                                   isMinim),
                              isMinim);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return best;
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return best(best,
                              best(current,
                                   previous,
                                   isMinim),
                              isMinim);
              }
              ++iter;
          } [5581,10092]
  replace while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
                  best = best(best,
                              best(current,
                                   previous,
                                   isMinim),
                              isMinim);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return best;
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return best(best,
                              best(current,
                                   previous,
                                   isMinim),
                              isMinim);
              }
              ++iter;
          } by while (true) {
              final double m = 0.5 * (a + b);
              final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
              final double tol2 = 2 * tol1;

              // Default stopping criterion.
              final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
              if (!stop) {
                  double p = 0;
                  double q = 0;
                  double r = 0;
                  double u = 0;

                  if (FastMath.abs(e) > tol1) { // Fit parabola.
                      r = (x - w) * (fx - fv);
                      q = (x - v) * (fx - fw);
                      p = (x - v) * q - (x - w) * r;
                      q = 2 * (q - r);

                      if (q > 0) {
                          p = -p;
                      } else {
                          q = -q;
                      }

                      r = e;
                      e = d;

                      if (p > q * (a - x) &&
                          p < q * (b - x) &&
                          FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                          // Parabolic interpolation step.
                          d = p / q;
                          u = x + d;

                          // f must not be evaluated too close to a or b.
                          if (u - a < tol2 || b - u < tol2) {
                              if (x <= m) {
                                  d = tol1;
                              } else {
                                  d = -tol1;
                              }
                          }
                      } else {
                          // Golden section step.
                          if (x < m) {
                              e = b - x;
                          } else {
                              e = a - x;
                          }
                          d = GOLDEN_SECTION * e;
                      }
                  } else {
                      // Golden section step.
                      if (x < m) {
                          e = b - x;
                      } else {
                          e = a - x;
                      }
                      d = GOLDEN_SECTION * e;
                  }

                  // Update by at least "tol1".
                  if (FastMath.abs(d) < tol1) {
                      if (d >= 0) {
                          u = x + tol1;
                      } else {
                          u = x - tol1;
                      }
                  } else {
                      u = x + d;
                  }

                  double fu = computeObjectiveValue(u);
                  if (!isMinim) {
                      fu = -fu;
                  }

                  // User-defined convergence checker.
                  previous = current;
                  current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);

                  if (checker != null) {
                      if (checker.converged(iter, previous, current)) {
                          return best(current, previous, isMinim);
                      }
                  }

                  // Update a, b, v, w and x.
                  if (fu <= fx) {
                      if (u < x) {
                          b = x;
                      } else {
                          a = x;
                      }
                      v = w;
                      fv = fw;
                      w = x;
                      fw = fx;
                      x = u;
                      fx = fu;
                  } else {
                      if (u < x) {
                          a = u;
                      } else {
                          b = u;
                      }
                      if (fu <= fw ||
                          Precision.equals(w, x)) {
                          v = w;
                          fv = fw;
                          w = u;
                          fw = fu;
                      } else if (fu <= fv ||
                                 Precision.equals(v, x) ||
                                 Precision.equals(v, w)) {
                          v = u;
                          fv = fu;
                      }
                  }
              } else { // Default termination (Brent's criterion).
                  return
                              best(current,
                                   previous,
                              isMinim);
              }
              ++iter;
          }

  New cluster:
  ===
  delete-node
  ---
  local_variable_declaration: UnivariatePointValuePair best = current; [5509,5549]
  ===
  ------------
  ===
  delete-node
  ---
  local_variable_declaration: UnivariatePointValuePair best = current; [5509,5549]
  ===

...
