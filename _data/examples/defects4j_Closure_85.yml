---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: UnreachableCodeElimination
        children: []
        pos: 1877
        length: 26
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: |-
              private static final Logger logger =
                  Logger.getLogger(UnreachableCodeElimination.class.getName());
          children: []
          pos: 1987
          length: 102
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 2093
          length: 40
        - type: field_declaration
          fields:
            text: private final boolean removeNoOpStatements;
          children: []
          pos: 2136
          length: 43
        - type: field_declaration
          fields:
            text: |-
              Deque<ControlFlowGraph<Node>> cfgStack =
                    new LinkedList<ControlFlowGraph<Node>>();
          children: []
          pos: 2183
          length: 88
        - type: field_declaration
          fields:
            text: ControlFlowGraph<Node> curCfg = null;
          children: []
          pos: 2275
          length: 37
        - type: constructor_declaration
          fields:
            text: |-
              UnreachableCodeElimination(AbstractCompiler compiler,
                    boolean removeNoOpStatements) {
                  this.compiler = compiler;
                  this.removeNoOpStatements = removeNoOpStatements;
                }
          children: []
          pos: 2316
          length: 179
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: enterScope
              children: []
              pos: 2523
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 2534
                length: 15
              pos: 2499
              length: 421
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Scope scope = t.getScope();
                children: []
                pos: 2557
                length: 27
              - type: local_variable_declaration
                fields:
                  text: ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler,
                    false, false);
                children: []
                pos: 2630
                length: 74
              - type: expression_statement
                fields:
                  text: cfa.process(null, scope.getRootNode());
                children: []
                pos: 2709
                length: 39
              - type: expression_statement
                fields:
                  text: cfgStack.push(curCfg);
                children: []
                pos: 2753
                length: 22
              - type: expression_statement
                fields:
                  text: curCfg = cfa.getCfg();
                children: []
                pos: 2780
                length: 22
              - type: expression_statement
                fields:
                  text: |-
                    new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg)
                            .compute(curCfg.getEntry().getValue());
                children: []
                pos: 2808
                length: 108
              pos: 2551
              length: 369
          children: []
          pos: 2499
          length: 421
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exitScope
              children: []
              pos: 2948
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 2958
                length: 15
              pos: 2924
              length: 85
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: curCfg = cfgStack.pop();
                children: []
                pos: 2981
                length: 24
              pos: 2975
              length: 34
          children: []
          pos: 2924
          length: 85
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 3037
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 3045
                length: 12
              pos: 3013
              length: 112
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: NodeTraversal.traverse(compiler, root, this);
                children: []
                pos: 3076
                length: 45
              pos: 3070
              length: 55
          children: []
          pos: 3013
          length: 112
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 3153
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 3159
                length: 15
              pos: 3129
              length: 576
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parent
                            children: []
                            pos: 3207
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 3217
                            length: 4
                        children: []
                        pos: 3207
                        length: 14
                    children: []
                    pos: 3206
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 3231
                    length: 7
                  pos: 3223
                  length: 21
                pos: 3203
                length: 41
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.getType()
                                children: []
                                pos: 3253
                                length: 11
                              right:
                                type: field_access
                                fields:
                                  text: Token.FUNCTION
                                children: []
                                pos: 3268
                                length: 14
                            children: []
                            pos: 3253
                            length: 29
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.getType()
                                children: []
                                pos: 3286
                                length: 11
                              right:
                                type: field_access
                                fields:
                                  text: Token.SCRIPT
                                children: []
                                pos: 3301
                                length: 12
                            children: []
                            pos: 3286
                            length: 27
                        children: []
                        pos: 3253
                        length: 60
                    children: []
                    pos: 3252
                    length: 62
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 3323
                    length: 7
                  pos: 3315
                  length: 21
                pos: 3249
                length: 87
              - type: local_variable_declaration
                fields:
                  text: DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
                children: []
                pos: 3342
                length: 65
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: gNode
                            children: []
                            pos: 3416
                            length: 5
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 3425
                            length: 4
                        children: []
                        pos: 3416
                        length: 13
                    children: []
                    pos: 3415
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 3454
                    length: 7
                  pos: 3431
                  length: 36
                pos: 3412
                length: 55
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: gNode.getAnnotation()
                                children: []
                                pos: 3476
                                length: 21
                              right:
                                type: field_access
                                fields:
                                  text: GraphReachability.REACHABLE
                                children: []
                                pos: 3501
                                length: 27
                            children: []
                            pos: 3476
                            length: 52
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: removeNoOpStatements
                                    children: []
                                    pos: 3541
                                    length: 20
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!NodeUtil.mayHaveSideEffects(n)"
                                    children: []
                                    pos: 3565
                                    length: 31
                                children: []
                                pos: 3541
                                length: 55
                            children: []
                            pos: 3540
                            length: 57
                        children: []
                        pos: 3476
                        length: 121
                    children: []
                    pos: 3475
                    length: 123
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: removeDeadExprStatementSafely(n);
                    children: []
                    pos: 3607
                    length: 33
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 3647
                    length: 7
                  pos: 3599
                  length: 61
                pos: 3472
                length: 188
              - type: expression_statement
                fields:
                  text: tryRemoveUnconditionalBranching(n);
                children: []
                pos: 3666
                length: 35
              pos: 3197
              length: 508
          children: []
          pos: 3129
          length: 576
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tryRemoveUnconditionalBranching
              children: []
              pos: 4682
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 4714
                length: 6
              pos: 4634
              length: 1775
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 5234
                            length: 1
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 5239
                            length: 4
                        children: []
                        pos: 5234
                        length: 9
                    children: []
                    pos: 5233
                    length: 11
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return n;
                    children: []
                    pos: 5254
                    length: 9
                  pos: 5245
                  length: 24
                pos: 5230
                length: 39
              - type: local_variable_declaration
                fields:
                  text: DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
                children: []
                pos: 5275
                length: 65
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: gNode
                            children: []
                            pos: 5350
                            length: 5
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 5359
                            length: 4
                        children: []
                        pos: 5350
                        length: 13
                    children: []
                    pos: 5349
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return n;
                    children: []
                    pos: 5373
                    length: 9
                  pos: 5365
                  length: 23
                pos: 5346
                length: 42
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 5402
                        length: 11
                    children: []
                    pos: 5401
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.RETURN:
                                if (n.hasChildren()) {
                                  break;
                                }
                              case Token.BREAK:
                              case Token.CONTINUE:

                                // We are looking for a control flow changing statement that always
                                // branches to the same node. If removing it the control flow still
                                // branches to that same node. It is safe to remove it.
                                List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
                                if (outEdges.size() == 1 &&
                                    // If there is a next node, there is no chance this jump is useless.
                                    (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {

                                  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
                                  Node fallThrough = computeFollowing(n);
                                  Node nextCfgNode = outEdges.get(0).getDestination().getValue();
                                  if (nextCfgNode == fallThrough) {
                                    removeDeadExprStatementSafely(n);
                                    return fallThrough;
                                  }
                                }
                            }
                    children: []
                    pos: 5415
                    length: 976
                children: []
                pos: 5394
                length: 997
              - type: return_statement
                fields:
                  text: return n;
                children: []
                pos: 6396
                length: 9
              pos: 4722
              length: 1687
          children: []
          pos: 4634
          length: 1775
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFollowing
              children: []
              pos: 6426
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 6443
                length: 6
              pos: 6413
              length: 315
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node next = ControlFlowAnalysis.computeFollowNode(n);
                children: []
                pos: 6457
                length: 53
              - type: while_statement
                fields:
                  text: |-
                    while (next != null && next.getType() == Token.BLOCK) {
                          if (next.hasChildren()) {
                            next = next.getFirstChild();
                          } else {
                            next = computeFollowing(next);
                          }
                        }
                children: []
                pos: 6515
                length: 192
              - type: return_statement
                fields:
                  text: return next;
                children: []
                pos: 6712
                length: 12
              pos: 6451
              length: 277
          children: []
          pos: 6413
          length: 315
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: removeDeadExprStatementSafely
              children: []
              pos: 6745
              length: 29
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 6775
                length: 6
              pos: 6732
              length: 1197
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node parent = n.getParent();
                children: []
                pos: 6789
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.getType()
                                children: []
                                pos: 6826
                                length: 11
                              right:
                                type: field_access
                                fields:
                                  text: Token.EMPTY
                                children: []
                                pos: 6841
                                length: 11
                            children: []
                            pos: 6826
                            length: 26
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: equals
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: n.getType()
                                        children: []
                                        pos: 6865
                                        length: 11
                                      right:
                                        type: field_access
                                        fields:
                                          text: Token.BLOCK
                                        children: []
                                        pos: 6880
                                        length: 11
                                    children: []
                                    pos: 6865
                                    length: 26
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!n.hasChildren()"
                                    children: []
                                    pos: 6895
                                    length: 16
                                children: []
                                pos: 6865
                                length: 46
                            children: []
                            pos: 6864
                            length: 48
                        children: []
                        pos: 6826
                        length: 86
                    children: []
                    pos: 6825
                    length: 88
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 7000
                    length: 7
                  pos: 6914
                  length: 99
                pos: 6822
                length: 191
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 7027
                        length: 11
                    children: []
                    pos: 7026
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              // Removing an unreachable DO node is messy because it means we still have
                              // to execute one iteration. If the DO's body has breaks in the middle, it
                              // can get even more trickier and code size might actually increase.
                              case Token.DO:
                                return;

                              case Token.BLOCK:
                                // BLOCKs are used in several ways including wrapping CATCH blocks in TRYs
                                if (parent.getType() == Token.TRY) {
                                  if (NodeUtil.isTryCatchNodeContainer(n)) {
                                    return;
                                  }
                                }
                                break;

                              case Token.CATCH:
                                Node tryNode = parent.getParent();
                                NodeUtil.maybeAddFinally(tryNode);
                                break;
                            }
                    children: []
                    pos: 7040
                    length: 670
                children: []
                pos: 7019
                length: 691
              - type: expression_statement
                fields:
                  text: NodeUtil.redeclareVarsInsideBranch(n);
                children: []
                pos: 7716
                length: 38
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 7759
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: logger.isLoggable(Level.FINE)
                        children: []
                        pos: 7796
                        length: 29
                    children: []
                    pos: 7795
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: logger.fine("Removing " + n.toString());
                    children: []
                    pos: 7835
                    length: 40
                  pos: 7827
                  length: 54
                pos: 7792
                length: 89
              - type: expression_statement
                fields:
                  text: NodeUtil.removeChild(n.getParent(), n);
                children: []
                pos: 7886
                length: 39
              pos: 6783
              length: 1146
          children: []
          pos: 6732
          length: 1197
        pos: 1871
        length: 6060
    children: []
    pos: 1871
    length: 6060
  pos: 0
  length: 7932
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: UnreachableCodeElimination
        children: []
        pos: 1877
        length: 26
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: |-
              private static final Logger logger =
                  Logger.getLogger(UnreachableCodeElimination.class.getName());
          children: []
          pos: 1987
          length: 102
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 2093
          length: 40
        - type: field_declaration
          fields:
            text: private final boolean removeNoOpStatements;
          children: []
          pos: 2136
          length: 43
        - type: field_declaration
          fields:
            text: |-
              Deque<ControlFlowGraph<Node>> cfgStack =
                    new LinkedList<ControlFlowGraph<Node>>();
          children: []
          pos: 2183
          length: 88
        - type: field_declaration
          fields:
            text: ControlFlowGraph<Node> curCfg = null;
          children: []
          pos: 2275
          length: 37
        - type: constructor_declaration
          fields:
            text: |-
              UnreachableCodeElimination(AbstractCompiler compiler,
                    boolean removeNoOpStatements) {
                  this.compiler = compiler;
                  this.removeNoOpStatements = removeNoOpStatements;
                }
          children: []
          pos: 2316
          length: 179
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: enterScope
              children: []
              pos: 2523
              length: 10
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 2534
                length: 15
              pos: 2499
              length: 421
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Scope scope = t.getScope();
                children: []
                pos: 2557
                length: 27
              - type: local_variable_declaration
                fields:
                  text: ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler,
                    false, false);
                children: []
                pos: 2630
                length: 74
              - type: expression_statement
                fields:
                  text: cfa.process(null, scope.getRootNode());
                children: []
                pos: 2709
                length: 39
              - type: expression_statement
                fields:
                  text: cfgStack.push(curCfg);
                children: []
                pos: 2753
                length: 22
              - type: expression_statement
                fields:
                  text: curCfg = cfa.getCfg();
                children: []
                pos: 2780
                length: 22
              - type: expression_statement
                fields:
                  text: |-
                    new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg)
                            .compute(curCfg.getEntry().getValue());
                children: []
                pos: 2808
                length: 108
              pos: 2551
              length: 369
          children: []
          pos: 2499
          length: 421
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: exitScope
              children: []
              pos: 2948
              length: 9
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 2958
                length: 15
              pos: 2924
              length: 85
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: curCfg = cfgStack.pop();
                children: []
                pos: 2981
                length: 24
              pos: 2975
              length: 34
          children: []
          pos: 2924
          length: 85
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 3037
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 3045
                length: 12
              pos: 3013
              length: 112
            body:
              type: block
              fields: {}
              children:
              - type: expression_statement
                fields:
                  text: NodeTraversal.traverse(compiler, root, this);
                children: []
                pos: 3076
                length: 45
              pos: 3070
              length: 55
          children: []
          pos: 3013
          length: 112
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: visit
              children: []
              pos: 3153
              length: 5
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: NodeTraversal t
                children: []
                pos: 3159
                length: 15
              pos: 3129
              length: 576
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: parent
                            children: []
                            pos: 3207
                            length: 6
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 3217
                            length: 4
                        children: []
                        pos: 3207
                        length: 14
                    children: []
                    pos: 3206
                    length: 16
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 3231
                    length: 7
                  pos: 3223
                  length: 21
                pos: 3203
                length: 41
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.getType()
                                children: []
                                pos: 3253
                                length: 11
                              right:
                                type: field_access
                                fields:
                                  text: Token.FUNCTION
                                children: []
                                pos: 3268
                                length: 14
                            children: []
                            pos: 3253
                            length: 29
                          right:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.getType()
                                children: []
                                pos: 3286
                                length: 11
                              right:
                                type: field_access
                                fields:
                                  text: Token.SCRIPT
                                children: []
                                pos: 3301
                                length: 12
                            children: []
                            pos: 3286
                            length: 27
                        children: []
                        pos: 3253
                        length: 60
                    children: []
                    pos: 3252
                    length: 62
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 3323
                    length: 7
                  pos: 3315
                  length: 21
                pos: 3249
                length: 87
              - type: local_variable_declaration
                fields:
                  text: DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
                children: []
                pos: 3342
                length: 65
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: gNode
                            children: []
                            pos: 3416
                            length: 5
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 3425
                            length: 4
                        children: []
                        pos: 3416
                        length: 13
                    children: []
                    pos: 3415
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 3454
                    length: 7
                  pos: 3431
                  length: 36
                pos: 3412
                length: 55
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: not_equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: gNode.getAnnotation()
                                children: []
                                pos: 3476
                                length: 21
                              right:
                                type: field_access
                                fields:
                                  text: GraphReachability.REACHABLE
                                children: []
                                pos: 3501
                                length: 27
                            children: []
                            pos: 3476
                            length: 52
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: identifier
                                    fields:
                                      text: removeNoOpStatements
                                    children: []
                                    pos: 3541
                                    length: 20
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!NodeUtil.mayHaveSideEffects(n)"
                                    children: []
                                    pos: 3565
                                    length: 31
                                children: []
                                pos: 3541
                                length: 55
                            children: []
                            pos: 3540
                            length: 57
                        children: []
                        pos: 3476
                        length: 121
                    children: []
                    pos: 3475
                    length: 123
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: removeDeadExprStatementSafely(n);
                    children: []
                    pos: 3607
                    length: 33
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 3647
                    length: 7
                  pos: 3599
                  length: 61
                pos: 3472
                length: 188
              - type: expression_statement
                fields:
                  text: tryRemoveUnconditionalBranching(n);
                children: []
                pos: 3666
                length: 35
              pos: 3197
              length: 508
          children: []
          pos: 3129
          length: 576
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: tryRemoveUnconditionalBranching
              children: []
              pos: 4682
              length: 31
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 4714
                length: 6
              pos: 4634
              length: 2324
            body:
              type: block
              fields: {}
              children:
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: "n"
                            children: []
                            pos: 5234
                            length: 1
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 5239
                            length: 4
                        children: []
                        pos: 5234
                        length: 9
                    children: []
                    pos: 5233
                    length: 11
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return n;
                    children: []
                    pos: 5254
                    length: 9
                  pos: 5245
                  length: 24
                pos: 5230
                length: 39
              - type: local_variable_declaration
                fields:
                  text: DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
                children: []
                pos: 5275
                length: 65
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: identifier
                            fields:
                              text: gNode
                            children: []
                            pos: 5350
                            length: 5
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 5359
                            length: 4
                        children: []
                        pos: 5350
                        length: 13
                    children: []
                    pos: 5349
                    length: 15
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return n;
                    children: []
                    pos: 5373
                    length: 9
                  pos: 5365
                  length: 23
                pos: 5346
                length: 42
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: equals
                        fields:
                          left:
                            type: method_invocation
                            fields:
                              text: n.getParent()
                            children: []
                            pos: 5398
                            length: 13
                          right:
                            type: null_literal
                            fields: {}
                            children: []
                            pos: 5415
                            length: 4
                        children: []
                        pos: 5398
                        length: 21
                    children: []
                    pos: 5397
                    length: 23
                children:
                - type: block
                  fields: {}
                  children:
                  - type: local_variable_declaration
                    fields:
                      text: List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
                    children: []
                    pos: 5429
                    length: 62
                  - type: if_statement
                    fields:
                      condition:
                        type: parenthesized_expression
                        fields:
                          expression:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: outEdges.size()
                                children: []
                                pos: 5502
                                length: 15
                              right:
                                type: decimal_integer_literal
                                fields:
                                  text: '1'
                                children: []
                                pos: 5521
                                length: 1
                            children: []
                            pos: 5502
                            length: 20
                        children: []
                        pos: 5501
                        length: 22
                    children:
                    - type: block
                      fields: {}
                      children:
                      - type: return_statement
                        fields:
                          text: return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());
                        children: []
                        pos: 5534
                        length: 84
                      pos: 5524
                      length: 102
                    pos: 5498
                    length: 128
                  pos: 5421
                  length: 211
                pos: 5394
                length: 238
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 5645
                        length: 11
                    children: []
                    pos: 5644
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              case Token.BLOCK:
                                if (n.hasChildren()) {
                                  Node first = n.getFirstChild();
                                  return tryRemoveUnconditionalBranching(first);
                                } else {
                                  return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
                                }
                              case Token.RETURN:
                                if (n.hasChildren()) {
                                  break;
                                }
                              case Token.BREAK:
                              case Token.CONTINUE:

                                // We are looking for a control flow changing statement that always
                                // branches to the same node. If removing it the control flow still
                                // branches to that same node. It is safe to remove it.
                                List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
                                if (outEdges.size() == 1 &&
                                    // If there is a next node, there is no chance this jump is useless.
                                    (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {

                                  Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
                                  Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
                                  Node nextCfgNode = outEdges.get(0).getDestination().getValue();
                                  if (nextCfgNode == fallThrough) {
                                    removeDeadExprStatementSafely(n);
                                    return fallThrough;
                                  }
                                }
                            }
                    children: []
                    pos: 5658
                    length: 1282
                children: []
                pos: 5637
                length: 1303
              - type: return_statement
                fields:
                  text: return n;
                children: []
                pos: 6945
                length: 9
              pos: 4722
              length: 2236
          children: []
          pos: 4634
          length: 2324
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: computeFollowing
              children: []
              pos: 6975
              length: 16
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 6992
                length: 6
              pos: 6962
              length: 118
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node next = ControlFlowAnalysis.computeFollowNode(n);
                children: []
                pos: 7006
                length: 53
              - type: return_statement
                fields:
                  text: return next;
                children: []
                pos: 7064
                length: 12
              pos: 7000
              length: 80
          children: []
          pos: 6962
          length: 118
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: removeDeadExprStatementSafely
              children: []
              pos: 7097
              length: 29
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node n
                children: []
                pos: 7127
                length: 6
              pos: 7084
              length: 1197
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Node parent = n.getParent();
                children: []
                pos: 7141
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: or
                        fields:
                          left:
                            type: equals
                            fields:
                              left:
                                type: method_invocation
                                fields:
                                  text: n.getType()
                                children: []
                                pos: 7178
                                length: 11
                              right:
                                type: field_access
                                fields:
                                  text: Token.EMPTY
                                children: []
                                pos: 7193
                                length: 11
                            children: []
                            pos: 7178
                            length: 26
                          right:
                            type: parenthesized_expression
                            fields:
                              expression:
                                type: and
                                fields:
                                  left:
                                    type: equals
                                    fields:
                                      left:
                                        type: method_invocation
                                        fields:
                                          text: n.getType()
                                        children: []
                                        pos: 7217
                                        length: 11
                                      right:
                                        type: field_access
                                        fields:
                                          text: Token.BLOCK
                                        children: []
                                        pos: 7232
                                        length: 11
                                    children: []
                                    pos: 7217
                                    length: 26
                                  right:
                                    type: unary_expression
                                    fields:
                                      text: "!n.hasChildren()"
                                    children: []
                                    pos: 7247
                                    length: 16
                                children: []
                                pos: 7217
                                length: 46
                            children: []
                            pos: 7216
                            length: 48
                        children: []
                        pos: 7178
                        length: 86
                    children: []
                    pos: 7177
                    length: 88
                children:
                - type: block
                  fields: {}
                  children:
                  - type: return_statement
                    fields:
                      text: return;
                    children: []
                    pos: 7352
                    length: 7
                  pos: 7266
                  length: 99
                pos: 7174
                length: 191
              - type: switch_expression
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: n.getType()
                        children: []
                        pos: 7379
                        length: 11
                    children: []
                    pos: 7378
                    length: 13
                  body:
                    type: switch_block
                    fields:
                      text: |-
                        {
                              // Removing an unreachable DO node is messy because it means we still have
                              // to execute one iteration. If the DO's body has breaks in the middle, it
                              // can get even more trickier and code size might actually increase.
                              case Token.DO:
                                return;

                              case Token.BLOCK:
                                // BLOCKs are used in several ways including wrapping CATCH blocks in TRYs
                                if (parent.getType() == Token.TRY) {
                                  if (NodeUtil.isTryCatchNodeContainer(n)) {
                                    return;
                                  }
                                }
                                break;

                              case Token.CATCH:
                                Node tryNode = parent.getParent();
                                NodeUtil.maybeAddFinally(tryNode);
                                break;
                            }
                    children: []
                    pos: 7392
                    length: 670
                children: []
                pos: 7371
                length: 691
              - type: expression_statement
                fields:
                  text: NodeUtil.redeclareVarsInsideBranch(n);
                children: []
                pos: 8068
                length: 38
              - type: expression_statement
                fields:
                  text: compiler.reportCodeChange();
                children: []
                pos: 8111
                length: 28
              - type: if_statement
                fields:
                  condition:
                    type: parenthesized_expression
                    fields:
                      expression:
                        type: method_invocation
                        fields:
                          text: logger.isLoggable(Level.FINE)
                        children: []
                        pos: 8148
                        length: 29
                    children: []
                    pos: 8147
                    length: 31
                children:
                - type: block
                  fields: {}
                  children:
                  - type: expression_statement
                    fields:
                      text: logger.fine("Removing " + n.toString());
                    children: []
                    pos: 8187
                    length: 40
                  pos: 8179
                  length: 54
                pos: 8144
                length: 89
              - type: expression_statement
                fields:
                  text: NodeUtil.removeChild(n.getParent(), n);
                children: []
                pos: 8238
                length: 39
              pos: 7135
              length: 1146
          children: []
          pos: 7084
          length: 1197
        pos: 1871
        length: 6412
    children: []
    pos: 1871
    length: 6412
  pos: 0
  length: 8284
text_diff: "--- before\n+++ after\n@@ -150,7 +150,20 @@\n       return n;\n     }\n
  \n+    if (n.getParent() == null) {\n+      List<DiGraphEdge<Node,Branch>> outEdges
  = gNode.getOutEdges();\n+      if (outEdges.size() == 1) {\n+        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());\n+
  \     }\n+    }\n     switch (n.getType()) {\n+      case Token.BLOCK:\n+        if
  (n.hasChildren()) {\n+          Node first = n.getFirstChild();\n+          return
  tryRemoveUnconditionalBranching(first);\n+        } else {\n+          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));\n+
  \       }\n       case Token.RETURN:\n         if (n.hasChildren()) {\n           break;\n@@
  -167,7 +180,7 @@\n             (n.getNext() == null || n.getNext().getType() ==
  Token.FUNCTION)) {\n \n           Preconditions.checkState(outEdges.get(0).getValue()
  == Branch.UNCOND);\n-          Node fallThrough = computeFollowing(n);\n+          Node
  fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));\n           Node
  nextCfgNode = outEdges.get(0).getDestination().getValue();\n           if (nextCfgNode
  == fallThrough) {\n             removeDeadExprStatementSafely(n);\n@@ -180,13 +193,6
  @@\n \n   private Node computeFollowing(Node n) {\n     Node next = ControlFlowAnalysis.computeFollowNode(n);\n-
  \   while (next != null && next.getType() == Token.BLOCK) {\n-      if (next.hasChildren())
  {\n-        next = next.getFirstChild();\n-      } else {\n-        next = computeFollowing(next);\n-
  \     }\n-    }\n     return next;\n   }\n \n"
tree_diff: |+
  New cluster:
  Unknown cluster type
  ------------
  ===
  insert-tree
  ---
  if_statement [5394,5632]
      parenthesized_expression [5397,5420]
          equals [5398,5419]
              method_invocation: n.getParent() [5398,5411]
              null_literal [5415,5419]
      block [5421,5632]
          local_variable_declaration: List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges(); [5429,5491]
          if_statement [5498,5626]
              parenthesized_expression [5501,5523]
                  equals [5502,5522]
                      method_invocation: outEdges.size() [5502,5517]
                      decimal_integer_literal: 1 [5521,5522]
              block [5524,5626]
                  return_statement: return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue()); [5534,5618]
  to
  block [4722,6409]
  at 3

  New cluster:
  UPDATE from {
        case Token.RETURN:
          if (n.hasChildren()) {
            break;
          }
        case Token.BREAK:
        case Token.CONTINUE:

          // We are looking for a control flow changing statement that always
          // branches to the same node. If removing it the control flow still
          // branches to that same node. It is safe to remove it.
          List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
          if (outEdges.size() == 1 &&
              // If there is a next node, there is no chance this jump is useless.
              (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {

            Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
            Node fallThrough = computeFollowing(n);
            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
            if (nextCfgNode == fallThrough) {
              removeDeadExprStatementSafely(n);
              return fallThrough;
            }
          }
      } to {
        case Token.BLOCK:
          if (n.hasChildren()) {
            Node first = n.getFirstChild();
            return tryRemoveUnconditionalBranching(first);
          } else {
            return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
          }
        case Token.RETURN:
          if (n.hasChildren()) {
            break;
          }
        case Token.BREAK:
        case Token.CONTINUE:

          // We are looking for a control flow changing statement that always
          // branches to the same node. If removing it the control flow still
          // branches to that same node. It is safe to remove it.
          List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
          if (outEdges.size() == 1 &&
              // If there is a next node, there is no chance this jump is useless.
              (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {

            Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
            Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
            if (nextCfgNode == fallThrough) {
              removeDeadExprStatementSafely(n);
              return fallThrough;
            }
          }
      }
  ------------
  ===
  update-node
  ---
  switch_block: {
        case Token.RETURN:
          if (n.hasChildren()) {
            break;
          }
        case Token.BREAK:
        case Token.CONTINUE:

          // We are looking for a control flow changing statement that always
          // branches to the same node. If removing it the control flow still
          // branches to that same node. It is safe to remove it.
          List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
          if (outEdges.size() == 1 &&
              // If there is a next node, there is no chance this jump is useless.
              (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {

            Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
            Node fallThrough = computeFollowing(n);
            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
            if (nextCfgNode == fallThrough) {
              removeDeadExprStatementSafely(n);
              return fallThrough;
            }
          }
      } [5415,6391]
  replace {
        case Token.RETURN:
          if (n.hasChildren()) {
            break;
          }
        case Token.BREAK:
        case Token.CONTINUE:

          // We are looking for a control flow changing statement that always
          // branches to the same node. If removing it the control flow still
          // branches to that same node. It is safe to remove it.
          List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
          if (outEdges.size() == 1 &&
              // If there is a next node, there is no chance this jump is useless.
              (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {

            Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
            Node fallThrough = computeFollowing(n);
            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
            if (nextCfgNode == fallThrough) {
              removeDeadExprStatementSafely(n);
              return fallThrough;
            }
          }
      } by {
        case Token.BLOCK:
          if (n.hasChildren()) {
            Node first = n.getFirstChild();
            return tryRemoveUnconditionalBranching(first);
          } else {
            return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));
          }
        case Token.RETURN:
          if (n.hasChildren()) {
            break;
          }
        case Token.BREAK:
        case Token.CONTINUE:

          // We are looking for a control flow changing statement that always
          // branches to the same node. If removing it the control flow still
          // branches to that same node. It is safe to remove it.
          List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
          if (outEdges.size() == 1 &&
              // If there is a next node, there is no chance this jump is useless.
              (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {

            Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
            Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
            Node nextCfgNode = outEdges.get(0).getDestination().getValue();
            if (nextCfgNode == fallThrough) {
              removeDeadExprStatementSafely(n);
              return fallThrough;
            }
          }
      }

  New cluster:
  ===
  delete-node
  ---
  while_statement: while (next != null && next.getType() == Token.BLOCK) {
        if (next.hasChildren()) {
          next = next.getFirstChild();
        } else {
          next = computeFollowing(next);
        }
      } [6515,6707]
  ===
  ------------
  ===
  delete-node
  ---
  while_statement: while (next != null && next.getType() == Token.BLOCK) {
        if (next.hasChildren()) {
          next = next.getFirstChild();
        } else {
          next = computeFollowing(next);
        }
      } [6515,6707]
  ===

...
