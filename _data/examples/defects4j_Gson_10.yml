---
language: java
text_diff: |
  --- before
  +++ after
  @@ -119,8 +119,8 @@
         @Override void write(JsonWriter writer, Object value)
             throws IOException, IllegalAccessException {
           Object fieldValue = field.get(value);
  -        TypeAdapter t = jsonAdapterPresent ? typeAdapter
  -            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
  +        TypeAdapter t =
  +          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
           t.write(writer, fieldValue);
         }
         @Override void read(JsonReader reader, Object value)
tree_diff: |+
  New cluster:
  UPDATE from return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
        @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
        @Override void write(JsonWriter writer, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = field.get(value);
          TypeAdapter t = jsonAdapterPresent ? typeAdapter
              : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
          t.write(writer, fieldValue);
        }
        @Override void read(JsonReader reader, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = typeAdapter.read(reader);
          if (fieldValue != null || !isPrimitive) {
            field.set(value, fieldValue);
          }
        }
        @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
          if (!serialized) return false;
          Object fieldValue = field.get(value);
          return fieldValue != value; // avoid recursion for example for Throwable.cause
        }
      }; to return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
        @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
        @Override void write(JsonWriter writer, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = field.get(value);
          TypeAdapter t =
            new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
          t.write(writer, fieldValue);
        }
        @Override void read(JsonReader reader, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = typeAdapter.read(reader);
          if (fieldValue != null || !isPrimitive) {
            field.set(value, fieldValue);
          }
        }
        @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
          if (!serialized) return false;
          Object fieldValue = field.get(value);
          return fieldValue != value; // avoid recursion for example for Throwable.cause
        }
      };
  ------------
  ===
  update-node
  ---
  return_statement: return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
        @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
        @Override void write(JsonWriter writer, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = field.get(value);
          TypeAdapter t = jsonAdapterPresent ? typeAdapter
              : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
          t.write(writer, fieldValue);
        }
        @Override void read(JsonReader reader, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = typeAdapter.read(reader);
          if (fieldValue != null || !isPrimitive) {
            field.set(value, fieldValue);
          }
        }
        @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
          if (!serialized) return false;
          Object fieldValue = field.get(value);
          return fieldValue != value; // avoid recursion for example for Throwable.cause
        }
      }; [4415,5515]
  replace return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
        @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
        @Override void write(JsonWriter writer, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = field.get(value);
          TypeAdapter t = jsonAdapterPresent ? typeAdapter
              : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
          t.write(writer, fieldValue);
        }
        @Override void read(JsonReader reader, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = typeAdapter.read(reader);
          if (fieldValue != null || !isPrimitive) {
            field.set(value, fieldValue);
          }
        }
        @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
          if (!serialized) return false;
          Object fieldValue = field.get(value);
          return fieldValue != value; // avoid recursion for example for Throwable.cause
        }
      }; by return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
        @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
        @Override void write(JsonWriter writer, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = field.get(value);
          TypeAdapter t =
            new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
          t.write(writer, fieldValue);
        }
        @Override void read(JsonReader reader, Object value)
            throws IOException, IllegalAccessException {
          Object fieldValue = typeAdapter.read(reader);
          if (fieldValue != null || !isPrimitive) {
            field.set(value, fieldValue);
          }
        }
        @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
          if (!serialized) return false;
          Object fieldValue = field.get(value);
          return fieldValue != value; // avoid recursion for example for Throwable.cause
        }
      };

...
