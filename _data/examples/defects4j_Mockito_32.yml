---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SpyAnnotationEngine
        children: []
        pos: 646
        length: 19
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createMockFor
              children: []
              pos: 717
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Annotation annotation
                children: []
                pos: 731
                length: 21
              pos: 703
              length: 94
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return null;
                children: []
                pos: 778
                length: 12
              pos: 767
              length: 30
          children: []
          pos: 703
          length: 94
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 859
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> context
                children: []
                pos: 867
                length: 16
              pos: 809
              length: 1925
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Field[] fields = context.getDeclaredFields();
                children: []
                pos: 914
                length: 45
              - type: enhanced_for_statement
                fields:
                  text: "for (Field field : fields) {\r\n            if (field.isAnnotationPresent(Spy.class))
                    {\r\n                assertNoAnnotations(Spy.class, field, Mock.class,
                    org.mockito.MockitoAnnotations.Mock.class, Captor.class);\r\n
                    \               boolean wasAccessible = field.isAccessible();\r\n
                    \               field.setAccessible(true);\r\n                try
                    {\r\n                    Object instance = field.get(testClass);\r\n
                    \                   if (instance == null) {\r\n                        throw
                    new MockitoException(\"Cannot create a @Spy for '\" + field.getName()
                    + \"' field because the *instance* is missing\\n\" +\r\n                        \t\t
                    \ \"The instance must be created *before* initMocks();\\n\" +\r\n
                    \                                 \"Example of correct usage of
                    @Spy:\\n\" +\r\n                            \t  \"   @Spy List
                    mock = new LinkedList();\\n\" +\r\n                            \t
                    \ \"   //also, don't forget about MockitoAnnotations.initMocks();\");\r\n\r\n
                    \                   }\r\n                    if (new MockUtil().isMock(instance))
                    { \r\n                        // instance has been spied earlier\r\n
                    \                       Mockito.reset(instance);\r\n                    }
                    else {\r\n                        field.set(testClass, Mockito.mock(instance.getClass(),
                    withSettings()\r\n                                .spiedInstance(instance)\r\n
                    \                               .defaultAnswer(Mockito.CALLS_REAL_METHODS)\r\n
                    \                               .name(field.getName())));\r\n
                    \                   }\r\n                } catch (IllegalAccessException
                    e) {\r\n                    throw new MockitoException(\"Problems
                    initiating spied field \" + field.getName(), e);\r\n                }
                    finally {\r\n                    field.setAccessible(wasAccessible);\r\n
                    \               }\r\n            }\r\n        }"
                children: []
                pos: 969
                length: 1758
              pos: 903
              length: 1831
          children: []
          pos: 809
          length: 1925
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: assertNoAnnotations
              children: []
              pos: 2784
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class annotation
                children: []
                pos: 2804
                length: 16
              pos: 2779
              length: 363
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: "for (Class u : undesiredAnnotations) {\r\n            if
                    (field.isAnnotationPresent(u)) {\r\n                new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(),
                    annotation.getClass().getSimpleName());\r\n            }\r\n        }"
                children: []
                pos: 2878
                length: 249
              pos: 2867
              length: 275
          children: []
          pos: 2779
          length: 363
        pos: 599
        length: 2550
    children: []
    pos: 599
    length: 2550
  pos: 0
  length: 3151
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: SpyAnnotationEngine
        children: []
        pos: 597
        length: 19
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: createMockFor
              children: []
              pos: 668
              length: 13
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Annotation annotation
                children: []
                pos: 682
                length: 21
              pos: 654
              length: 94
            body:
              type: block
              fields: {}
              children:
              - type: return_statement
                fields:
                  text: return null;
                children: []
                pos: 729
                length: 12
              pos: 718
              length: 30
          children: []
          pos: 654
          length: 94
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 810
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class<?> context
                children: []
                pos: 818
                length: 16
              pos: 760
              length: 1707
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: Field[] fields = context.getDeclaredFields();
                children: []
                pos: 865
                length: 45
              - type: enhanced_for_statement
                fields:
                  text: "for (Field field : fields) {\r\n            if (field.isAnnotationPresent(Spy.class))
                    {\r\n                assertNoAnnotations(Spy.class, field, Mock.class,
                    org.mockito.MockitoAnnotations.Mock.class, Captor.class);\r\n
                    \               boolean wasAccessible = field.isAccessible();\r\n
                    \               field.setAccessible(true);\r\n                try
                    {\r\n                    Object instance = field.get(testClass);\r\n
                    \                   if (instance == null) {\r\n                        throw
                    new MockitoException(\"Cannot create a @Spy for '\" + field.getName()
                    + \"' field because the *instance* is missing\\n\" +\r\n                        \t\t
                    \ \"The instance must be created *before* initMocks();\\n\" +\r\n
                    \                                 \"Example of correct usage of
                    @Spy:\\n\" +\r\n                            \t  \"   @Spy List
                    mock = new LinkedList();\\n\" +\r\n                            \t
                    \ \"   //also, don't forget about MockitoAnnotations.initMocks();\");\r\n\r\n
                    \                   }\r\n                    if (new MockUtil().isMock(instance))
                    { \r\n                        // instance has been spied earlier\r\n
                    \                       Mockito.reset(instance);\r\n                    }
                    else {\r\n                        field.set(testClass, Mockito.spy(instance));\r\n
                    \                   }\r\n                } catch (IllegalAccessException
                    e) {\r\n                    throw new MockitoException(\"Problems
                    initiating spied field \" + field.getName(), e);\r\n                }
                    finally {\r\n                    field.setAccessible(wasAccessible);\r\n
                    \               }\r\n            }\r\n        }"
                children: []
                pos: 920
                length: 1540
              pos: 854
              length: 1613
          children: []
          pos: 760
          length: 1707
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: assertNoAnnotations
              children: []
              pos: 2517
              length: 19
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Class annotation
                children: []
                pos: 2537
                length: 16
              pos: 2512
              length: 363
            body:
              type: block
              fields: {}
              children:
              - type: enhanced_for_statement
                fields:
                  text: "for (Class u : undesiredAnnotations) {\r\n            if
                    (field.isAnnotationPresent(u)) {\r\n                new Reporter().unsupportedCombinationOfAnnotations(annotation.getSimpleName(),
                    annotation.getClass().getSimpleName());\r\n            }\r\n        }"
                children: []
                pos: 2611
                length: 249
              pos: 2600
              length: 275
          children: []
          pos: 2512
          length: 363
        pos: 550
        length: 2332
    children: []
    pos: 550
    length: 2332
  pos: 0
  length: 2884
text_diff: "--- before\n+++ after\n@@ -16,7 +16,6 @@\n import org.mockito.exceptions.base.MockitoException;\r\n
  import org.mockito.internal.util.MockUtil;\r\n \r\n-import static org.mockito.Mockito.withSettings;\r\n
  \r\n @SuppressWarnings({\"unchecked\"})\r\n public class SpyAnnotationEngine implements
  AnnotationEngine {\r\n@@ -47,10 +46,7 @@\n                         // instance has
  been spied earlier\r\n                         Mockito.reset(instance);\r\n                     }
  else {\r\n-                        field.set(testClass, Mockito.mock(instance.getClass(),
  withSettings()\r\n-                                .spiedInstance(instance)\r\n-
  \                               .defaultAnswer(Mockito.CALLS_REAL_METHODS)\r\n-
  \                               .name(field.getName())));\r\n+                        field.set(testClass,
  Mockito.spy(instance));\r\n                     }\r\n                 } catch (IllegalAccessException
  e) {\r\n                     throw new MockitoException(\"Problems initiating spied
  field \" + field.getName(), e);\r\n"
tree_diff: "New cluster:\nUPDATE from for (Field field : fields) {\r\n            if
  (field.isAnnotationPresent(Spy.class)) {\r\n                assertNoAnnotations(Spy.class,
  field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\r\n
  \               boolean wasAccessible = field.isAccessible();\r\n                field.setAccessible(true);\r\n
  \               try {\r\n                    Object instance = field.get(testClass);\r\n
  \                   if (instance == null) {\r\n                        throw new
  MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because
  the *instance* is missing\\n\" +\r\n                        \t\t  \"The instance
  must be created *before* initMocks();\\n\" +\r\n                                  \"Example
  of correct usage of @Spy:\\n\" +\r\n                            \t  \"   @Spy List
  mock = new LinkedList();\\n\" +\r\n                            \t  \"   //also,
  don't forget about MockitoAnnotations.initMocks();\");\r\n\r\n                    }\r\n
  \                   if (new MockUtil().isMock(instance)) { \r\n                        //
  instance has been spied earlier\r\n                        Mockito.reset(instance);\r\n
  \                   } else {\r\n                        field.set(testClass, Mockito.mock(instance.getClass(),
  withSettings()\r\n                                .spiedInstance(instance)\r\n                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)\r\n
  \                               .name(field.getName())));\r\n                    }\r\n
  \               } catch (IllegalAccessException e) {\r\n                    throw
  new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\r\n
  \               } finally {\r\n                    field.setAccessible(wasAccessible);\r\n
  \               }\r\n            }\r\n        } to for (Field field : fields) {\r\n
  \           if (field.isAnnotationPresent(Spy.class)) {\r\n                assertNoAnnotations(Spy.class,
  field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\r\n
  \               boolean wasAccessible = field.isAccessible();\r\n                field.setAccessible(true);\r\n
  \               try {\r\n                    Object instance = field.get(testClass);\r\n
  \                   if (instance == null) {\r\n                        throw new
  MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because
  the *instance* is missing\\n\" +\r\n                        \t\t  \"The instance
  must be created *before* initMocks();\\n\" +\r\n                                  \"Example
  of correct usage of @Spy:\\n\" +\r\n                            \t  \"   @Spy List
  mock = new LinkedList();\\n\" +\r\n                            \t  \"   //also,
  don't forget about MockitoAnnotations.initMocks();\");\r\n\r\n                    }\r\n
  \                   if (new MockUtil().isMock(instance)) { \r\n                        //
  instance has been spied earlier\r\n                        Mockito.reset(instance);\r\n
  \                   } else {\r\n                        field.set(testClass, Mockito.spy(instance));\r\n
  \                   }\r\n                } catch (IllegalAccessException e) {\r\n
  \                   throw new MockitoException(\"Problems initiating spied field
  \" + field.getName(), e);\r\n                } finally {\r\n                    field.setAccessible(wasAccessible);\r\n
  \               }\r\n            }\r\n        }\n------------\n===\nupdate-node\n---\nenhanced_for_statement:
  for (Field field : fields) {\r\n            if (field.isAnnotationPresent(Spy.class))
  {\r\n                assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class,
  Captor.class);\r\n                boolean wasAccessible = field.isAccessible();\r\n
  \               field.setAccessible(true);\r\n                try {\r\n                    Object
  instance = field.get(testClass);\r\n                    if (instance == null) {\r\n
  \                       throw new MockitoException(\"Cannot create a @Spy for '\"
  + field.getName() + \"' field because the *instance* is missing\\n\" +\r\n                        \t\t
  \ \"The instance must be created *before* initMocks();\\n\" +\r\n                                  \"Example
  of correct usage of @Spy:\\n\" +\r\n                            \t  \"   @Spy List
  mock = new LinkedList();\\n\" +\r\n                            \t  \"   //also,
  don't forget about MockitoAnnotations.initMocks();\");\r\n\r\n                    }\r\n
  \                   if (new MockUtil().isMock(instance)) { \r\n                        //
  instance has been spied earlier\r\n                        Mockito.reset(instance);\r\n
  \                   } else {\r\n                        field.set(testClass, Mockito.mock(instance.getClass(),
  withSettings()\r\n                                .spiedInstance(instance)\r\n                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)\r\n
  \                               .name(field.getName())));\r\n                    }\r\n
  \               } catch (IllegalAccessException e) {\r\n                    throw
  new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\r\n
  \               } finally {\r\n                    field.setAccessible(wasAccessible);\r\n
  \               }\r\n            }\r\n        } [969,2727]\nreplace for (Field field
  : fields) {\r\n            if (field.isAnnotationPresent(Spy.class)) {\r\n                assertNoAnnotations(Spy.class,
  field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\r\n
  \               boolean wasAccessible = field.isAccessible();\r\n                field.setAccessible(true);\r\n
  \               try {\r\n                    Object instance = field.get(testClass);\r\n
  \                   if (instance == null) {\r\n                        throw new
  MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because
  the *instance* is missing\\n\" +\r\n                        \t\t  \"The instance
  must be created *before* initMocks();\\n\" +\r\n                                  \"Example
  of correct usage of @Spy:\\n\" +\r\n                            \t  \"   @Spy List
  mock = new LinkedList();\\n\" +\r\n                            \t  \"   //also,
  don't forget about MockitoAnnotations.initMocks();\");\r\n\r\n                    }\r\n
  \                   if (new MockUtil().isMock(instance)) { \r\n                        //
  instance has been spied earlier\r\n                        Mockito.reset(instance);\r\n
  \                   } else {\r\n                        field.set(testClass, Mockito.mock(instance.getClass(),
  withSettings()\r\n                                .spiedInstance(instance)\r\n                                .defaultAnswer(Mockito.CALLS_REAL_METHODS)\r\n
  \                               .name(field.getName())));\r\n                    }\r\n
  \               } catch (IllegalAccessException e) {\r\n                    throw
  new MockitoException(\"Problems initiating spied field \" + field.getName(), e);\r\n
  \               } finally {\r\n                    field.setAccessible(wasAccessible);\r\n
  \               }\r\n            }\r\n        } by for (Field field : fields) {\r\n
  \           if (field.isAnnotationPresent(Spy.class)) {\r\n                assertNoAnnotations(Spy.class,
  field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);\r\n
  \               boolean wasAccessible = field.isAccessible();\r\n                field.setAccessible(true);\r\n
  \               try {\r\n                    Object instance = field.get(testClass);\r\n
  \                   if (instance == null) {\r\n                        throw new
  MockitoException(\"Cannot create a @Spy for '\" + field.getName() + \"' field because
  the *instance* is missing\\n\" +\r\n                        \t\t  \"The instance
  must be created *before* initMocks();\\n\" +\r\n                                  \"Example
  of correct usage of @Spy:\\n\" +\r\n                            \t  \"   @Spy List
  mock = new LinkedList();\\n\" +\r\n                            \t  \"   //also,
  don't forget about MockitoAnnotations.initMocks();\");\r\n\r\n                    }\r\n
  \                   if (new MockUtil().isMock(instance)) { \r\n                        //
  instance has been spied earlier\r\n                        Mockito.reset(instance);\r\n
  \                   } else {\r\n                        field.set(testClass, Mockito.spy(instance));\r\n
  \                   }\r\n                } catch (IllegalAccessException e) {\r\n
  \                   throw new MockitoException(\"Problems initiating spied field
  \" + field.getName(), e);\r\n                } finally {\r\n                    field.setAccessible(wasAccessible);\r\n
  \               }\r\n            }\r\n        }\n\n"
