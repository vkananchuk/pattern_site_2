---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: InlineObjectLiterals
        children: []
        pos: 1691
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final String VAR_PREFIX = "JSCompiler_object_inline_";
          children: []
          pos: 1741
          length: 68
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 1813
          length: 40
        - type: field_declaration
          fields:
            text: private final Supplier<String> safeNameIdSupplier;
          children: []
          pos: 1857
          length: 50
        - type: constructor_declaration
          fields:
            text: |-
              InlineObjectLiterals(
                    AbstractCompiler compiler,
                    Supplier<String> safeNameIdSupplier) {
                  this.compiler = compiler;
                  this.safeNameIdSupplier = safeNameIdSupplier;
                }
          children: []
          pos: 1911
          length: 183
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 2122
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 2130
                length: 12
              pos: 2098
              length: 218
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    ReferenceCollectingCallback callback = new ReferenceCollectingCallback(
                            compiler, new InliningBehavior());
                children: []
                pos: 2161
                length: 114
              - type: expression_statement
                fields:
                  text: callback.process(externs, root);
                children: []
                pos: 2280
                length: 32
              pos: 2155
              length: 161
          children: []
          pos: 2098
          length: 218
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: InliningBehavior
              children: []
              pos: 2501
              length: 16
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final Set<Var> staleVars = Sets.newHashSet();
                children: []
                pos: 2701
                length: 53
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: afterExitScope
                    children: []
                    pos: 2786
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 2801
                      length: 15
                    pos: 2760
                    length: 924
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: for_statement
                      fields:
                        text: |-
                          for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
                                  Var v = it.next();

                                  if (isVarInlineForbidden(v)) {
                                      continue;
                                  }

                                  ReferenceCollection referenceInfo = referenceMap.getReferences(v);

                                  if (isInlinableObject(referenceInfo.references)) {
                                      // Blacklist the object itself, as well as any other values
                                      // that it refers to, since they will have been moved around.
                                      staleVars.add(v);

                                      Reference declaration = referenceInfo.references.get(0);
                                      Reference init = referenceInfo.getInitializingReference();

                                      // Split up the object into individual variables if the object
                                      // is never referenced directly in full.
                                      splitObject(v, declaration, init, referenceInfo);
                                  }
                                }
                      children: []
                      pos: 2853
                      length: 825
                    pos: 2845
                    length: 839
                children: []
                pos: 2760
                length: 924
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: blacklistVarReferencesInTree
                    children: []
                    pos: 3962
                    length: 28
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node root
                      children: []
                      pos: 3991
                      length: 9
                    pos: 3949
                    length: 362
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: |-
                          NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {
                                  @Override
                                  public void visit(Node node) {
                                    if (node.getType() == Token.NAME) {
                                      staleVars.add(scope.getVar(node.getString()));
                                    }
                                  }
                                }, NodeUtil.MATCH_NOT_FUNCTION);
                      children: []
                      pos: 4029
                      length: 276
                    pos: 4021
                    length: 290
                children: []
                pos: 3949
                length: 362
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isVarInlineForbidden
                    children: []
                    pos: 4416
                    length: 20
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var var
                      children: []
                      pos: 4437
                      length: 7
                    pos: 4400
                    length: 767
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: |-
                          return var.isGlobal()
                                    || var.isExtern()
                                    || compiler.getCodingConvention().isExported(var.name)
                                    || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)
                                    || staleVars.contains(var);
                      children: []
                      pos: 4932
                      length: 229
                    pos: 4446
                    length: 721
                children: []
                pos: 4400
                length: 767
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isInlinableObject
                    children: []
                    pos: 5395
                    length: 17
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: List<Reference> refs
                      children: []
                      pos: 5413
                      length: 20
                    pos: 5379
                    length: 2605
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: boolean ret = false;
                      children: []
                      pos: 5443
                      length: 20
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Reference ref : refs) {
                                  Node name = ref.getNode();
                                  Node parent = ref.getParent();
                                  Node gramps = ref.getGrandparent();

                                  // Ignore indirect references, like x.y (except x.y(), since
                                  // the function referenced by y might reference 'this').
                                  //
                                  if (parent.getType() == Token.GETPROP) {
                                    Preconditions.checkState(parent.getFirstChild() == name);
                                    // A call target maybe using the object as a 'this' value.
                                    if (gramps.getType() == Token.CALL
                                        && gramps.getFirstChild() == parent) {
                                      return false;
                                    }
                                    continue;
                                  }

                                  // Only rewrite VAR declarations or simple assignment statements
                                  if (!isVarOrAssignExprLhs(name)) {
                                     return false;
                                  }

                                  Node val = ref.getAssignedValue();
                                  if (val == null) {
                                    // A var with no assignment.
                                    continue;
                                  }

                                  // We're looking for object literal assignments only.
                                  if (val.getType() != Token.OBJECTLIT) {
                                    return false;
                                  }

                                  // Make sure that the value is not self-refential. IOW,
                                  // disallow things like x = {b: x.a}.
                                  //
                                  // TODO: Only exclude unorderable self-referential
                                  // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
                                  // but x = {a: 1, b: x.a} is.
                                  //
                                  // Also, ES5 getters/setters aren't handled by this pass.
                                  for (Node child = val.getFirstChild(); child != null;
                                       child = child.getNext()) {
                                    if (child.getType() == Token.GET ||
                                        child.getType() == Token.SET) {
                                      // ES5 get/set not supported.
                                      return false;
                                    }
                                    Node childVal = child.getFirstChild();
                                    // Check if childVal is the parent of any of the passed in
                                    // references, as that is how self-referential assignments
                                    // will happen.
                                    for (Reference t : refs) {
                                      Node refNode = t.getParent();
                                      while (!NodeUtil.isStatementBlock(refNode)) {
                                        if (refNode == childVal) {
                                          // There's a self-referential assignment
                                          return false;
                                        }
                                        refNode = refNode.getParent();
                                      }
                                    }
                                  }


                                  // We have found an acceptable object literal assignment. As
                                  // long as there are no other assignments that mess things up,
                                  // we can inline.
                                  ret = true;
                                }
                      children: []
                      pos: 5470
                      length: 2490
                    - type: return_statement
                      fields:
                        text: return ret;
                      children: []
                      pos: 7967
                      length: 11
                    pos: 5435
                    length: 2549
                children: []
                pos: 5379
                length: 2605
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isVarOrAssignExprLhs
                    children: []
                    pos: 8006
                    length: 20
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 8027
                      length: 6
                    pos: 7990
                    length: 291
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node parent = n.getParent();
                      children: []
                      pos: 8043
                      length: 28
                    - type: return_statement
                      fields:
                        text: |-
                          return parent.getType() == Token.VAR ||
                                    (parent.getType() == Token.ASSIGN
                                        && parent.getFirstChild() == n
                                        && parent.getParent().getType() == Token.EXPR_RESULT);
                      children: []
                      pos: 8078
                      length: 197
                    pos: 8035
                    length: 246
                children: []
                pos: 7990
                length: 291
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: computeVarList
                    children: []
                    pos: 8483
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var v
                      children: []
                      pos: 8507
                      length: 5
                    pos: 8455
                    length: 1441
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Map<String, String> varmap = Maps.newLinkedHashMap();
                      children: []
                      pos: 8557
                      length: 53
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Reference ref : referenceInfo.references) {
                                  if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                                    Node val = ref.getAssignedValue();
                                    if (val != null) {
                                      Preconditions.checkState(val.getType() == Token.OBJECTLIT);
                                      for (Node child = val.getFirstChild(); child != null;
                                           child = child.getNext()) {
                                        String varname = child.getString();
                                        if (varmap.containsKey(varname)) {
                                          continue;
                                        }

                                        String var = VAR_PREFIX + varname + "_" +
                                          safeNameIdSupplier.get();
                                        varmap.put(varname, var);
                                      }
                                    }
                                  } else if (ref.getParent().getType() == Token.VAR) {
                                    // This is the var. There is no value.
                                  } else {
                                    Node getprop = ref.getParent();
                                    Preconditions.checkState(getprop.getType() == Token.GETPROP);

                                    // The key being looked up in the original map.
                                    String varname = getprop.getLastChild().getString();
                                    if (varmap.containsKey(varname)) {
                                      continue;
                                    }

                                    String var = VAR_PREFIX + varname + "_" + safeNameIdSupplier.get();
                                    varmap.put(varname, var);
                                  }
                                }
                      children: []
                      pos: 8618
                      length: 1250
                    - type: return_statement
                      fields:
                        text: return varmap;
                      children: []
                      pos: 9876
                      length: 14
                    pos: 8549
                    length: 1347
                children: []
                pos: 8455
                length: 1441
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: fillInitialValues
                    children: []
                    pos: 10084
                    length: 17
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Reference init
                      children: []
                      pos: 10102
                      length: 14
                    pos: 10071
                    length: 360
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node object = init.getAssignedValue();
                      children: []
                      pos: 10154
                      length: 38
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkState(object.getType() == Token.OBJECTLIT);
                      children: []
                      pos: 10199
                      length: 62
                    - type: for_statement
                      fields:
                        text: |-
                          for (Node key = object.getFirstChild(); key != null;
                                     key = key.getNext()) {
                                  initvals.put(key.getString(), key.removeFirstChild());
                                }
                      children: []
                      pos: 10268
                      length: 157
                    pos: 10146
                    length: 285
                children: []
                pos: 10071
                length: 360
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: replaceAssignmentExpression
                    children: []
                    pos: 10651
                    length: 27
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var v
                      children: []
                      pos: 10679
                      length: 5
                    pos: 10638
                    length: 2342
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: List<Node> nodes = Lists.newArrayList();
                      children: []
                      pos: 10832
                      length: 40
                    - type: local_variable_declaration
                      fields:
                        text: Node val = ref.getAssignedValue();
                      children: []
                      pos: 10879
                      length: 34
                    - type: expression_statement
                      fields:
                        text: blacklistVarReferencesInTree(val, v.scope);
                      children: []
                      pos: 10920
                      length: 43
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkState(val.getType() == Token.OBJECTLIT);
                      children: []
                      pos: 10970
                      length: 59
                    - type: local_variable_declaration
                      fields:
                        text: Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
                      children: []
                      pos: 11036
                      length: 57
                    - type: for_statement
                      fields:
                        text: |-
                          for (Node key = val.getFirstChild(); key != null;
                                     key = key.getNext()) {
                                  String var = key.getString();
                                  Node value = key.removeFirstChild();
                                  // TODO(user): Copy type information.
                                  nodes.add(
                                    new Node(Token.ASSIGN,
                                             Node.newString(Token.NAME, varmap.get(var)), value));
                                  all.remove(var);
                                }
                      children: []
                      pos: 11100
                      length: 370
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (String var : all) {
                                  nodes.add(
                                    new Node(Token.ASSIGN,
                                             Node.newString(Token.NAME, varmap.get(var)),
                                             NodeUtil.newUndefinedNode(null)));
                                }
                      children: []
                      pos: 11526
                      length: 202
                    - type: local_variable_declaration
                      fields:
                        text: Node replacement;
                      children: []
                      pos: 11736
                      length: 17
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: method_invocation
                              fields:
                                text: nodes.isEmpty()
                              children: []
                              pos: 11764
                              length: 15
                          children: []
                          pos: 11763
                          length: 17
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: replacement = new Node(Token.TRUE);
                          children: []
                          pos: 11791
                          length: 35
                        pos: 11781
                        length: 53
                      pos: 11760
                      length: 893
                    - type: local_variable_declaration
                      fields:
                        text: Node replace = ref.getParent();
                      children: []
                      pos: 12661
                      length: 31
                    - type: expression_statement
                      fields:
                        text: replacement.copyInformationFromForTree(replace);
                      children: []
                      pos: 12699
                      length: 48
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: replace.getType()
                                  children: []
                                  pos: 12759
                                  length: 17
                                right:
                                  type: field_access
                                  fields:
                                    text: Token.VAR
                                  children: []
                                  pos: 12780
                                  length: 9
                              children: []
                              pos: 12759
                              length: 30
                          children: []
                          pos: 12758
                          length: 32
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: |-
                              replace.getParent().replaceChild(
                                          replace, NodeUtil.newExpr(replacement));
                          children: []
                          pos: 12801
                          length: 86
                        pos: 12791
                        length: 104
                      pos: 12755
                      length: 219
                    pos: 10774
                    length: 2206
                children: []
                pos: 10638
                length: 2342
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: splitObject
                    children: []
                    pos: 13107
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var v
                      children: []
                      pos: 13119
                      length: 5
                    pos: 13094
                    length: 2988
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Map<String, String> varmap = computeVarList(v, referenceInfo);
                      children: []
                      pos: 13383
                      length: 62
                    - type: local_variable_declaration
                      fields:
                        text: Map<String, Node> initvals = Maps.newHashMap();
                      children: []
                      pos: 13453
                      length: 47
                    - type: local_variable_declaration
                      fields:
                        text: Node vnode;
                      children: []
                      pos: 13699
                      length: 11
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          boolean defined = referenceInfo.isWellDefined() &&
                                    init.getParent().getType() == Token.VAR;
                      children: []
                      pos: 13717
                      length: 101
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: defined
                              children: []
                              pos: 13829
                              length: 7
                          children: []
                          pos: 13828
                          length: 9
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: vnode = init.getParent();
                          children: []
                          pos: 13848
                          length: 25
                        - type: expression_statement
                          fields:
                            text: fillInitialValues(init, initvals);
                          children: []
                          pos: 13882
                          length: 34
                        pos: 13838
                        length: 86
                      pos: 13825
                      length: 299
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Map.Entry<String, String> entry : varmap.entrySet()) {
                                  Node val = initvals.get(entry.getKey());
                                  Node varnode = NodeUtil.newVarNode(entry.getValue(), val);
                                  if (val == null) {
                                    // is this right?
                                    varnode.copyInformationFromForTree(vnode);
                                  } else {
                                    blacklistVarReferencesInTree(val, v.scope);
                                  }
                                  vnode.getParent().addChildBefore(varnode, vnode);
                                }
                      children: []
                      pos: 14132
                      length: 430
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: defined
                              children: []
                              pos: 14574
                              length: 7
                          children: []
                          pos: 14573
                          length: 9
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: vnode.getParent().removeChild(vnode);
                          children: []
                          pos: 14593
                          length: 37
                        pos: 14583
                        length: 55
                      pos: 14570
                      length: 68
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Reference ref : referenceInfo.references) {
                                  // The init/decl have already been converted.
                                  if (defined && ref == init) continue;

                                  if (ref.isLvalue()) {
                                    // Assignments have to be handled specially, since they
                                    // expand out into multiple assignments.
                                    replaceAssignmentExpression(v, ref, varmap);
                                  } else if (ref.getParent().getType() == Token.VAR) {
                                    // The old variable declaration. It didn't have a
                                    // value. Remove it entirely as it should now be unused.
                                    ref.getGrandparent().removeChild(ref.getParent());
                                  } else {
                                    // Make sure that the reference is a GETPROP as we expect it to be.
                                    Node getprop = ref.getParent();
                                    Preconditions.checkState(getprop.getType() == Token.GETPROP);

                                    // The key being looked up in the original map.
                                    String var = getprop.getChildAtIndex(1).getString();

                                    // If the variable hasn't already been declared, add an empty
                                    // declaration near all the other declarations.
                                    Preconditions.checkState(varmap.containsKey(var));

                                    // Replace the GETPROP node with a NAME.
                                    Node replacement = Node.newString(Token.NAME, varmap.get(var));
                                    replacement.copyInformationFrom(getprop);
                                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                                  }
                                }
                      children: []
                      pos: 14646
                      length: 1394
                    - type: expression_statement
                      fields:
                        text: compiler.reportCodeChange();
                      children: []
                      pos: 16048
                      length: 28
                    pos: 13258
                    length: 2824
                children: []
                pos: 13094
                length: 2988
              pos: 2487
              length: 13599
          children: []
          pos: 2487
          length: 13599
        pos: 1685
        length: 14403
    children: []
    pos: 1685
    length: 14403
  pos: 0
  length: 16089
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: InlineObjectLiterals
        children: []
        pos: 1691
        length: 20
      body:
        type: class_body
        fields: {}
        children:
        - type: field_declaration
          fields:
            text: public static final String VAR_PREFIX = "JSCompiler_object_inline_";
          children: []
          pos: 1741
          length: 68
        - type: field_declaration
          fields:
            text: private final AbstractCompiler compiler;
          children: []
          pos: 1813
          length: 40
        - type: field_declaration
          fields:
            text: private final Supplier<String> safeNameIdSupplier;
          children: []
          pos: 1857
          length: 50
        - type: constructor_declaration
          fields:
            text: |-
              InlineObjectLiterals(
                    AbstractCompiler compiler,
                    Supplier<String> safeNameIdSupplier) {
                  this.compiler = compiler;
                  this.safeNameIdSupplier = safeNameIdSupplier;
                }
          children: []
          pos: 1911
          length: 183
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: process
              children: []
              pos: 2122
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: Node externs
                children: []
                pos: 2130
                length: 12
              pos: 2098
              length: 218
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: |-
                    ReferenceCollectingCallback callback = new ReferenceCollectingCallback(
                            compiler, new InliningBehavior());
                children: []
                pos: 2161
                length: 114
              - type: expression_statement
                fields:
                  text: callback.process(externs, root);
                children: []
                pos: 2280
                length: 32
              pos: 2155
              length: 161
          children: []
          pos: 2098
          length: 218
        - type: class_declaration
          fields:
            name:
              type: identifier
              fields:
                text: InliningBehavior
              children: []
              pos: 2501
              length: 16
            body:
              type: class_body
              fields: {}
              children:
              - type: field_declaration
                fields:
                  text: private final Set<Var> staleVars = Sets.newHashSet();
                children: []
                pos: 2701
                length: 53
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: afterExitScope
                    children: []
                    pos: 2786
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: NodeTraversal t
                      children: []
                      pos: 2801
                      length: 15
                    pos: 2760
                    length: 924
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: for_statement
                      fields:
                        text: |-
                          for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
                                  Var v = it.next();

                                  if (isVarInlineForbidden(v)) {
                                      continue;
                                  }

                                  ReferenceCollection referenceInfo = referenceMap.getReferences(v);

                                  if (isInlinableObject(referenceInfo.references)) {
                                      // Blacklist the object itself, as well as any other values
                                      // that it refers to, since they will have been moved around.
                                      staleVars.add(v);

                                      Reference declaration = referenceInfo.references.get(0);
                                      Reference init = referenceInfo.getInitializingReference();

                                      // Split up the object into individual variables if the object
                                      // is never referenced directly in full.
                                      splitObject(v, declaration, init, referenceInfo);
                                  }
                                }
                      children: []
                      pos: 2853
                      length: 825
                    pos: 2845
                    length: 839
                children: []
                pos: 2760
                length: 924
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: blacklistVarReferencesInTree
                    children: []
                    pos: 3962
                    length: 28
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node root
                      children: []
                      pos: 3991
                      length: 9
                    pos: 3949
                    length: 362
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: expression_statement
                      fields:
                        text: |-
                          NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {
                                  @Override
                                  public void visit(Node node) {
                                    if (node.getType() == Token.NAME) {
                                      staleVars.add(scope.getVar(node.getString()));
                                    }
                                  }
                                }, NodeUtil.MATCH_NOT_FUNCTION);
                      children: []
                      pos: 4029
                      length: 276
                    pos: 4021
                    length: 290
                children: []
                pos: 3949
                length: 362
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isVarInlineForbidden
                    children: []
                    pos: 4416
                    length: 20
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var var
                      children: []
                      pos: 4437
                      length: 7
                    pos: 4400
                    length: 767
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: return_statement
                      fields:
                        text: |-
                          return var.isGlobal()
                                    || var.isExtern()
                                    || compiler.getCodingConvention().isExported(var.name)
                                    || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)
                                    || staleVars.contains(var);
                      children: []
                      pos: 4932
                      length: 229
                    pos: 4446
                    length: 721
                children: []
                pos: 4400
                length: 767
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isInlinableObject
                    children: []
                    pos: 5395
                    length: 17
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: List<Reference> refs
                      children: []
                      pos: 5413
                      length: 20
                    pos: 5379
                    length: 2605
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: boolean ret = false;
                      children: []
                      pos: 5443
                      length: 20
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Reference ref : refs) {
                                  Node name = ref.getNode();
                                  Node parent = ref.getParent();
                                  Node gramps = ref.getGrandparent();

                                  // Ignore indirect references, like x.y (except x.y(), since
                                  // the function referenced by y might reference 'this').
                                  //
                                  if (parent.getType() == Token.GETPROP) {
                                    Preconditions.checkState(parent.getFirstChild() == name);
                                    // A call target maybe using the object as a 'this' value.
                                    if (gramps.getType() == Token.CALL
                                        && gramps.getFirstChild() == parent) {
                                      return false;
                                    }
                                    continue;
                                  }

                                  // Only rewrite VAR declarations or simple assignment statements
                                  if (!isVarOrAssignExprLhs(name)) {
                                     return false;
                                  }

                                  Node val = ref.getAssignedValue();
                                  if (val == null) {
                                    // A var with no assignment.
                                    continue;
                                  }

                                  // We're looking for object literal assignments only.
                                  if (val.getType() != Token.OBJECTLIT) {
                                    return false;
                                  }

                                  // Make sure that the value is not self-refential. IOW,
                                  // disallow things like x = {b: x.a}.
                                  //
                                  // TODO: Only exclude unorderable self-referential
                                  // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
                                  // but x = {a: 1, b: x.a} is.
                                  //
                                  // Also, ES5 getters/setters aren't handled by this pass.
                                  for (Node child = val.getFirstChild(); child != null;
                                       child = child.getNext()) {
                                    if (child.getType() == Token.GET ||
                                        child.getType() == Token.SET) {
                                      // ES5 get/set not supported.
                                      return false;
                                    }
                                    Node childVal = child.getFirstChild();
                                    // Check if childVal is the parent of any of the passed in
                                    // references, as that is how self-referential assignments
                                    // will happen.
                                    for (Reference t : refs) {
                                      Node refNode = t.getParent();
                                      while (!NodeUtil.isStatementBlock(refNode)) {
                                        if (refNode == childVal) {
                                          // There's a self-referential assignment
                                          return false;
                                        }
                                        refNode = refNode.getParent();
                                      }
                                    }
                                  }


                                  // We have found an acceptable object literal assignment. As
                                  // long as there are no other assignments that mess things up,
                                  // we can inline.
                                  ret = true;
                                }
                      children: []
                      pos: 5470
                      length: 2490
                    - type: return_statement
                      fields:
                        text: return ret;
                      children: []
                      pos: 7967
                      length: 11
                    pos: 5435
                    length: 2549
                children: []
                pos: 5379
                length: 2605
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: isVarOrAssignExprLhs
                    children: []
                    pos: 8006
                    length: 20
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Node n
                      children: []
                      pos: 8027
                      length: 6
                    pos: 7990
                    length: 291
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node parent = n.getParent();
                      children: []
                      pos: 8043
                      length: 28
                    - type: return_statement
                      fields:
                        text: |-
                          return parent.getType() == Token.VAR ||
                                    (parent.getType() == Token.ASSIGN
                                        && parent.getFirstChild() == n
                                        && parent.getParent().getType() == Token.EXPR_RESULT);
                      children: []
                      pos: 8078
                      length: 197
                    pos: 8035
                    length: 246
                children: []
                pos: 7990
                length: 291
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: computeVarList
                    children: []
                    pos: 8483
                    length: 14
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var v
                      children: []
                      pos: 8507
                      length: 5
                    pos: 8455
                    length: 1441
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Map<String, String> varmap = Maps.newLinkedHashMap();
                      children: []
                      pos: 8557
                      length: 53
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Reference ref : referenceInfo.references) {
                                  if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                                    Node val = ref.getAssignedValue();
                                    if (val != null) {
                                      Preconditions.checkState(val.getType() == Token.OBJECTLIT);
                                      for (Node child = val.getFirstChild(); child != null;
                                           child = child.getNext()) {
                                        String varname = child.getString();
                                        if (varmap.containsKey(varname)) {
                                          continue;
                                        }

                                        String var = VAR_PREFIX + varname + "_" +
                                          safeNameIdSupplier.get();
                                        varmap.put(varname, var);
                                      }
                                    }
                                  } else if (ref.getParent().getType() == Token.VAR) {
                                    // This is the var. There is no value.
                                  } else {
                                    Node getprop = ref.getParent();
                                    Preconditions.checkState(getprop.getType() == Token.GETPROP);

                                    // The key being looked up in the original map.
                                    String varname = getprop.getLastChild().getString();
                                    if (varmap.containsKey(varname)) {
                                      continue;
                                    }

                                    String var = VAR_PREFIX + varname + "_" + safeNameIdSupplier.get();
                                    varmap.put(varname, var);
                                  }
                                }
                      children: []
                      pos: 8618
                      length: 1250
                    - type: return_statement
                      fields:
                        text: return varmap;
                      children: []
                      pos: 9876
                      length: 14
                    pos: 8549
                    length: 1347
                children: []
                pos: 8455
                length: 1441
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: fillInitialValues
                    children: []
                    pos: 10084
                    length: 17
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Reference init
                      children: []
                      pos: 10102
                      length: 14
                    pos: 10071
                    length: 360
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Node object = init.getAssignedValue();
                      children: []
                      pos: 10154
                      length: 38
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkState(object.getType() == Token.OBJECTLIT);
                      children: []
                      pos: 10199
                      length: 62
                    - type: for_statement
                      fields:
                        text: |-
                          for (Node key = object.getFirstChild(); key != null;
                                     key = key.getNext()) {
                                  initvals.put(key.getString(), key.removeFirstChild());
                                }
                      children: []
                      pos: 10268
                      length: 157
                    pos: 10146
                    length: 285
                children: []
                pos: 10071
                length: 360
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: replaceAssignmentExpression
                    children: []
                    pos: 10651
                    length: 27
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var v
                      children: []
                      pos: 10679
                      length: 5
                    pos: 10638
                    length: 2246
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: List<Node> nodes = Lists.newArrayList();
                      children: []
                      pos: 10832
                      length: 40
                    - type: local_variable_declaration
                      fields:
                        text: Node val = ref.getAssignedValue();
                      children: []
                      pos: 10879
                      length: 34
                    - type: expression_statement
                      fields:
                        text: blacklistVarReferencesInTree(val, v.scope);
                      children: []
                      pos: 10920
                      length: 43
                    - type: expression_statement
                      fields:
                        text: Preconditions.checkState(val.getType() == Token.OBJECTLIT);
                      children: []
                      pos: 10970
                      length: 59
                    - type: local_variable_declaration
                      fields:
                        text: Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
                      children: []
                      pos: 11036
                      length: 57
                    - type: for_statement
                      fields:
                        text: |-
                          for (Node key = val.getFirstChild(); key != null;
                                     key = key.getNext()) {
                                  String var = key.getString();
                                  Node value = key.removeFirstChild();
                                  // TODO(user): Copy type information.
                                  nodes.add(
                                    new Node(Token.ASSIGN,
                                             Node.newString(Token.NAME, varmap.get(var)), value));
                                  all.remove(var);
                                }
                      children: []
                      pos: 11100
                      length: 370
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (String var : all) {
                                  nodes.add(
                                    new Node(Token.ASSIGN,
                                             Node.newString(Token.NAME, varmap.get(var)),
                                             NodeUtil.newUndefinedNode(null)));
                                }
                      children: []
                      pos: 11526
                      length: 202
                    - type: local_variable_declaration
                      fields:
                        text: Node replacement;
                      children: []
                      pos: 11736
                      length: 17
                    - type: expression_statement
                      fields:
                        text: nodes.add(new Node(Token.TRUE));
                      children: []
                      pos: 11893
                      length: 32
                    - type: expression_statement
                      fields:
                        text: nodes = Lists.reverse(nodes);
                      children: []
                      pos: 12147
                      length: 29
                    - type: expression_statement
                      fields:
                        text: replacement = new Node(Token.COMMA);
                      children: []
                      pos: 12185
                      length: 36
                    - type: local_variable_declaration
                      fields:
                        text: Node cur = replacement;
                      children: []
                      pos: 12230
                      length: 23
                    - type: local_variable_declaration
                      fields:
                        text: int i;
                      children: []
                      pos: 12262
                      length: 6
                    - type: for_statement
                      fields:
                        text: |-
                          for (i = 0; i < nodes.size() - 2; i++) {
                                    cur.addChildToFront(nodes.get(i));
                                    Node t = new Node(Token.COMMA);
                                    cur.addChildToFront(t);
                                    cur = t;
                                  }
                      children: []
                      pos: 12277
                      length: 190
                    - type: expression_statement
                      fields:
                        text: cur.addChildToFront(nodes.get(i));
                      children: []
                      pos: 12476
                      length: 34
                    - type: expression_statement
                      fields:
                        text: cur.addChildToFront(nodes.get(i + 1));
                      children: []
                      pos: 12519
                      length: 38
                    - type: local_variable_declaration
                      fields:
                        text: Node replace = ref.getParent();
                      children: []
                      pos: 12565
                      length: 31
                    - type: expression_statement
                      fields:
                        text: replacement.copyInformationFromForTree(replace);
                      children: []
                      pos: 12603
                      length: 48
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: equals
                              fields:
                                left:
                                  type: method_invocation
                                  fields:
                                    text: replace.getType()
                                  children: []
                                  pos: 12663
                                  length: 17
                                right:
                                  type: field_access
                                  fields:
                                    text: Token.VAR
                                  children: []
                                  pos: 12684
                                  length: 9
                              children: []
                              pos: 12663
                              length: 30
                          children: []
                          pos: 12662
                          length: 32
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: |-
                              replace.getParent().replaceChild(
                                          replace, NodeUtil.newExpr(replacement));
                          children: []
                          pos: 12705
                          length: 86
                        pos: 12695
                        length: 104
                      pos: 12659
                      length: 219
                    pos: 10774
                    length: 2110
                children: []
                pos: 10638
                length: 2246
              - type: method_declaration
                fields:
                  name:
                    type: identifier
                    fields:
                      text: splitObject
                    children: []
                    pos: 13011
                    length: 11
                  parameters:
                    type: method_parameters
                    fields: {}
                    children:
                    - type: formal_parameter
                      fields:
                        text: Var v
                      children: []
                      pos: 13023
                      length: 5
                    pos: 12998
                    length: 2988
                  body:
                    type: block
                    fields: {}
                    children:
                    - type: local_variable_declaration
                      fields:
                        text: Map<String, String> varmap = computeVarList(v, referenceInfo);
                      children: []
                      pos: 13287
                      length: 62
                    - type: local_variable_declaration
                      fields:
                        text: Map<String, Node> initvals = Maps.newHashMap();
                      children: []
                      pos: 13357
                      length: 47
                    - type: local_variable_declaration
                      fields:
                        text: Node vnode;
                      children: []
                      pos: 13603
                      length: 11
                    - type: local_variable_declaration
                      fields:
                        text: |-
                          boolean defined = referenceInfo.isWellDefined() &&
                                    init.getParent().getType() == Token.VAR;
                      children: []
                      pos: 13621
                      length: 101
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: defined
                              children: []
                              pos: 13733
                              length: 7
                          children: []
                          pos: 13732
                          length: 9
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: vnode = init.getParent();
                          children: []
                          pos: 13752
                          length: 25
                        - type: expression_statement
                          fields:
                            text: fillInitialValues(init, initvals);
                          children: []
                          pos: 13786
                          length: 34
                        pos: 13742
                        length: 86
                      pos: 13729
                      length: 299
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Map.Entry<String, String> entry : varmap.entrySet()) {
                                  Node val = initvals.get(entry.getKey());
                                  Node varnode = NodeUtil.newVarNode(entry.getValue(), val);
                                  if (val == null) {
                                    // is this right?
                                    varnode.copyInformationFromForTree(vnode);
                                  } else {
                                    blacklistVarReferencesInTree(val, v.scope);
                                  }
                                  vnode.getParent().addChildBefore(varnode, vnode);
                                }
                      children: []
                      pos: 14036
                      length: 430
                    - type: if_statement
                      fields:
                        condition:
                          type: parenthesized_expression
                          fields:
                            expression:
                              type: identifier
                              fields:
                                text: defined
                              children: []
                              pos: 14478
                              length: 7
                          children: []
                          pos: 14477
                          length: 9
                      children:
                      - type: block
                        fields: {}
                        children:
                        - type: expression_statement
                          fields:
                            text: vnode.getParent().removeChild(vnode);
                          children: []
                          pos: 14497
                          length: 37
                        pos: 14487
                        length: 55
                      pos: 14474
                      length: 68
                    - type: enhanced_for_statement
                      fields:
                        text: |-
                          for (Reference ref : referenceInfo.references) {
                                  // The init/decl have already been converted.
                                  if (defined && ref == init) continue;

                                  if (ref.isLvalue()) {
                                    // Assignments have to be handled specially, since they
                                    // expand out into multiple assignments.
                                    replaceAssignmentExpression(v, ref, varmap);
                                  } else if (ref.getParent().getType() == Token.VAR) {
                                    // The old variable declaration. It didn't have a
                                    // value. Remove it entirely as it should now be unused.
                                    ref.getGrandparent().removeChild(ref.getParent());
                                  } else {
                                    // Make sure that the reference is a GETPROP as we expect it to be.
                                    Node getprop = ref.getParent();
                                    Preconditions.checkState(getprop.getType() == Token.GETPROP);

                                    // The key being looked up in the original map.
                                    String var = getprop.getChildAtIndex(1).getString();

                                    // If the variable hasn't already been declared, add an empty
                                    // declaration near all the other declarations.
                                    Preconditions.checkState(varmap.containsKey(var));

                                    // Replace the GETPROP node with a NAME.
                                    Node replacement = Node.newString(Token.NAME, varmap.get(var));
                                    replacement.copyInformationFrom(getprop);
                                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                                  }
                                }
                      children: []
                      pos: 14550
                      length: 1394
                    - type: expression_statement
                      fields:
                        text: compiler.reportCodeChange();
                      children: []
                      pos: 15952
                      length: 28
                    pos: 13162
                    length: 2824
                children: []
                pos: 12998
                length: 2988
              pos: 2487
              length: 13503
          children: []
          pos: 2487
          length: 13503
        pos: 1685
        length: 14307
    children: []
    pos: 1685
    length: 14307
  pos: 0
  length: 15993
text_diff: "--- before\n+++ after\n@@ -328,9 +328,6 @@\n       }\n \n       Node replacement;\n-
  \     if (nodes.isEmpty()) {\n-        replacement = new Node(Token.TRUE);\n-      }
  else {\n         // All assignments evaluate to true, so make sure that the\n         //
  expr statement evaluates to true in case it matters.\n         nodes.add(new Node(Token.TRUE));\n@@
  -350,7 +347,6 @@\n         }\n         cur.addChildToFront(nodes.get(i));\n         cur.addChildToFront(nodes.get(i
  + 1));\n-      }\n \n       Node replace = ref.getParent();\n       replacement.copyInformationFromForTree(replace);\n"
tree_diff: |+
  New cluster:
  ===
  insert-node
  ---
  expression_statement: nodes.add(new Node(Token.TRUE)); [11893,11925]
  to
  block [10774,12980]
  at 8
  ------------
  ===
  insert-node
  ---
  expression_statement: nodes.add(new Node(Token.TRUE)); [11893,11925]
  to
  block [10774,12980]
  at 8

  New cluster:
  ===
  insert-node
  ---
  expression_statement: nodes = Lists.reverse(nodes); [12147,12176]
  to
  block [10774,12980]
  at 9
  ------------
  ===
  insert-node
  ---
  expression_statement: nodes = Lists.reverse(nodes); [12147,12176]
  to
  block [10774,12980]
  at 9

  New cluster:
  ===
  insert-node
  ---
  expression_statement: replacement = new Node(Token.COMMA); [12185,12221]
  to
  block [10774,12980]
  at 10
  ------------
  ===
  insert-node
  ---
  expression_statement: replacement = new Node(Token.COMMA); [12185,12221]
  to
  block [10774,12980]
  at 10

  New cluster:
  ===
  insert-node
  ---
  local_variable_declaration: Node cur = replacement; [12230,12253]
  to
  block [10774,12980]
  at 11
  ------------
  ===
  insert-node
  ---
  local_variable_declaration: Node cur = replacement; [12230,12253]
  to
  block [10774,12980]
  at 11

  New cluster:
  ===
  insert-node
  ---
  local_variable_declaration: int i; [12262,12268]
  to
  block [10774,12980]
  at 12
  ------------
  ===
  insert-node
  ---
  local_variable_declaration: int i; [12262,12268]
  to
  block [10774,12980]
  at 12

  New cluster:
  ===
  insert-node
  ---
  for_statement: for (i = 0; i < nodes.size() - 2; i++) {
            cur.addChildToFront(nodes.get(i));
            Node t = new Node(Token.COMMA);
            cur.addChildToFront(t);
            cur = t;
          } [12277,12467]
  to
  block [10774,12980]
  at 13
  ------------
  ===
  insert-node
  ---
  for_statement: for (i = 0; i < nodes.size() - 2; i++) {
            cur.addChildToFront(nodes.get(i));
            Node t = new Node(Token.COMMA);
            cur.addChildToFront(t);
            cur = t;
          } [12277,12467]
  to
  block [10774,12980]
  at 13

  New cluster:
  ===
  insert-node
  ---
  expression_statement: cur.addChildToFront(nodes.get(i)); [12476,12510]
  to
  block [10774,12980]
  at 14
  ------------
  ===
  insert-node
  ---
  expression_statement: cur.addChildToFront(nodes.get(i)); [12476,12510]
  to
  block [10774,12980]
  at 14

  New cluster:
  ===
  insert-node
  ---
  expression_statement: cur.addChildToFront(nodes.get(i + 1)); [12519,12557]
  to
  block [10774,12980]
  at 15
  ------------
  ===
  insert-node
  ---
  expression_statement: cur.addChildToFront(nodes.get(i + 1)); [12519,12557]
  to
  block [10774,12980]
  at 15

  New cluster:
  Unknown cluster type
  ------------
  ===
  delete-tree
  ---
  if_statement [11760,12653]
      parenthesized_expression [11763,11780]
          method_invocation: nodes.isEmpty() [11764,11779]
      block [11781,11834]
          expression_statement: replacement = new Node(Token.TRUE); [11791,11826]

...
