---
language: java
before_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: TO_BASE
        children: []
        pos: 191
        length: 7
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: to_base
              children: []
              pos: 226
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int num
                children: []
                pos: 234
                length: 7
              pos: 205
              length: 358
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String result = "";
                children: []
                pos: 260
                length: 19
              - type: local_variable_declaration
                fields:
                  text: String alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                children: []
                pos: 288
                length: 57
              - type: local_variable_declaration
                fields:
                  text: int i;
                children: []
                pos: 354
                length: 6
              - type: while_statement
                fields:
                  text: |-
                    while (num > 0) {
                                i = num % b;
                                num = num / b; // floor division?
                                result = result + String.valueOf(alphabet.charAt(i));
                            }
                children: []
                pos: 369
                length: 164
              - type: return_statement
                fields:
                  text: return result;
                children: []
                pos: 543
                length: 14
              pos: 250
              length: 313
          children: []
          pos: 205
          length: 358
        pos: 178
        length: 387
    children: []
    pos: 178
    length: 387
  pos: 0
  length: 566
after_tree:
  type: program
  fields: {}
  children:
  - type: class_declaration
    fields:
      name:
        type: identifier
        fields:
          text: TO_BASE
        children: []
        pos: 199
        length: 7
      body:
        type: class_body
        fields: {}
        children:
        - type: method_declaration
          fields:
            name:
              type: identifier
              fields:
                text: to_base
              children: []
              pos: 234
              length: 7
            parameters:
              type: method_parameters
              fields: {}
              children:
              - type: formal_parameter
                fields:
                  text: int num
                children: []
                pos: 242
                length: 7
              pos: 213
              length: 356
            body:
              type: block
              fields: {}
              children:
              - type: local_variable_declaration
                fields:
                  text: String result = "";
                children: []
                pos: 268
                length: 19
              - type: local_variable_declaration
                fields:
                  text: String alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                children: []
                pos: 296
                length: 57
              - type: local_variable_declaration
                fields:
                  text: int i;
                children: []
                pos: 362
                length: 6
              - type: while_statement
                fields:
                  text: |-
                    while (num > 0) {
                                i = num % b;
                                num = num / b; // floor division?
                                result = String.valueOf(alphabet.charAt(i))+result;
                            }
                children: []
                pos: 377
                length: 162
              - type: return_statement
                fields:
                  text: return result;
                children: []
                pos: 549
                length: 14
              pos: 258
              length: 311
          children: []
          pos: 213
          length: 356
        pos: 186
        length: 385
    children: []
    pos: 186
    length: 385
  pos: 0
  length: 572
text_diff: "--- before\n+++ after\n@@ -1,4 +1,4 @@\n-package java_programs;\n+package
  correct_java_programs;\n import java.util.*;\n \n /*\n@@ -18,7 +18,7 @@\n         while
  (num > 0) {\n             i = num % b;\n             num = num / b; // floor division?\n-
  \           result = result + String.valueOf(alphabet.charAt(i));\n+            result
  = String.valueOf(alphabet.charAt(i))+result;\n         }\n \n         return result;\n"
tree_diff: |+
  New cluster:
  UPDATE from while (num > 0) {
              i = num % b;
              num = num / b; // floor division?
              result = result + String.valueOf(alphabet.charAt(i));
          } to while (num > 0) {
              i = num % b;
              num = num / b; // floor division?
              result = String.valueOf(alphabet.charAt(i))+result;
          }
  ------------
  ===
  update-node
  ---
  while_statement: while (num > 0) {
              i = num % b;
              num = num / b; // floor division?
              result = result + String.valueOf(alphabet.charAt(i));
          } [369,533]
  replace while (num > 0) {
              i = num % b;
              num = num / b; // floor division?
              result = result + String.valueOf(alphabet.charAt(i));
          } by while (num > 0) {
              i = num % b;
              num = num / b; // floor division?
              result = String.valueOf(alphabet.charAt(i))+result;
          }

...
